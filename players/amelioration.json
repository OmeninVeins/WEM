{"GUID":"ec1f6c","Name":"Custom_Model_Bag","Transform":{"posX":66.00001,"posY":1.05000162,"posZ":-6.49999237,"rotX":-0.00000884490146,"rotY":180.000061,"rotZ":0.00000341891337,"scaleX":0.700000465,"scaleY":0.700000465,"scaleZ":0.700000465},"Nickname":"Fiches d'amÃ©lioration","Description":"","GMNotes":"{\"type\":\"UpgradeSheet\"}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":1,"g":1,"b":1},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"MaterialIndex":-1,"MeshIndex":-1,"CustomMesh":{"MeshURL":"https://pastebin.com/raw/ALrYhQGb","DiffuseURL":"http://cloud-3.steamusercontent.com/ugc/1932636167913087816/1B8C80F005FA45A7E298DB84443D1179CA357033/","NormalURL":"","ColliderURL":"","Convex":true,"MaterialIndex":3,"TypeIndex":6,"CustomShader":{"SpecularColor":{"r":1,"g":1,"b":1},"SpecularIntensity":0,"SpecularSharpness":2,"FresnelStrength":0},"CastShadows":true},"Bag":{"Order":0},"LuaScript":"packupZone =\r\n'4708b1'        -- change this to the GUID of your own script packupZone-- set the object you sant the script to be affected with, all other objects will be ignored\r\nadditive = true -- This will disable the save system, allowing you to setup a bag, and then next time you pack up it will only pick up what it already has saved before.\r\n-- UseBagNameAsButtonName = false\r\n\r\n--Runs whenever game is saved/autosaved\r\nfunction onSave()\r\n    --Begin State Managment of Saving Object Data.\r\n    --Create GUID list fomr Object List\r\n    if tableSize(memoryData) == 0 then\r\n        saved_data = \"\"\r\n        return saved_data\r\n    else\r\n        local data_to_save = { md = memoryData }\r\n        saved_data = JSON.encode(data_to_save)\r\n        -- saved_data = \"\" --Remove -- at start + save to clear save data\r\n        return saved_data\r\n    end\r\nend\r\n\r\nfunction onload(saved_data)\r\n    if saved_data ~= \"\" then\r\n        local loaded_data = JSON.decode(saved_data)\r\n        --Set up information off of loaded_data\r\n        memoryData = loaded_data.md\r\n    else\r\n        --Set up information for if there is no saved saved data\r\n        memoryData = {}\r\n    end\r\n    -- SetButtonName()\r\n    makeButtons()\r\n    metadatabag = getMetabag()\r\nend\r\n\r\nfunction getMetabag()\r\n    local metadatabag\r\n    local GM_Note = self.getGMNotes()\r\n    if GM_Note ~= '' then\r\n        local bagtmpmetadata = JSON.decode(GM_Note)\r\n        if type(bagtmpmetadata) == \"table\" then\r\n            metadatabag = bagtmpmetadata\r\n        end\r\n    end\r\n    return metadatabag\r\nend\r\n\r\n-- function SetButtonName()\r\n--     if UseBagNameAsButtonName then\r\n--         PlaceText = self.getName()\r\n--         PlaceWidth = string.len(PlaceText) * 145\r\n--         PlaceHeight = 450\r\n--         Scale = { 3.2, 3.2, 3.2 }\r\n--     else\r\n--         PlaceText = 'Placer'\r\n--         PlaceWidth = 900\r\n--         PlaceHeight = 400\r\n--         Scale = { 0.9, 0.9, 0.9 }\r\n--     end\r\n--     self.clearButtons()\r\n--     makeButtons()\r\n-- end\r\n\r\nfunction createSaveData(obj)\r\n    local objData = {\r\n        position = tableCullNumericIndexes(obj.getPosition()),\r\n        rotation = tableCullNumericIndexes(obj.getRotation()),\r\n        guid = obj.getGUID(),\r\n        lock = obj.getLock(),\r\n        interactable = tostring(obj.interactable),\r\n        tooltip = tostring(obj.tooltip)\r\n    }\r\n\r\n    memoryData[objData.guid] = objData\r\nend\r\n\r\nfunction placeStuff()\r\n    local prams = {}\r\n    for key, entry in pairs(memoryData) do\r\n        prams.guid = key\r\n        prams.position = { entry.position.x, entry.position.y, entry.position.z }\r\n        prams.rotation = { entry.rotation.x, entry.rotation.y, entry.rotation.z }\r\n        local item = self.takeObject(prams)\r\n\r\n        if entry.lock == true then\r\n            item.setPositionSmooth({ entry.position.x, entry.position.y, entry.position.z }, false, true)\r\n            item.setRotationSmooth({ entry.rotation.x, entry.rotation.y, entry.rotation.z }, false, true)\r\n            item.setLock(entry.lock)\r\n        end\r\n\r\n        if entry.tooltip == 'false' then item.tooltip = false end\r\n        if entry.interactable == 'false' then item.interactable = false end\r\n    end\r\n    if additive == true then memoryData = {} end\r\n    -- SetButtonName()\r\nend\r\n\r\nfunction pickupStuff()\r\n    if metadatabag ~= nil then\r\n        if additive == true then\r\n            -- Grab All Objects in Zone\r\n            for _, obj in ipairs(getObjectFromGUID(packupZone).getObjects()) do\r\n                local add = false\r\n                if obj ~= self then\r\n                    local GNote = { gm_notes = obj.getGMNotes() }\r\n                    if Global.call('checkIfMetadata', GNote) then\r\n                        local cardmetadata = JSON.decode(GNote.gm_notes)\r\n                        if metadatabag.cycle ~= nil then\r\n                            if metadatabag.cycle == cardmetadata.cycle then\r\n                                add = true\r\n                            end\r\n                        elseif metadatabag.class ~= nil then\r\n                            if checkClass(metadatabag, cardmetadata) and checkXP(metadatabag, cardmetadata) then\r\n                                add = true\r\n                            end\r\n                        elseif metadatabag.type ~= nil then\r\n                            if metadatabag.type == cardmetadata.type then\r\n                                add = true\r\n                            end\r\n                        elseif metadatabag.bondcard ~= nil then\r\n                            if metadatabag.bondcard == cardmetadata.bondcard then\r\n                                add = true\r\n                            end\r\n                        elseif metadatabag.bondedWeakness ~= nil then\r\n                            if metadatabag.bondedWeakness == cardmetadata.bondedWeakness then\r\n                                add = true\r\n                            end\r\n                        end\r\n                    end\r\n                end\r\n                if add == true then\r\n                    createSaveData(obj)\r\n                    self.putObject(obj)\r\n                end\r\n                add = true\r\n            end\r\n        end\r\n\r\n        if additive == false then\r\n            for key, entry in pairs(memoryData) do\r\n                self.putObject(getObjectFromGUID(key))\r\n            end\r\n        end\r\n        -- SetButtonName()\r\n    end\r\nend\r\n\r\nfunction tableSize(t)\r\n    local count = 0\r\n    for key, value in pairs(t) do count = count + 1 end\r\n    return count\r\nend\r\n\r\nfunction tableCullNumericIndexes(t)\r\n    for i, v in pairs(t) do\r\n        if type(i) == \"number\" then\r\n            table.remove(t, i)\r\n            return tableCullNumericIndexes(t)\r\n        end\r\n    end\r\n    return t\r\nend\r\n\r\nfunction makeButtons()\r\n    -- DEFAULT START BUTTONS\r\n    -- if set == nil then\r\n    local button_Place = {\r\n        click_function = 'placeStuff',\r\n        function_owner = self,\r\n        label = 'Placer',\r\n        position = { 0, 0.1, 1.8 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 400,\r\n        font_size = 250,\r\n        scale = { 0.9, 0.9, 0.9 },\r\n        color = { 0, 0, 0 },\r\n        font_color = { 1, 1, 1 }\r\n    }\r\n    self.createButton(button_Place)\r\n\r\n    local button_PickUp = {\r\n        click_function = 'pickupStuff',\r\n        function_owner = self,\r\n        label = 'Ranger',\r\n        position = { 1.8, 0.1, 0 },\r\n        rotation = { 0, -90, 0 },\r\n        width = 1000,\r\n        height = 400,\r\n        font_size = 250,\r\n        scale = { 0.9, 0.9, 0.9 },\r\n        color = { 0, 0, 0 },\r\n        font_color = { 1, 1, 1 }\r\n    }\r\n\r\n    self.createButton(button_PickUp)\r\nend\r\n\r\nfunction checkXP(bag, card)\r\n    if (bag.experience == false and card.level == 0) or (bag.experience == true and card.level > 0) then\r\n        return true\r\n    else\r\n        return false\r\n    end\r\nend\r\n\r\nfunction checkClass(bag, card)\r\n    if string.find(card.class, bag.class) ~= nil then\r\n        return true\r\n    else\r\n        return false\r\n    end\r\nend\r\n","LuaScriptState":"{\"md\":{\"07c7ef\":{\"guid\":\"07c7ef\",\"interactable\":\"true\",\"lock\":false,\"position\":{\"x\":71.4552459716797,\"y\":1.0071325302124,\"z\":-13.0923519134521},\"rotation\":{\"x\":0.00122268637642264,\"y\":180.000457763672,\"z\":-0.00416362704709172},\"tooltip\":\"true\"},\"1d62e3\":{\"guid\":\"1d62e3\",\"interactable\":\"true\",\"lock\":false,\"position\":{\"x\":86.4999084472656,\"y\":0.993606448173523,\"z\":-9.49995899200439},\"rotation\":{\"x\":-5.06103879160946E-06,\"y\":180.021240234375,\"z\":6.60250577766419E-07},\"tooltip\":\"true\"},\"2c0f74\":{\"guid\":\"2c0f74\",\"interactable\":\"true\",\"lock\":false,\"position\":{\"x\":81.4999465942383,\"y\":0.993606507778168,\"z\":-9.49998950958252},\"rotation\":{\"x\":-5.27289739693515E-06,\"y\":180.011474609375,\"z\":8.86989937498583E-07},\"tooltip\":\"true\"},\"3380ee\":{\"guid\":\"3380ee\",\"interactable\":\"true\",\"lock\":false,\"position\":{\"x\":76.5000152587891,\"y\":0.993604958057404,\"z\":-12.9999570846558},\"rotation\":{\"x\":1.47983055285295E-05,\"y\":179.991912841797,\"z\":-0.000132985893287696},\"tooltip\":\"true\"},\"342160\":{\"guid\":\"342160\",\"interactable\":\"true\",\"lock\":false,\"position\":{\"x\":86.5000381469727,\"y\":0.993606746196747,\"z\":-12.9999761581421},\"rotation\":{\"x\":-5.24354754816159E-06,\"y\":179.992370605469,\"z\":7.1760581477065E-07},\"tooltip\":\"true\"},\"467587\":{\"guid\":\"467587\",\"interactable\":\"true\",\"lock\":false,\"position\":{\"x\":76.5000152587891,\"y\":1.02080738544464,\"z\":-12.9999904632568},\"rotation\":{\"x\":9.65360086411238E-05,\"y\":179.992813110352,\"z\":-0.00050487881526351},\"tooltip\":\"true\"},\"6f9693\":{\"guid\":\"6f9693\",\"interactable\":\"true\",\"lock\":false,\"position\":{\"x\":84.0000076293945,\"y\":0.993606805801392,\"z\":-12.9999809265137},\"rotation\":{\"x\":-5.06107016917667E-06,\"y\":179.987716674805,\"z\":3.76961935444342E-07},\"tooltip\":\"true\"},\"7dba99\":{\"guid\":\"7dba99\",\"interactable\":\"true\",\"lock\":false,\"position\":{\"x\":79.0000305175781,\"y\":0.993606805801392,\"z\":-12.9999704360962},\"rotation\":{\"x\":-5.09122946823481E-06,\"y\":179.992095947266,\"z\":9.27246389892389E-07},\"tooltip\":\"true\"},\"852346\":{\"guid\":\"852346\",\"interactable\":\"true\",\"lock\":false,\"position\":{\"x\":76.4999847412109,\"y\":0.993606567382813,\"z\":-9.50000095367432},\"rotation\":{\"x\":-4.70936447527492E-06,\"y\":179.988845825195,\"z\":-2.27286790277503E-07},\"tooltip\":\"true\"},\"94df3d\":{\"guid\":\"94df3d\",\"interactable\":\"true\",\"lock\":false,\"position\":{\"x\":81.5000381469727,\"y\":0.993606805801392,\"z\":-12.9999914169312},\"rotation\":{\"x\":-5.07163076690631E-06,\"y\":179.989364624023,\"z\":4.24932579790038E-07},\"tooltip\":\"true\"},\"9db000\":{\"guid\":\"9db000\",\"interactable\":\"true\",\"lock\":false,\"position\":{\"x\":84.0000228881836,\"y\":0.993606507778168,\"z\":-9.49997329711914},\"rotation\":{\"x\":-4.8618658183841E-06,\"y\":179.989440917969,\"z\":1.97291399217647E-07},\"tooltip\":\"true\"},\"b49ed3\":{\"guid\":\"b49ed3\",\"interactable\":\"true\",\"lock\":false,\"position\":{\"x\":74.0000381469727,\"y\":0.993606865406036,\"z\":-12.9999532699585},\"rotation\":{\"x\":-4.93559809910948E-06,\"y\":179.986175537109,\"z\":3.68018049812235E-07},\"tooltip\":\"true\"},\"c614a8\":{\"guid\":\"c614a8\",\"interactable\":\"true\",\"lock\":false,\"position\":{\"x\":74.0000152587891,\"y\":0.993606567382813,\"z\":-9.49997329711914},\"rotation\":{\"x\":-5.00199530506507E-06,\"y\":179.998382568359,\"z\":4.27423856308451E-07},\"tooltip\":\"true\"},\"cc5d2a\":{\"guid\":\"cc5d2a\",\"interactable\":\"true\",\"lock\":false,\"position\":{\"x\":69.0000228881836,\"y\":0.993606626987457,\"z\":-9.49998092651367},\"rotation\":{\"x\":-5.16198269906454E-06,\"y\":180.000106811523,\"z\":2.9701442372243E-07},\"tooltip\":\"true\"},\"d0dcb8\":{\"guid\":\"d0dcb8\",\"interactable\":\"true\",\"lock\":false,\"position\":{\"x\":71.5000305175781,\"y\":0.993606626987457,\"z\":-9.49995708465576},\"rotation\":{\"x\":-4.86486351292115E-06,\"y\":179.998519897461,\"z\":1.98170269527509E-07},\"tooltip\":\"true\"},\"da6c26\":{\"guid\":\"da6c26\",\"interactable\":\"true\",\"lock\":false,\"position\":{\"x\":71.4837112426758,\"y\":0.993586957454681,\"z\":-12.9882507324219},\"rotation\":{\"x\":0.0001994589692913,\"y\":179.409240722656,\"z\":-0.00139475311152637},\"tooltip\":\"true\"},\"e9085d\":{\"guid\":\"e9085d\",\"interactable\":\"true\",\"lock\":false,\"position\":{\"x\":79.0000381469727,\"y\":0.993606507778168,\"z\":-9.49997806549072},\"rotation\":{\"x\":-4.95154836244183E-06,\"y\":180.022308349609,\"z\":5.37230505415209E-07},\"tooltip\":\"true\"},\"fd76f6\":{\"guid\":\"fd76f6\",\"interactable\":\"true\",\"lock\":false,\"position\":{\"x\":69.0000381469727,\"y\":0.993606925010681,\"z\":-12.9999618530273},\"rotation\":{\"x\":-5.01497061122791E-06,\"y\":179.992874145508,\"z\":4.56408372428996E-07},\"tooltip\":\"true\"}}}","XmlUI":"","ContainedObjects":[{"GUID":"da6c26","Name":"Card","Transform":{"posX":71.48371,"posY":0.993586957,"posZ":-12.9882507,"rotX":0.000199458969,"rotY":179.409241,"rotZ":-0.00139475311,"scaleX":0.9970625,"scaleY":1,"scaleZ":0.9970625},"Nickname":"Encre AnimÃ©e (amÃ©lioration)","Description":"Fiche scriptÃ©e par Chr1Z -  Cliquez droit pour les options d'affichage","GMNotes":"{\n  \"id\": \"09079-c\",\n  \"type\": \"UpgradeSheet\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":556009,"SidewaysCard":false,"CustomDeck":{"5560":{"FaceURL":"https://i.imgur.com/EnwxHBL.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/1821167093099748718/F92B9C3E0F282CBECC5AE90DD19E246A21B83E31/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"-- Customizable Cards: Encre\r\n-- by Chr1Z\r\n-- Traduction et adaptation par Omen\r\ninformation = {\r\n    version = \"1.7\",\r\n    last_updated = \"12.10.2022\"\r\n}\r\n\r\n-- Color information for buttons\r\nboxSize = 33\r\n\r\n-- static values\r\nx_1         = -0.9625\r\nx_offset    = 0.0665\r\ny_visible   = 0.25\r\ny_invisible = -0.5\r\n\r\n-- z-values (lines on the sheet)\r\nposZ = {\r\n    -0.72,\r\n    -0.41,\r\n    -0.115,\r\n    0.285,\r\n    0.495,\r\n    0.705,\r\n    1.1\r\n}\r\n\r\n-- box setup (amount of boxes per line and amount of marked boxes in that line)\r\nexistingBoxes = { 1, 1, 2, 2, 3, 3, 3 }\r\n\r\ninputBoxes = {}\r\n\r\n-- override 'marked boxes' for debugging ('all' or 'none')\r\nmarkDEBUG = \"\"\r\n\r\n-- save state when going into bags / decks\r\nfunction onDestroy() self.script_state = onSave() end\r\n\r\nfunction onSave() return JSON.encode({ markedBoxes, inputValues }) end\r\n\r\n-- Startup procedure\r\nfunction onLoad(saved_data)\r\n    if saved_data ~= \"\" and markDEBUG == \"\" then\r\n        local loaded_data = JSON.decode(saved_data)\r\n        markedBoxes = loaded_data[1]\r\n        inputValues = loaded_data[2]\r\n    else\r\n        markedBoxes = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }\r\n        inputValues = { \"\", \"\", \"\", \"\", \"\" }\r\n    end\r\n\r\n    makeData()\r\n    createButtonsAndBoxes()\r\n\r\n\r\n    self.addContextMenuItem(\"Ãchelle: normale\", function() self.setScale({ 1, 1, 1 }) end)\r\n    self.addContextMenuItem(\"Ãchelle: double\", function() self.setScale({ 2, 1, 2 }) end)\r\n    self.addContextMenuItem(\"Ãchelle: triple\", function() self.setScale({ 3, 1, 3 }) end)\r\nend\r\n\r\nfunction updateState(markedBoxesNew)\r\n    if markedBoxesNew then markedBoxes = markedBoxesNew end\r\n    makeData()\r\n    createButtonsAndBoxes()\r\nend\r\n\r\n-- create Data\r\nfunction makeData()\r\n    Data = {}\r\n    Data.checkbox = {}\r\n    Data.textbox = {}\r\n\r\n    -- repeat this for each entry (= line) in existingBoxes\r\n    local totalCount = 0\r\n    for i = 1, #existingBoxes do\r\n        -- repeat this for each checkbox per line\r\n        for j = 1, existingBoxes[i] do\r\n            totalCount                      = totalCount + 1\r\n            Data.checkbox[totalCount]       = {}\r\n            Data.checkbox[totalCount].pos   = {}\r\n            Data.checkbox[totalCount].pos.x = x_1 + j * x_offset\r\n            Data.checkbox[totalCount].pos.z = posZ[i]\r\n            Data.checkbox[totalCount].row   = i\r\n\r\n            if (markDEBUG == \"all\") or (markedBoxes[i] >= j and markDEBUG ~= \"none\") then\r\n                Data.checkbox[totalCount].pos.y = y_visible\r\n                Data.checkbox[totalCount].state = true\r\n            else\r\n                Data.checkbox[totalCount].pos.y = y_invisible\r\n                Data.checkbox[totalCount].state = false\r\n            end\r\n        end\r\n    end\r\n\r\n    -- repeat this for each entry (= line) in inputBoxes\r\n    local totalCount = 0\r\n    for i = 1, #inputBoxes do\r\n        -- repeat this for each textbox per line\r\n        for j = 1, inputBoxes[i] do\r\n            totalCount                     = totalCount + 1\r\n            Data.textbox[totalCount]       = {}\r\n            Data.textbox[totalCount].pos   = inputPos[totalCount]\r\n            Data.textbox[totalCount].width = inputWidth[totalCount]\r\n            Data.textbox[totalCount].value = inputValues[totalCount]\r\n        end\r\n    end\r\nend\r\n\r\n-- checks or unchecks the given box\r\nfunction click_checkbox(tableIndex)\r\n    local row = Data.checkbox[tableIndex].row\r\n\r\n    if Data.checkbox[tableIndex].state == true then\r\n        Data.checkbox[tableIndex].pos.y = y_invisible\r\n        Data.checkbox[tableIndex].state = false\r\n\r\n        markedBoxes[row] = markedBoxes[row] - 1\r\n    else\r\n        Data.checkbox[tableIndex].pos.y = y_visible\r\n        Data.checkbox[tableIndex].state = true\r\n\r\n        markedBoxes[row] = markedBoxes[row] + 1\r\n    end\r\n\r\n    self.editButton({\r\n        index = tableIndex - 1,\r\n        position = Data.checkbox[tableIndex].pos\r\n    })\r\nend\r\n\r\n-- updates saved value for given text box\r\nfunction click_textbox(i, value, selected)\r\n    if selected == false then\r\n        inputValues[i] = value\r\n    end\r\nend\r\n\r\nfunction createButtonsAndBoxes()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n\r\n    for i, box_data in ipairs(Data.checkbox) do\r\n        local funcName = \"checkbox\" .. i\r\n        local func = function() click_checkbox(i) end\r\n        self.setVar(funcName, func)\r\n\r\n        self.createButton({\r\n            click_function = funcName,\r\n            function_owner = self,\r\n            position       = box_data.pos,\r\n            height         = boxSize,\r\n            width          = boxSize,\r\n            font_size      = box_data.size,\r\n            scale          = { 1, 1, 1 },\r\n            color          = { 0, 0, 0 },\r\n            font_color     = { 0, 0, 0 }\r\n        })\r\n    end\r\n\r\n    for i, box_data in ipairs(Data.textbox) do\r\n        local funcName = \"textbox\" .. i\r\n        local func = function(_, _, val, sel) click_textbox(i, val, sel) end\r\n        self.setVar(funcName, func)\r\n\r\n        self.createInput({\r\n            input_function = funcName,\r\n            function_owner = self,\r\n            label          = \"Click to type\",\r\n            alignment      = 2,\r\n            position       = box_data.pos,\r\n            scale          = buttonScale,\r\n            width          = box_data.width,\r\n            height         = (inputFontsize * 1) + 24,\r\n            font_size      = inputFontsize,\r\n            color          = \"White\",\r\n            font_color     = buttonFontColor,\r\n            value          = box_data.value\r\n        })\r\n    end\r\nend","LuaScriptState":"[[0,0,0,0,0,0,0,0,0,0],[\"\",\"\",\"\",\"\",\"\"]]","XmlUI":""},{"GUID":"e9085d","Name":"Card","Transform":{"posX":79.00004,"posY":0.9936065,"posZ":-9.499978,"rotX":-0.00000495154836,"rotY":180.022308,"rotZ":5.372305e-7,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"HypothÃ¨se Empirique (amÃ©lioration)","Description":"Fiche scriptÃ©e par Chr1Z -  Cliquez droit pour les options d'affichage","GMNotes":"{\n  \"id\": \"09041-c\",\n  \"type\": \"UpgradeSheet\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":556004,"SidewaysCard":false,"CustomDeck":{"5560":{"FaceURL":"https://i.imgur.com/EnwxHBL.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/1821167093099748718/F92B9C3E0F282CBECC5AE90DD19E246A21B83E31/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"-- Customizable Cards: HypothÃ¨se empirique\r\n-- by Chr1Z\r\n-- Traduction par Omen\r\ninformation = {\r\n    version = \"1.7\",\r\n    last_updated = \"12.10.2022\"\r\n}\r\n\r\n-- Color information for buttons\r\nboxSize = 40\r\n\r\n-- static values\r\nx_1         = -0.99\r\nx_offset    = 0.075\r\ny_visible   = 0.25\r\ny_invisible = -0.5\r\n\r\n-- z-values (lines on the sheet)\r\nposZ = {\r\n    -0.91,\r\n    -0.705,\r\n    -0.51,\r\n    -0.31,\r\n    -0.03,\r\n    0.425,\r\n    0.715,\r\n    1.003\r\n}\r\n\r\n-- box setup (amount of boxes per line and amount of marked boxes in that line)\r\nexistingBoxes = { 1, 1, 1, 1, 2, 2, 3, 4 }\r\n\r\n\r\ninputBoxes = {}\r\n\r\n-- override 'marked boxes' for debugging ('all' or 'none')\r\nmarkDEBUG = \"\"\r\n\r\n-- save state when going into bags / decks\r\nfunction onDestroy() self.script_state = onSave() end\r\n\r\nfunction onSave() return JSON.encode({ markedBoxes, inputValues }) end\r\n\r\n-- Startup procedure\r\nfunction onLoad(saved_data)\r\n    if saved_data ~= \"\" and markDEBUG == \"\" then\r\n        local loaded_data = JSON.decode(saved_data)\r\n        markedBoxes = loaded_data[1]\r\n        inputValues = loaded_data[2]\r\n    else\r\n        markedBoxes = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }\r\n        inputValues = { \"\", \"\", \"\", \"\", \"\" }\r\n    end\r\n\r\n    makeData()\r\n    createButtonsAndBoxes()\r\n\r\n\r\n    self.addContextMenuItem(\"Ãchelle: normale\", function() self.setScale({ 1, 1, 1 }) end)\r\n    self.addContextMenuItem(\"Ãchelle: double\", function() self.setScale({ 2, 1, 2 }) end)\r\n    self.addContextMenuItem(\"Ãchelle: triple\", function() self.setScale({ 3, 1, 3 }) end)\r\nend\r\n\r\nfunction updateState(markedBoxesNew)\r\n    if markedBoxesNew then markedBoxes = markedBoxesNew end\r\n    makeData()\r\n    createButtonsAndBoxes()\r\nend\r\n\r\n-- create Data\r\nfunction makeData()\r\n    Data = {}\r\n    Data.checkbox = {}\r\n    Data.textbox = {}\r\n\r\n    -- repeat this for each entry (= line) in existingBoxes\r\n    local totalCount = 0\r\n    for i = 1, #existingBoxes do\r\n        -- repeat this for each checkbox per line\r\n        for j = 1, existingBoxes[i] do\r\n            totalCount                      = totalCount + 1\r\n            Data.checkbox[totalCount]       = {}\r\n            Data.checkbox[totalCount].pos   = {}\r\n            Data.checkbox[totalCount].pos.x = x_1 + j * x_offset\r\n            Data.checkbox[totalCount].pos.z = posZ[i]\r\n            Data.checkbox[totalCount].row   = i\r\n\r\n            if (markDEBUG == \"all\") or (markedBoxes[i] >= j and markDEBUG ~= \"none\") then\r\n                Data.checkbox[totalCount].pos.y = y_visible\r\n                Data.checkbox[totalCount].state = true\r\n            else\r\n                Data.checkbox[totalCount].pos.y = y_invisible\r\n                Data.checkbox[totalCount].state = false\r\n            end\r\n        end\r\n    end\r\n\r\n    -- repeat this for each entry (= line) in inputBoxes\r\n    local totalCount = 0\r\n    for i = 1, #inputBoxes do\r\n        -- repeat this for each textbox per line\r\n        for j = 1, inputBoxes[i] do\r\n            totalCount                     = totalCount + 1\r\n            Data.textbox[totalCount]       = {}\r\n            Data.textbox[totalCount].pos   = inputPos[totalCount]\r\n            Data.textbox[totalCount].width = inputWidth[totalCount]\r\n            Data.textbox[totalCount].value = inputValues[totalCount]\r\n        end\r\n    end\r\nend\r\n\r\n-- checks or unchecks the given box\r\nfunction click_checkbox(tableIndex)\r\n    local row = Data.checkbox[tableIndex].row\r\n\r\n    if Data.checkbox[tableIndex].state == true then\r\n        Data.checkbox[tableIndex].pos.y = y_invisible\r\n        Data.checkbox[tableIndex].state = false\r\n\r\n        markedBoxes[row] = markedBoxes[row] - 1\r\n    else\r\n        Data.checkbox[tableIndex].pos.y = y_visible\r\n        Data.checkbox[tableIndex].state = true\r\n\r\n        markedBoxes[row] = markedBoxes[row] + 1\r\n    end\r\n\r\n    self.editButton({\r\n        index = tableIndex - 1,\r\n        position = Data.checkbox[tableIndex].pos\r\n    })\r\nend\r\n\r\n-- updates saved value for given text box\r\nfunction click_textbox(i, value, selected)\r\n    if selected == false then\r\n        inputValues[i] = value\r\n    end\r\nend\r\n\r\nfunction createButtonsAndBoxes()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n\r\n    for i, box_data in ipairs(Data.checkbox) do\r\n        local funcName = \"checkbox\" .. i\r\n        local func = function() click_checkbox(i) end\r\n        self.setVar(funcName, func)\r\n\r\n        self.createButton({\r\n            click_function = funcName,\r\n            function_owner = self,\r\n            position       = box_data.pos,\r\n            height         = boxSize,\r\n            width          = boxSize,\r\n            font_size      = box_data.size,\r\n            scale          = { 1, 1, 1 },\r\n            color          = { 0, 0, 0 },\r\n            font_color     = { 0, 0, 0 }\r\n        })\r\n    end\r\n\r\n    for i, box_data in ipairs(Data.textbox) do\r\n        local funcName = \"textbox\" .. i\r\n        local func = function(_, _, val, sel) click_textbox(i, val, sel) end\r\n        self.setVar(funcName, func)\r\n\r\n        self.createInput({\r\n            input_function = funcName,\r\n            function_owner = self,\r\n            label          = \"Click to type\",\r\n            alignment      = 2,\r\n            position       = box_data.pos,\r\n            scale          = buttonScale,\r\n            width          = box_data.width,\r\n            height         = (inputFontsize * 1) + 24,\r\n            font_size      = inputFontsize,\r\n            color          = \"White\",\r\n            font_color     = buttonFontColor,\r\n            value          = box_data.value\r\n        })\r\n    end\r\nend","LuaScriptState":"[[0,0,0,0,0,0,0,0,0,0],[\"\",\"\",\"\",\"\",\"\"]]","XmlUI":""},{"GUID":"1d62e3","Name":"Card","Transform":{"posX":86.49991,"posY":0.993606448,"posZ":-9.499959,"rotX":-0.000005061039,"rotY":180.02124,"rotZ":6.602506e-7,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Amis des Bas-Fonds (amÃ©lioration)","Description":"Fiche scriptÃ©e par Chr1Z -  Cliquez droit pour les options d'affichage","GMNotes":"{\n  \"id\": \"09060-c\",\n  \"type\": \"UpgradeSheet\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":556007,"SidewaysCard":false,"CustomDeck":{"5560":{"FaceURL":"https://i.imgur.com/EnwxHBL.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/1821167093099748718/F92B9C3E0F282CBECC5AE90DD19E246A21B83E31/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"-- Customizable Cards: Friends in Low Places\r\n-- by Chr1Z\r\ninformation = {\r\n    version = \"1.7\",\r\n    last_updated = \"12.10.2022\"\r\n}\r\n\r\n-- Color information for buttons and input boxes\r\nboxSize       = 30\r\ninputFontsize = 32\n\r\n-- static values\r\nx_1         = -0.965\r\nx_offset    = 0.0685\r\ny_visible   = 0.25\r\ny_invisible = -0.5\r\n\r\n-- z-values (lines on the sheet)\r\nposZ = {\r\n    -0.73,\r\n    -0.415,\r\n    0.065,\r\n    0.366,\r\r\n    0.765,\r\n    0.97,\n    1.175\r\n}\r\n\r\n-- box setup (amount of boxes per line and amount of marked boxes in that line)\r\nexistingBoxes = { 1, 2, 2, 2, 2, 3, 3 }\r\n\r\ninputBoxes = { 1, 1 }\r\ninputWidth = { 640, 280 }\r\ninputPos   = { { 0.2, 0.25, -0.91 }, { -0.655, 0.25, -0.32 } }\r\n\r\n-- override 'marked boxes' for debugging ('all' or 'none')\r\nmarkDEBUG = \"\"\r\n\r\n-- save state when going into bags / decks\r\nfunction onDestroy() self.script_state = onSave() end\r\n\r\nfunction onSave() return JSON.encode({ markedBoxes, inputValues }) end\r\n\r\n-- Startup procedure\r\nfunction onLoad(saved_data)\r\n    if saved_data ~= \"\" and markDEBUG == \"\" then\r\n        local loaded_data = JSON.decode(saved_data)\r\n        markedBoxes = loaded_data[1]\r\n        inputValues = loaded_data[2]\r\n    else\r\n        markedBoxes = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }\r\n        inputValues = { \"\", \"\", \"\", \"\", \"\" }\r\n    end\r\n\r\n    makeData()\r\n    createButtonsAndBoxes()\r\n\r\n    self.addContextMenuItem(\"Ãchelle: normale\", function() self.setScale({ 1, 1, 1 }) end)\r\n    self.addContextMenuItem(\"Ãchelle: double\", function() self.setScale({ 2, 1, 2 }) end)\r\n    self.addContextMenuItem(\"Ãchelle: triple\", function() self.setScale({ 3, 1, 3 }) end)\r\nend\r\n\r\nfunction updateState(markedBoxesNew)\r\n    if markedBoxesNew then markedBoxes = markedBoxesNew end\r\n    makeData()\r\n    createButtonsAndBoxes()\r\nend\r\n\r\n-- create Data\r\nfunction makeData()\r\n    Data = {}\r\n    Data.checkbox = {}\r\n    Data.textbox = {}\r\n\r\n    -- repeat this for each entry (= line) in existingBoxes\r\n    local totalCount = 0\r\n    for i = 1, #existingBoxes do\r\n        -- repeat this for each checkbox per line\r\n        for j = 1, existingBoxes[i] do\r\n            totalCount                      = totalCount + 1\r\n            Data.checkbox[totalCount]       = {}\r\n            Data.checkbox[totalCount].pos   = {}\r\n            Data.checkbox[totalCount].pos.x = x_1 + j * x_offset\r\n            Data.checkbox[totalCount].pos.z = posZ[i]\r\n            Data.checkbox[totalCount].row   = i\r\n\r\n            if (markDEBUG == \"all\") or (markedBoxes[i] >= j and markDEBUG ~= \"none\") then\r\n                Data.checkbox[totalCount].pos.y = y_visible\r\n                Data.checkbox[totalCount].state = true\r\n            else\r\n                Data.checkbox[totalCount].pos.y = y_invisible\r\n                Data.checkbox[totalCount].state = false\r\n            end\r\n        end\r\n    end\r\n\r\n    -- repeat this for each entry (= line) in inputBoxes\r\n    local totalCount = 0\r\n    for i = 1, #inputBoxes do\r\n        -- repeat this for each textbox per line\r\n        for j = 1, inputBoxes[i] do\r\n            totalCount                     = totalCount + 1\r\n            Data.textbox[totalCount]       = {}\r\n            Data.textbox[totalCount].pos   = inputPos[totalCount]\r\n            Data.textbox[totalCount].width = inputWidth[totalCount]\r\n            Data.textbox[totalCount].value = inputValues[totalCount]\r\n        end\r\n    end\r\nend\r\n\r\n-- checks or unchecks the given box\r\nfunction click_checkbox(tableIndex)\r\n    local row = Data.checkbox[tableIndex].row\r\n\r\n    if Data.checkbox[tableIndex].state == true then\r\n        Data.checkbox[tableIndex].pos.y = y_invisible\r\n        Data.checkbox[tableIndex].state = false\r\n\r\n        markedBoxes[row] = markedBoxes[row] - 1\r\n    else\r\n        Data.checkbox[tableIndex].pos.y = y_visible\r\n        Data.checkbox[tableIndex].state = true\r\n\r\n        markedBoxes[row] = markedBoxes[row] + 1\r\n    end\r\n\r\n    self.editButton({\r\n        index = tableIndex - 1,\r\n        position = Data.checkbox[tableIndex].pos\r\n    })\r\nend\r\n\r\n-- updates saved value for given text box\r\nfunction click_textbox(i, value, selected)\r\n    if selected == false then\r\n        inputValues[i] = value\r\n    end\r\nend\r\n\r\nfunction createButtonsAndBoxes()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n\r\n    for i, box_data in ipairs(Data.checkbox) do\r\n        local funcName = \"checkbox\" .. i\r\n        local func = function() click_checkbox(i) end\r\n        self.setVar(funcName, func)\r\n\r\n        self.createButton({\r\n            click_function = funcName,\r\n            function_owner = self,\r\n            position       = box_data.pos,\r\n            height         = boxSize,\r\n            width          = boxSize,\r\n            font_size      = box_data.size,\r\n            scale          = { 1, 1, 1 },\r\n            color          = { 0, 0, 0 },\r\n            font_color     = { 0, 0, 0 }\r\n        })\r\n    end\r\n\r\n    for i, box_data in ipairs(Data.textbox) do\r\n        local funcName = \"textbox\" .. i\r\n        local func = function(_, _, val, sel) click_textbox(i, val, sel) end\r\n        self.setVar(funcName, func)\r\n\r\n        self.createInput({\r\n            input_function = funcName,\r\n            function_owner = self,\r\n            label          = \"Cliquer et saisir\",\r\n            alignment      = 2,\r\n            position       = box_data.pos,\r\n            scale          = buttonScale,\r\n            width          = box_data.width,\r\n            height         = (inputFontsize * 1) + 22,\r\n            font_size      = inputFontsize,\r\n            color          = {1,1,1,1},\r\n            font_color     = buttonFontColor,\r\n            value          = box_data.value\r\n        })\r\n    end\r\nend","LuaScriptState":"[[0,0,0,0,0,0,0,0,0,0],[\"\",\"\",\"\",\"\",\"\"]]","XmlUI":""},{"GUID":"6f9693","Name":"Card","Transform":{"posX":84.00001,"posY":0.9936068,"posZ":-12.9999809,"rotX":-0.00000506107,"rotY":179.987717,"rotZ":3.76961935e-7,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Railleries (amÃ©lioration)","Description":"Fiche scriptÃ©e par Chr1Z -  Cliquez droit pour les options d'affichage","GMNotes":"{\n  \"id\": \"09101-c\",\n  \"type\": \"UpgradeSheet\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":556014,"SidewaysCard":false,"CustomDeck":{"5560":{"FaceURL":"https://i.imgur.com/EnwxHBL.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/1821167093099748718/F92B9C3E0F282CBECC5AE90DD19E246A21B83E31/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"-- Customizable Cards: Railleries\r\n-- by Chr1Z\r\ninformation = {\r\n    version = \"1.7\",\r\n    last_updated = \"12.10.2022\"\r\n}\r\n\r\n-- Color information for buttons and input boxes\r\nboxSize       = 35\r\ninputFontsize = 32\r\n\r\n-- static values\r\nx_1         = -0.967\r\nx_offset    = 0.072\r\ny_visible   = 0.25\r\ny_invisible = -0.5\r\n\r\n-- z-values (lines on the sheet)\r\nposZ = {\r\n    -0.71,\r\n    -0.458,\r\n    -0.215,\r\n    0.33,\r\n    0.88\r\n}\r\n\r\n-- box setup (amount of boxes per line and amount of marked boxes in that line)\r\nexistingBoxes = { 1, 2, 3, 4, 5 }\r\n\r\ninputBoxes = { 1, 1, 1 }\r\ninputWidth = { 600, 875, 875 }\r\ninputPos   = { { 0.29, 0.25, -0.91 }, { 0.00, 0.25, -0.58 }, { 0.00, 0.25, -0.32 } }\r\n\r\n-- override 'marked boxes' for debugging ('all' or 'none')\r\nmarkDEBUG = \"\"\r\n\r\n-- save state when going into bags / decks\r\nfunction onDestroy() self.script_state = onSave() end\r\n\r\nfunction onSave() return JSON.encode({ markedBoxes, inputValues }) end\r\n\r\n-- Startup procedure\r\nfunction onLoad(saved_data)\r\n    if saved_data ~= \"\" and markDEBUG == \"\" then\r\n        local loaded_data = JSON.decode(saved_data)\r\n        markedBoxes = loaded_data[1]\r\n        inputValues = loaded_data[2]\r\n    else\r\n        markedBoxes = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }\r\n        inputValues = { \"\", \"\", \"\", \"\", \"\" }\r\n    end\r\n\r\n    makeData()\r\n    createButtonsAndBoxes()\r\n\r\n    self.addContextMenuItem(\"Ãchelle: normale\", function() self.setScale({ 1, 1, 1 }) end)\r\n    self.addContextMenuItem(\"Ãchelle: double\", function() self.setScale({ 2, 1, 2 }) end)\r\n    self.addContextMenuItem(\"Ãchelle: triple\", function() self.setScale({ 3, 1, 3 }) end)\r\nend\r\n\r\nfunction updateState(markedBoxesNew)\r\n    if markedBoxesNew then markedBoxes = markedBoxesNew end\r\n    makeData()\r\n    createButtonsAndBoxes()\r\nend\r\n\r\n-- create Data\r\nfunction makeData()\r\n    Data = {}\r\n    Data.checkbox = {}\r\n    Data.textbox = {}\r\n\r\n    -- repeat this for each entry (= line) in existingBoxes\r\n    local totalCount = 0\r\n    for i = 1, #existingBoxes do\r\n        -- repeat this for each checkbox per line\r\n        for j = 1, existingBoxes[i] do\r\n            totalCount                      = totalCount + 1\r\n            Data.checkbox[totalCount]       = {}\r\n            Data.checkbox[totalCount].pos   = {}\r\n            Data.checkbox[totalCount].pos.x = x_1 + j * x_offset\r\n            Data.checkbox[totalCount].pos.z = posZ[i]\r\n            Data.checkbox[totalCount].row   = i\r\n\r\n            if (markDEBUG == \"all\") or (markedBoxes[i] >= j and markDEBUG ~= \"none\") then\r\n                Data.checkbox[totalCount].pos.y = y_visible\r\n                Data.checkbox[totalCount].state = true\r\n            else\r\n                Data.checkbox[totalCount].pos.y = y_invisible\r\n                Data.checkbox[totalCount].state = false\r\n            end\r\n        end\r\n    end\r\n\r\n    -- repeat this for each entry (= line) in inputBoxes\r\n    local totalCount = 0\r\n    for i = 1, #inputBoxes do\r\n        -- repeat this for each textbox per line\r\n        for j = 1, inputBoxes[i] do\r\n            totalCount                     = totalCount + 1\r\n            Data.textbox[totalCount]       = {}\r\n            Data.textbox[totalCount].pos   = inputPos[totalCount]\r\n            Data.textbox[totalCount].width = inputWidth[totalCount]\r\n            Data.textbox[totalCount].value = inputValues[totalCount]\r\n        end\r\n    end\r\nend\r\n\r\n-- checks or unchecks the given box\r\nfunction click_checkbox(tableIndex)\r\n    local row = Data.checkbox[tableIndex].row\r\n\r\n    if Data.checkbox[tableIndex].state == true then\r\n        Data.checkbox[tableIndex].pos.y = y_invisible\r\n        Data.checkbox[tableIndex].state = false\r\n\r\n        markedBoxes[row] = markedBoxes[row] - 1\r\n    else\r\n        Data.checkbox[tableIndex].pos.y = y_visible\r\n        Data.checkbox[tableIndex].state = true\r\n\r\n        markedBoxes[row] = markedBoxes[row] + 1\r\n    end\r\n\r\n    self.editButton({\r\n        index = tableIndex - 1,\r\n        position = Data.checkbox[tableIndex].pos\r\n    })\r\nend\r\n\r\n-- updates saved value for given text box\r\nfunction click_textbox(i, value, selected)\r\n    if selected == false then\r\n        inputValues[i] = value\r\n    end\r\nend\r\n\r\nfunction createButtonsAndBoxes()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n\r\n    for i, box_data in ipairs(Data.checkbox) do\r\n        local funcName = \"checkbox\" .. i\r\n        local func = function() click_checkbox(i) end\r\n        self.setVar(funcName, func)\r\n\r\n        self.createButton({\r\n            click_function = funcName,\r\n            function_owner = self,\r\n            position       = box_data.pos,\r\n            height         = boxSize,\r\n            width          = boxSize,\r\n            font_size      = box_data.size,\r\n            scale          = { 1, 1, 1 },\r\n            color          = { 0, 0, 0 },\r\n            font_color     = { 0, 0, 0 }\r\n        })\r\n    end\r\n\r\n    for i, box_data in ipairs(Data.textbox) do\r\n        local funcName = \"textbox\" .. i\r\n        local func = function(_, _, val, sel) click_textbox(i, val, sel) end\r\n        self.setVar(funcName, func)\r\n\r\n        self.createInput({\r\n            input_function = funcName,\r\n            function_owner = self,\r\n            label          = \"Cliquer et saisir\",\r\n            alignment      = 2,\r\n            position       = box_data.pos,\r\n            scale          = buttonScale,\r\n            width          = box_data.width,\r\n            height         = (inputFontsize * 1) + 22,\r\n            font_size      = inputFontsize,\r\n            color          = {1,1,1,1},\r\n            font_color     = buttonFontColor,\r\n            value          = box_data.value\r\n        })\r\n    end\r\nend","LuaScriptState":"[[0,0,0,0,0,0,0,0,0,0],[\"\",\"\",\"\",\"\",\"\"]]","XmlUI":""},{"GUID":"2c0f74","Name":"Card","Transform":{"posX":81.49995,"posY":0.9936065,"posZ":-9.49998951,"rotX":-0.0000052728974,"rotY":180.011475,"rotZ":8.86989937e-7,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"La Plume du Corbeau (amÃ©lioration)","Description":"Fiche scriptÃ©e par Chr1Z -  Cliquez droit pour les options d'affichage","GMNotes":"{\n  \"id\": \"09042-c\",\n  \"type\": \"UpgradeSheet\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":556005,"SidewaysCard":false,"CustomDeck":{"5560":{"FaceURL":"https://i.imgur.com/EnwxHBL.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/1821167093099748718/F92B9C3E0F282CBECC5AE90DD19E246A21B83E31/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"-- Customizable Cards: The Raven Quill\r\n-- by Chr1Z\r\ninformation = {\r\n    version = \"1.7\",\r\n    last_updated = \"12.10.2022\"\r\n}\r\n\r\n-- Color information for buttons and input boxes\r\nboxSize       = 30\r\ninputFontsize = 32\r\n-- static values\r\nx_1         = -0.975\r\nx_offset    = 0.0705\r\ny_visible   = 0.25\r\ny_invisible = -0.5\r\n\r\n-- z-values (lines on the sheet)\r\nposZ = {\r\n    -0.725,\r\n    -0.5275,\r\n    -0.355,\r\n    -0.07,\r\n    0.2,\r\n    0.56,\r\n    0.925\r\n}\r\n\r\n-- box setup (amount of boxes per line and amount of marked boxes in that line)\r\nexistingBoxes = { 1, 1, 2, 2, 2, 3, 4 }\r\n\r\ninputBoxes = { 1, 1, 1 }\r\ninputWidth = { 425, 440, 350 }\r\ninputPos   = { { 0.5, 0.25, -0.885 }, { 0.26, 0.25, 0.0085 }, { -0.575, 0.25, 0.0986 } }\r\n\r\n-- override 'marked boxes' for debugging ('all' or 'none')\r\nmarkDEBUG = \"\"\r\n\r\n-- save state when going into bags / decks\r\nfunction onDestroy() self.script_state = onSave() end\r\n\r\nfunction onSave() return JSON.encode({ markedBoxes, inputValues }) end\r\n\r\n-- Startup procedure\r\nfunction onLoad(saved_data)\r\n    if saved_data ~= \"\" and markDEBUG == \"\" then\r\n        local loaded_data = JSON.decode(saved_data)\r\n        markedBoxes = loaded_data[1]\r\n        inputValues = loaded_data[2]\r\n    else\r\n        markedBoxes = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }\r\n        inputValues = { \"\", \"\", \"\", \"\", \"\" }\r\n    end\r\n\r\n    makeData()\r\n    createButtonsAndBoxes()\r\n\r\n\r\n    self.addContextMenuItem(\"Ãchelle: normale\", function() self.setScale({ 1, 1, 1 }) end)\r\n    self.addContextMenuItem(\"Ãchelle: double\", function() self.setScale({ 2, 1, 2 }) end)\r\n    self.addContextMenuItem(\"Ãchelle: triple\", function() self.setScale({ 3, 1, 3 }) end)\r\nend\r\n\r\nfunction updateState(markedBoxesNew)\r\n    if markedBoxesNew then markedBoxes = markedBoxesNew end\r\n    makeData()\r\n    createButtonsAndBoxes()\r\nend\r\n\r\n-- create Data\r\nfunction makeData()\r\n    Data = {}\r\n    Data.checkbox = {}\r\n    Data.textbox = {}\r\n\r\n    -- repeat this for each entry (= line) in existingBoxes\r\n    local totalCount = 0\r\n    for i = 1, #existingBoxes do\r\n        -- repeat this for each checkbox per line\r\n        for j = 1, existingBoxes[i] do\r\n            totalCount                      = totalCount + 1\r\n            Data.checkbox[totalCount]       = {}\r\n            Data.checkbox[totalCount].pos   = {}\r\n            Data.checkbox[totalCount].pos.x = x_1 + j * x_offset\r\n            Data.checkbox[totalCount].pos.z = posZ[i]\r\n            Data.checkbox[totalCount].row   = i\r\n\r\n            if (markDEBUG == \"all\") or (markedBoxes[i] >= j and markDEBUG ~= \"none\") then\r\n                Data.checkbox[totalCount].pos.y = y_visible\r\n                Data.checkbox[totalCount].state = true\r\n            else\r\n                Data.checkbox[totalCount].pos.y = y_invisible\r\n                Data.checkbox[totalCount].state = false\r\n            end\r\n        end\r\n    end\r\n\r\n    -- repeat this for each entry (= line) in inputBoxes\r\n    local totalCount = 0\r\n    for i = 1, #inputBoxes do\r\n        -- repeat this for each textbox per line\r\n        for j = 1, inputBoxes[i] do\r\n            totalCount                     = totalCount + 1\r\n            Data.textbox[totalCount]       = {}\r\n            Data.textbox[totalCount].pos   = inputPos[totalCount]\r\n            Data.textbox[totalCount].width = inputWidth[totalCount]\r\n            Data.textbox[totalCount].value = inputValues[totalCount]\r\n        end\r\n    end\r\nend\r\n\r\n-- checks or unchecks the given box\r\nfunction click_checkbox(tableIndex)\r\n    local row = Data.checkbox[tableIndex].row\r\n\r\n    if Data.checkbox[tableIndex].state == true then\r\n        Data.checkbox[tableIndex].pos.y = y_invisible\r\n        Data.checkbox[tableIndex].state = false\r\n\r\n        markedBoxes[row] = markedBoxes[row] - 1\r\n    else\r\n        Data.checkbox[tableIndex].pos.y = y_visible\r\n        Data.checkbox[tableIndex].state = true\r\n\r\n        markedBoxes[row] = markedBoxes[row] + 1\r\n    end\r\n\r\n    self.editButton({\r\n        index = tableIndex - 1,\r\n        position = Data.checkbox[tableIndex].pos\r\n    })\r\nend\r\n\r\n-- updates saved value for given text box\r\nfunction click_textbox(i, value, selected)\r\n    if selected == false then\r\n        inputValues[i] = value\r\n    end\r\nend\r\n\r\nfunction createButtonsAndBoxes()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n\r\n    for i, box_data in ipairs(Data.checkbox) do\r\n        local funcName = \"checkbox\" .. i\r\n        local func = function() click_checkbox(i) end\r\n        self.setVar(funcName, func)\r\n\r\n        self.createButton({\r\n            click_function = funcName,\r\n            function_owner = self,\r\n            position       = box_data.pos,\r\n            height         = boxSize,\r\n            width          = boxSize,\r\n            font_size      = box_data.size,\r\n            scale          = { 1, 1, 1 },\r\n            color          = { 0, 0, 0 },\r\n            font_color     = { 0, 0, 0 }\r\n        })\r\n    end\r\n\r\n    for i, box_data in ipairs(Data.textbox) do\r\n        local funcName = \"textbox\" .. i\r\n        local func = function(_, _, val, sel) click_textbox(i, val, sel) end\r\n        self.setVar(funcName, func)\r\n\r\n        self.createInput({\r\n            input_function = funcName,\r\n            function_owner = self,\r\n            label          = \"Cliquer et saisir\",\r\n            alignment      = 2,\r\n            position       = box_data.pos,\r\n            scale          = buttonScale,\r\n            width          = box_data.width,\r\n            height         = (inputFontsize * 1) + 24,\r\n            font_size      = inputFontsize,\r\n            color          = \"White\",\r\n            font_color     = buttonFontColor,\r\n            value          = box_data.value\r\n        })\r\n    end\r\nend","LuaScriptState":"[[0,0,0,0,0,0,0,0,0,0],[\"\",\"\",\"\",\"\",\"\"]]","XmlUI":""},{"GUID":"852346","Name":"Card","Transform":{"posX":76.4999847,"posY":0.993606567,"posZ":-9.500001,"rotX":-0.00000470936448,"rotY":179.988846,"rotZ":-2.2728679e-7,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Distillation Alchimique (amÃ©lioration)","Description":"Fiche scriptÃ©e par Chr1Z -  Cliquez droit pour les options d'affichage","GMNotes":"{\n  \"id\": \"09040-c\",\n  \"type\": \"UpgradeSheet\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":556003,"SidewaysCard":false,"CustomDeck":{"5560":{"FaceURL":"https://i.imgur.com/EnwxHBL.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/1821167093099748718/F92B9C3E0F282CBECC5AE90DD19E246A21B83E31/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"-- Customizable Cards: Armure du chasseur\r\n-- by Chr1Z\r\n-- Traduction par Omen\r\ninformation = {\r\n    version = \"1.7\",\r\n    last_updated = \"12.10.2022\"\r\n}\r\n\r\n-- Color information for buttons\r\nboxSize = 40\r\n\r\n-- static values\r\nx_1         = -0.985\r\nx_offset    = 0.075\r\ny_visible   = 0.25\r\ny_invisible = -0.5\r\n\r\n-- z-values (lines on the sheet)\r\nposZ = {\r\n    -0.9,\r\n    -0.565,\r\n    -0.330,\r\n    0.008,\r\n    0.232,\r\n    0.46,\r\n    0.90\r\n}\r\n\r\n-- box setup (amount of boxes per line and amount of marked boxes in that line)\r\nexistingBoxes = { 1, 1, 1, 1, 2, 4, 5 }\r\n\r\n\r\ninputBoxes = {}\r\n\r\n-- override 'marked boxes' for debugging ('all' or 'none')\r\nmarkDEBUG = \"\"\r\n\r\n-- save state when going into bags / decks\r\nfunction onDestroy() self.script_state = onSave() end\r\n\r\nfunction onSave() return JSON.encode({ markedBoxes, inputValues }) end\r\n\r\n-- Startup procedure\r\nfunction onLoad(saved_data)\r\n    if saved_data ~= \"\" and markDEBUG == \"\" then\r\n        local loaded_data = JSON.decode(saved_data)\r\n        markedBoxes = loaded_data[1]\r\n        inputValues = loaded_data[2]\r\n    else\r\n        markedBoxes = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }\r\n        inputValues = { \"\", \"\", \"\", \"\", \"\" }\r\n    end\r\n\r\n    makeData()\r\n    createButtonsAndBoxes()\r\n\r\n\r\n    self.addContextMenuItem(\"Ãchelle: normale\", function() self.setScale({ 1, 1, 1 }) end)\r\n    self.addContextMenuItem(\"Ãchelle: double\", function() self.setScale({ 2, 1, 2 }) end)\r\n    self.addContextMenuItem(\"Ãchelle: triple\", function() self.setScale({ 3, 1, 3 }) end)\r\nend\r\n\r\nfunction updateState(markedBoxesNew)\r\n    if markedBoxesNew then markedBoxes = markedBoxesNew end\r\n    makeData()\r\n    createButtonsAndBoxes()\r\nend\r\n\r\n-- create Data\r\nfunction makeData()\r\n    Data = {}\r\n    Data.checkbox = {}\r\n    Data.textbox = {}\r\n\r\n    -- repeat this for each entry (= line) in existingBoxes\r\n    local totalCount = 0\r\n    for i = 1, #existingBoxes do\r\n        -- repeat this for each checkbox per line\r\n        for j = 1, existingBoxes[i] do\r\n            totalCount                      = totalCount + 1\r\n            Data.checkbox[totalCount]       = {}\r\n            Data.checkbox[totalCount].pos   = {}\r\n            Data.checkbox[totalCount].pos.x = x_1 + j * x_offset\r\n            Data.checkbox[totalCount].pos.z = posZ[i]\r\n            Data.checkbox[totalCount].row   = i\r\n\r\n            if (markDEBUG == \"all\") or (markedBoxes[i] >= j and markDEBUG ~= \"none\") then\r\n                Data.checkbox[totalCount].pos.y = y_visible\r\n                Data.checkbox[totalCount].state = true\r\n            else\r\n                Data.checkbox[totalCount].pos.y = y_invisible\r\n                Data.checkbox[totalCount].state = false\r\n            end\r\n        end\r\n    end\r\n\r\n    -- repeat this for each entry (= line) in inputBoxes\r\n    local totalCount = 0\r\n    for i = 1, #inputBoxes do\r\n        -- repeat this for each textbox per line\r\n        for j = 1, inputBoxes[i] do\r\n            totalCount                     = totalCount + 1\r\n            Data.textbox[totalCount]       = {}\r\n            Data.textbox[totalCount].pos   = inputPos[totalCount]\r\n            Data.textbox[totalCount].width = inputWidth[totalCount]\r\n            Data.textbox[totalCount].value = inputValues[totalCount]\r\n        end\r\n    end\r\nend\r\n\r\n-- checks or unchecks the given box\r\nfunction click_checkbox(tableIndex)\r\n    local row = Data.checkbox[tableIndex].row\r\n\r\n    if Data.checkbox[tableIndex].state == true then\r\n        Data.checkbox[tableIndex].pos.y = y_invisible\r\n        Data.checkbox[tableIndex].state = false\r\n\r\n        markedBoxes[row] = markedBoxes[row] - 1\r\n    else\r\n        Data.checkbox[tableIndex].pos.y = y_visible\r\n        Data.checkbox[tableIndex].state = true\r\n\r\n        markedBoxes[row] = markedBoxes[row] + 1\r\n    end\r\n\r\n    self.editButton({\r\n        index = tableIndex - 1,\r\n        position = Data.checkbox[tableIndex].pos\r\n    })\r\nend\r\n\r\n-- updates saved value for given text box\r\nfunction click_textbox(i, value, selected)\r\n    if selected == false then\r\n        inputValues[i] = value\r\n    end\r\nend\r\n\r\nfunction createButtonsAndBoxes()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n\r\n    for i, box_data in ipairs(Data.checkbox) do\r\n        local funcName = \"checkbox\" .. i\r\n        local func = function() click_checkbox(i) end\r\n        self.setVar(funcName, func)\r\n\r\n        self.createButton({\r\n            click_function = funcName,\r\n            function_owner = self,\r\n            position       = box_data.pos,\r\n            height         = boxSize,\r\n            width          = boxSize,\r\n            font_size      = box_data.size,\r\n            scale          = { 1, 1, 1 },\r\n            color          = { 0, 0, 0 },\r\n            font_color     = { 0, 0, 0 }\r\n        })\r\n    end\r\n\r\n    for i, box_data in ipairs(Data.textbox) do\r\n        local funcName = \"textbox\" .. i\r\n        local func = function(_, _, val, sel) click_textbox(i, val, sel) end\r\n        self.setVar(funcName, func)\r\n\r\n        self.createInput({\r\n            input_function = funcName,\r\n            function_owner = self,\r\n            label          = \"Click to type\",\r\n            alignment      = 2,\r\n            position       = box_data.pos,\r\n            scale          = buttonScale,\r\n            width          = box_data.width,\r\n            height         = (inputFontsize * 1) + 24,\r\n            font_size      = inputFontsize,\r\n            color          = \"White\",\r\n            font_color     = buttonFontColor,\r\n            value          = box_data.value\r\n        })\r\n    end\r\nend","LuaScriptState":"[[0,0,0,0,0,0,0,0,0,0],[\"\",\"\",\"\",\"\",\"\"]]","XmlUI":""},{"GUID":"9db000","Name":"Card","Transform":{"posX":84.00002,"posY":0.9936065,"posZ":-9.499973,"rotX":-0.000004861866,"rotY":179.989441,"rotZ":1.972914e-7,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"TÃ©moignage accablant (amÃ©lioration)","Description":"Fiche scriptÃ©e par Chr1Z -  Cliquez droit pour les options d'affichage","GMNotes":"{\n  \"id\": \"09059-c\",\n  \"type\": \"UpgradeSheet\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":556006,"SidewaysCard":false,"CustomDeck":{"5560":{"FaceURL":"https://i.imgur.com/EnwxHBL.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/1821167093099748718/F92B9C3E0F282CBECC5AE90DD19E246A21B83E31/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"-- Customizable Cards: TÃ©moignage accablant\r\n-- by Chr1Z\r\n-- Traduction et adaptation par Omen\r\ninformation = {\r\n    version = \"1.7\",\r\n    last_updated = \"12.10.2022\"\r\n}\r\n\r\n-- Color information for buttons\r\nboxSize = 40\r\n\r\n-- static values\r\nx_1         = -0.9775\r\nx_offset    = 0.075\r\ny_visible   = 0.25\r\ny_invisible = -0.5\r\n\r\n-- z-values (lines on the sheet)\r\nposZ = {\r\n    -0.935,\r\n    -0.525,\r\n    -0.205,\r\n    0.01,\r\n    0.428,\r\n    0.842\r\n}\r\n\r\n-- box setup (amount of boxes per line and amount of marked boxes in that line)\r\nexistingBoxes = { 1, 2, 2, 3, 3, 4 }\r\n\r\n\r\ninputBoxes = {}\r\n\r\n-- override 'marked boxes' for debugging ('all' or 'none')\r\nmarkDEBUG = \"\"\r\n\r\n-- save state when going into bags / decks\r\nfunction onDestroy() self.script_state = onSave() end\r\n\r\nfunction onSave() return JSON.encode({ markedBoxes, inputValues }) end\r\n\r\n-- Startup procedure\r\nfunction onLoad(saved_data)\r\n    if saved_data ~= \"\" and markDEBUG == \"\" then\r\n        local loaded_data = JSON.decode(saved_data)\r\n        markedBoxes = loaded_data[1]\r\n        inputValues = loaded_data[2]\r\n    else\r\n        markedBoxes = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }\r\n        inputValues = { \"\", \"\", \"\", \"\", \"\" }\r\n    end\r\n\r\n    makeData()\r\n    createButtonsAndBoxes()\r\n\r\n\r\n    self.addContextMenuItem(\"Ãchelle: normale\", function() self.setScale({ 1, 1, 1 }) end)\r\n    self.addContextMenuItem(\"Ãchelle: double\", function() self.setScale({ 2, 1, 2 }) end)\r\n    self.addContextMenuItem(\"Ãchelle: triple\", function() self.setScale({ 3, 1, 3 }) end)\r\nend\r\n\r\nfunction updateState(markedBoxesNew)\r\n    if markedBoxesNew then markedBoxes = markedBoxesNew end\r\n    makeData()\r\n    createButtonsAndBoxes()\r\nend\r\n\r\n-- create Data\r\nfunction makeData()\r\n    Data = {}\r\n    Data.checkbox = {}\r\n    Data.textbox = {}\r\n\r\n    -- repeat this for each entry (= line) in existingBoxes\r\n    local totalCount = 0\r\n    for i = 1, #existingBoxes do\r\n        -- repeat this for each checkbox per line\r\n        for j = 1, existingBoxes[i] do\r\n            totalCount                      = totalCount + 1\r\n            Data.checkbox[totalCount]       = {}\r\n            Data.checkbox[totalCount].pos   = {}\r\n            Data.checkbox[totalCount].pos.x = x_1 + j * x_offset\r\n            Data.checkbox[totalCount].pos.z = posZ[i]\r\n            Data.checkbox[totalCount].row   = i\r\n\r\n            if (markDEBUG == \"all\") or (markedBoxes[i] >= j and markDEBUG ~= \"none\") then\r\n                Data.checkbox[totalCount].pos.y = y_visible\r\n                Data.checkbox[totalCount].state = true\r\n            else\r\n                Data.checkbox[totalCount].pos.y = y_invisible\r\n                Data.checkbox[totalCount].state = false\r\n            end\r\n        end\r\n    end\r\n\r\n    -- repeat this for each entry (= line) in inputBoxes\r\n    local totalCount = 0\r\n    for i = 1, #inputBoxes do\r\n        -- repeat this for each textbox per line\r\n        for j = 1, inputBoxes[i] do\r\n            totalCount                     = totalCount + 1\r\n            Data.textbox[totalCount]       = {}\r\n            Data.textbox[totalCount].pos   = inputPos[totalCount]\r\n            Data.textbox[totalCount].width = inputWidth[totalCount]\r\n            Data.textbox[totalCount].value = inputValues[totalCount]\r\n        end\r\n    end\r\nend\r\n\r\n-- checks or unchecks the given box\r\nfunction click_checkbox(tableIndex)\r\n    local row = Data.checkbox[tableIndex].row\r\n\r\n    if Data.checkbox[tableIndex].state == true then\r\n        Data.checkbox[tableIndex].pos.y = y_invisible\r\n        Data.checkbox[tableIndex].state = false\r\n\r\n        markedBoxes[row] = markedBoxes[row] - 1\r\n    else\r\n        Data.checkbox[tableIndex].pos.y = y_visible\r\n        Data.checkbox[tableIndex].state = true\r\n\r\n        markedBoxes[row] = markedBoxes[row] + 1\r\n    end\r\n\r\n    self.editButton({\r\n        index = tableIndex - 1,\r\n        position = Data.checkbox[tableIndex].pos\r\n    })\r\nend\r\n\r\n-- updates saved value for given text box\r\nfunction click_textbox(i, value, selected)\r\n    if selected == false then\r\n        inputValues[i] = value\r\n    end\r\nend\r\n\r\nfunction createButtonsAndBoxes()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n\r\n    for i, box_data in ipairs(Data.checkbox) do\r\n        local funcName = \"checkbox\" .. i\r\n        local func = function() click_checkbox(i) end\r\n        self.setVar(funcName, func)\r\n\r\n        self.createButton({\r\n            click_function = funcName,\r\n            function_owner = self,\r\n            position       = box_data.pos,\r\n            height         = boxSize,\r\n            width          = boxSize,\r\n            font_size      = box_data.size,\r\n            scale          = { 1, 1, 1 },\r\n            color          = { 0, 0, 0 },\r\n            font_color     = { 0, 0, 0 }\r\n        })\r\n    end\r\n\r\n    for i, box_data in ipairs(Data.textbox) do\r\n        local funcName = \"textbox\" .. i\r\n        local func = function(_, _, val, sel) click_textbox(i, val, sel) end\r\n        self.setVar(funcName, func)\r\n\r\n        self.createInput({\r\n            input_function = funcName,\r\n            function_owner = self,\r\n            label          = \"Click to type\",\r\n            alignment      = 2,\r\n            position       = box_data.pos,\r\n            scale          = buttonScale,\r\n            width          = box_data.width,\r\n            height         = (inputFontsize * 1) + 24,\r\n            font_size      = inputFontsize,\r\n            color          = \"White\",\r\n            font_color     = buttonFontColor,\r\n            value          = box_data.value\r\n        })\r\n    end\r\nend","LuaScriptState":"[[0,0,0,0,0,0,0,0,0,0],[\"\",\"\",\"\",\"\",\"\"]]","XmlUI":""},{"GUID":"c614a8","Name":"Card","Transform":{"posX":74.0000153,"posY":0.993606567,"posZ":-9.499973,"rotX":-0.00000500199531,"rotY":179.998383,"rotZ":4.27423856e-7,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Modfication sur mesures (amÃ©lioration)","Description":"Fiche scriptÃ©e par Chr1Z -  Cliquez droit pour les options d'affichage","GMNotes":"{\n  \"id\": \"09023-c\",\n  \"type\": \"UpgradeSheet\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":556002,"SidewaysCard":false,"CustomDeck":{"5560":{"FaceURL":"https://i.imgur.com/EnwxHBL.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/1821167093099748718/F92B9C3E0F282CBECC5AE90DD19E246A21B83E31/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"-- Customizable Cards: Modification sur mesure\r\n-- by Chr1Z\r\n-- Traduction par Omen\r\ninformation = {\r\n    version = \"1.7\",\r\n    last_updated = \"12.10.2022\"\r\n}\r\n\r\n-- Color information for buttons\r\nboxSize = 40\r\n\r\n-- static values\r\nx_1         = -0.965\r\nx_offset    = 0.075\r\ny_visible   = 0.25\r\ny_invisible = -0.5\r\n\r\n-- z-values (lines on the sheet)\r\nposZ = {\r\n    -0.892,\r\n    -0.450,\r\n    -0.220,\r\n    0.12,\r\n    0.55,\r\n    0.990\r\n}\r\n\r\n-- box setup (amount of boxes per line and amount of marked boxes in that line)\r\nexistingBoxes = { 1, 2, 2, 3, 3, 4 }\r\ninputBoxes = {}\r\n\r\n-- override 'marked boxes' for debugging ('all' or 'none')\r\nmarkDEBUG = \"\"\r\n\r\n-- save state when going into bags / decks\r\nfunction onDestroy() self.script_state = onSave() end\r\n\r\nfunction onSave() return JSON.encode({ markedBoxes, inputValues }) end\r\n\r\n-- Startup procedure\r\nfunction onLoad(saved_data)\r\n    if saved_data ~= \"\" and markDEBUG == \"\" then\r\n        local loaded_data = JSON.decode(saved_data)\r\n        markedBoxes = loaded_data[1]\r\n        inputValues = loaded_data[2]\r\n    else\r\n        markedBoxes = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }\r\n        inputValues = { \"\", \"\", \"\", \"\", \"\" }\r\n    end\r\n\r\n    makeData()\r\n    createButtonsAndBoxes()\r\r\n    self.addContextMenuItem(\"Ãchelle: normale\", function() self.setScale({ 1, 1, 1 }) end)\r\n    self.addContextMenuItem(\"Ãchelle: double\", function() self.setScale({ 2, 1, 2 }) end)\r\n    self.addContextMenuItem(\"Ãchelle: triple\", function() self.setScale({ 3, 1, 3 }) end)\r\nend\r\n\r\nfunction updateState(markedBoxesNew)\r\n    if markedBoxesNew then markedBoxes = markedBoxesNew end\r\n    makeData()\r\n    createButtonsAndBoxes()\r\nend\r\n\r\n-- create Data\r\nfunction makeData()\r\n    Data = {}\r\n    Data.checkbox = {}\r\n    Data.textbox = {}\r\n\r\n    -- repeat this for each entry (= line) in existingBoxes\r\n    local totalCount = 0\r\n    for i = 1, #existingBoxes do\r\n        -- repeat this for each checkbox per line\r\n        for j = 1, existingBoxes[i] do\r\n            totalCount                      = totalCount + 1\r\n            Data.checkbox[totalCount]       = {}\r\n            Data.checkbox[totalCount].pos   = {}\r\n            Data.checkbox[totalCount].pos.x = x_1 + j * x_offset\r\n            Data.checkbox[totalCount].pos.z = posZ[i]\r\n            Data.checkbox[totalCount].row   = i\r\n\r\n            if (markDEBUG == \"all\") or (markedBoxes[i] >= j and markDEBUG ~= \"none\") then\r\n                Data.checkbox[totalCount].pos.y = y_visible\r\n                Data.checkbox[totalCount].state = true\r\n            else\r\n                Data.checkbox[totalCount].pos.y = y_invisible\r\n                Data.checkbox[totalCount].state = false\r\n            end\r\n        end\r\n    end\r\n\r\n    -- repeat this for each entry (= line) in inputBoxes\r\n    local totalCount = 0\r\n    for i = 1, #inputBoxes do\r\n        -- repeat this for each textbox per line\r\n        for j = 1, inputBoxes[i] do\r\n            totalCount                     = totalCount + 1\r\n            Data.textbox[totalCount]       = {}\r\n            Data.textbox[totalCount].pos   = inputPos[totalCount]\r\n            Data.textbox[totalCount].width = inputWidth[totalCount]\r\n            Data.textbox[totalCount].value = inputValues[totalCount]\r\n        end\r\n    end\r\nend\r\n\r\n-- checks or unchecks the given box\r\nfunction click_checkbox(tableIndex)\r\n    local row = Data.checkbox[tableIndex].row\r\n\r\n    if Data.checkbox[tableIndex].state == true then\r\n        Data.checkbox[tableIndex].pos.y = y_invisible\r\n        Data.checkbox[tableIndex].state = false\r\n\r\n        markedBoxes[row] = markedBoxes[row] - 1\r\n    else\r\n        Data.checkbox[tableIndex].pos.y = y_visible\r\n        Data.checkbox[tableIndex].state = true\r\n\r\n        markedBoxes[row] = markedBoxes[row] + 1\r\n    end\r\n\r\n    self.editButton({\r\n        index = tableIndex - 1,\r\n        position = Data.checkbox[tableIndex].pos\r\n    })\r\nend\r\n\r\n-- updates saved value for given text box\r\nfunction click_textbox(i, value, selected)\r\n    if selected == false then\r\n        inputValues[i] = value\r\n    end\r\nend\r\n\r\nfunction createButtonsAndBoxes()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n\r\n    for i, box_data in ipairs(Data.checkbox) do\r\n        local funcName = \"checkbox\" .. i\r\n        local func = function() click_checkbox(i) end\r\n        self.setVar(funcName, func)\r\n\r\n        self.createButton({\r\n            click_function = funcName,\r\n            function_owner = self,\r\n            position       = box_data.pos,\r\n            height         = boxSize,\r\n            width          = boxSize,\r\n            font_size      = box_data.size,\r\n            scale          = { 1, 1, 1 },\r\n            color          = { 0, 0, 0 },\r\n            font_color     = { 0, 0, 0 }\r\n        })\r\n    end\r\n\r\n    for i, box_data in ipairs(Data.textbox) do\r\n        local funcName = \"textbox\" .. i\r\n        local func = function(_, _, val, sel) click_textbox(i, val, sel) end\r\n        self.setVar(funcName, func)\r\n\r\n        self.createInput({\r\n            input_function = funcName,\r\n            function_owner = self,\r\n            label          = \"Click to type\",\r\n            alignment      = 2,\r\n            position       = box_data.pos,\r\n            scale          = buttonScale,\r\n            width          = box_data.width,\r\n            height         = (inputFontsize * 1) + 24,\r\n            font_size      = inputFontsize,\r\n            color          = \"White\",\r\n            font_color     = buttonFontColor,\r\n            value          = box_data.value\r\n        })\r\n    end\r\nend","LuaScriptState":"[[0,0,0,0,0,0,4,0,0,0],[\"\",\"\",\"\",\"\",\"\"]]","XmlUI":""},{"GUID":"d0dcb8","Name":"Card","Transform":{"posX":71.50003,"posY":0.9936066,"posZ":-9.499957,"rotX":-0.00000486486351,"rotY":179.99852,"rotZ":1.9817027e-7,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Hache Runique (amÃ©lioration)","Description":"Fiche scriptÃ©e par Chr1Z -  Cliquez droit pour les options d'affichage","GMNotes":"{\n  \"id\": \"09022-c\",\n  \"type\": \"UpgradeSheet\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":556001,"SidewaysCard":false,"CustomDeck":{"5560":{"FaceURL":"https://i.imgur.com/EnwxHBL.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/1821167093099748718/F92B9C3E0F282CBECC5AE90DD19E246A21B83E31/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"-- Customizable Cards: Armure du chasseur\r\n-- by Chr1Z\r\n-- Traduction par Omen\r\ninformation = {\r\n    version = \"1.7\",\r\n    last_updated = \"12.10.2022\"\r\n}\r\n\r\n-- Color information for buttons\r\nboxSize = 40\r\n\r\n-- static values\r\nx_1         = -0.975\r\nx_offset    = 0.075\r\ny_visible   = 0.25\r\ny_invisible = -0.5\r\n\r\n-- z-values (lines on the sheet)\r\nposZ = {\r\n    -0.92,\r\n    -0.715,\r\n    -0.345,\r\n    0.018,\r\n    0.315,\r\n    0.67,\r\n    0.87,\r\n    1.07\r\n}\r\n\r\n-- box setup (amount of boxes per line and amount of marked boxes in that line)\r\nexistingBoxes = { 1, 1, 1, 1, 1, 3, 3, 4 }\r\n\r\n\r\ninputBoxes = {}\r\n\r\n-- override 'marked boxes' for debugging ('all' or 'none')\r\nmarkDEBUG = \"\"\r\n\r\n-- save state when going into bags / decks\r\nfunction onDestroy() self.script_state = onSave() end\r\n\r\nfunction onSave() return JSON.encode({ markedBoxes, inputValues }) end\r\n\r\n-- Startup procedure\r\nfunction onLoad(saved_data)\r\n    if saved_data ~= \"\" and markDEBUG == \"\" then\r\n        local loaded_data = JSON.decode(saved_data)\r\n        markedBoxes = loaded_data[1]\r\n        inputValues = loaded_data[2]\r\n    else\r\n        markedBoxes = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }\r\n        inputValues = { \"\", \"\", \"\", \"\", \"\" }\r\n    end\r\n\r\n    makeData()\r\n    createButtonsAndBoxes()\r\n\r\n\r\n    self.addContextMenuItem(\"Ãchelle: normale\", function() self.setScale({ 1, 1, 1 }) end)\r\n    self.addContextMenuItem(\"Ãchelle: double\", function() self.setScale({ 2, 1, 2 }) end)\r\n    self.addContextMenuItem(\"Ãchelle: triple\", function() self.setScale({ 3, 1, 3 }) end)\r\nend\r\n\r\nfunction updateState(markedBoxesNew)\r\n    if markedBoxesNew then markedBoxes = markedBoxesNew end\r\n    makeData()\r\n    createButtonsAndBoxes()\r\nend\r\n\r\n-- create Data\r\nfunction makeData()\r\n    Data = {}\r\n    Data.checkbox = {}\r\n    Data.textbox = {}\r\n\r\n    -- repeat this for each entry (= line) in existingBoxes\r\n    local totalCount = 0\r\n    for i = 1, #existingBoxes do\r\n        -- repeat this for each checkbox per line\r\n        for j = 1, existingBoxes[i] do\r\n            totalCount                      = totalCount + 1\r\n            Data.checkbox[totalCount]       = {}\r\n            Data.checkbox[totalCount].pos   = {}\r\n            Data.checkbox[totalCount].pos.x = x_1 + j * x_offset\r\n            Data.checkbox[totalCount].pos.z = posZ[i]\r\n            Data.checkbox[totalCount].row   = i\r\n\r\n            if (markDEBUG == \"all\") or (markedBoxes[i] >= j and markDEBUG ~= \"none\") then\r\n                Data.checkbox[totalCount].pos.y = y_visible\r\n                Data.checkbox[totalCount].state = true\r\n            else\r\n                Data.checkbox[totalCount].pos.y = y_invisible\r\n                Data.checkbox[totalCount].state = false\r\n            end\r\n        end\r\n    end\r\n\r\n    -- repeat this for each entry (= line) in inputBoxes\r\n    local totalCount = 0\r\n    for i = 1, #inputBoxes do\r\n        -- repeat this for each textbox per line\r\n        for j = 1, inputBoxes[i] do\r\n            totalCount                     = totalCount + 1\r\n            Data.textbox[totalCount]       = {}\r\n            Data.textbox[totalCount].pos   = inputPos[totalCount]\r\n            Data.textbox[totalCount].width = inputWidth[totalCount]\r\n            Data.textbox[totalCount].value = inputValues[totalCount]\r\n        end\r\n    end\r\nend\r\n\r\n-- checks or unchecks the given box\r\nfunction click_checkbox(tableIndex)\r\n    local row = Data.checkbox[tableIndex].row\r\n\r\n    if Data.checkbox[tableIndex].state == true then\r\n        Data.checkbox[tableIndex].pos.y = y_invisible\r\n        Data.checkbox[tableIndex].state = false\r\n\r\n        markedBoxes[row] = markedBoxes[row] - 1\r\n    else\r\n        Data.checkbox[tableIndex].pos.y = y_visible\r\n        Data.checkbox[tableIndex].state = true\r\n\r\n        markedBoxes[row] = markedBoxes[row] + 1\r\n    end\r\n\r\n    self.editButton({\r\n        index = tableIndex - 1,\r\n        position = Data.checkbox[tableIndex].pos\r\n    })\r\nend\r\n\r\n-- updates saved value for given text box\r\nfunction click_textbox(i, value, selected)\r\n    if selected == false then\r\n        inputValues[i] = value\r\n    end\r\nend\r\n\r\nfunction createButtonsAndBoxes()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n\r\n    for i, box_data in ipairs(Data.checkbox) do\r\n        local funcName = \"checkbox\" .. i\r\n        local func = function() click_checkbox(i) end\r\n        self.setVar(funcName, func)\r\n\r\n        self.createButton({\r\n            click_function = funcName,\r\n            function_owner = self,\r\n            position       = box_data.pos,\r\n            height         = boxSize,\r\n            width          = boxSize,\r\n            font_size      = box_data.size,\r\n            scale          = { 1, 1, 1 },\r\n            color          = { 0, 0, 0 },\r\n            font_color     = { 0, 0, 0 }\r\n        })\r\n    end\r\n\r\n    for i, box_data in ipairs(Data.textbox) do\r\n        local funcName = \"textbox\" .. i\r\n        local func = function(_, _, val, sel) click_textbox(i, val, sel) end\r\n        self.setVar(funcName, func)\r\n\r\n        self.createInput({\r\n            input_function = funcName,\r\n            function_owner = self,\r\n            label          = \"Click to type\",\r\n            alignment      = 2,\r\n            position       = box_data.pos,\r\n            scale          = buttonScale,\r\n            width          = box_data.width,\r\n            height         = (inputFontsize * 1) + 24,\r\n            font_size      = inputFontsize,\r\n            color          = \"White\",\r\n            font_color     = buttonFontColor,\r\n            value          = box_data.value\r\n        })\r\n    end\r\nend","LuaScriptState":"[[0,0,0,0,0,0,0,0,0,0],[\"\",\"\",\"\",\"\",\"\"]]","XmlUI":""},{"GUID":"cc5d2a","Name":"Card","Transform":{"posX":69.00002,"posY":0.9936066,"posZ":-9.499981,"rotX":-0.0000051619827,"rotY":180.0001,"rotZ":2.97014424e-7,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Armure du chasseur (amÃ©lioration)","Description":"Fiche scriptÃ©e par Chr1Z -  Cliquez droit pour les options d'affichage","GMNotes":"{\n  \"id\": \"09021-c\",\n  \"type\": \"UpgradeSheet\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":556000,"SidewaysCard":false,"CustomDeck":{"5560":{"FaceURL":"https://i.imgur.com/EnwxHBL.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/1821167093099748718/F92B9C3E0F282CBECC5AE90DD19E246A21B83E31/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"-- Customizable Cards: Encre\r\n-- by Chr1Z\r\n-- Traduction et adaptation par Omen\r\ninformation = {\r\n    version = \"1.7\",\r\n    last_updated = \"12.10.2022\"\r\n}\r\n\r\n-- Color information for buttons\r\nboxSize = 35\r\n\r\n-- static values\r\nx_1         = -0.9625\r\nx_offset    = 0.069\r\ny_visible   = 0.25\r\ny_invisible = -0.5\r\n\r\n-- z-values (lines on the sheet)\r\nposZ = {\r\n    -0.907,\r\n    -0.582,\r\n    -0.255,\r\n    -0.0359,\r\n    0.197,\r\n    0.520,\r\n    0.955\r\n}\r\n\r\n-- box setup (amount of boxes per line and amount of marked boxes in that line)\r\nexistingBoxes = { 1, 2, 2, 2, 2, 3, 3 }\r\n\r\ninputBoxes = {}\r\n\r\n-- override 'marked boxes' for debugging ('all' or 'none')\r\nmarkDEBUG = \"\"\r\n\r\n-- save state when going into bags / decks\r\nfunction onDestroy() self.script_state = onSave() end\r\n\r\nfunction onSave() return JSON.encode({ markedBoxes, inputValues }) end\r\n\r\n-- Startup procedure\r\nfunction onLoad(saved_data)\r\n    if saved_data ~= \"\" and markDEBUG == \"\" then\r\n        local loaded_data = JSON.decode(saved_data)\r\n        markedBoxes = loaded_data[1]\r\n        inputValues = loaded_data[2]\r\n    else\r\n        markedBoxes = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }\r\n        inputValues = { \"\", \"\", \"\", \"\", \"\" }\r\n    end\r\n\r\n    makeData()\r\n    createButtonsAndBoxes()\r\n\r\n\r\n    self.addContextMenuItem(\"Ãchelle: normale\", function() self.setScale({ 1, 1, 1 }) end)\r\n    self.addContextMenuItem(\"Ãchelle: double\", function() self.setScale({ 2, 1, 2 }) end)\r\n    self.addContextMenuItem(\"Ãchelle: triple\", function() self.setScale({ 3, 1, 3 }) end)\r\nend\r\n\r\nfunction updateState(markedBoxesNew)\r\n    if markedBoxesNew then markedBoxes = markedBoxesNew end\r\n    makeData()\r\n    createButtonsAndBoxes()\r\nend\r\n\r\n-- create Data\r\nfunction makeData()\r\n    Data = {}\r\n    Data.checkbox = {}\r\n    Data.textbox = {}\r\n\r\n    -- repeat this for each entry (= line) in existingBoxes\r\n    local totalCount = 0\r\n    for i = 1, #existingBoxes do\r\n        -- repeat this for each checkbox per line\r\n        for j = 1, existingBoxes[i] do\r\n            totalCount                      = totalCount + 1\r\n            Data.checkbox[totalCount]       = {}\r\n            Data.checkbox[totalCount].pos   = {}\r\n            Data.checkbox[totalCount].pos.x = x_1 + j * x_offset\r\n            Data.checkbox[totalCount].pos.z = posZ[i]\r\n            Data.checkbox[totalCount].row   = i\r\n\r\n            if (markDEBUG == \"all\") or (markedBoxes[i] >= j and markDEBUG ~= \"none\") then\r\n                Data.checkbox[totalCount].pos.y = y_visible\r\n                Data.checkbox[totalCount].state = true\r\n            else\r\n                Data.checkbox[totalCount].pos.y = y_invisible\r\n                Data.checkbox[totalCount].state = false\r\n            end\r\n        end\r\n    end\r\n\r\n    -- repeat this for each entry (= line) in inputBoxes\r\n    local totalCount = 0\r\n    for i = 1, #inputBoxes do\r\n        -- repeat this for each textbox per line\r\n        for j = 1, inputBoxes[i] do\r\n            totalCount                     = totalCount + 1\r\n            Data.textbox[totalCount]       = {}\r\n            Data.textbox[totalCount].pos   = inputPos[totalCount]\r\n            Data.textbox[totalCount].width = inputWidth[totalCount]\r\n            Data.textbox[totalCount].value = inputValues[totalCount]\r\n        end\r\n    end\r\nend\r\n\r\n-- checks or unchecks the given box\r\nfunction click_checkbox(tableIndex)\r\n    local row = Data.checkbox[tableIndex].row\r\n\r\n    if Data.checkbox[tableIndex].state == true then\r\n        Data.checkbox[tableIndex].pos.y = y_invisible\r\n        Data.checkbox[tableIndex].state = false\r\n\r\n        markedBoxes[row] = markedBoxes[row] - 1\r\n    else\r\n        Data.checkbox[tableIndex].pos.y = y_visible\r\n        Data.checkbox[tableIndex].state = true\r\n\r\n        markedBoxes[row] = markedBoxes[row] + 1\r\n    end\r\n\r\n    self.editButton({\r\n        index = tableIndex - 1,\r\n        position = Data.checkbox[tableIndex].pos\r\n    })\r\nend\r\n\r\n-- updates saved value for given text box\r\nfunction click_textbox(i, value, selected)\r\n    if selected == false then\r\n        inputValues[i] = value\r\n    end\r\nend\r\n\r\nfunction createButtonsAndBoxes()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n\r\n    for i, box_data in ipairs(Data.checkbox) do\r\n        local funcName = \"checkbox\" .. i\r\n        local func = function() click_checkbox(i) end\r\n        self.setVar(funcName, func)\r\n\r\n        self.createButton({\r\n            click_function = funcName,\r\n            function_owner = self,\r\n            position       = box_data.pos,\r\n            height         = boxSize,\r\n            width          = boxSize,\r\n            font_size      = box_data.size,\r\n            scale          = { 1, 1, 1 },\r\n            color          = { 0, 0, 0 },\r\n            font_color     = { 0, 0, 0 }\r\n        })\r\n    end\r\n\r\n    for i, box_data in ipairs(Data.textbox) do\r\n        local funcName = \"textbox\" .. i\r\n        local func = function(_, _, val, sel) click_textbox(i, val, sel) end\r\n        self.setVar(funcName, func)\r\n\r\n        self.createInput({\r\n            input_function = funcName,\r\n            function_owner = self,\r\n            label          = \"Click to type\",\r\n            alignment      = 2,\r\n            position       = box_data.pos,\r\n            scale          = buttonScale,\r\n            width          = box_data.width,\r\n            height         = (inputFontsize * 1) + 24,\r\n            font_size      = inputFontsize,\r\n            color          = \"White\",\r\n            font_color     = buttonFontColor,\r\n            value          = box_data.value\r\n        })\r\n    end\r\nend","LuaScriptState":"[[0,0,0,0,0,0,0,0,0,0],[\"\",\"\",\"\",\"\",\"\"]]","XmlUI":""},{"GUID":"b49ed3","Name":"Card","Transform":{"posX":74.00004,"posY":0.993606865,"posZ":-12.9999533,"rotX":-0.000004935598,"rotY":179.986176,"rotZ":3.6801805e-7,"scaleX":0.9970625,"scaleY":1,"scaleZ":0.9970625},"Nickname":"Mot de Pouvoir (amÃ©lioration)","Description":"Fiche scriptÃ©e par Chr1Z -  Cliquez droit pour les options d'affichage","GMNotes":"{\n  \"id\": \"09081-c\",\n  \"type\": \"UpgradeSheet\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":556011,"SidewaysCard":false,"CustomDeck":{"5560":{"FaceURL":"https://i.imgur.com/EnwxHBL.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/1821167093099748718/F92B9C3E0F282CBECC5AE90DD19E246A21B83E31/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"-- Customizable Cards: Encre\r\n-- by Chr1Z\r\n-- Traduction et adaptation par Omen\r\ninformation = {\r\n    version = \"1.7\",\r\n    last_updated = \"12.10.2022\"\r\n}\r\n\r\n-- Color information for buttons\r\nboxSize = 27\r\n\r\n-- static values\r\nx_1         = -0.968\r\nx_offset    = 0.0585\r\ny_visible   = 0.25\r\ny_invisible = -0.5\r\n\r\n-- z-values (lines on the sheet)\r\nposZ = {\r\n    -0.895,\r\n    -0.6285,\r\n    -0.2975,\r\n    -0.031,\r\n    0.305,\r\n    0.485,\r\n    0.750,\r\n    0.925\r\n}\r\n\r\n-- box setup (amount of boxes per line and amount of marked boxes in that line)\r\nexistingBoxes = { 1, 1, 1, 1, 2, 3, 3, 3 }\r\n\r\ninputBoxes = {}\r\n\r\n-- override 'marked boxes' for debugging ('all' or 'none')\r\nmarkDEBUG = \"\"\r\n\r\n-- save state when going into bags / decks\r\nfunction onDestroy() self.script_state = onSave() end\r\n\r\nfunction onSave() return JSON.encode({ markedBoxes, inputValues }) end\r\n\r\n-- Startup procedure\r\nfunction onLoad(saved_data)\r\n    if saved_data ~= \"\" and markDEBUG == \"\" then\r\n        local loaded_data = JSON.decode(saved_data)\r\n        markedBoxes = loaded_data[1]\r\n        inputValues = loaded_data[2]\r\n    else\r\n        markedBoxes = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }\r\n        inputValues = { \"\", \"\", \"\", \"\", \"\" }\r\n    end\r\n\r\n    makeData()\r\n    createButtonsAndBoxes()\r\n\r\n\r\n    self.addContextMenuItem(\"Ãchelle: normale\", function() self.setScale({ 1, 1, 1 }) end)\r\n    self.addContextMenuItem(\"Ãchelle: double\", function() self.setScale({ 2, 1, 2 }) end)\r\n    self.addContextMenuItem(\"Ãchelle: triple\", function() self.setScale({ 3, 1, 3 }) end)\r\nend\r\n\r\nfunction updateState(markedBoxesNew)\r\n    if markedBoxesNew then markedBoxes = markedBoxesNew end\r\n    makeData()\r\n    createButtonsAndBoxes()\r\nend\r\n\r\n-- create Data\r\nfunction makeData()\r\n    Data = {}\r\n    Data.checkbox = {}\r\n    Data.textbox = {}\r\n\r\n    -- repeat this for each entry (= line) in existingBoxes\r\n    local totalCount = 0\r\n    for i = 1, #existingBoxes do\r\n        -- repeat this for each checkbox per line\r\n        for j = 1, existingBoxes[i] do\r\n            totalCount                      = totalCount + 1\r\n            Data.checkbox[totalCount]       = {}\r\n            Data.checkbox[totalCount].pos   = {}\r\n            Data.checkbox[totalCount].pos.x = x_1 + j * x_offset\r\n            Data.checkbox[totalCount].pos.z = posZ[i]\r\n            Data.checkbox[totalCount].row   = i\r\n\r\n            if (markDEBUG == \"all\") or (markedBoxes[i] >= j and markDEBUG ~= \"none\") then\r\n                Data.checkbox[totalCount].pos.y = y_visible\r\n                Data.checkbox[totalCount].state = true\r\n            else\r\n                Data.checkbox[totalCount].pos.y = y_invisible\r\n                Data.checkbox[totalCount].state = false\r\n            end\r\n        end\r\n    end\r\n\r\n    -- repeat this for each entry (= line) in inputBoxes\r\n    local totalCount = 0\r\n    for i = 1, #inputBoxes do\r\n        -- repeat this for each textbox per line\r\n        for j = 1, inputBoxes[i] do\r\n            totalCount                     = totalCount + 1\r\n            Data.textbox[totalCount]       = {}\r\n            Data.textbox[totalCount].pos   = inputPos[totalCount]\r\n            Data.textbox[totalCount].width = inputWidth[totalCount]\r\n            Data.textbox[totalCount].value = inputValues[totalCount]\r\n        end\r\n    end\r\nend\r\n\r\n-- checks or unchecks the given box\r\nfunction click_checkbox(tableIndex)\r\n    local row = Data.checkbox[tableIndex].row\r\n\r\n    if Data.checkbox[tableIndex].state == true then\r\n        Data.checkbox[tableIndex].pos.y = y_invisible\r\n        Data.checkbox[tableIndex].state = false\r\n\r\n        markedBoxes[row] = markedBoxes[row] - 1\r\n    else\r\n        Data.checkbox[tableIndex].pos.y = y_visible\r\n        Data.checkbox[tableIndex].state = true\r\n\r\n        markedBoxes[row] = markedBoxes[row] + 1\r\n    end\r\n\r\n    self.editButton({\r\n        index = tableIndex - 1,\r\n        position = Data.checkbox[tableIndex].pos\r\n    })\r\nend\r\n\r\n-- updates saved value for given text box\r\nfunction click_textbox(i, value, selected)\r\n    if selected == false then\r\n        inputValues[i] = value\r\n    end\r\nend\r\n\r\nfunction createButtonsAndBoxes()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n\r\n    for i, box_data in ipairs(Data.checkbox) do\r\n        local funcName = \"checkbox\" .. i\r\n        local func = function() click_checkbox(i) end\r\n        self.setVar(funcName, func)\r\n\r\n        self.createButton({\r\n            click_function = funcName,\r\n            function_owner = self,\r\n            position       = box_data.pos,\r\n            height         = boxSize,\r\n            width          = boxSize,\r\n            font_size      = box_data.size,\r\n            scale          = { 1, 1, 1 },\r\n            color          = { 0, 0, 0 },\r\n            font_color     = { 0, 0, 0 }\r\n        })\r\n    end\r\n\r\n    for i, box_data in ipairs(Data.textbox) do\r\n        local funcName = \"textbox\" .. i\r\n        local func = function(_, _, val, sel) click_textbox(i, val, sel) end\r\n        self.setVar(funcName, func)\r\n\r\n        self.createInput({\r\n            input_function = funcName,\r\n            function_owner = self,\r\n            label          = \"Click to type\",\r\n            alignment      = 2,\r\n            position       = box_data.pos,\r\n            scale          = buttonScale,\r\n            width          = box_data.width,\r\n            height         = (inputFontsize * 1) + 24,\r\n            font_size      = inputFontsize,\r\n            color          = \"White\",\r\n            font_color     = buttonFontColor,\r\n            value          = box_data.value\r\n        })\r\n    end\r\nend","LuaScriptState":"[[0,0,0,0,0,0,0,0,0,0],[\"\",\"\",\"\",\"\",\"\"]]","XmlUI":""},{"GUID":"94df3d","Name":"Card","Transform":{"posX":81.50004,"posY":0.9936068,"posZ":-12.9999914,"rotX":-0.00000507163077,"rotY":179.989365,"rotZ":4.2493258e-7,"scaleX":0.9970625,"scaleY":1,"scaleZ":0.9970625},"Nickname":"PiÃ¨ge Rudimentaire (amÃ©lioration)","Description":"Fiche scriptÃ©e par Chr1Z -  Cliquez droit pour les options d'affichage","GMNotes":"{\n  \"id\": \"09100-c\",\n  \"type\": \"UpgradeSheet\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":556013,"SidewaysCard":false,"CustomDeck":{"5560":{"FaceURL":"https://i.imgur.com/EnwxHBL.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/1821167093099748718/F92B9C3E0F282CBECC5AE90DD19E246A21B83E31/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"-- Customizable Cards: Outil\r\n-- Traduction et adaptation par Omen\r\ninformation = {\r\n    version = \"1.7\",\r\n    last_updated = \"12.10.2022\"\r\n}\r\n\r\n-- Color information for buttons\r\nboxSize = 35\r\n\r\n-- static values\r\nx_1         = -0.98\r\nx_offset    = 0.07\r\ny_visible   = 0.25\r\ny_invisible = -0.5\r\n\r\n-- z-values (lines on the sheet)\r\nposZ = {\r\n    -0.906,\r\n    -0.60,\r\n    -0.285,\r\n    0.02,\r\n    0.33,\r\n    0.64,\r\n    0.95\r\n}\r\n\r\n-- box setup (amount of boxes per line and amount of marked boxes in that line)\r\nexistingBoxes = { 1, 1, 2, 2, 2, 3, 4 }\r\n\r\n\r\n\r\ninputBoxes = {}\r\n\r\n-- override 'marked boxes' for debugging ('all' or 'none')\r\nmarkDEBUG = \"\"\r\n\r\n-- save state when going into bags / decks\r\nfunction onDestroy() self.script_state = onSave() end\r\n\r\nfunction onSave() return JSON.encode({ markedBoxes, inputValues }) end\r\n\r\n-- Startup procedure\r\nfunction onLoad(saved_data)\r\n    if saved_data ~= \"\" and markDEBUG == \"\" then\r\n        local loaded_data = JSON.decode(saved_data)\r\n        markedBoxes = loaded_data[1]\r\n        inputValues = loaded_data[2]\r\n    else\r\n        markedBoxes = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }\r\n        inputValues = { \"\", \"\", \"\", \"\", \"\" }\r\n    end\r\n\r\n    makeData()\r\n    createButtonsAndBoxes()\r\n\r\n\r\n    self.addContextMenuItem(\"Ãchelle: normale\", function() self.setScale({ 1, 1, 1 }) end)\r\n    self.addContextMenuItem(\"Ãchelle: double\", function() self.setScale({ 2, 1, 2 }) end)\r\n    self.addContextMenuItem(\"Ãchelle: triple\", function() self.setScale({ 3, 1, 3 }) end)\r\nend\r\n\r\nfunction updateState(markedBoxesNew)\r\n    if markedBoxesNew then markedBoxes = markedBoxesNew end\r\n    makeData()\r\n    createButtonsAndBoxes()\r\nend\r\n\r\n-- create Data\r\nfunction makeData()\r\n    Data = {}\r\n    Data.checkbox = {}\r\n    Data.textbox = {}\r\n\r\n    -- repeat this for each entry (= line) in existingBoxes\r\n    local totalCount = 0\r\n    for i = 1, #existingBoxes do\r\n        -- repeat this for each checkbox per line\r\n        for j = 1, existingBoxes[i] do\r\n            totalCount                      = totalCount + 1\r\n            Data.checkbox[totalCount]       = {}\r\n            Data.checkbox[totalCount].pos   = {}\r\n            Data.checkbox[totalCount].pos.x = x_1 + j * x_offset\r\n            Data.checkbox[totalCount].pos.z = posZ[i]\r\n            Data.checkbox[totalCount].row   = i\r\n\r\n            if (markDEBUG == \"all\") or (markedBoxes[i] >= j and markDEBUG ~= \"none\") then\r\n                Data.checkbox[totalCount].pos.y = y_visible\r\n                Data.checkbox[totalCount].state = true\r\n            else\r\n                Data.checkbox[totalCount].pos.y = y_invisible\r\n                Data.checkbox[totalCount].state = false\r\n            end\r\n        end\r\n    end\r\n\r\n    -- repeat this for each entry (= line) in inputBoxes\r\n    local totalCount = 0\r\n    for i = 1, #inputBoxes do\r\n        -- repeat this for each textbox per line\r\n        for j = 1, inputBoxes[i] do\r\n            totalCount                     = totalCount + 1\r\n            Data.textbox[totalCount]       = {}\r\n            Data.textbox[totalCount].pos   = inputPos[totalCount]\r\n            Data.textbox[totalCount].width = inputWidth[totalCount]\r\n            Data.textbox[totalCount].value = inputValues[totalCount]\r\n        end\r\n    end\r\nend\r\n\r\n-- checks or unchecks the given box\r\nfunction click_checkbox(tableIndex)\r\n    local row = Data.checkbox[tableIndex].row\r\n\r\n    if Data.checkbox[tableIndex].state == true then\r\n        Data.checkbox[tableIndex].pos.y = y_invisible\r\n        Data.checkbox[tableIndex].state = false\r\n\r\n        markedBoxes[row] = markedBoxes[row] - 1\r\n    else\r\n        Data.checkbox[tableIndex].pos.y = y_visible\r\n        Data.checkbox[tableIndex].state = true\r\n\r\n        markedBoxes[row] = markedBoxes[row] + 1\r\n    end\r\n\r\n    self.editButton({\r\n        index = tableIndex - 1,\r\n        position = Data.checkbox[tableIndex].pos\r\n    })\r\nend\r\n\r\n-- updates saved value for given text box\r\nfunction click_textbox(i, value, selected)\r\n    if selected == false then\r\n        inputValues[i] = value\r\n    end\r\nend\r\n\r\nfunction createButtonsAndBoxes()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n\r\n    for i, box_data in ipairs(Data.checkbox) do\r\n        local funcName = \"checkbox\" .. i\r\n        local func = function() click_checkbox(i) end\r\n        self.setVar(funcName, func)\r\n\r\n        self.createButton({\r\n            click_function = funcName,\r\n            function_owner = self,\r\n            position       = box_data.pos,\r\n            height         = boxSize,\r\n            width          = boxSize,\r\n            font_size      = box_data.size,\r\n            scale          = { 1, 1, 1 },\r\n            color          = { 0, 0, 0 },\r\n            font_color     = { 0, 0, 0 }\r\n        })\r\n    end\r\n\r\n    for i, box_data in ipairs(Data.textbox) do\r\n        local funcName = \"textbox\" .. i\r\n        local func = function(_, _, val, sel) click_textbox(i, val, sel) end\r\n        self.setVar(funcName, func)\r\n\r\n        self.createInput({\r\n            input_function = funcName,\r\n            function_owner = self,\r\n            label          = \"Click to type\",\r\n            alignment      = 2,\r\n            position       = box_data.pos,\r\n            scale          = buttonScale,\r\n            width          = box_data.width,\r\n            height         = (inputFontsize * 1) + 24,\r\n            font_size      = inputFontsize,\r\n            color          = \"White\",\r\n            font_color     = buttonFontColor,\r\n            value          = box_data.value\r\n        })\r\n    end\r\nend","LuaScriptState":"[[0,0,0,0,0,0,0,0,0,0],[\"\",\"\",\"\",\"\",\"\"]]","XmlUI":""},{"GUID":"7dba99","Name":"Card","Transform":{"posX":79.00003,"posY":0.9936068,"posZ":-12.99997,"rotX":-0.00000509122947,"rotY":179.9921,"rotZ":9.272464e-7,"scaleX":0.9970625,"scaleY":1,"scaleZ":0.9970625},"Nickname":"Outil Multifonctions (amÃ©lioration)","Description":"Fiche scriptÃ©e par Chr1Z -  Cliquez droit pour les options d'affichage","GMNotes":"{\n  \"id\": \"09099-c\",\n  \"type\": \"UpgradeSheet\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":556012,"SidewaysCard":false,"CustomDeck":{"5560":{"FaceURL":"https://i.imgur.com/EnwxHBL.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/1821167093099748718/F92B9C3E0F282CBECC5AE90DD19E246A21B83E31/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"-- Customizable Cards: Outil\r\n-- Traduction et adaptation par Omen\r\ninformation = {\r\n    version = \"1.7\",\r\n    last_updated = \"12.10.2022\"\r\n}\r\n\r\n-- Color information for buttons\r\nboxSize = 35\r\n\r\n-- static values\r\nx_1         = -0.95\r\nx_offset    = 0.067\r\ny_visible   = 0.25\r\ny_invisible = -0.5\r\n\r\n-- z-values (lines on the sheet)\r\nposZ = {\r\n    -0.915,\r\n    -0.60,\r\n    -0.30,\r\n    0.015,\r\n    0.322,\r\n    0.626,\r\n    0.850\r\n}\r\n\r\n-- box setup (amount of boxes per line and amount of marked boxes in that line)\r\nexistingBoxes = { 1, 1, 2, 2, 2, 3, 4 }\r\n\r\n\r\ninputBoxes = {}\r\n\r\n-- override 'marked boxes' for debugging ('all' or 'none')\r\nmarkDEBUG = \"\"\r\n\r\n-- save state when going into bags / decks\r\nfunction onDestroy() self.script_state = onSave() end\r\n\r\nfunction onSave() return JSON.encode({ markedBoxes, inputValues }) end\r\n\r\n-- Startup procedure\r\nfunction onLoad(saved_data)\r\n    if saved_data ~= \"\" and markDEBUG == \"\" then\r\n        local loaded_data = JSON.decode(saved_data)\r\n        markedBoxes = loaded_data[1]\r\n        inputValues = loaded_data[2]\r\n    else\r\n        markedBoxes = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }\r\n        inputValues = { \"\", \"\", \"\", \"\", \"\" }\r\n    end\r\n\r\n    makeData()\r\n    createButtonsAndBoxes()\r\n\r\n\r\n    self.addContextMenuItem(\"Ãchelle: normale\", function() self.setScale({ 1, 1, 1 }) end)\r\n    self.addContextMenuItem(\"Ãchelle: double\", function() self.setScale({ 2, 1, 2 }) end)\r\n    self.addContextMenuItem(\"Ãchelle: triple\", function() self.setScale({ 3, 1, 3 }) end)\r\nend\r\n\r\nfunction updateState(markedBoxesNew)\r\n    if markedBoxesNew then markedBoxes = markedBoxesNew end\r\n    makeData()\r\n    createButtonsAndBoxes()\r\nend\r\n\r\n-- create Data\r\nfunction makeData()\r\n    Data = {}\r\n    Data.checkbox = {}\r\n    Data.textbox = {}\r\n\r\n    -- repeat this for each entry (= line) in existingBoxes\r\n    local totalCount = 0\r\n    for i = 1, #existingBoxes do\r\n        -- repeat this for each checkbox per line\r\n        for j = 1, existingBoxes[i] do\r\n            totalCount                      = totalCount + 1\r\n            Data.checkbox[totalCount]       = {}\r\n            Data.checkbox[totalCount].pos   = {}\r\n            Data.checkbox[totalCount].pos.x = x_1 + j * x_offset\r\n            Data.checkbox[totalCount].pos.z = posZ[i]\r\n            Data.checkbox[totalCount].row   = i\r\n\r\n            if (markDEBUG == \"all\") or (markedBoxes[i] >= j and markDEBUG ~= \"none\") then\r\n                Data.checkbox[totalCount].pos.y = y_visible\r\n                Data.checkbox[totalCount].state = true\r\n            else\r\n                Data.checkbox[totalCount].pos.y = y_invisible\r\n                Data.checkbox[totalCount].state = false\r\n            end\r\n        end\r\n    end\r\n\r\n    -- repeat this for each entry (= line) in inputBoxes\r\n    local totalCount = 0\r\n    for i = 1, #inputBoxes do\r\n        -- repeat this for each textbox per line\r\n        for j = 1, inputBoxes[i] do\r\n            totalCount                     = totalCount + 1\r\n            Data.textbox[totalCount]       = {}\r\n            Data.textbox[totalCount].pos   = inputPos[totalCount]\r\n            Data.textbox[totalCount].width = inputWidth[totalCount]\r\n            Data.textbox[totalCount].value = inputValues[totalCount]\r\n        end\r\n    end\r\nend\r\n\r\n-- checks or unchecks the given box\r\nfunction click_checkbox(tableIndex)\r\n    local row = Data.checkbox[tableIndex].row\r\n\r\n    if Data.checkbox[tableIndex].state == true then\r\n        Data.checkbox[tableIndex].pos.y = y_invisible\r\n        Data.checkbox[tableIndex].state = false\r\n\r\n        markedBoxes[row] = markedBoxes[row] - 1\r\n    else\r\n        Data.checkbox[tableIndex].pos.y = y_visible\r\n        Data.checkbox[tableIndex].state = true\r\n\r\n        markedBoxes[row] = markedBoxes[row] + 1\r\n    end\r\n\r\n    self.editButton({\r\n        index = tableIndex - 1,\r\n        position = Data.checkbox[tableIndex].pos\r\n    })\r\nend\r\n\r\n-- updates saved value for given text box\r\nfunction click_textbox(i, value, selected)\r\n    if selected == false then\r\n        inputValues[i] = value\r\n    end\r\nend\r\n\r\nfunction createButtonsAndBoxes()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n\r\n    for i, box_data in ipairs(Data.checkbox) do\r\n        local funcName = \"checkbox\" .. i\r\n        local func = function() click_checkbox(i) end\r\n        self.setVar(funcName, func)\r\n\r\n        self.createButton({\r\n            click_function = funcName,\r\n            function_owner = self,\r\n            position       = box_data.pos,\r\n            height         = boxSize,\r\n            width          = boxSize,\r\n            font_size      = box_data.size,\r\n            scale          = { 1, 1, 1 },\r\n            color          = { 0, 0, 0 },\r\n            font_color     = { 0, 0, 0 }\r\n        })\r\n    end\r\n\r\n    for i, box_data in ipairs(Data.textbox) do\r\n        local funcName = \"textbox\" .. i\r\n        local func = function(_, _, val, sel) click_textbox(i, val, sel) end\r\n        self.setVar(funcName, func)\r\n\r\n        self.createInput({\r\n            input_function = funcName,\r\n            function_owner = self,\r\n            label          = \"Click to type\",\r\n            alignment      = 2,\r\n            position       = box_data.pos,\r\n            scale          = buttonScale,\r\n            width          = box_data.width,\r\n            height         = (inputFontsize * 1) + 24,\r\n            font_size      = inputFontsize,\r\n            color          = \"White\",\r\n            font_color     = buttonFontColor,\r\n            value          = box_data.value\r\n        })\r\n    end\r\nend","LuaScriptState":"[[0,0,0,0,0,0,0,0,0,0],[\"\",\"\",\"\",\"\",\"\"]]","XmlUI":""},{"GUID":"3380ee","Name":"Card","Transform":{"posX":76.5000153,"posY":0.993604958,"posZ":-12.9999571,"rotX":0.0000147983055,"rotY":179.991913,"rotZ":-0.0001329859,"scaleX":0.9970625,"scaleY":1,"scaleZ":0.9970625},"Nickname":"Serviteur InvoquÃ© (amÃ©lioration)","Description":"Fiche scriptÃ©e par Chr1Z -  Cliquez droit pour les options d'affichage","GMNotes":"{\n  \"id\": \"09080-c\",\n  \"type\": \"UpgradeSheet\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":556010,"SidewaysCard":false,"CustomDeck":{"5560":{"FaceURL":"https://i.imgur.com/EnwxHBL.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/1821167093099748718/F92B9C3E0F282CBECC5AE90DD19E246A21B83E31/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"-- Customizable Cards: Serviteur\r\n-- by Chr1Z\r\n-- Traduction et adaptation par Omen\r\ninformation = {\r\n    version = \"1.7\",\r\n    last_updated = \"12.10.2022\"\r\n}\r\n\r\n-- Color information for buttons\r\nboxSize = 29\r\n\r\n-- static values\r\nx_1         = -0.96\r\nx_offset    = 0.061\r\ny_visible   = 0.25\r\ny_invisible = -0.5\r\n\r\n-- z-values (lines on the sheet)\r\nposZ = {\r\n    -0.895,\r\n    -0.625,\r\n    -0.282,\r\n    0.065,\r\n    0.335,\r\n    0.6,\r\n    0.785,\r\n    1.127\r\n}\r\n\r\n-- box setup (amount of boxes per line and amount of marked boxes in that line)\r\nexistingBoxes = { 1, 1, 1, 1, 1, 2, 3, 5 }\r\n\r\n\r\ninputBoxes = {}\r\n\r\n-- override 'marked boxes' for debugging ('all' or 'none')\r\nmarkDEBUG = \"\"\r\n\r\n-- save state when going into bags / decks\r\nfunction onDestroy() self.script_state = onSave() end\r\n\r\nfunction onSave() return JSON.encode({ markedBoxes, inputValues }) end\r\n\r\n-- Startup procedure\r\nfunction onLoad(saved_data)\r\n    if saved_data ~= \"\" and markDEBUG == \"\" then\r\n        local loaded_data = JSON.decode(saved_data)\r\n        markedBoxes = loaded_data[1]\r\n        inputValues = loaded_data[2]\r\n    else\r\n        markedBoxes = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }\r\n        inputValues = { \"\", \"\", \"\", \"\", \"\" }\r\n    end\r\n\r\n    makeData()\r\n    createButtonsAndBoxes()\r\n\r\n\r\n    self.addContextMenuItem(\"Ãchelle: normale\", function() self.setScale({ 1, 1, 1 }) end)\r\n    self.addContextMenuItem(\"Ãchelle: double\", function() self.setScale({ 2, 1, 2 }) end)\r\n    self.addContextMenuItem(\"Ãchelle: triple\", function() self.setScale({ 3, 1, 3 }) end)\r\nend\r\n\r\nfunction updateState(markedBoxesNew)\r\n    if markedBoxesNew then markedBoxes = markedBoxesNew end\r\n    makeData()\r\n    createButtonsAndBoxes()\r\nend\r\n\r\n-- create Data\r\nfunction makeData()\r\n    Data = {}\r\n    Data.checkbox = {}\r\n    Data.textbox = {}\r\n\r\n    -- repeat this for each entry (= line) in existingBoxes\r\n    local totalCount = 0\r\n    for i = 1, #existingBoxes do\r\n        -- repeat this for each checkbox per line\r\n        for j = 1, existingBoxes[i] do\r\n            totalCount                      = totalCount + 1\r\n            Data.checkbox[totalCount]       = {}\r\n            Data.checkbox[totalCount].pos   = {}\r\n            Data.checkbox[totalCount].pos.x = x_1 + j * x_offset\r\n            Data.checkbox[totalCount].pos.z = posZ[i]\r\n            Data.checkbox[totalCount].row   = i\r\n\r\n            if (markDEBUG == \"all\") or (markedBoxes[i] >= j and markDEBUG ~= \"none\") then\r\n                Data.checkbox[totalCount].pos.y = y_visible\r\n                Data.checkbox[totalCount].state = true\r\n            else\r\n                Data.checkbox[totalCount].pos.y = y_invisible\r\n                Data.checkbox[totalCount].state = false\r\n            end\r\n        end\r\n    end\r\n\r\n    -- repeat this for each entry (= line) in inputBoxes\r\n    local totalCount = 0\r\n    for i = 1, #inputBoxes do\r\n        -- repeat this for each textbox per line\r\n        for j = 1, inputBoxes[i] do\r\n            totalCount                     = totalCount + 1\r\n            Data.textbox[totalCount]       = {}\r\n            Data.textbox[totalCount].pos   = inputPos[totalCount]\r\n            Data.textbox[totalCount].width = inputWidth[totalCount]\r\n            Data.textbox[totalCount].value = inputValues[totalCount]\r\n        end\r\n    end\r\nend\r\n\r\n-- checks or unchecks the given box\r\nfunction click_checkbox(tableIndex)\r\n    local row = Data.checkbox[tableIndex].row\r\n\r\n    if Data.checkbox[tableIndex].state == true then\r\n        Data.checkbox[tableIndex].pos.y = y_invisible\r\n        Data.checkbox[tableIndex].state = false\r\n\r\n        markedBoxes[row] = markedBoxes[row] - 1\r\n    else\r\n        Data.checkbox[tableIndex].pos.y = y_visible\r\n        Data.checkbox[tableIndex].state = true\r\n\r\n        markedBoxes[row] = markedBoxes[row] + 1\r\n    end\r\n\r\n    self.editButton({\r\n        index = tableIndex - 1,\r\n        position = Data.checkbox[tableIndex].pos\r\n    })\r\nend\r\n\r\n-- updates saved value for given text box\r\nfunction click_textbox(i, value, selected)\r\n    if selected == false then\r\n        inputValues[i] = value\r\n    end\r\nend\r\n\r\nfunction createButtonsAndBoxes()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n\r\n    for i, box_data in ipairs(Data.checkbox) do\r\n        local funcName = \"checkbox\" .. i\r\n        local func = function() click_checkbox(i) end\r\n        self.setVar(funcName, func)\r\n\r\n        self.createButton({\r\n            click_function = funcName,\r\n            function_owner = self,\r\n            position       = box_data.pos,\r\n            height         = boxSize,\r\n            width          = boxSize,\r\n            font_size      = box_data.size,\r\n            scale          = { 1, 1, 1 },\r\n            color          = { 0, 0, 0 },\r\n            font_color     = { 0, 0, 0 }\r\n        })\r\n    end\r\n\r\n    for i, box_data in ipairs(Data.textbox) do\r\n        local funcName = \"textbox\" .. i\r\n        local func = function(_, _, val, sel) click_textbox(i, val, sel) end\r\n        self.setVar(funcName, func)\r\n\r\n        self.createInput({\r\n            input_function = funcName,\r\n            function_owner = self,\r\n            label          = \"Click to type\",\r\n            alignment      = 2,\r\n            position       = box_data.pos,\r\n            scale          = buttonScale,\r\n            width          = box_data.width,\r\n            height         = (inputFontsize * 1) + 24,\r\n            font_size      = inputFontsize,\r\n            color          = \"White\",\r\n            font_color     = buttonFontColor,\r\n            value          = box_data.value\r\n        })\r\n    end\r\nend","LuaScriptState":"[[0,0,0,0,0,0,0,0,0,0],[\"\",\"\",\"\",\"\",\"\"]]","XmlUI":"-- Customizable Cards: Serviteur\r\n-- by Chr1Z\r\n-- Traduction et adaptation par Omen\r\ninformation = {\r\n    version = \"1.7\",\r\n    last_updated = \"12.10.2022\"\r\n}\r\n\r\n-- Color information for buttons\r\nboxSize = 35\r\n\r\n-- static values\r\nx_1         = -0.9625\r\nx_offset    = 0.069\r\ny_visible   = 0.25\r\ny_invisible = -0.5\r\n\r\n-- z-values (lines on the sheet)\r\nposZ = {\r\n    -0.92,\r\n    -0.625,\r\n    -0.33,\r\n    0.055,\r\n    0.26,\r\n    0.56,\r\n    0.765,\r\n    1.06\r\n}\r\n\r\n-- box setup (amount of boxes per line and amount of marked boxes in that line)\r\nexistingBoxes = { 1, 1, 1, 1, 1, 2, 3, 5 }\r\n\r\n\r\ninputBoxes = {}\r\n\r\n-- override 'marked boxes' for debugging ('all' or 'none')\r\nmarkDEBUG = \"\"\r\n\r\n-- save state when going into bags / decks\r\nfunction onDestroy() self.script_state = onSave() end\r\n\r\nfunction onSave() return JSON.encode({ markedBoxes, inputValues }) end\r\n\r\n-- Startup procedure\r\nfunction onLoad(saved_data)\r\n    if saved_data ~= \"\" and markDEBUG == \"\" then\r\n        local loaded_data = JSON.decode(saved_data)\r\n        markedBoxes = loaded_data[1]\r\n        inputValues = loaded_data[2]\r\n    else\r\n        markedBoxes = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }\r\n        inputValues = { \"\", \"\", \"\", \"\", \"\" }\r\n    end\r\n\r\n    makeData()\r\n    createButtonsAndBoxes()\r\n\r\n\r\n    self.addContextMenuItem(\"Ãchelle: normale\", function() self.setScale({ 1, 1, 1 }) end)\r\n    self.addContextMenuItem(\"Ãchelle: double\", function() self.setScale({ 2, 1, 2 }) end)\r\n    self.addContextMenuItem(\"Ãchelle: triple\", function() self.setScale({ 3, 1, 3 }) end)\r\nend\r\n\r\nfunction updateState(markedBoxesNew)\r\n    if markedBoxesNew then markedBoxes = markedBoxesNew end\r\n    makeData()\r\n    createButtonsAndBoxes()\r\nend\r\n\r\n-- create Data\r\nfunction makeData()\r\n    Data = {}\r\n    Data.checkbox = {}\r\n    Data.textbox = {}\r\n\r\n    -- repeat this for each entry (= line) in existingBoxes\r\n    local totalCount = 0\r\n    for i = 1, #existingBoxes do\r\n        -- repeat this for each checkbox per line\r\n        for j = 1, existingBoxes[i] do\r\n            totalCount                      = totalCount + 1\r\n            Data.checkbox[totalCount]       = {}\r\n            Data.checkbox[totalCount].pos   = {}\r\n            Data.checkbox[totalCount].pos.x = x_1 + j * x_offset\r\n            Data.checkbox[totalCount].pos.z = posZ[i]\r\n            Data.checkbox[totalCount].row   = i\r\n\r\n            if (markDEBUG == \"all\") or (markedBoxes[i] >= j and markDEBUG ~= \"none\") then\r\n                Data.checkbox[totalCount].pos.y = y_visible\r\n                Data.checkbox[totalCount].state = true\r\n            else\r\n                Data.checkbox[totalCount].pos.y = y_invisible\r\n                Data.checkbox[totalCount].state = false\r\n            end\r\n        end\r\n    end\r\n\r\n    -- repeat this for each entry (= line) in inputBoxes\r\n    local totalCount = 0\r\n    for i = 1, #inputBoxes do\r\n        -- repeat this for each textbox per line\r\n        for j = 1, inputBoxes[i] do\r\n            totalCount                     = totalCount + 1\r\n            Data.textbox[totalCount]       = {}\r\n            Data.textbox[totalCount].pos   = inputPos[totalCount]\r\n            Data.textbox[totalCount].width = inputWidth[totalCount]\r\n            Data.textbox[totalCount].value = inputValues[totalCount]\r\n        end\r\n    end\r\nend\r\n\r\n-- checks or unchecks the given box\r\nfunction click_checkbox(tableIndex)\r\n    local row = Data.checkbox[tableIndex].row\r\n\r\n    if Data.checkbox[tableIndex].state == true then\r\n        Data.checkbox[tableIndex].pos.y = y_invisible\r\n        Data.checkbox[tableIndex].state = false\r\n\r\n        markedBoxes[row] = markedBoxes[row] - 1\r\n    else\r\n        Data.checkbox[tableIndex].pos.y = y_visible\r\n        Data.checkbox[tableIndex].state = true\r\n\r\n        markedBoxes[row] = markedBoxes[row] + 1\r\n    end\r\n\r\n    self.editButton({\r\n        index = tableIndex - 1,\r\n        position = Data.checkbox[tableIndex].pos\r\n    })\r\nend\r\n\r\n-- updates saved value for given text box\r\nfunction click_textbox(i, value, selected)\r\n    if selected == false then\r\n        inputValues[i] = value\r\n    end\r\nend\r\n\r\nfunction createButtonsAndBoxes()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n\r\n    for i, box_data in ipairs(Data.checkbox) do\r\n        local funcName = \"checkbox\" .. i\r\n        local func = function() click_checkbox(i) end\r\n        self.setVar(funcName, func)\r\n\r\n        self.createButton({\r\n            click_function = funcName,\r\n            function_owner = self,\r\n            position       = box_data.pos,\r\n            height         = boxSize,\r\n            width          = boxSize,\r\n            font_size      = box_data.size,\r\n            scale          = { 1, 1, 1 },\r\n            color          = { 0, 0, 0 },\r\n            font_color     = { 0, 0, 0 }\r\n        })\r\n    end\r\n\r\n    for i, box_data in ipairs(Data.textbox) do\r\n        local funcName = \"textbox\" .. i\r\n        local func = function(_, _, val, sel) click_textbox(i, val, sel) end\r\n        self.setVar(funcName, func)\r\n\r\n        self.createInput({\r\n            input_function = funcName,\r\n            function_owner = self,\r\n            label          = \"Click to type\",\r\n            alignment      = 2,\r\n            position       = box_data.pos,\r\n            scale          = buttonScale,\r\n            width          = box_data.width,\r\n            height         = (inputFontsize * 1) + 24,\r\n            font_size      = inputFontsize,\r\n            color          = \"White\",\r\n            font_color     = buttonFontColor,\r\n            value          = box_data.value\r\n        })\r\n    end\r\nend"},{"GUID":"342160","Name":"Card","Transform":{"posX":86.50004,"posY":0.993606746,"posZ":-12.9999762,"rotX":-0.00000524354755,"rotY":179.992371,"rotZ":7.176058e-7,"scaleX":0.9970625,"scaleY":1,"scaleZ":0.9970625},"Nickname":"Flingue Hyperphysique (amÃ©lioration)","Description":"Fiche scriptÃ©e par Chr1Z -  Cliquez droit pour les options d'affichage","GMNotes":"{\n  \"id\": \"09119-c\",\n  \"type\": \"UpgradeSheet\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":556015,"SidewaysCard":false,"CustomDeck":{"5560":{"FaceURL":"https://i.imgur.com/EnwxHBL.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/1821167093099748718/F92B9C3E0F282CBECC5AE90DD19E246A21B83E31/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"-- Customizable Cards: Outil\r\n-- Traduction et adaptation par Omen\r\ninformation = {\r\n    version = \"1.7\",\r\n    last_updated = \"12.10.2022\"\r\n}\r\n\r\n-- Color information for buttons\r\nboxSize = 32\r\n\r\n-- static values\r\nx_1         = -0.9875\r\nx_offset    = 0.06\r\ny_visible   = 0.25\r\ny_invisible = -0.5\r\n\r\n-- z-values (lines on the sheet)\r\nposZ = {\r\n    -0.9,\r\n    -0.635,\r\n    -0.307,\r\n    0.117,\r\n    0.535,\r\n    0.963,\r\n    1.135\r\n}\r\n\r\n\r\n-- box setup (amount of boxes per line and amount of marked boxes in that line)\r\nexistingBoxes = { 2, 2, 2, 2, 2, 4, 4 }\r\n\r\n\r\ninputBoxes = {}\r\n\r\n-- override 'marked boxes' for debugging ('all' or 'none')\r\nmarkDEBUG = \"\"\r\n\r\n-- save state when going into bags / decks\r\nfunction onDestroy() self.script_state = onSave() end\r\n\r\nfunction onSave() return JSON.encode({ markedBoxes, inputValues }) end\r\n\r\n-- Startup procedure\r\nfunction onLoad(saved_data)\r\n    if saved_data ~= \"\" and markDEBUG == \"\" then\r\n        local loaded_data = JSON.decode(saved_data)\r\n        markedBoxes = loaded_data[1]\r\n        inputValues = loaded_data[2]\r\n    else\r\n        markedBoxes = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }\r\n        inputValues = { \"\", \"\", \"\", \"\", \"\" }\r\n    end\r\n\r\n    makeData()\r\n    createButtonsAndBoxes()\r\n\r\n\r\n    self.addContextMenuItem(\"Ãchelle: normale\", function() self.setScale({ 1, 1, 1 }) end)\r\n    self.addContextMenuItem(\"Ãchelle: double\", function() self.setScale({ 2, 1, 2 }) end)\r\n    self.addContextMenuItem(\"Ãchelle: triple\", function() self.setScale({ 3, 1, 3 }) end)\r\nend\r\n\r\nfunction updateState(markedBoxesNew)\r\n    if markedBoxesNew then markedBoxes = markedBoxesNew end\r\n    makeData()\r\n    createButtonsAndBoxes()\r\nend\r\n\r\n-- create Data\r\nfunction makeData()\r\n    Data = {}\r\n    Data.checkbox = {}\r\n    Data.textbox = {}\r\n\r\n    -- repeat this for each entry (= line) in existingBoxes\r\n    local totalCount = 0\r\n    for i = 1, #existingBoxes do\r\n        -- repeat this for each checkbox per line\r\n        for j = 1, existingBoxes[i] do\r\n            totalCount                      = totalCount + 1\r\n            Data.checkbox[totalCount]       = {}\r\n            Data.checkbox[totalCount].pos   = {}\r\n            Data.checkbox[totalCount].pos.x = x_1 + j * x_offset\r\n            Data.checkbox[totalCount].pos.z = posZ[i]\r\n            Data.checkbox[totalCount].row   = i\r\n\r\n            if (markDEBUG == \"all\") or (markedBoxes[i] >= j and markDEBUG ~= \"none\") then\r\n                Data.checkbox[totalCount].pos.y = y_visible\r\n                Data.checkbox[totalCount].state = true\r\n            else\r\n                Data.checkbox[totalCount].pos.y = y_invisible\r\n                Data.checkbox[totalCount].state = false\r\n            end\r\n        end\r\n    end\r\n\r\n    -- repeat this for each entry (= line) in inputBoxes\r\n    local totalCount = 0\r\n    for i = 1, #inputBoxes do\r\n        -- repeat this for each textbox per line\r\n        for j = 1, inputBoxes[i] do\r\n            totalCount                     = totalCount + 1\r\n            Data.textbox[totalCount]       = {}\r\n            Data.textbox[totalCount].pos   = inputPos[totalCount]\r\n            Data.textbox[totalCount].width = inputWidth[totalCount]\r\n            Data.textbox[totalCount].value = inputValues[totalCount]\r\n        end\r\n    end\r\nend\r\n\r\n-- checks or unchecks the given box\r\nfunction click_checkbox(tableIndex)\r\n    local row = Data.checkbox[tableIndex].row\r\n\r\n    if Data.checkbox[tableIndex].state == true then\r\n        Data.checkbox[tableIndex].pos.y = y_invisible\r\n        Data.checkbox[tableIndex].state = false\r\n\r\n        markedBoxes[row] = markedBoxes[row] - 1\r\n    else\r\n        Data.checkbox[tableIndex].pos.y = y_visible\r\n        Data.checkbox[tableIndex].state = true\r\n\r\n        markedBoxes[row] = markedBoxes[row] + 1\r\n    end\r\n\r\n    self.editButton({\r\n        index = tableIndex - 1,\r\n        position = Data.checkbox[tableIndex].pos\r\n    })\r\nend\r\n\r\n-- updates saved value for given text box\r\nfunction click_textbox(i, value, selected)\r\n    if selected == false then\r\n        inputValues[i] = value\r\n    end\r\nend\r\n\r\nfunction createButtonsAndBoxes()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n\r\n    for i, box_data in ipairs(Data.checkbox) do\r\n        local funcName = \"checkbox\" .. i\r\n        local func = function() click_checkbox(i) end\r\n        self.setVar(funcName, func)\r\n\r\n        self.createButton({\r\n            click_function = funcName,\r\n            function_owner = self,\r\n            position       = box_data.pos,\r\n            height         = boxSize,\r\n            width          = boxSize,\r\n            font_size      = box_data.size,\r\n            scale          = { 1, 1, 1 },\r\n            color          = { 0, 0, 0 },\r\n            font_color     = { 0, 0, 0 }\r\n        })\r\n    end\r\n\r\n    for i, box_data in ipairs(Data.textbox) do\r\n        local funcName = \"textbox\" .. i\r\n        local func = function(_, _, val, sel) click_textbox(i, val, sel) end\r\n        self.setVar(funcName, func)\r\n\r\n        self.createInput({\r\n            input_function = funcName,\r\n            function_owner = self,\r\n            label          = \"Click to type\",\r\n            alignment      = 2,\r\n            position       = box_data.pos,\r\n            scale          = buttonScale,\r\n            width          = box_data.width,\r\n            height         = (inputFontsize * 1) + 24,\r\n            font_size      = inputFontsize,\r\n            color          = \"White\",\r\n            font_color     = buttonFontColor,\r\n            value          = box_data.value\r\n        })\r\n    end\r\nend","LuaScriptState":"[[0,0,0,0,0,0,0,0,0,0],[\"\",\"\",\"\",\"\",\"\"]]","XmlUI":""},{"GUID":"fd76f6","Name":"Card","Transform":{"posX":69.00004,"posY":0.9936069,"posZ":-12.9999619,"rotX":-0.00000501497061,"rotY":179.992874,"rotZ":4.56408372e-7,"scaleX":0.9970625,"scaleY":1,"scaleZ":0.9970625},"Nickname":"Instict AffÃ»tÃ© (amÃ©lioration)","Description":"Fiche scriptÃ©e par Chr1Z -  Cliquez droit pour les options d'affichage","GMNotes":"{\n  \"id\": \"09061-c\",\n  \"type\": \"UpgradeSheet\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":556008,"SidewaysCard":false,"CustomDeck":{"5560":{"FaceURL":"https://i.imgur.com/EnwxHBL.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/1821167093099748718/F92B9C3E0F282CBECC5AE90DD19E246A21B83E31/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"-- Customizable Cards: Instinct\r\n-- by Chr1Z\r\n-- Traduction et adaptation par Omen\r\ninformation = {\r\n    version = \"1.7\",\r\n    last_updated = \"12.10.2022\"\r\n}\r\n\r\n-- Color information for buttons\r\nboxSize = 35\r\n\r\n-- static values\r\nx_1         = -0.965\r\nx_offset    = 0.0685\r\ny_visible   = 0.25\r\ny_invisible = -0.5\r\n\r\n-- z-values (lines on the sheet)\r\nposZ = {\r\n    -0.91,\r\n    -0.705,\r\n    -0.495,\r\n    -0.28,\r\n    -0.07,\r\n    0.225,\r\n    0.53,\r\n    0.83\r\n}\r\n\r\n-- box setup (amount of boxes per line and amount of marked boxes in that line)\r\nexistingBoxes = { 1, 1, 1, 1, 1, 2, 3, 5 }\r\n\r\ninputBoxes = {}\r\n\r\n-- override 'marked boxes' for debugging ('all' or 'none')\r\nmarkDEBUG = \"\"\r\n\r\n-- save state when going into bags / decks\r\nfunction onDestroy() self.script_state = onSave() end\r\n\r\nfunction onSave() return JSON.encode({ markedBoxes, inputValues }) end\r\n\r\n-- Startup procedure\r\nfunction onLoad(saved_data)\r\n    if saved_data ~= \"\" and markDEBUG == \"\" then\r\n        local loaded_data = JSON.decode(saved_data)\r\n        markedBoxes = loaded_data[1]\r\n        inputValues = loaded_data[2]\r\n    else\r\n        markedBoxes = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }\r\n        inputValues = { \"\", \"\", \"\", \"\", \"\" }\r\n    end\r\n\r\n    makeData()\r\n    createButtonsAndBoxes()\r\n\r\n\r\n    self.addContextMenuItem(\"Ãchelle: normale\", function() self.setScale({ 1, 1, 1 }) end)\r\n    self.addContextMenuItem(\"Ãchelle: double\", function() self.setScale({ 2, 1, 2 }) end)\r\n    self.addContextMenuItem(\"Ãchelle: triple\", function() self.setScale({ 3, 1, 3 }) end)\r\nend\r\n\r\nfunction updateState(markedBoxesNew)\r\n    if markedBoxesNew then markedBoxes = markedBoxesNew end\r\n    makeData()\r\n    createButtonsAndBoxes()\r\nend\r\n\r\n-- create Data\r\nfunction makeData()\r\n    Data = {}\r\n    Data.checkbox = {}\r\n    Data.textbox = {}\r\n\r\n    -- repeat this for each entry (= line) in existingBoxes\r\n    local totalCount = 0\r\n    for i = 1, #existingBoxes do\r\n        -- repeat this for each checkbox per line\r\n        for j = 1, existingBoxes[i] do\r\n            totalCount                      = totalCount + 1\r\n            Data.checkbox[totalCount]       = {}\r\n            Data.checkbox[totalCount].pos   = {}\r\n            Data.checkbox[totalCount].pos.x = x_1 + j * x_offset\r\n            Data.checkbox[totalCount].pos.z = posZ[i]\r\n            Data.checkbox[totalCount].row   = i\r\n\r\n            if (markDEBUG == \"all\") or (markedBoxes[i] >= j and markDEBUG ~= \"none\") then\r\n                Data.checkbox[totalCount].pos.y = y_visible\r\n                Data.checkbox[totalCount].state = true\r\n            else\r\n                Data.checkbox[totalCount].pos.y = y_invisible\r\n                Data.checkbox[totalCount].state = false\r\n            end\r\n        end\r\n    end\r\n\r\n    -- repeat this for each entry (= line) in inputBoxes\r\n    local totalCount = 0\r\n    for i = 1, #inputBoxes do\r\n        -- repeat this for each textbox per line\r\n        for j = 1, inputBoxes[i] do\r\n            totalCount                     = totalCount + 1\r\n            Data.textbox[totalCount]       = {}\r\n            Data.textbox[totalCount].pos   = inputPos[totalCount]\r\n            Data.textbox[totalCount].width = inputWidth[totalCount]\r\n            Data.textbox[totalCount].value = inputValues[totalCount]\r\n        end\r\n    end\r\nend\r\n\r\n-- checks or unchecks the given box\r\nfunction click_checkbox(tableIndex)\r\n    local row = Data.checkbox[tableIndex].row\r\n\r\n    if Data.checkbox[tableIndex].state == true then\r\n        Data.checkbox[tableIndex].pos.y = y_invisible\r\n        Data.checkbox[tableIndex].state = false\r\n\r\n        markedBoxes[row] = markedBoxes[row] - 1\r\n    else\r\n        Data.checkbox[tableIndex].pos.y = y_visible\r\n        Data.checkbox[tableIndex].state = true\r\n\r\n        markedBoxes[row] = markedBoxes[row] + 1\r\n    end\r\n\r\n    self.editButton({\r\n        index = tableIndex - 1,\r\n        position = Data.checkbox[tableIndex].pos\r\n    })\r\nend\r\n\r\n-- updates saved value for given text box\r\nfunction click_textbox(i, value, selected)\r\n    if selected == false then\r\n        inputValues[i] = value\r\n    end\r\nend\r\n\r\nfunction createButtonsAndBoxes()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n\r\n    for i, box_data in ipairs(Data.checkbox) do\r\n        local funcName = \"checkbox\" .. i\r\n        local func = function() click_checkbox(i) end\r\n        self.setVar(funcName, func)\r\n\r\n        self.createButton({\r\n            click_function = funcName,\r\n            function_owner = self,\r\n            position       = box_data.pos,\r\n            height         = boxSize,\r\n            width          = boxSize,\r\n            font_size      = box_data.size,\r\n            scale          = { 1, 1, 1 },\r\n            color          = { 0, 0, 0 },\r\n            font_color     = { 0, 0, 0 }\r\n        })\r\n    end\r\n\r\n    for i, box_data in ipairs(Data.textbox) do\r\n        local funcName = \"textbox\" .. i\r\n        local func = function(_, _, val, sel) click_textbox(i, val, sel) end\r\n        self.setVar(funcName, func)\r\n\r\n        self.createInput({\r\n            input_function = funcName,\r\n            function_owner = self,\r\n            label          = \"Click to type\",\r\n            alignment      = 2,\r\n            position       = box_data.pos,\r\n            scale          = buttonScale,\r\n            width          = box_data.width,\r\n            height         = (inputFontsize * 1) + 24,\r\n            font_size      = inputFontsize,\r\n            color          = \"White\",\r\n            font_color     = buttonFontColor,\r\n            value          = box_data.value\r\n        })\r\n    end\r\nend","LuaScriptState":"[[0,0,0,0,0,0,0,0,0,0],[\"\",\"\",\"\",\"\",\"\"]]","XmlUI":""},{"GUID":"467587","Name":"CardCustom","Transform":{"posX":76.5000153,"posY":1.02080739,"posZ":-12.99999,"rotX":0.00009653601,"rotY":179.992813,"rotZ":-0.0005048788,"scaleX":0.6,"scaleY":1,"scaleZ":0.6},"Nickname":"Serviteur invoquÃ©","Description":"","GMNotes":"{\n  \"id\": \"09080-m\",\n  \"type\": \"UpgradeSheet\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"Tags":["player_card","PlayerCard","SC_memory_object"],"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":false,"CardID":803600,"SidewaysCard":false,"CustomDeck":{"8036":{"FaceURL":"http://cloud-3.steamusercontent.com/ugc/1933751217706145663/52AB04A39EC93A7F5EB6EB83F55071BFFCC85FAE/","BackURL":"http://cloud-3.steamusercontent.com/ugc/1924744375825905078/AE93F97210BEF54AFA8F50166565A19225AF8ADB/","NumWidth":1,"NumHeight":1,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"07c7ef","Name":"Custom_Tile","Transform":{"posX":71.455246,"posY":1.00713253,"posZ":-13.0923519,"rotX":0.00122268638,"rotY":180.000458,"rotZ":-0.004163627,"scaleX":0.2499814,"scaleY":1,"scaleZ":0.2499814},"Nickname":"VolontÃ©","Description":"","GMNotes":"{\n  \"id\": \"09079-m\",\n  \"type\": \"UpgradeSheet\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":1,"g":1,"b":1},"Tags":["SC_memory_object"],"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":false,"Snap":false,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"http://cloud-3.steamusercontent.com/ugc/1841432290043057838/7F9186B5BC8BD68D4258B37EC2D1311891AA00EC/","ImageSecondaryURL":"","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":2,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":"","States":{"2":{"GUID":"73baa7","Name":"Custom_Tile","Transform":{"posX":71.49909,"posY":0.980002344,"posZ":-16.223444,"rotX":-0.00003718579,"rotY":180.002975,"rotZ":-0.0000237569238,"scaleX":0.2499814,"scaleY":1,"scaleZ":0.2499814},"Nickname":"Intelligence","Description":"","GMNotes":"{\n  \"id\": \"09079-m\",\n  \"type\": \"UpgradeSheet\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":1,"g":1,"b":1},"Tags":["SC_memory_object"],"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":false,"Snap":false,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":false,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"http://cloud-3.steamusercontent.com/ugc/1841432290043056980/B0E9F1EE0F734BFE533FF5B3D699990F146151F2/","ImageSecondaryURL":"","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":2,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""},"3":{"GUID":"b84fe1","Name":"Custom_Tile","Transform":{"posX":72.1664047,"posY":0.9800022,"posZ":-16.33792,"rotX":-0.00000507074355,"rotY":149.989944,"rotZ":0.00000294637175,"scaleX":0.2499814,"scaleY":1,"scaleZ":0.2499814},"Nickname":"Combat","Description":"","GMNotes":"{\n  \"id\": \"09079-m\",\n  \"type\": \"UpgradeSheet\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":1,"g":1,"b":1},"Tags":["SC_memory_object"],"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":false,"Snap":false,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":false,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"http://cloud-3.steamusercontent.com/ugc/1841432290043056422/C83635F42DF142FF94EFD23DDFD27AA113DFF064/","ImageSecondaryURL":"","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":2,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""},"4":{"GUID":"a20bba","Name":"Custom_Tile","Transform":{"posX":73.0217361,"posY":0.9800026,"posZ":-16.4319,"rotX":0.000007436223,"rotY":179.999023,"rotZ":0.000114142618,"scaleX":0.2499814,"scaleY":1,"scaleZ":0.2499814},"Nickname":"AgilitÃ©","Description":"","GMNotes":"{\n  \"id\": \"09079-m\",\n  \"type\": \"UpgradeSheet\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":1,"g":1,"b":1},"Tags":["SC_memory_object"],"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":false,"Snap":false,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":false,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"http://cloud-3.steamusercontent.com/ugc/1841432290043055914/446EFDBCCAFA6DF8C12DFF9BEFE1CA8D4C9D6AA6/","ImageSecondaryURL":"","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":2,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""}}}]}