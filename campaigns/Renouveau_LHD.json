{"GUID":"8a1951","Name":"Custom_Model_Bag","Transform":{"posX":-85.0023,"posY":1.19691932,"posZ":12.7234459,"rotX":-0.00000267050541,"rotY":180.000381,"rotZ":0.00000103951368,"scaleX":1.170821,"scaleY":0.0619766228,"scaleZ":0.9910606},"Nickname":"Renouveau - L'Héritage de Dunwitch","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.9999998,"g":0.992168248,"b":0.9999998},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"MaterialIndex":-1,"MeshIndex":-1,"CustomMesh":{"MeshURL":"http://pastebin.com/raw.php?i=uWAmuNZ2","DiffuseURL":"http://cloud-3.steamusercontent.com/ugc/762723517667592476/36D86649503A49A36AA97B7B72C6150E4C2BE333/","NormalURL":"","ColliderURL":"","Convex":true,"MaterialIndex":3,"TypeIndex":6,"CustomShader":{"SpecularColor":{"r":1,"g":1,"b":1},"SpecularIntensity":0,"SpecularSharpness":2,"FresnelStrength":0},"CastShadows":true},"Bag":{"Order":0},"LuaScript":"-- Utility memory bag by Directsun\r\n-- Version 2.7.0\r\n-- Fork of Memory Bag 2.0 by MrStump\r\n--\r\n-- Want to contribute? Create an issue or fork the code on GitHub and submit a pull request:\r\n-- https://github.com/sunflowermans/TTS-UtilityMemoryBag\r\n\r\n\r\nfunction updateSave()\r\n    local data_to_save = {[\"ml\"]=memoryList}\r\n    saved_data = JSON.encode(data_to_save)\r\n    self.script_state = saved_data\r\nend\r\n\r\nfunction combineMemoryFromBagsWithin()\r\n    local bagObjList = self.getObjects()\r\n    for _, bagObj in ipairs(bagObjList) do\r\n        local data = bagObj.lua_script_state\r\n        if data ~= nil then\r\n            local j = JSON.decode(data)\r\n            if j ~= nil and j.ml ~= nil then\r\n                for guid, entry in pairs(j.ml) do\r\n                    memoryList[guid] = entry\r\n                end\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\nfunction updateMemoryWithMoves()\r\n    memoryList = memoryListBackup\r\n    --get the first transposed object's coordinates\r\n    local obj = getObjectFromGUID(moveGuid)\r\n\r\n    -- p1 is where needs to go, p2 is where it was\r\n    local refObjPos = memoryList[moveGuid].pos\r\n    local deltaPos = findOffsetDistance(obj.getPosition(), refObjPos, nil)\r\n    local movedRotation = obj.getRotation()\r\n    for guid, entry in pairs(memoryList) do\r\n        memoryList[guid].pos.x = entry.pos.x - deltaPos.x\r\n        memoryList[guid].pos.y = entry.pos.y - deltaPos.y\r\n        memoryList[guid].pos.z = entry.pos.z - deltaPos.z\r\n        -- memoryList[guid].rot.x = movedRotation.x\r\n        -- memoryList[guid].rot.y = movedRotation.y\r\n        -- memoryList[guid].rot.z = movedRotation.z\r\n    end\r\n\r\n    --theList[obj.getGUID()] = {\r\n    --    pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n    --    rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n    --    lock=obj.getLock()\r\n    --}\r\n    moveList = {}\r\nend\r\n\r\nfunction onload(saved_data)\r\n\r\n    fresh = true\r\n    if saved_data ~= \"\" then\r\n        local loaded_data = JSON.decode(saved_data)\r\n        --Set up information off of loaded_data\r\n        memoryList = loaded_data.ml\r\n    else\r\n        --Set up information for if there is no saved saved data\r\n        memoryList = {}\r\n\r\n    end\r\n\r\n    moveList = {}\r\n    moveGuid = nil\r\n\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        fresh = false\r\n        createMemoryActionButtons()\r\n    end\r\nend\r\n\r\n\r\n--Beginning Setup\r\n\r\n\r\n--Make setup button\r\n function createSetupButton()\r\n    self.createButton({\r\n      label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n      position={0,0.1,2.0}, rotation={0,0,0}, height=275, width=625,\r\n      font_size=150, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n end\r\n\r\n--Triggered by Transpose button\r\nfunction buttonClick_transpose()\r\n    moveGuid = nil\r\n    broadcastToAll(\"Select one object and move it- all objects will move relative to the new location\", {0.75, 0.75, 1})\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(true)\r\n    createSetupActionButtons(true)\r\nend\r\n\r\n--Triggered by setup button,\r\nfunction buttonClick_setup()\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(false)\r\n    createSetupActionButtons(false)\r\nend\r\n\r\nfunction getAllObjectsInMemory()\r\n    local objTable = {}\r\n    local curObj = {}\r\n\r\n    for guid in pairs(memoryListBackup) do\r\n        curObj = getObjectFromGUID(guid)\r\n        table.insert(objTable, curObj)\r\n    end\r\n\r\n    return objTable\r\n    -- return getAllObjects()\r\nend\r\n\r\n--Creates selection buttons on objects\r\nfunction createButtonsOnAllObjects(move)\r\n    buttonIndexMap = {}\r\n    local howManyButtons = 0\r\n\r\n    local objsToHaveButtons = {}\r\n    if move == true then\r\n        objsToHaveButtons = getAllObjectsInMemory()\r\n    else\r\n        objsToHaveButtons = getAllObjects()\r\n    end\r\n\r\n    for _, obj in ipairs(objsToHaveButtons) do\r\n        if obj ~= self then\r\n            --On a normal bag, the button positions aren't the same size as the bag.\r\n            globalScaleFactor = 1 * 1/self.getScale().x\r\n            --Super sweet math to set button positions\r\n            local selfPos = self.getPosition()\r\n            local objPos = obj.getPosition()\r\n            local deltaPos = findOffsetDistance(selfPos, objPos, obj)\r\n            local objPos = rotateLocalCoordinates(deltaPos, self)\r\n            objPos.x = -objPos.x * globalScaleFactor\r\n            objPos.y = objPos.y * globalScaleFactor + 6\r\n            objPos.z = objPos.z * globalScaleFactor * 1.19\r\n            --Workaround for custom PDFs\r\n            if obj.Book then\r\n                objPos.y = objPos.y + 0.5\r\n            end\r\n            --Offset rotation of bag\r\n            local rot = self.getRotation()\r\n            rot.y = -rot.y + 180\r\n            --Create function\r\n            local funcName = \"selectButton_\" .. howManyButtons\r\n            local func = function() buttonClick_selection(obj, move) end\r\n            local color = {0.75,0.25,0.25,0.6}\r\n            local colorMove = {0,0,1,0.6}\r\n            if move == true then\r\n                color = colorMove\r\n            end\r\n            self.setVar(funcName, func)\r\n            self.createButton({\r\n                click_function=funcName, function_owner=self,\r\n                position=objPos, rotation=rot, height=500, width=500,\r\n                color=color,\r\n            })\r\n            buttonIndexMap[obj.getGUID()] = howManyButtons\r\n            howManyButtons = howManyButtons + 1\r\n        end\r\n    end\r\nend\r\n\r\n--Creates submit and cancel buttons\r\nfunction createSetupActionButtons(move)\r\n    self.createButton({\r\n        label=\"Annuler\", click_function=\"buttonClick_cancel\", function_owner=self,\r\n      position={-0.7,0.1,2.0}, rotation={0,0,0}, height=275, width=625,\r\n      font_size=145, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n\r\n    self.createButton({\r\n        label=\"Valider\", click_function=\"buttonClick_submit\", function_owner=self,\r\n        position={-0.7,0.3,2.5}, rotation={0,0,0}, height=275, width=625,\r\n        font_size=140, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n\r\n    if move == false then\r\n      self.createButton({\r\n          label=\"Ajouter\", click_function=\"buttonClick_add\", function_owner=self,\r\n          position={0.7,0.3,2.0}, rotation={0,0,0}, height=275, width=625,\r\n          font_size=140, color={0,0,0}, font_color={0.25,1,0.25}\r\n      })\r\n\r\n        self.createButton({\r\n            label=\"Sélection\", click_function=\"editDragSelection\", function_owner=self,\r\n            position={-0.7,0.3,3.0}, rotation={0,0,0}, height=275, width=625,\r\n            font_size=125, color={0,0,0}, font_color={1,1,1}\r\n        })\r\n\r\n        if fresh == false then\r\n                self.createButton({\r\n                    label=\"Mise à jour\", click_function=\"buttonClick_setNew\", function_owner=self,\r\n                    position={0.7,0.3,3.0}, rotation={0,0,0}, height=275, width=625,\r\n                    font_size=105, color={0,0,0}, font_color={0.75,0.75,1}\r\n                })\r\n                self.createButton({\r\n                    label=\"Retirer\", click_function=\"buttonClick_remove\", function_owner=self,\r\n                    position={0.7,0.3,2.5}, rotation={0,0,0}, height=275, width=625,\r\n                    font_size=140, color={0,0,0}, font_color={1,0.25,0.25}\r\n                })\r\n            end\r\n        end\r\n\r\n        self.createButton({\r\n            label=\"Reset\", click_function=\"buttonClick_reset\", function_owner=self,\r\n            position={0,0.3,-2.0}, rotation={0,0,0}, height=275, width=625,\r\n            font_size=165, color={0,0,0}, font_color={1,1,1}\r\n        })\r\n    end\r\n\r\n\r\n--During Setup\r\n\r\n\r\n--Checks or unchecks buttons\r\nfunction buttonClick_selection(obj, move)\r\n    local index = buttonIndexMap[obj.getGUID()]\r\n    local colorMove = {0,0,1,0.6}\r\n    local color = {0,1,0,0.6}\r\n\r\n    previousGuid = selectedGuid\r\n    selectedGuid = obj.getGUID()\r\n\r\n    theList = memoryList\r\n    if move == true then\r\n        theList = moveList\r\n        if previousGuid ~= nil and previousGuid ~= selectedGuid then\r\n            local prevObj = getObjectFromGUID(previousGuid)\r\n            prevObj.highlightOff()\r\n            self.editButton({index=previousIndex, color=colorMove})\r\n            theList[previousGuid] = nil\r\n        end\r\n        previousIndex = index\r\n    end\r\n\r\n    if theList[selectedGuid] == nil then\r\n        self.editButton({index=index, color=color})\r\n        --Adding pos/rot to memory table\r\n        local pos, rot = obj.getPosition(), obj.getRotation()\r\n        --I need to add it like this or it won't save due to indexing issue\r\n        theList[obj.getGUID()] = {\r\n            pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n            rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n            lock=obj.getLock(),\r\n            tint=obj.getColorTint()\r\n        }\r\n        obj.highlightOn({0,1,0})\r\n    else\r\n        color = {0.75,0.25,0.25,0.6}\r\n        if move == true then\r\n            color = colorMove\r\n        end\r\n        self.editButton({index=index, color=color})\r\n        theList[obj.getGUID()] = nil\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\nfunction editDragSelection(bagObj, player, remove)\r\n    local selectedObjs = Player[player].getSelectedObjects()\r\n    if not remove then\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            --Ignore if already in the memory list, or does not have a button\r\n            if index and not memoryList[obj.getGUID()] then\r\n                self.editButton({index=index, color={0,1,0,0.6}})\r\n                --Adding pos/rot to memory table\r\n                local pos, rot = obj.getPosition(), obj.getRotation()\r\n                --I need to add it like this or it won't save due to indexing issue\r\n                memoryList[obj.getGUID()] = {\r\n                    pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n                    rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n                    lock=obj.getLock(),\r\n                    tint=obj.getColorTint()\r\n                }\r\n                obj.highlightOn({0,1,0})\r\n            end\r\n        end\r\n    else\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            if index and memoryList[obj.getGUID()] then\r\n                color = {0.75,0.25,0.25,0.6}\r\n                self.editButton({index=index, color=color})\r\n                memoryList[obj.getGUID()] = nil\r\n                obj.highlightOff()\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\n--Cancels selection process\r\nfunction buttonClick_cancel()\r\n    memoryList = memoryListBackup\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        createMemoryActionButtons()\r\n    end\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Sélection annulée\", {1,1,1})\r\n    moveGuid = nil\r\nend\r\n\r\n--Saves selections\r\nfunction buttonClick_submit()\r\n    fresh = false\r\n    if next(moveList) ~= nil then\r\n        for guid in pairs(moveList) do\r\n            moveGuid = guid\r\n        end\r\n        if memoryListBackup[moveGuid] == nil then\r\n            broadcastToAll(\"Item selected for moving is not already in memory\", {1, 0.25, 0.25})\r\n        else\r\n            broadcastToAll(\"Moving all items in memory relative to new objects position!\", {0.75, 0.75, 1})\r\n            self.clearButtons()\r\n            self.clearInputs()\r\n            createMemoryActionButtons()\r\n            local count = 0\r\n            for guid in pairs(moveList) do\r\n                moveGuid = guid\r\n                count = count + 1\r\n                local obj = getObjectFromGUID(guid)\r\n                if obj ~= nil then obj.highlightOff() end\r\n            end\r\n            updateMemoryWithMoves()\r\n            updateSave()\r\n            buttonClick_place()\r\n        end\r\n    elseif next(memoryList) == nil and moveGuid == nil then\r\n        memoryList = memoryListBackup\r\n        broadcastToAll(\"No selections made.\", {0.75, 0.25, 0.25})\r\n    end\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    updateSave()\r\n    moveGuid = nil\r\nend\r\n\r\nfunction combineTables(first_table, second_table)\r\n    for k,v in pairs(second_table) do first_table[k] = v end\r\nend\r\n\r\nfunction buttonClick_add()\r\n    fresh = false\r\n    combineTables(memoryList, memoryListBackup)\r\n    broadcastToAll(\"Adding internal bags and selections to existing memory\", {0.25, 0.75, 0.25})\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_remove()\r\n    broadcastToAll(\"Removing Selected Entries From Memory\", {1.0, 0.25, 0.25})\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        memoryListBackup[guid] = nil\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Removed\", {1,1,1})\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_setNew()\r\n    broadcastToAll(\"Setting new position relative to items in memory\", {0.75, 0.75, 1})\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        guid = obj.guid\r\n        if memoryListBackup[guid] ~= nil then\r\n            count = count + 1\r\n            memoryListBackup[guid].pos = obj.getPosition()\r\n            memoryListBackup[guid].rot = obj.getRotation()\r\n            memoryListBackup[guid].lock = obj.getLock()\r\n            memoryListBackup[guid].tint = obj.getColorTint()\r\n        end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\n--Resets bag to starting status\r\nfunction buttonClick_reset()\r\n    fresh = true\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createSetupButton()\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Tool Reset\", {1,1,1})\r\n    updateSave()\r\nend\r\n\r\n\r\n--After Setup\r\n\r\n\r\n--Creates recall and place buttons\r\nfunction createMemoryActionButtons()\r\n    self.createButton({\r\n        label=\"Placer\", click_function=\"buttonClick_place\", function_owner=self,\r\n        position={0.7,0.1,2.0}, rotation={0,0,0}, height=275, width=625,\r\n        font_size=150, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Ranger\", click_function=\"buttonClick_recall\", function_owner=self,\r\n        position={-0.7,0.1,2.0}, rotation={0,0,0}, height=275, width=625,\r\n        font_size=150, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n        position={2.9,0.1,0}, rotation={0,270,0}, height=275, width=625,\r\n        font_size=150, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    ---    self.createButton({\r\n    ---      label=\"Bouger\", click_function=\"buttonClick_transpose\", function_owner=self,\r\n    ---      position={-2,0.3,0.8}, rotation={0,270,0}, height=350, width=800,\r\n    ---      font_size=250, color={0,0,0}, font_color={0.75,0.75,1}\r\n    ---\r\nend\r\n\r\n--Sends objects from bag/table to their saved position/rotation\r\nfunction buttonClick_place()\r\n    local bagObjList = self.getObjects()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        --If obj is out on the table, move it to the saved pos/rot\r\n        if obj ~= nil then\r\n            obj.setPositionSmooth(entry.pos)\r\n            obj.setRotationSmooth(entry.rot)\r\n            obj.setLock(entry.lock)\r\n            obj.setColorTint(entry.tint)\r\n        else\r\n            --If obj is inside of the bag\r\n            for _, bagObj in ipairs(bagObjList) do\r\n                if bagObj.guid == guid then\r\n                    local item = self.takeObject({\r\n                        guid=guid, position=entry.pos, rotation=entry.rot, smooth=false\r\n                    })\r\n                    item.setLock(entry.lock)\r\n                    item.setColorTint(entry.tint)\r\n                    break\r\n                end\r\n            end\r\n        end\r\n    end\r\n    broadcastToAll(\"Objets placés\", {1,1,1})\r\nend\r\n\r\n--Recalls objects to bag from table\r\nfunction buttonClick_recall()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then self.putObject(obj) end\r\n    end\r\n    broadcastToAll(\"Objets rangés\", {1,1,1})\r\nend\r\n\r\n\r\n--Utility functions\r\n\r\n\r\n--Find delta (difference) between 2 x/y/z coordinates\r\nfunction findOffsetDistance(p1, p2, obj)\r\n    local yOffset = 0\r\n    if obj ~= nil then\r\n        local bounds = obj.getBounds()\r\n        yOffset = (bounds.size.y - bounds.offset.y)\r\n    end\r\n    local deltaPos = {}\r\n    deltaPos.x = (p2.x-p1.x)\r\n    deltaPos.y = (p2.y-p1.y) + yOffset\r\n    deltaPos.z = (p2.z-p1.z)\r\n    return deltaPos\r\nend\r\n\r\n--Used to rotate a set of coordinates by an angle\r\nfunction rotateLocalCoordinates(desiredPos, obj)\r\n    local objPos, objRot = obj.getPosition(), obj.getRotation()\r\n    local angle = math.rad(objRot.y)\r\n    local x = desiredPos.x * math.cos(angle) - desiredPos.z * math.sin(angle)\r\n    local z = desiredPos.x * math.sin(angle) + desiredPos.z * math.cos(angle)\r\n    --return {x=objPos.x+x, y=objPos.y+desiredPos.y, z=objPos.z+z}\r\n    return {x=x, y=desiredPos.y, z=z}\r\nend\r\n\r\nfunction rotateMyCoordinates(desiredPos, obj)\r\n    local angle = math.rad(obj.getRotation().y)\r\n    local x = desiredPos.x * math.sin(angle)\r\n    local z = desiredPos.z * math.cos(angle)\r\n    return {x=x, y=desiredPos.y, z=z}\r\nend\r\n\r\n--Coroutine delay, in seconds\r\nfunction wait(time)\r\n    local start = os.time()\r\n    repeat coroutine.yield(0) until os.time() > start + time\r\nend\r\n\r\n--Duplicates a table (needed to prevent it making reference to the same objects)\r\nfunction duplicateTable(oldTable)\r\n    local newTable = {}\r\n    for k, v in pairs(oldTable) do\r\n        newTable[k] = v\r\n    end\r\n    return newTable\r\nend\r\n\r\n--Moves scripted highlight from all objects\r\nfunction removeAllHighlights()\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\n--Round number (num) to the Nth decimal (dec)\r\nfunction round(num, dec)\r\n    local mult = 10^(dec or 0)\r\n    return math.floor(num * mult + 0.5) / mult\r\nend\r\n\r\n\r\n--[[\r\nThis object provides access to a variable stored on the \"Global script\".\r\nThe variable holds the GUIDs for every Utility Memory Bag in the scene.\r\nExample:\r\n{'805ebd', '35cc21', 'fc8886', 'f50264', '5f5f63'}\r\n--]]\r\nAllMemoryBagsInScene = {\r\n    NAME_OF_GLOBAL_VARIABLE = \"_UtilityMemoryBag_AllMemoryBagsInScene\"\r\n}\r\n\r\nfunction AllMemoryBagsInScene:add(guid)\r\n    local guids = Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\n    table.insert(guids, guid)\r\n    Global.setTable(self.NAME_OF_GLOBAL_VARIABLE, guids)\r\nend\r\n\r\nfunction AllMemoryBagsInScene:getGuidList()\r\n    return Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\nend","LuaScriptState":"{\"ml\":{\"2efd37\":{\"lock\":false,\"pos\":{\"x\":-5.5,\"y\":0.98,\"z\":45},\"rot\":{\"x\":0,\"y\":180,\"z\":0},\"tint\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1}},\"3ebbf6\":{\"lock\":false,\"pos\":{\"x\":3.5,\"y\":0.98,\"z\":45},\"rot\":{\"x\":0,\"y\":180.0227,\"z\":0},\"tint\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1}},\"4e84af\":{\"lock\":false,\"pos\":{\"x\":-10,\"y\":0.98,\"z\":45},\"rot\":{\"x\":0,\"y\":180.0263,\"z\":0},\"tint\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1}},\"5338a5\":{\"lock\":false,\"pos\":{\"x\":8,\"y\":0.98,\"z\":45},\"rot\":{\"x\":0,\"y\":180.0237,\"z\":0},\"tint\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1}},\"687683\":{\"lock\":false,\"pos\":{\"x\":33.2985,\"y\":1.4799,\"z\":11.9968},\"rot\":{\"x\":0,\"y\":180.0012,\"z\":0},\"tint\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1}},\"70e81a\":{\"lock\":false,\"pos\":{\"x\":17,\"y\":0.98,\"z\":45},\"rot\":{\"x\":0,\"y\":180.0232,\"z\":0},\"tint\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1}},\"7594f1\":{\"lock\":false,\"pos\":{\"x\":12.5,\"y\":0.98,\"z\":45},\"rot\":{\"x\":0,\"y\":179.9998,\"z\":0},\"tint\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1}},\"781bc3\":{\"lock\":false,\"pos\":{\"x\":3,\"y\":1.502,\"z\":-5.4999},\"rot\":{\"x\":0.0109,\"y\":180.013,\"z\":0.005},\"tint\":{\"a\":1,\"b\":0.701960802078247,\"g\":0.800000011920929,\"r\":0.874509811401367}},\"7911d4\":{\"lock\":false,\"pos\":{\"x\":-18.5,\"y\":1.4799,\"z\":-4.9973},\"rot\":{\"x\":0,\"y\":180.0081,\"z\":0},\"tint\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1}},\"8e5d21\":{\"lock\":false,\"pos\":{\"x\":-1.0002,\"y\":0.9801,\"z\":45.0001},\"rot\":{\"x\":0,\"y\":180.025,\"z\":0},\"tint\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1}},\"dfa75b\":{\"lock\":false,\"pos\":{\"x\":21.5,\"y\":0.98,\"z\":45},\"rot\":{\"x\":0,\"y\":180.0235,\"z\":0},\"tint\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1}}}}","XmlUI":"","ContainedObjects":[{"GUID":"2efd37","Name":"Custom_Model_Bag","Transform":{"posX":-5.49999666,"posY":0.9799975,"posZ":45.0000038,"rotX":-0.000004547666,"rotY":180.000046,"rotZ":0.00000135524954,"scaleX":1.20052135,"scaleY":0.249882281,"scaleZ":1.3145982},"Nickname":"I-B : La Banque Gagne Toujours","Description":"Renouveau : L'Héritage de Dunwich","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":1,"g":1,"b":1},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"MaterialIndex":-1,"MeshIndex":-1,"CustomMesh":{"MeshURL":"https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/advboxes/tuckbox_h_MSH.obj","DiffuseURL":"http://cloud-3.steamusercontent.com/ugc/1991184321466654109/F162DCE8476E89A6B4AB9D2FD7B30DEBFEE9C6B6/","NormalURL":"","ColliderURL":"","Convex":true,"MaterialIndex":3,"TypeIndex":6,"CustomShader":{"SpecularColor":{"r":1,"g":1,"b":1},"SpecularIntensity":0,"SpecularSharpness":2,"FresnelStrength":0},"CastShadows":true},"Bag":{"Order":0},"LuaScript":"-- Utility memory bag by Directsun\r\n-- Version 2.7.0\r\n-- Fork of Memory Bag 2.0 by MrStump\r\n--\r\n-- Want to contribute? Create an issue or fork the code on GitHub and submit a pull request:\r\n-- https://github.com/sunflowermans/TTS-UtilityMemoryBag\r\n\r\n\r\nfunction updateSave()\r\n    local data_to_save = {[\"ml\"]=memoryList}\r\n    saved_data = JSON.encode(data_to_save)\r\n    self.script_state = saved_data\r\nend\r\n\r\nfunction combineMemoryFromBagsWithin()\r\n    local bagObjList = self.getObjects()\r\n    for _, bagObj in ipairs(bagObjList) do\r\n        local data = bagObj.lua_script_state\r\n        if data ~= nil then\r\n            local j = JSON.decode(data)\r\n            if j ~= nil and j.ml ~= nil then\r\n                for guid, entry in pairs(j.ml) do\r\n                    memoryList[guid] = entry\r\n                end\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\nfunction updateMemoryWithMoves()\r\n    memoryList = memoryListBackup\r\n    --get the first transposed object's coordinates\r\n    local obj = getObjectFromGUID(moveGuid)\r\n\r\n    -- p1 is where needs to go, p2 is where it was\r\n    local refObjPos = memoryList[moveGuid].pos\r\n    local deltaPos = findOffsetDistance(obj.getPosition(), refObjPos, nil)\r\n    local movedRotation = obj.getRotation()\r\n    for guid, entry in pairs(memoryList) do\r\n        memoryList[guid].pos.x = entry.pos.x - deltaPos.x\r\n        memoryList[guid].pos.y = entry.pos.y - deltaPos.y\r\n        memoryList[guid].pos.z = entry.pos.z - deltaPos.z\r\n        -- memoryList[guid].rot.x = movedRotation.x\r\n        -- memoryList[guid].rot.y = movedRotation.y\r\n        -- memoryList[guid].rot.z = movedRotation.z\r\n    end\r\n\r\n    --theList[obj.getGUID()] = {\r\n    --    pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n    --    rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n    --    lock=obj.getLock()\r\n    --}\r\n    moveList = {}\r\nend\r\n\r\nfunction onload(saved_data)\r\n\r\n    fresh = true\r\n    if saved_data ~= \"\" then\r\n        local loaded_data = JSON.decode(saved_data)\r\n        --Set up information off of loaded_data\r\n        memoryList = loaded_data.ml\r\n    else\r\n        --Set up information for if there is no saved saved data\r\n        memoryList = {}\r\n\r\n    end\r\n\r\n    moveList = {}\r\n    moveGuid = nil\r\n\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        fresh = false\r\n        createMemoryActionButtons()\r\n    end\r\nend\r\n\r\n\r\n--Beginning Setup\r\n\r\n\r\n--Make setup button\r\n function createSetupButton()\r\n    self.createButton({\r\n      label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n      position={0,0.1,-2.1}, rotation={0,0,0}, height=275, width=625,\r\n      font_size=150, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n end\r\n\r\n--Triggered by Transpose button\r\nfunction buttonClick_transpose()\r\n    moveGuid = nil\r\n    broadcastToAll(\"Select one object and move it- all objects will move relative to the new location\", {0.75, 0.75, 1})\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(true)\r\n    createSetupActionButtons(true)\r\nend\r\n\r\n--Triggered by setup button,\r\nfunction buttonClick_setup()\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(false)\r\n    createSetupActionButtons(false)\r\nend\r\n\r\nfunction getAllObjectsInMemory()\r\n    local objTable = {}\r\n    local curObj = {}\r\n\r\n    for guid in pairs(memoryListBackup) do\r\n        curObj = getObjectFromGUID(guid)\r\n        table.insert(objTable, curObj)\r\n    end\r\n\r\n    return objTable\r\n    -- return getAllObjects()\r\nend\r\n\r\n--Creates selection buttons on objects\r\nfunction createButtonsOnAllObjects(move)\r\n    buttonIndexMap = {}\r\n    local howManyButtons = 0\r\n\r\n    local objsToHaveButtons = {}\r\n    if move == true then\r\n        objsToHaveButtons = getAllObjectsInMemory()\r\n    else\r\n        objsToHaveButtons = getAllObjects()\r\n    end\r\n\r\n    for _, obj in ipairs(objsToHaveButtons) do\r\n        if obj ~= self then\r\n            --On a normal bag, the button positions aren't the same size as the bag.\r\n            globalScaleFactor = 1* 1/self.getScale().x\r\n            --Super sweet math to set button positions\r\n            local selfPos = self.getPosition()\r\n            local objPos = obj.getPosition()\r\n            local deltaPos = findOffsetDistance(selfPos, objPos, obj)\r\n            local objPos = rotateLocalCoordinates(deltaPos, self)\r\n            objPos.x = -objPos.x * globalScaleFactor\r\n            objPos.y = objPos.y * globalScaleFactor + 2\r\n            objPos.z = objPos.z * globalScaleFactor * 0.9\r\n            --Workaround for custom PDFs\r\n            if obj.Book then\r\n                objPos.y = objPos.y + 0.5\r\n            end\r\n            --Offset rotation of bag\r\n            local rot = self.getRotation()\r\n            rot.y = -rot.y + 180\r\n            --Create function\r\n            local funcName = \"selectButton_\" .. howManyButtons\r\n            local func = function() buttonClick_selection(obj, move) end\r\n            local color = {0.75,0.25,0.25,0.6}\r\n            local colorMove = {0,0,1,0.6}\r\n            if move == true then\r\n                color = colorMove\r\n            end\r\n            self.setVar(funcName, func)\r\n            self.createButton({\r\n                click_function=funcName, function_owner=self,\r\n                position=objPos, rotation=rot, height=500, width=500,\r\n                color=color,\r\n            })\r\n            buttonIndexMap[obj.getGUID()] = howManyButtons\r\n            howManyButtons = howManyButtons + 1\r\n        end\r\n    end\r\nend\r\n\r\n--Creates submit and cancel buttons\r\nfunction createSetupActionButtons(move)\r\n    self.createButton({\r\n        label=\"Annuler\", click_function=\"buttonClick_cancel\", function_owner=self,\r\n      position={-0.7,0.1,2.1}, rotation={0,0,0}, height=275, width=625,\r\n      font_size=145, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n\r\n    self.createButton({\r\n        label=\"Valider\", click_function=\"buttonClick_submit\", function_owner=self,\r\n        position={-0.7,0.3,2.6}, rotation={0,0,0}, height=275, width=625,\r\n        font_size=140, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n\r\n    if move == false then\r\n      self.createButton({\r\n          label=\"Ajouter\", click_function=\"buttonClick_add\", function_owner=self,\r\n          position={0.7,0.3,2.1}, rotation={0,0,0}, height=275, width=625,\r\n          font_size=140, color={0,0,0}, font_color={0.25,1,0.25}\r\n      })\r\n\r\n        self.createButton({\r\n            label=\"Sélection\", click_function=\"editDragSelection\", function_owner=self,\r\n            position={-0.7,0.3,3.1}, rotation={0,0,0}, height=275, width=625,\r\n            font_size=125, color={0,0,0}, font_color={1,1,1}\r\n        })\r\n\r\n        if fresh == false then\r\n                self.createButton({\r\n                    label=\"Mise à jour\", click_function=\"buttonClick_setNew\", function_owner=self,\r\n                    position={0.7,0.3,3.1}, rotation={0,0,0}, height=275, width=625,\r\n                    font_size=105, color={0,0,0}, font_color={0.75,0.75,1}\r\n                })\r\n                self.createButton({\r\n                    label=\"Retirer\", click_function=\"buttonClick_remove\", function_owner=self,\r\n                    position={0.7,0.3,2.6}, rotation={0,0,0}, height=275, width=625,\r\n                    font_size=140, color={0,0,0}, font_color={1,0.25,0.25}\r\n                })\r\n            end\r\n        end\r\n\r\n        self.createButton({\r\n            label=\"Reset\", click_function=\"buttonClick_reset\", function_owner=self,\r\n            position={0,0.3,-2.1}, rotation={0,0,0}, height=275, width=625,\r\n            font_size=165, color={0,0,0}, font_color={1,1,1}\r\n        })\r\n    end\r\n\r\n\r\n--During Setup\r\n\r\n\r\n--Checks or unchecks buttons\r\nfunction buttonClick_selection(obj, move)\r\n    local index = buttonIndexMap[obj.getGUID()]\r\n    local colorMove = {0,0,1,0.6}\r\n    local color = {0,1,0,0.6}\r\n\r\n    previousGuid = selectedGuid\r\n    selectedGuid = obj.getGUID()\r\n\r\n    theList = memoryList\r\n    if move == true then\r\n        theList = moveList\r\n        if previousGuid ~= nil and previousGuid ~= selectedGuid then\r\n            local prevObj = getObjectFromGUID(previousGuid)\r\n            prevObj.highlightOff()\r\n            self.editButton({index=previousIndex, color=colorMove})\r\n            theList[previousGuid] = nil\r\n        end\r\n        previousIndex = index\r\n    end\r\n\r\n    if theList[selectedGuid] == nil then\r\n        self.editButton({index=index, color=color})\r\n        --Adding pos/rot to memory table\r\n        local pos, rot = obj.getPosition(), obj.getRotation()\r\n        --I need to add it like this or it won't save due to indexing issue\r\n        theList[obj.getGUID()] = {\r\n            pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n            rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n            lock=obj.getLock(),\r\n            tint=obj.getColorTint()\r\n        }\r\n        obj.highlightOn({0,1,0})\r\n    else\r\n        color = {0.75,0.25,0.25,0.6}\r\n        if move == true then\r\n            color = colorMove\r\n        end\r\n        self.editButton({index=index, color=color})\r\n        theList[obj.getGUID()] = nil\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\nfunction editDragSelection(bagObj, player, remove)\r\n    local selectedObjs = Player[player].getSelectedObjects()\r\n    if not remove then\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            --Ignore if already in the memory list, or does not have a button\r\n            if index and not memoryList[obj.getGUID()] then\r\n                self.editButton({index=index, color={0,1,0,0.6}})\r\n                --Adding pos/rot to memory table\r\n                local pos, rot = obj.getPosition(), obj.getRotation()\r\n                --I need to add it like this or it won't save due to indexing issue\r\n                memoryList[obj.getGUID()] = {\r\n                    pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n                    rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n                    lock=obj.getLock(),\r\n                    tint=obj.getColorTint()\r\n                }\r\n                obj.highlightOn({0,1,0})\r\n            end\r\n        end\r\n    else\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            if index and memoryList[obj.getGUID()] then\r\n                color = {0.75,0.25,0.25,0.6}\r\n                self.editButton({index=index, color=color})\r\n                memoryList[obj.getGUID()] = nil\r\n                obj.highlightOff()\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\n--Cancels selection process\r\nfunction buttonClick_cancel()\r\n    memoryList = memoryListBackup\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        createMemoryActionButtons()\r\n    end\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Sélection annulée\", {1,1,1})\r\n    moveGuid = nil\r\nend\r\n\r\n--Saves selections\r\nfunction buttonClick_submit()\r\n    fresh = false\r\n    if next(moveList) ~= nil then\r\n        for guid in pairs(moveList) do\r\n            moveGuid = guid\r\n        end\r\n        if memoryListBackup[moveGuid] == nil then\r\n            broadcastToAll(\"Item selected for moving is not already in memory\", {1, 0.25, 0.25})\r\n        else\r\n            broadcastToAll(\"Moving all items in memory relative to new objects position!\", {0.75, 0.75, 1})\r\n            self.clearButtons()\r\n            self.clearInputs()\r\n            createMemoryActionButtons()\r\n            local count = 0\r\n            for guid in pairs(moveList) do\r\n                moveGuid = guid\r\n                count = count + 1\r\n                local obj = getObjectFromGUID(guid)\r\n                if obj ~= nil then obj.highlightOff() end\r\n            end\r\n            updateMemoryWithMoves()\r\n            updateSave()\r\n            buttonClick_place()\r\n        end\r\n    elseif next(memoryList) == nil and moveGuid == nil then\r\n        memoryList = memoryListBackup\r\n        broadcastToAll(\"No selections made.\", {0.75, 0.25, 0.25})\r\n    end\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    updateSave()\r\n    moveGuid = nil\r\nend\r\n\r\nfunction combineTables(first_table, second_table)\r\n    for k,v in pairs(second_table) do first_table[k] = v end\r\nend\r\n\r\nfunction buttonClick_add()\r\n    fresh = false\r\n    combineTables(memoryList, memoryListBackup)\r\n    broadcastToAll(\"Adding internal bags and selections to existing memory\", {0.25, 0.75, 0.25})\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_remove()\r\n    broadcastToAll(\"Removing Selected Entries From Memory\", {1.0, 0.25, 0.25})\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        memoryListBackup[guid] = nil\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Removed\", {1,1,1})\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_setNew()\r\n    broadcastToAll(\"Setting new position relative to items in memory\", {0.75, 0.75, 1})\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        guid = obj.guid\r\n        if memoryListBackup[guid] ~= nil then\r\n            count = count + 1\r\n            memoryListBackup[guid].pos = obj.getPosition()\r\n            memoryListBackup[guid].rot = obj.getRotation()\r\n            memoryListBackup[guid].lock = obj.getLock()\r\n            memoryListBackup[guid].tint = obj.getColorTint()\r\n        end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\n--Resets bag to starting status\r\nfunction buttonClick_reset()\r\n    fresh = true\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createSetupButton()\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Tool Reset\", {1,1,1})\r\n    updateSave()\r\nend\r\n\r\n\r\n--After Setup\r\n\r\n\r\n--Creates recall and place buttons\r\nfunction createMemoryActionButtons()\r\n    self.createButton({\r\n        label=\"Placer\", click_function=\"buttonClick_place\", function_owner=self,\r\n        position={0.7,0.1,2.2}, rotation={0,0,0}, height=275, width=625,\r\n        font_size=150, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Ranger\", click_function=\"buttonClick_recall\", function_owner=self,\r\n        position={-0.7,0.1,2.2}, rotation={0,0,0}, height=275, width=625,\r\n        font_size=150, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n        position={0,0.1,-2.2}, rotation={0,0,0}, height=275, width=625,\r\n        font_size=150, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    ---    self.createButton({\r\n    ---      label=\"Bouger\", click_function=\"buttonClick_transpose\", function_owner=self,\r\n    ---      position={-2,0.3,0.8}, rotation={0,270,0}, height=350, width=800,\r\n    ---      font_size=250, color={0,0,0}, font_color={0.75,0.75,1}\r\n    ---\r\nend\r\n\r\n--Sends objects from bag/table to their saved position/rotation\r\nfunction buttonClick_place()\r\n    local bagObjList = self.getObjects()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        --If obj is out on the table, move it to the saved pos/rot\r\n        if obj ~= nil then\r\n            obj.setPositionSmooth(entry.pos)\r\n            obj.setRotationSmooth(entry.rot)\r\n            obj.setLock(entry.lock)\r\n            obj.setColorTint(entry.tint)\r\n        else\r\n            --If obj is inside of the bag\r\n            for _, bagObj in ipairs(bagObjList) do\r\n                if bagObj.guid == guid then\r\n                    local item = self.takeObject({\r\n                        guid=guid, position=entry.pos, rotation=entry.rot, smooth=false\r\n                    })\r\n                    item.setLock(entry.lock)\r\n                    item.setColorTint(entry.tint)\r\n                    break\r\n                end\r\n            end\r\n        end\r\n    end\r\n    broadcastToAll(\"Objets placés\", {1,1,1})\r\nend\r\n\r\n--Recalls objects to bag from table\r\nfunction buttonClick_recall()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then self.putObject(obj) end\r\n    end\r\n    broadcastToAll(\"Objets rangés\", {1,1,1})\r\nend\r\n\r\n\r\n--Utility functions\r\n\r\n\r\n--Find delta (difference) between 2 x/y/z coordinates\r\nfunction findOffsetDistance(p1, p2, obj)\r\n    local yOffset = 0\r\n    if obj ~= nil then\r\n        local bounds = obj.getBounds()\r\n        yOffset = (bounds.size.y - bounds.offset.y)\r\n    end\r\n    local deltaPos = {}\r\n    deltaPos.x = (p2.x-p1.x)\r\n    deltaPos.y = (p2.y-p1.y) + yOffset\r\n    deltaPos.z = (p2.z-p1.z)\r\n    return deltaPos\r\nend\r\n\r\n--Used to rotate a set of coordinates by an angle\r\nfunction rotateLocalCoordinates(desiredPos, obj)\r\n    local objPos, objRot = obj.getPosition(), obj.getRotation()\r\n    local angle = math.rad(objRot.y)\r\n    local x = desiredPos.x * math.cos(angle) - desiredPos.z * math.sin(angle)\r\n    local z = desiredPos.x * math.sin(angle) + desiredPos.z * math.cos(angle)\r\n    --return {x=objPos.x+x, y=objPos.y+desiredPos.y, z=objPos.z+z}\r\n    return {x=x, y=desiredPos.y, z=z}\r\nend\r\n\r\nfunction rotateMyCoordinates(desiredPos, obj)\r\n    local angle = math.rad(obj.getRotation().y)\r\n    local x = desiredPos.x * math.sin(angle)\r\n    local z = desiredPos.z * math.cos(angle)\r\n    return {x=x, y=desiredPos.y, z=z}\r\nend\r\n\r\n--Coroutine delay, in seconds\r\nfunction wait(time)\r\n    local start = os.time()\r\n    repeat coroutine.yield(0) until os.time() > start + time\r\nend\r\n\r\n--Duplicates a table (needed to prevent it making reference to the same objects)\r\nfunction duplicateTable(oldTable)\r\n    local newTable = {}\r\n    for k, v in pairs(oldTable) do\r\n        newTable[k] = v\r\n    end\r\n    return newTable\r\nend\r\n\r\n--Moves scripted highlight from all objects\r\nfunction removeAllHighlights()\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\n--Round number (num) to the Nth decimal (dec)\r\nfunction round(num, dec)\r\n    local mult = 10^(dec or 0)\r\n    return math.floor(num * mult + 0.5) / mult\r\nend\r\n\r\n\r\n--[[\r\nThis object provides access to a variable stored on the \"Global script\".\r\nThe variable holds the GUIDs for every Utility Memory Bag in the scene.\r\nExample:\r\n{'805ebd', '35cc21', 'fc8886', 'f50264', '5f5f63'}\r\n--]]\r\nAllMemoryBagsInScene = {\r\n    NAME_OF_GLOBAL_VARIABLE = \"_UtilityMemoryBag_AllMemoryBagsInScene\"\r\n}\r\n\r\nfunction AllMemoryBagsInScene:add(guid)\r\n    local guids = Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\n    table.insert(guids, guid)\r\n    Global.setTable(self.NAME_OF_GLOBAL_VARIABLE, guids)\r\nend\r\n\r\nfunction AllMemoryBagsInScene:getGuidList()\r\n    return Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\nend\r\n","LuaScriptState":"{\"ml\":{\"0e3f22\":{\"lock\":false,\"pos\":{\"x\":-27.002405166626,\"y\":1.8353009223938,\"z\":9.50059413909912},\"rot\":{\"x\":-4.77471940030227E-06,\"y\":179.997268676758,\"z\":-2.01280059286546E-07},\"tint\":{\"a\":1,\"b\":0,\"g\":0,\"r\":0.614982545375824}},\"14e498\":{\"lock\":false,\"pos\":{\"x\":-19.4999084472656,\"y\":1.8353009223938,\"z\":9.49790000915527},\"rot\":{\"x\":-2.79183313978137E-06,\"y\":179.968841552734,\"z\":4.69816370696208E-07},\"tint\":{\"a\":1,\"b\":0,\"g\":0,\"r\":0.614982545375824}},\"1e1893\":{\"lock\":false,\"pos\":{\"x\":17.5,\"y\":1.54081428050995,\"z\":-5.99989986419678},\"rot\":{\"x\":0.00494768749922514,\"y\":89.9983978271484,\"z\":359.989105224609},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"219139\":{\"lock\":false,\"pos\":{\"x\":-30.4997043609619,\"y\":1.77890622615814,\"z\":3.99759578704834},\"rot\":{\"x\":-5.0428720896889E-06,\"y\":179.987335205078,\"z\":1.35350802565881E-07},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"23a9e6\":{\"lock\":false,\"pos\":{\"x\":-5,\"y\":1.50523209571838,\"z\":8},\"rot\":{\"x\":0.0108898999169469,\"y\":180.020477294922,\"z\":0.00495417416095734},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"259f05\":{\"lock\":false,\"pos\":{\"x\":23.5000953674316,\"y\":1.5137939453125,\"z\":-5.49999761581421},\"rot\":{\"x\":0.0110340090468526,\"y\":179.999908447266,\"z\":0.00393215706571937},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"2c8685\":{\"lock\":false,\"pos\":{\"x\":-7.5,\"y\":1.51971805095673,\"z\":11.5},\"rot\":{\"x\":0.010891686193645,\"y\":179.997787475586,\"z\":0.00494785886257887},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"35fb70\":{\"lock\":false,\"pos\":{\"x\":-26.9995021820068,\"y\":1.76630067825317,\"z\":11.4983978271484},\"rot\":{\"x\":4.85122654936276E-06,\"y\":0.0402922593057156,\"z\":6.39377333300217E-08},\"tint\":{\"a\":0,\"b\":0,\"g\":0,\"r\":0}},\"3ab510\":{\"lock\":false,\"pos\":{\"x\":-5,\"y\":1.5195,\"z\":11.5},\"rot\":{\"x\":0.0109,\"y\":180.0016,\"z\":0.0049},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"418388\":{\"lock\":false,\"pos\":{\"x\":30.5,\"y\":1.6761782169342,\"z\":-3.00009989738464},\"rot\":{\"x\":-0.00059089990099892,\"y\":180.00129699707,\"z\":180.001068115234},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"453f78\":{\"lock\":false,\"pos\":{\"x\":-5,\"y\":1.52083277702332,\"z\":18.5},\"rot\":{\"x\":0.010891473852098,\"y\":180.001388549805,\"z\":0.00494850566610694},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"47d6f7\":{\"lock\":false,\"pos\":{\"x\":-5,\"y\":1.50656282901764,\"z\":15},\"rot\":{\"x\":0.0108898058533669,\"y\":180.020477294922,\"z\":0.0049557713791728},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"4d9bd7\":{\"lock\":false,\"pos\":{\"x\":17.5,\"y\":1.50528502464294,\"z\":18.5},\"rot\":{\"x\":0.00494773918762803,\"y\":90.0002975463867,\"z\":359.989105224609},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"55ce4f\":{\"lock\":false,\"pos\":{\"x\":17.5,\"y\":1.50404930114746,\"z\":12},\"rot\":{\"x\":359.990264892578,\"y\":299.999694824219,\"z\":0.00696407351642847},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"5ae073\":{\"lock\":false,\"pos\":{\"x\":-32.5,\"y\":1.7781,\"z\":25.4999},\"rot\":{\"x\":-0.0021,\"y\":179.9973,\"z\":0.0008},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"5c303b\":{\"lock\":false,\"pos\":{\"x\":4,\"y\":1.52005553245544,\"z\":18.5000019073486},\"rot\":{\"x\":0.0108913071453571,\"y\":180.001480102539,\"z\":0.00494859740138054},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"7234af\":{\"lock\":false,\"pos\":{\"x\":8.49999904632568,\"y\":1.50606226921082,\"z\":18.5},\"rot\":{\"x\":0.00494863418862224,\"y\":90.0042037963867,\"z\":359.989105224609},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"77812e\":{\"lock\":true,\"pos\":{\"x\":-12.5000009536743,\"y\":1.52138543128967,\"z\":18},\"rot\":{\"x\":0.0108914533630013,\"y\":180.000274658203,\"z\":0.0049483347684145},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"80552a\":{\"lock\":false,\"pos\":{\"x\":-11.0000009536743,\"y\":1.50698590278625,\"z\":14.5},\"rot\":{\"x\":0.0112005276605487,\"y\":134.999664306641,\"z\":-0.00420445064082742},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"81059f\":{\"lock\":false,\"pos\":{\"x\":-27.0000038146973,\"y\":1.83530128002167,\"z\":3.99999570846558},\"rot\":{\"x\":-5.23009339303826E-06,\"y\":179.984878540039,\"z\":-6.34132968357903E-09},\"tint\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1}},\"9c60ac\":{\"lock\":false,\"pos\":{\"x\":-23.9996032714844,\"y\":1.8006739616394,\"z\":3.99779582023621},\"rot\":{\"x\":-5.0127605391026E-06,\"y\":179.985702514648,\"z\":4.04667957809579E-07},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"a2cc1c\":{\"lock\":false,\"pos\":{\"x\":-0.500000059604645,\"y\":1.50607919692993,\"z\":14.5},\"rot\":{\"x\":-0.00420073559507728,\"y\":45.0117034912109,\"z\":359.988800048828},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"a5e1e5\":{\"lock\":true,\"pos\":{\"x\":13,\"y\":1.51927828788757,\"z\":18.5},\"rot\":{\"x\":0.0108916135504842,\"y\":179.999481201172,\"z\":0.00494816293939948},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"b3fd28\":{\"lock\":false,\"pos\":{\"x\":12.5,\"y\":1.53643202781677,\"z\":-6.00000095367432},\"rot\":{\"x\":0.00494880136102438,\"y\":90.0036544799805,\"z\":359.989105224609},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"b64c58\":{\"lock\":false,\"pos\":{\"x\":-9.00000095367432,\"y\":1.50747859477997,\"z\":18},\"rot\":{\"x\":0.00494797341525555,\"y\":90.0005722045898,\"z\":359.989105224609},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"bfc6f0\":{\"lock\":false,\"pos\":{\"x\":-5,\"y\":1.51817154884338,\"z\":4.5},\"rot\":{\"x\":0.0108913015574217,\"y\":180.002990722656,\"z\":0.00494882697239518},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"c37eef\":{\"lock\":false,\"pos\":{\"x\":-19.0000019073486,\"y\":1.77890622615814,\"z\":3.99899888038635},\"rot\":{\"x\":-4.89246804136201E-06,\"y\":179.993133544922,\"z\":1.15289942925756E-07},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"c79201\":{\"lock\":false,\"pos\":{\"x\":-30.0862979888916,\"y\":1.76629912853241,\"z\":28.7351016998291},\"rot\":{\"x\":5.38633867108729E-06,\"y\":-9.10570306587033E-05,\"z\":-2.76331746817959E-07},\"tint\":{\"a\":0,\"b\":0,\"g\":0,\"r\":0}},\"c8ca62\":{\"lock\":false,\"pos\":{\"x\":-19.5522994995117,\"y\":1.76630067825317,\"z\":11.5200004577637},\"rot\":{\"x\":5.35572780790972E-06,\"y\":0.046254575252533,\"z\":-2.76560871981246E-08},\"tint\":{\"a\":0,\"b\":0,\"g\":0,\"r\":0}},\"caf9d1\":{\"lock\":false,\"pos\":{\"x\":17.5,\"y\":1.50652062892914,\"z\":25},\"rot\":{\"x\":-0.00116107752546668,\"y\":60.0000991821289,\"z\":359.988098144531},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"cbab46\":{\"lock\":false,\"pos\":{\"x\":-22.4997005462646,\"y\":1.77890574932098,\"z\":8.99789905548096},\"rot\":{\"x\":-4.98692043038318E-06,\"y\":179.999847412109,\"z\":-2.39606066543274E-07},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"e57ccb\":{\"lock\":false,\"pos\":{\"x\":-0.5,\"y\":1.50683951377869,\"z\":18.5},\"rot\":{\"x\":0.00494790496304631,\"y\":90.0001449584961,\"z\":359.989105224609},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"f800b3\":{\"lock\":false,\"pos\":{\"x\":25.0002498626709,\"y\":1.53323233127594,\"z\":-5.49998235702515},\"rot\":{\"x\":0.0109097072854638,\"y\":180.001235961914,\"z\":181.059020996094},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"fad42f\":{\"lock\":false,\"pos\":{\"x\":-21.4998016357422,\"y\":1.81993019580841,\"z\":3.99799656867981},\"rot\":{\"x\":-5.28907366970088E-06,\"y\":179.99577331543,\"z\":2.72143722668261E-07},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}}}}","XmlUI":"","ContainedObjects":[{"GUID":"0e3f22","Name":"Custom_Model_Bag","Transform":{"posX":-27.0024071,"posY":1.83530092,"posZ":9.500592,"rotX":-0.00000446888134,"rotY":179.997253,"rotZ":4.686735e-7,"scaleX":0.7,"scaleY":0.7,"scaleZ":0.7},"Nickname":"Lounge","Description":"merci à Chr1Z pour le script","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.614982545,"g":0,"b":0},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"MaterialIndex":-1,"MeshIndex":-1,"CustomMesh":{"MeshURL":"https://pastebin.com/raw/ALrYhQGb","DiffuseURL":"http://cloud-3.steamusercontent.com/ugc/1936013662302193698/48C5185AFDA1F41D2B89F9C0C875F42AA47FD440/","NormalURL":"","ColliderURL":"","Convex":true,"MaterialIndex":3,"TypeIndex":6,"CustomShader":{"SpecularColor":{"r":1,"g":1,"b":1},"SpecularIntensity":0,"SpecularSharpness":2,"FresnelStrength":0},"CastShadows":true},"Bag":{"Order":0},"LuaScript":"-- Random memory bag\r\n-- based on Utility memory bag by Directsun (Version 2.7.0)\r\n\r\nlocal CONFIG = {\r\n    MEMORY_GROUP = {\r\n        -- This determines how many frames to wait before actually placing objects onto the table when the \"Place\" button is clicked.\r\n        -- This gives the other bags time to recall their objects.\r\n        -- The delay ONLY occurs if other bags have objects out.\r\n        FRAME_DELAY_BEFORE_PLACING_OBJECTS = 30\r\n    }\r\n}\r\n\r\nmath.randomseed(os.time())\r\n\r\n--[[ Memory Bag Groups ]]\r\n--[[ Utility Memory Bags may be added to a named group, called a \"memory group\".\r\nYou can add a bag to a group through the bag's UI: \"Setup\" > \"Group Name\" (to the left of the bag).\r\nOnly one bag from a group may have it's contents placed on the table at a time.\r\nWhen \"Place\" is clicked on a bag, the other bags in it's memory group are recalled.\r\nBy default a memory bag is not in any group. It's memory group is \"nil\". --]]\r\n\r\nmemoryGroupName = { memoryBag = self }\r\nfunction memoryGroupName:get()\r\n    return self._name\r\nend\r\n\r\nfunction memoryGroupName:set(newName)\r\n    GlobalMemoryGroups:unregisterBagInGroup(self:get(), self.memoryBag.getGUID())\r\n    GlobalMemoryGroups:registerBagInGroup(newName, self.memoryBag.getGUID())\r\n\r\n    if newName == \"\" then\r\n        self._name = nil\r\n    else\r\n        self._name = newName\r\n    end\r\nend\r\n\r\n-- Click the \"Recall\" button on all other bags in my memory group.\r\nfunction recallOtherBagsInMyGroup()\r\n    for _, bag in ipairs(getOtherBagsInMyGroup()) do\r\n        bag.call('buttonClick_recall')\r\n    end\r\nend\r\n\r\n-- Return \"true\" if another bag in my memory group has any objects out on the table.\r\nfunction anyOtherBagsInMyGroupArePlaced()\r\n    for _, bag in ipairs(getOtherBagsInMyGroup()) do\r\n        local state = bag.call('areAnyOfMyObjectsPlaced')\r\n        if state then return true end\r\n    end\r\n\r\n    return false\r\nend\r\n\r\n-- Return \"true\" if at least one object from this memory bag is out on the table.\r\nfunction areAnyOfMyObjectsPlaced()\r\n    for guid, _ in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then\r\n            return true\r\n        end\r\n    end\r\n    return false\r\nend\r\n\r\nfunction getOtherBagsInMyGroup()\r\n    local bags = {}\r\n    for bagGuid, _ in pairs(GlobalMemoryGroups:getGroup(memoryGroupName:get())) do\r\n        if bagGuid ~= self.getGUID() then\r\n            bag = getObjectFromGUID(bagGuid)\r\n            -- \"bag\" is nill if it has been deleted since the last time onLoad() was called.\r\n            if bag ~= nil then\r\n                table.insert(bags, bag)\r\n            end\r\n        end\r\n    end\r\n    return bags\r\nend\r\n\r\n--[[\r\nThis object provides access to a variable stored on the \"Global script\".\r\nThe variable holds the names & guids of all memory bag groups.\r\nThe global variable is a table and holds data like this:\r\n{\r\n    'My First Group Name' = {\r\n        '805ebd' = {},\r\n        '35cc21' = {},\r\n        'fc8886' = {},\r\n    },\r\n    'My Second Group Name' = {\r\n        'f50264' = {},\r\n        '5f5f63' = {},\r\n    },\r\n}\r\n--]]\r\nGlobalMemoryGroups = { NAME_OF_GLOBAL_VARIABLE = '_GlobalUtilityMemoryBagGroups' }\r\n\r\n-- Call me inside this script's \"onLoad()\" method!\r\nfunction GlobalMemoryGroups:onLoad(myGuid)\r\n    -- Create and initialize the global variable if it doesn't already exist:\r\n    if self:_getGroups() == nil then\r\n        self:_setGroups({})\r\n    end\r\nend\r\n\r\n-- Return the GUIDs of all bags in the \"groupName\". The return value is a dictionary that maps [GUID -> empty table].\r\nfunction GlobalMemoryGroups:getGroup(groupName)\r\n    guids = self:_getGroups()[groupName] or {}\r\n    return guids\r\nend\r\n\r\n-- Registers a bag in a memory group. Creates a new group if one doesn't exist.\r\nfunction GlobalMemoryGroups:registerBagInGroup(groupName, bagGuid)\r\n    if groupName == nil or groupName == \"\" then\r\n        return\r\n    end\r\n\r\n    self:_tryCreateNewGroup(groupName)\r\n    local groups = self:_getGroups()\r\n    groups[groupName][bagGuid] = {}\r\n    self:_setGroups(groups)\r\nend\r\n\r\n-- Removes this bag from the memory group.\r\nfunction GlobalMemoryGroups:unregisterBagInGroup(groupName, bagGuid)\r\n    local groups = self:_getGroups()\r\n    local group = groups[groupName]\r\n    if group ~= nil then\r\n        group[bagGuid] = nil\r\n        self:_setGroups(groups)\r\n    end\r\nend\r\n\r\n-- Return the global variable, which is a table holding all memory group names & guids.\r\nfunction GlobalMemoryGroups:_getGroups()\r\n    return Global.getTable(self.NAME_OF_GLOBAL_VARIABLE)\r\nend\r\n\r\n-- Override the global variable (i.e. the entire table).\r\nfunction GlobalMemoryGroups:_setGroups(newTable)\r\n    Global.setTable(self.NAME_OF_GLOBAL_VARIABLE, newTable)\r\nend\r\n\r\n-- Add a new memory group named \"groupName\" to the global variable, if one doesn't already exist.\r\nfunction GlobalMemoryGroups:_tryCreateNewGroup(groupName)\r\n    local groups = self:_getGroups()\r\n    if groups[groupName] == nil then\r\n        groups[groupName] = {}\r\n        self:_setGroups(groups)\r\n    end\r\nend\r\n\r\n-- This object controls the \"Group Name\" input text field that is part of the bag's ingame UI.\r\ngroupNameInput = {\r\n    greyedOutText     = \"Group Name\",\r\n    widthPerCharacter = 100,\r\n    padding           = 4,\r\n    memoryBag         = self\r\n}\r\nfunction groupNameInput:create(optionalStartingValue)\r\n    local effectiveText = optionalStartingValue or self.greyedOutText\r\n    local width = self:computeWidth(effectiveText)\r\n\r\n    self.memoryBag.createInput({\r\n        label = self.greyedOutText,\r\n        value = optionalStartingValue or nil,\r\n        alignment = 3, -- Center aligned\r\n        input_function = \"groupNameInput_onCharacterTyped\", function_owner = self.memoryBag,\r\n        position = { 2.1, 0.3, 0 }, rotation = { 0, 270, 0 }, width = width, height = 350,\r\n        font_size = 250, color = { 0, 0, 0 }, font_color = { 1, 1, 1 },\r\n    })\r\nend\r\n\r\nfunction groupNameInput:computeWidth(text)\r\n    return (string.len(text) + self.padding) * self.widthPerCharacter\r\nend\r\n\r\nfunction groupNameInput:updatedWidth(text)\r\n    self.memoryBag.editInput({\r\n        index = 0,\r\n        width = self:computeWidth(text)\r\n    })\r\nend\r\n\r\nfunction groupNameInput:onCharacterTyped(text, stillEditing)\r\n    if stillEditing then\r\n        self:updatedWidth(text)\r\n    else\r\n        if text == \"\" then\r\n            self:updatedWidth(self.greyedOutText)\r\n        end\r\n    end\r\nend\r\n\r\nfunction groupNameInput_onCharacterTyped(memoryBag, playerColor, text, stillEditing)\r\n    groupNameInput:onCharacterTyped(text, stillEditing)\r\nend\r\n\r\nfunction groupNameInput:setGroupNameToInputField()\r\n    local inputFields = self.memoryBag.getInputs()\r\n    if inputFields ~= nil then\r\n        -- Get input field 0, which corresponds to the groupNameInput.\r\n        -- Unfortunately \"self.getInputs()\" doesn't return the inputs in a guaranteed order.\r\n        local nameField = nil\r\n        for _, field in ipairs(inputFields) do\r\n            if field.index == 0 then\r\n                nameField = field\r\n            end\r\n        end\r\n\r\n        memoryGroupName:set(nameField.value)\r\n    end\r\nend\r\n\r\nfunction updateSave()\r\n    local data_to_save = { [\"ml\"] = memoryList, [\"groupName\"] = memoryGroupName:get() }\r\n    saved_data = JSON.encode(data_to_save)\r\n    self.script_state = saved_data\r\nend\r\n\r\nfunction combineMemoryFromBagsWithin()\r\n    local bagObjList = self.getObjects()\r\n    for _, bagObj in ipairs(bagObjList) do\r\n        local data = bagObj.lua_script_state\r\n        if data ~= nil then\r\n            local j = JSON.decode(data)\r\n            if j ~= nil and j.ml ~= nil then\r\n                for guid, entry in pairs(j.ml) do\r\n                    memoryList[guid] = entry\r\n                end\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\nfunction updateMemoryWithMoves()\r\n    memoryList = memoryListBackup\r\n    --get the first transposed object's coordinates\r\n    local obj = getObjectFromGUID(moveGuid)\r\n\r\n    -- p1 is where needs to go, p2 is where it was\r\n    local refObjPos = memoryList[moveGuid].pos\r\n    local deltaPos = findOffsetDistance(obj.getPosition(), refObjPos, nil)\r\n    local movedRotation = obj.getRotation()\r\n    for guid, entry in pairs(memoryList) do\r\n        memoryList[guid].pos.x = entry.pos.x - deltaPos.x\r\n        memoryList[guid].pos.y = entry.pos.y - deltaPos.y\r\n        memoryList[guid].pos.z = entry.pos.z - deltaPos.z\r\n    end\r\n    moveList = {}\r\nend\r\n\r\nfunction onload(saved_data)\r\n    GlobalMemoryGroups:onLoad(self.getGUID())\r\n    AllMemoryBagsInScene:add(self.getGUID())\r\n\r\n    fresh = true\r\n    if saved_data ~= \"\" then\r\n        local loaded_data = JSON.decode(saved_data)\r\n        --Set up information off of loaded_data\r\n        memoryList = loaded_data.ml\r\n        memoryGroupName:set(loaded_data.groupName)\r\n    else\r\n        --Set up information for if there is no saved saved data\r\n        memoryList = {}\r\n        memoryGroupName:set(nil)\r\n    end\r\n\r\n    moveList = {}\r\n    moveGuid = nil\r\n\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        fresh = false\r\n        createMemoryActionButtons()\r\n    end\r\nend\r\n\r\n--Beginning Setup\r\n\r\n--Make setup button\r\nfunction createSetupButton()\r\n    self.createButton({\r\n      label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n      position={0,0.3,2}, rotation={0,0,0}, height=350, width=800,\r\n      font_size=250, color={0,0,0}, font_color={1,1,1}\r\n  })\r\nend\r\n\r\n--Triggered by Transpose button\r\nfunction buttonClick_transpose()\r\n    moveGuid = nil\r\n    broadcastToAll(\"Select one object and move it- all objects will move relative to the new location\", { 0.75, 0.75, 1 })\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(true)\r\n    createSetupActionButtons(true)\r\nend\r\n\r\n--Triggered by setup button,\r\nfunction buttonClick_setup()\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(false)\r\n    createSetupActionButtons(false)\r\nend\r\n\r\nfunction getAllObjectsInMemory()\r\n    local objTable = {}\r\n    local curObj = {}\r\n\r\n    for guid in pairs(memoryListBackup) do\r\n        curObj = getObjectFromGUID(guid)\r\n        table.insert(objTable, curObj)\r\n    end\r\n\r\n    return objTable\r\nend\r\n\r\n--Creates selection buttons on objects\r\nfunction createButtonsOnAllObjects(move)\r\n    buttonIndexMap = {}\r\n    local howManyButtons = 0\r\n\r\n    local objsToHaveButtons = {}\r\n    if move == true then\r\n        objsToHaveButtons = getAllObjectsInMemory()\r\n    else\r\n        objsToHaveButtons = getAllObjects()\r\n    end\r\n\r\n    for _, obj in ipairs(objsToHaveButtons) do\r\n        if obj ~= self then\r\n            --On a normal bag, the button positions aren't the same size as the bag.\r\n            globalScaleFactor = 1 * 1 / self.getScale().x\r\n            --Super sweet math to set button positions\r\n            local selfPos = self.getPosition()\r\n            local objPos = obj.getPosition()\r\n            local deltaPos = findOffsetDistance(selfPos, objPos, obj)\r\n            local objPos = rotateLocalCoordinates(deltaPos, self)\r\n            objPos.x = -objPos.x * globalScaleFactor\r\n            objPos.y = objPos.y * globalScaleFactor + 2\r\n            objPos.z = objPos.z * globalScaleFactor\r\n            --Workaround for custom PDFs\r\n            if obj.Book then\r\n                objPos.y = objPos.y + 0.5\r\n            end\r\n            --Offset rotation of bag\r\n            local rot = self.getRotation()\r\n            rot.y = -rot.y + 180\r\n            --Create function\r\n            local funcName = \"selectButton_\" .. howManyButtons\r\n            local func = function() buttonClick_selection(obj, move) end\r\n            local color = { 0.75, 0.25, 0.25, 0.6 }\r\n            local colorMove = { 0, 0, 1, 0.6 }\r\n            if move == true then\r\n                color = colorMove\r\n            end\r\n            self.setVar(funcName, func)\r\n            self.createButton({\r\n                click_function = funcName, function_owner = self,\r\n                position = objPos, rotation = rot, height = 1000, width = 1000,\r\n                color = color,\r\n            })\r\n            buttonIndexMap[obj.getGUID()] = howManyButtons\r\n            howManyButtons = howManyButtons + 1\r\n        end\r\n    end\r\nend\r\n\r\n  --Creates submit and cancel buttons\r\n  function createSetupActionButtons(move)\r\n      self.createButton({\r\n         label=\"Annuler\", click_function=\"buttonClick_cancel\", function_owner=self,\r\n         position={-1.15,0.3,2.1}, rotation={0,0,0}, height=350, width=1100,\r\n         font_size=250, color={0,0,0}, font_color={1,1,1}\r\n      })\r\n\r\n      self.createButton({\r\n        label=\"Valider\", click_function=\"buttonClick_submit\", function_owner=self,\r\n        position={-1.15,0.3,2.8}, rotation={0,0,0}, height=350, width=1100,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n      })\r\n\r\n      if move == false then\r\n        self.createButton({\r\n            label=\"Ajouter\", click_function=\"buttonClick_add\", function_owner=self,\r\n            position={1.15,0.3,2.1}, rotation={0,0,0}, height=350, width=1100,\r\n            font_size=250, color={0,0,0}, font_color={0.25,1,0.25}\r\n          })\r\n\r\n          self.createButton({\r\n              label=\"Sélection\", click_function=\"editDragSelection\", function_owner=self,\r\n              position={-1.15,0.3,3.5}, rotation={0,0,0}, height=350, width=1100,\r\n              font_size=250, color={0,0,0}, font_color={1,1,1}\r\n          })\r\n\r\n          if fresh == false then\r\n              self.createButton({\r\n                  label=\"Mise à Jour\", click_function=\"buttonClick_setNew\", function_owner=self,\r\n                  position={1.15,0.3,3.5}, rotation={0,0,0}, height=350, width=1100,\r\n                  font_size=180, color={0,0,0}, font_color={0.75,0.75,1}\r\n              })\r\n              self.createButton({\r\n                  label=\"Retirer\", click_function=\"buttonClick_remove\", function_owner=self,\r\n                  position={1.15,0.3,2.8}, rotation={0,0,0}, height=350, width=1100,\r\n                  font_size=250, color={0,0,0}, font_color={1,0.25,0.25}\r\n              })\r\n          end\r\n      end\r\n\r\n      self.createButton({\r\n          label=\"Reset\", click_function=\"buttonClick_reset\", function_owner=self,\r\n          position={0,0.3,-2}, rotation={0,0,0}, height=350, width=800,\r\n          font_size=250, color={0,0,0}, font_color={1,1,1}\r\n      })\r\n  end\r\n\r\n\r\n--During Setup\r\n\r\n--Checks or unchecks buttons\r\nfunction buttonClick_selection(obj, move)\r\n    local index = buttonIndexMap[obj.getGUID()]\r\n    local colorMove = { 0, 0, 1, 0.6 }\r\n    local color = { 0, 1, 0, 0.6 }\r\n\r\n    previousGuid = selectedGuid\r\n    selectedGuid = obj.getGUID()\r\n\r\n    theList = memoryList\r\n    if move == true then\r\n        theList = moveList\r\n        if previousGuid ~= nil and previousGuid ~= selectedGuid then\r\n            local prevObj = getObjectFromGUID(previousGuid)\r\n            prevObj.highlightOff()\r\n            self.editButton({ index = previousIndex, color = colorMove })\r\n            theList[previousGuid] = nil\r\n        end\r\n        previousIndex = index\r\n    end\r\n\r\n    if theList[selectedGuid] == nil then\r\n        self.editButton({ index = index, color = color })\r\n        --Adding pos/rot to memory table\r\n        local pos, rot = obj.getPosition(), obj.getRotation()\r\n        --I need to add it like this or it won't save due to indexing issue\r\n        theList[obj.getGUID()] = {\r\n            pos = { x = round(pos.x, 4), y = round(pos.y, 4), z = round(pos.z, 4) },\r\n            rot = { x = round(rot.x, 4), y = round(rot.y, 4), z = round(rot.z, 4) },\r\n            lock = obj.getLock(),\r\n            tint = obj.getColorTint()\r\n        }\r\n        obj.highlightOn({ 0, 1, 0 })\r\n    else\r\n        color = { 0.75, 0.25, 0.25, 0.6 }\r\n        if move == true then\r\n            color = colorMove\r\n        end\r\n        self.editButton({ index = index, color = color })\r\n        theList[obj.getGUID()] = nil\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\nfunction editDragSelection(bagObj, player, remove)\r\n    local selectedObjs = Player[player].getSelectedObjects()\r\n    if not remove then\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            --Ignore if already in the memory list, or does not have a button\r\n            if index and not memoryList[obj.getGUID()] then\r\n                self.editButton({ index = index, color = { 0, 1, 0, 0.6 } })\r\n                --Adding pos/rot to memory table\r\n                local pos, rot = obj.getPosition(), obj.getRotation()\r\n                --I need to add it like this or it won't save due to indexing issue\r\n                memoryList[obj.getGUID()] = {\r\n                    pos = { x = round(pos.x, 4), y = round(pos.y, 4), z = round(pos.z, 4) },\r\n                    rot = { x = round(rot.x, 4), y = round(rot.y, 4), z = round(rot.z, 4) },\r\n                    lock = obj.getLock(),\r\n                    tint = obj.getColorTint()\r\n                }\r\n                obj.highlightOn({ 0, 1, 0 })\r\n            end\r\n        end\r\n    else\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            if index and memoryList[obj.getGUID()] then\r\n                color = { 0.75, 0.25, 0.25, 0.6 }\r\n                self.editButton({ index = index, color = color })\r\n                memoryList[obj.getGUID()] = nil\r\n                obj.highlightOff()\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\n--Cancels selection process\r\nfunction buttonClick_cancel()\r\n    memoryList = memoryListBackup\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        createMemoryActionButtons()\r\n    end\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Sélection annulée\", { 1, 1, 1 })\r\n    moveGuid = nil\r\nend\r\n\r\n--Saves selections\r\nfunction buttonClick_submit()\r\n    fresh = false\r\n    if next(moveList) ~= nil then\r\n        for guid in pairs(moveList) do\r\n            moveGuid = guid\r\n        end\r\n        if memoryListBackup[moveGuid] == nil then\r\n            broadcastToAll(\"Item selected for moving is not already in memory\", { 1, 0.25, 0.25 })\r\n        else\r\n            broadcastToAll(\"Moving all items in memory relative to new objects position!\", { 0.75, 0.75, 1 })\r\n            self.clearButtons()\r\n            self.clearInputs()\r\n            createMemoryActionButtons()\r\n            local count = 0\r\n            for guid in pairs(moveList) do\r\n                moveGuid = guid\r\n                count = count + 1\r\n                local obj = getObjectFromGUID(guid)\r\n                if obj ~= nil then obj.highlightOff() end\r\n            end\r\n            updateMemoryWithMoves()\r\n            updateSave()\r\n            buttonClick_place()\r\n        end\r\n    elseif next(memoryList) == nil and moveGuid == nil then\r\n        memoryList = memoryListBackup\r\n        broadcastToAll(\"No selections made.\", { 0.75, 0.25, 0.25 })\r\n    end\r\n    combineMemoryFromBagsWithin()\r\n    groupNameInput:setGroupNameToInputField()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count .. \" Objects Saved\", { 1, 1, 1 })\r\n    updateSave()\r\n    moveGuid = nil\r\nend\r\n\r\nfunction combineTables(first_table, second_table)\r\n    for k, v in pairs(second_table) do first_table[k] = v end\r\nend\r\n\r\nfunction buttonClick_add()\r\n    fresh = false\r\n    combineTables(memoryList, memoryListBackup)\r\n    broadcastToAll(\"Adding internal bags and selections to existing memory\", { 0.25, 0.75, 0.25 })\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count .. \" Objects Saved\", { 1, 1, 1 })\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_remove()\r\n    broadcastToAll(\"Removing Selected Entries From Memory\", { 1.0, 0.25, 0.25 })\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        memoryListBackup[guid] = nil\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count .. \" Objects Removed\", { 1, 1, 1 })\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_setNew()\r\n    broadcastToAll(\"Setting new position relative to items in memory\", { 0.75, 0.75, 1 })\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        guid = obj.guid\r\n        if memoryListBackup[guid] ~= nil then\r\n            count = count + 1\r\n            memoryListBackup[guid].pos = obj.getPosition()\r\n            memoryListBackup[guid].rot = obj.getRotation()\r\n            memoryListBackup[guid].lock = obj.getLock()\r\n            memoryListBackup[guid].tint = obj.getColorTint()\r\n        end\r\n    end\r\n    broadcastToAll(count .. \" Objects Saved\", { 1, 1, 1 })\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\n--Resets bag to starting status\r\nfunction buttonClick_reset()\r\n    fresh = true\r\n    memoryList = {}\r\n    memoryGroupName:set(nil)\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createSetupButton()\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Tool Reset\", { 1, 1, 1 })\r\n    updateSave()\r\nend\r\n\r\n--After Setup\r\n\r\n--Creates recall and place buttons\r\nfunction createMemoryActionButtons()\r\n    self.createButton({\r\n        label=\"Placer au hasard\", click_function=\"buttonClick_place\", function_owner=self,\r\n        position={0,0.3,2}, rotation={0,0,0}, height=350, width=2000,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Ranger\", click_function=\"buttonClick_recall\", function_owner=self,\r\n        position={0,0.3,2.8}, rotation={0,0,0}, height=350, width=1000,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n        position={2,0.3,0}, rotation={0,90,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    ---    self.createButton({\r\n    ---      label=\"Bouger\", click_function=\"buttonClick_transpose\", function_owner=self,\r\n    ---      position={-2,0.3,0.8}, rotation={0,270,0}, height=350, width=800,\r\n    ---      font_size=250, color={0,0,0}, font_color={0.75,0.75,1}\r\n    ---\r\nend\r\n\r\n--Sends objects from bag/table to their saved position/rotation\r\nfunction buttonClick_place()\r\n    if anyOtherBagsInMyGroupArePlaced() then\r\n        recallOtherBagsInMyGroup()\r\n        Wait.frames(_placeObjects, CONFIG.MEMORY_GROUP.FRAME_DELAY_BEFORE_PLACING_OBJECTS)\r\n    else\r\n        _placeObjects()\r\n    end\r\nend\r\n\r\nfunction _placeObjects()\r\n    local bagObjList = self.getObjects()\r\n\r\n    -- randomize memorylist position\r\n    local positionList = {}\r\n    for guid, entry in pairs(memoryList) do\r\n        table.insert(positionList, memoryList[guid].pos)\r\n    end\r\n\r\n    for i = #positionList, 2, -1 do\r\n        local j = math.random(i)\r\n        positionList[i], positionList[j] = positionList[j], positionList[i]\r\n    end\r\n\r\n    local i = 1\r\n    for guid, entry in pairs(memoryList) do\r\n        memoryList[guid].pos = positionList[i]\r\n        i = i + 1\r\n    end\r\n\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        --If obj is out on the table, move it to the saved pos/rot\r\n        if obj ~= nil then\r\n            obj.setPositionSmooth(entry.pos)\r\n            obj.setRotationSmooth(entry.rot)\r\n            obj.setLock(entry.lock)\r\n            obj.setColorTint(entry.tint)\r\n        else\r\n            --If obj is inside of the bag\r\n            for _, bagObj in ipairs(bagObjList) do\r\n                if bagObj.guid == guid then\r\n                    local item = self.takeObject({\r\n                        guid = guid, position = entry.pos, rotation = entry.rot, smooth = false\r\n                    })\r\n                    item.setLock(entry.lock)\r\n                    item.setColorTint(entry.tint)\r\n                    break\r\n                end\r\n            end\r\n        end\r\n    end\r\n    broadcastToAll(\"Objets placés au hasard\", {1,1,1})\r\nend\r\n\r\n--Recalls objects to bag from table\r\nfunction buttonClick_recall()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then self.putObject(obj) end\r\n    end\r\n    broadcastToAll(\"Objets rangés\", {1,1,1})\r\nend\r\n\r\n--Utility functions\r\n\r\n--Find delta (difference) between 2 x/y/z coordinates\r\nfunction findOffsetDistance(p1, p2, obj)\r\n    local yOffset = 0\r\n    if obj ~= nil then\r\n        local bounds = obj.getBounds()\r\n        yOffset = (bounds.size.y - bounds.offset.y)\r\n    end\r\n    local deltaPos = {}\r\n    deltaPos.x = (p2.x - p1.x)\r\n    deltaPos.y = (p2.y - p1.y) + yOffset\r\n    deltaPos.z = (p2.z - p1.z)\r\n    return deltaPos\r\nend\r\n\r\n--Used to rotate a set of coordinates by an angle\r\nfunction rotateLocalCoordinates(desiredPos, obj)\r\n    local objPos, objRot = obj.getPosition(), obj.getRotation()\r\n    local angle = math.rad(objRot.y)\r\n    local x = desiredPos.x * math.cos(angle) - desiredPos.z * math.sin(angle)\r\n    local z = desiredPos.x * math.sin(angle) + desiredPos.z * math.cos(angle)\r\n    --return {x=objPos.x+x, y=objPos.y+desiredPos.y, z=objPos.z+z}\r\n    return { x = x, y = desiredPos.y, z = z }\r\nend\r\n\r\nfunction rotateMyCoordinates(desiredPos, obj)\r\n    local angle = math.rad(obj.getRotation().y)\r\n    local x = desiredPos.x * math.sin(angle)\r\n    local z = desiredPos.z * math.cos(angle)\r\n    return { x = x, y = desiredPos.y, z = z }\r\nend\r\n\r\n--Coroutine delay, in seconds\r\nfunction wait(time)\r\n    local start = os.time()\r\n    repeat coroutine.yield(0) until os.time() > start + time\r\nend\r\n\r\n--Duplicates a table (needed to prevent it making reference to the same objects)\r\nfunction duplicateTable(oldTable)\r\n    local newTable = {}\r\n    for k, v in pairs(oldTable) do\r\n        newTable[k] = v\r\n    end\r\n    return newTable\r\nend\r\n\r\n--Moves scripted highlight from all objects\r\nfunction removeAllHighlights()\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\n--Round number (num) to the Nth decimal (dec)\r\nfunction round(num, dec)\r\n    local mult = 10 ^ (dec or 0)\r\n    return math.floor(num * mult + 0.5) / mult\r\nend\r\n\r\n--[[ This object provides access to a variable stored on the \"Global script\".\r\nThe variable holds the GUIDs for every Utility Memory Bag in the scene.\r\nExample: {'805ebd', '35cc21', 'fc8886', 'f50264', '5f5f63'} --]]\r\nAllMemoryBagsInScene = {\r\n    NAME_OF_GLOBAL_VARIABLE = \"_UtilityMemoryBag_AllMemoryBagsInScene\"\r\n}\r\n\r\nfunction AllMemoryBagsInScene:add(guid)\r\n    local guids = Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\n    table.insert(guids, guid)\r\n    Global.setTable(self.NAME_OF_GLOBAL_VARIABLE, guids)\r\nend\r\n\r\nfunction AllMemoryBagsInScene:getGuidList()\r\n    return Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\nend\r\n","LuaScriptState":"{\"ml\":{\"3ab510\":{\"lock\":false,\"pos\":{\"x\":-5.0007,\"y\":1.5195,\"z\":11.5},\"rot\":{\"x\":0.0109,\"y\":180.0034,\"z\":0.0049},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"5ae073\":{\"lock\":false,\"pos\":{\"x\":-30,\"y\":1.7781,\"z\":26},\"rot\":{\"x\":-0.0021,\"y\":180.0001,\"z\":0.0008},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}}}}","XmlUI":"","ContainedObjects":[{"GUID":"3ab510","Name":"Card","Transform":{"posX":-29.9999924,"posY":1.7789042,"posZ":26.0000134,"rotX":-0.00000508199355,"rotY":180.003372,"rotZ":-1.06466992e-7,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Lounge du Club du Trèfle","Description":"Club du Trèfle.","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02071\",\n  \"locationBack\": {\n    \"connections\": \"Crescent|Square|Triangle\",\n    \"icons\": \"Circle\"\n  },\n  \"locationFront\": {\n    \"connections\": \"Crescent|Square|Triangle\",\n    \"icons\": \"Circle\"\n  },\n  \"traits\": \"Clover Club.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":116901,"SidewaysCard":false,"CustomDeck":{"1169":{"FaceURL":"https://i.imgur.com/iZag7R1.jpg","BackURL":"https://i.imgur.com/ArR45VU.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"5ae073","Name":"Card","Transform":{"posX":-5.000698,"posY":1.51950216,"posZ":11.4999971,"rotX":0.0108915586,"rotY":180.0001,"rotZ":0.00494821044,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"51016\",\n  \"locationBack\": {\n    \"connections\": \"Crescent|Square|Triangle|Heart\",\n    \"icons\": \"Circle\"\n  },\n  \"locationFront\": {\n    \"connections\": \"Crescent|Square|Triangle\",\n    \"icons\": \"Circle\"\n  },\n  \"traits\": \"Clover Club.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276104,"SidewaysCard":false,"CustomDeck":{"2761":{"FaceURL":"https://i.imgur.com/FVWxpyu.jpg","BackURL":"https://i.imgur.com/EmJxccn.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""}]},{"GUID":"14e498","Name":"Custom_Model_Bag","Transform":{"posX":-19.4999084,"posY":1.8353008,"posZ":9.497899,"rotX":-0.0000068254667,"rotY":179.968918,"rotZ":-2.62889159e-7,"scaleX":0.7,"scaleY":0.7,"scaleZ":0.7},"Nickname":"bag coin aléatoire","Description":"merci à Chr1Z pour le script","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.614982545,"g":0,"b":0},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"MaterialIndex":-1,"MeshIndex":-1,"CustomMesh":{"MeshURL":"https://pastebin.com/raw/ALrYhQGb","DiffuseURL":"http://cloud-3.steamusercontent.com/ugc/1936013662301521665/D9C7971B00B015E1D54AD5FE31520A149C29B0C6/","NormalURL":"","ColliderURL":"","Convex":true,"MaterialIndex":3,"TypeIndex":6,"CustomShader":{"SpecularColor":{"r":1,"g":1,"b":1},"SpecularIntensity":0,"SpecularSharpness":2,"FresnelStrength":0},"CastShadows":true},"Bag":{"Order":0},"LuaScript":"-- Random memory bag\r\n-- based on Utility memory bag by Directsun (Version 2.7.0)\r\n\r\nlocal CONFIG = {\r\n    MEMORY_GROUP = {\r\n        -- This determines how many frames to wait before actually placing objects onto the table when the \"Place\" button is clicked.\r\n        -- This gives the other bags time to recall their objects.\r\n        -- The delay ONLY occurs if other bags have objects out.\r\n        FRAME_DELAY_BEFORE_PLACING_OBJECTS = 30\r\n    }\r\n}\r\n\r\nmath.randomseed(os.time())\r\n\r\n--[[ Memory Bag Groups ]]\r\n--[[ Utility Memory Bags may be added to a named group, called a \"memory group\".\r\nYou can add a bag to a group through the bag's UI: \"Setup\" > \"Group Name\" (to the left of the bag).\r\nOnly one bag from a group may have it's contents placed on the table at a time.\r\nWhen \"Place\" is clicked on a bag, the other bags in it's memory group are recalled.\r\nBy default a memory bag is not in any group. It's memory group is \"nil\". --]]\r\n\r\nmemoryGroupName = { memoryBag = self }\r\nfunction memoryGroupName:get()\r\n    return self._name\r\nend\r\n\r\nfunction memoryGroupName:set(newName)\r\n    GlobalMemoryGroups:unregisterBagInGroup(self:get(), self.memoryBag.getGUID())\r\n    GlobalMemoryGroups:registerBagInGroup(newName, self.memoryBag.getGUID())\r\n\r\n    if newName == \"\" then\r\n        self._name = nil\r\n    else\r\n        self._name = newName\r\n    end\r\nend\r\n\r\n-- Click the \"Recall\" button on all other bags in my memory group.\r\nfunction recallOtherBagsInMyGroup()\r\n    for _, bag in ipairs(getOtherBagsInMyGroup()) do\r\n        bag.call('buttonClick_recall')\r\n    end\r\nend\r\n\r\n-- Return \"true\" if another bag in my memory group has any objects out on the table.\r\nfunction anyOtherBagsInMyGroupArePlaced()\r\n    for _, bag in ipairs(getOtherBagsInMyGroup()) do\r\n        local state = bag.call('areAnyOfMyObjectsPlaced')\r\n        if state then return true end\r\n    end\r\n\r\n    return false\r\nend\r\n\r\n-- Return \"true\" if at least one object from this memory bag is out on the table.\r\nfunction areAnyOfMyObjectsPlaced()\r\n    for guid, _ in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then\r\n            return true\r\n        end\r\n    end\r\n    return false\r\nend\r\n\r\nfunction getOtherBagsInMyGroup()\r\n    local bags = {}\r\n    for bagGuid, _ in pairs(GlobalMemoryGroups:getGroup(memoryGroupName:get())) do\r\n        if bagGuid ~= self.getGUID() then\r\n            bag = getObjectFromGUID(bagGuid)\r\n            -- \"bag\" is nill if it has been deleted since the last time onLoad() was called.\r\n            if bag ~= nil then\r\n                table.insert(bags, bag)\r\n            end\r\n        end\r\n    end\r\n    return bags\r\nend\r\n\r\n--[[\r\nThis object provides access to a variable stored on the \"Global script\".\r\nThe variable holds the names & guids of all memory bag groups.\r\nThe global variable is a table and holds data like this:\r\n{\r\n    'My First Group Name' = {\r\n        '805ebd' = {},\r\n        '35cc21' = {},\r\n        'fc8886' = {},\r\n    },\r\n    'My Second Group Name' = {\r\n        'f50264' = {},\r\n        '5f5f63' = {},\r\n    },\r\n}\r\n--]]\r\nGlobalMemoryGroups = { NAME_OF_GLOBAL_VARIABLE = '_GlobalUtilityMemoryBagGroups' }\r\n\r\n-- Call me inside this script's \"onLoad()\" method!\r\nfunction GlobalMemoryGroups:onLoad(myGuid)\r\n    -- Create and initialize the global variable if it doesn't already exist:\r\n    if self:_getGroups() == nil then\r\n        self:_setGroups({})\r\n    end\r\nend\r\n\r\n-- Return the GUIDs of all bags in the \"groupName\". The return value is a dictionary that maps [GUID -> empty table].\r\nfunction GlobalMemoryGroups:getGroup(groupName)\r\n    guids = self:_getGroups()[groupName] or {}\r\n    return guids\r\nend\r\n\r\n-- Registers a bag in a memory group. Creates a new group if one doesn't exist.\r\nfunction GlobalMemoryGroups:registerBagInGroup(groupName, bagGuid)\r\n    if groupName == nil or groupName == \"\" then\r\n        return\r\n    end\r\n\r\n    self:_tryCreateNewGroup(groupName)\r\n    local groups = self:_getGroups()\r\n    groups[groupName][bagGuid] = {}\r\n    self:_setGroups(groups)\r\nend\r\n\r\n-- Removes this bag from the memory group.\r\nfunction GlobalMemoryGroups:unregisterBagInGroup(groupName, bagGuid)\r\n    local groups = self:_getGroups()\r\n    local group = groups[groupName]\r\n    if group ~= nil then\r\n        group[bagGuid] = nil\r\n        self:_setGroups(groups)\r\n    end\r\nend\r\n\r\n-- Return the global variable, which is a table holding all memory group names & guids.\r\nfunction GlobalMemoryGroups:_getGroups()\r\n    return Global.getTable(self.NAME_OF_GLOBAL_VARIABLE)\r\nend\r\n\r\n-- Override the global variable (i.e. the entire table).\r\nfunction GlobalMemoryGroups:_setGroups(newTable)\r\n    Global.setTable(self.NAME_OF_GLOBAL_VARIABLE, newTable)\r\nend\r\n\r\n-- Add a new memory group named \"groupName\" to the global variable, if one doesn't already exist.\r\nfunction GlobalMemoryGroups:_tryCreateNewGroup(groupName)\r\n    local groups = self:_getGroups()\r\n    if groups[groupName] == nil then\r\n        groups[groupName] = {}\r\n        self:_setGroups(groups)\r\n    end\r\nend\r\n\r\n-- This object controls the \"Group Name\" input text field that is part of the bag's ingame UI.\r\ngroupNameInput = {\r\n    greyedOutText     = \"Group Name\",\r\n    widthPerCharacter = 100,\r\n    padding           = 4,\r\n    memoryBag         = self\r\n}\r\nfunction groupNameInput:create(optionalStartingValue)\r\n    local effectiveText = optionalStartingValue or self.greyedOutText\r\n    local width = self:computeWidth(effectiveText)\r\n\r\n    self.memoryBag.createInput({\r\n        label = self.greyedOutText,\r\n        value = optionalStartingValue or nil,\r\n        alignment = 3, -- Center aligned\r\n        input_function = \"groupNameInput_onCharacterTyped\", function_owner = self.memoryBag,\r\n        position = { 2.1, 0.3, 0 }, rotation = { 0, 270, 0 }, width = width, height = 350,\r\n        font_size = 250, color = { 0, 0, 0 }, font_color = { 1, 1, 1 },\r\n    })\r\nend\r\n\r\nfunction groupNameInput:computeWidth(text)\r\n    return (string.len(text) + self.padding) * self.widthPerCharacter\r\nend\r\n\r\nfunction groupNameInput:updatedWidth(text)\r\n    self.memoryBag.editInput({\r\n        index = 0,\r\n        width = self:computeWidth(text)\r\n    })\r\nend\r\n\r\nfunction groupNameInput:onCharacterTyped(text, stillEditing)\r\n    if stillEditing then\r\n        self:updatedWidth(text)\r\n    else\r\n        if text == \"\" then\r\n            self:updatedWidth(self.greyedOutText)\r\n        end\r\n    end\r\nend\r\n\r\nfunction groupNameInput_onCharacterTyped(memoryBag, playerColor, text, stillEditing)\r\n    groupNameInput:onCharacterTyped(text, stillEditing)\r\nend\r\n\r\nfunction groupNameInput:setGroupNameToInputField()\r\n    local inputFields = self.memoryBag.getInputs()\r\n    if inputFields ~= nil then\r\n        -- Get input field 0, which corresponds to the groupNameInput.\r\n        -- Unfortunately \"self.getInputs()\" doesn't return the inputs in a guaranteed order.\r\n        local nameField = nil\r\n        for _, field in ipairs(inputFields) do\r\n            if field.index == 0 then\r\n                nameField = field\r\n            end\r\n        end\r\n\r\n        memoryGroupName:set(nameField.value)\r\n    end\r\nend\r\n\r\nfunction updateSave()\r\n    local data_to_save = { [\"ml\"] = memoryList, [\"groupName\"] = memoryGroupName:get() }\r\n    saved_data = JSON.encode(data_to_save)\r\n    self.script_state = saved_data\r\nend\r\n\r\nfunction combineMemoryFromBagsWithin()\r\n    local bagObjList = self.getObjects()\r\n    for _, bagObj in ipairs(bagObjList) do\r\n        local data = bagObj.lua_script_state\r\n        if data ~= nil then\r\n            local j = JSON.decode(data)\r\n            if j ~= nil and j.ml ~= nil then\r\n                for guid, entry in pairs(j.ml) do\r\n                    memoryList[guid] = entry\r\n                end\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\nfunction updateMemoryWithMoves()\r\n    memoryList = memoryListBackup\r\n    --get the first transposed object's coordinates\r\n    local obj = getObjectFromGUID(moveGuid)\r\n\r\n    -- p1 is where needs to go, p2 is where it was\r\n    local refObjPos = memoryList[moveGuid].pos\r\n    local deltaPos = findOffsetDistance(obj.getPosition(), refObjPos, nil)\r\n    local movedRotation = obj.getRotation()\r\n    for guid, entry in pairs(memoryList) do\r\n        memoryList[guid].pos.x = entry.pos.x - deltaPos.x\r\n        memoryList[guid].pos.y = entry.pos.y - deltaPos.y\r\n        memoryList[guid].pos.z = entry.pos.z - deltaPos.z\r\n    end\r\n    moveList = {}\r\nend\r\n\r\nfunction onload(saved_data)\r\n    GlobalMemoryGroups:onLoad(self.getGUID())\r\n    AllMemoryBagsInScene:add(self.getGUID())\r\n\r\n    fresh = true\r\n    if saved_data ~= \"\" then\r\n        local loaded_data = JSON.decode(saved_data)\r\n        --Set up information off of loaded_data\r\n        memoryList = loaded_data.ml\r\n        memoryGroupName:set(loaded_data.groupName)\r\n    else\r\n        --Set up information for if there is no saved saved data\r\n        memoryList = {}\r\n        memoryGroupName:set(nil)\r\n    end\r\n\r\n    moveList = {}\r\n    moveGuid = nil\r\n\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        fresh = false\r\n        createMemoryActionButtons()\r\n    end\r\nend\r\n\r\n--Beginning Setup\r\n\r\n--Make setup button\r\nfunction createSetupButton()\r\n    self.createButton({\r\n      label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n      position={0,0.3,2}, rotation={0,0,0}, height=350, width=800,\r\n      font_size=250, color={0,0,0}, font_color={1,1,1}\r\n  })\r\nend\r\n\r\n--Triggered by Transpose button\r\nfunction buttonClick_transpose()\r\n    moveGuid = nil\r\n    broadcastToAll(\"Select one object and move it- all objects will move relative to the new location\", { 0.75, 0.75, 1 })\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(true)\r\n    createSetupActionButtons(true)\r\nend\r\n\r\n--Triggered by setup button,\r\nfunction buttonClick_setup()\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(false)\r\n    createSetupActionButtons(false)\r\nend\r\n\r\nfunction getAllObjectsInMemory()\r\n    local objTable = {}\r\n    local curObj = {}\r\n\r\n    for guid in pairs(memoryListBackup) do\r\n        curObj = getObjectFromGUID(guid)\r\n        table.insert(objTable, curObj)\r\n    end\r\n\r\n    return objTable\r\nend\r\n\r\n--Creates selection buttons on objects\r\nfunction createButtonsOnAllObjects(move)\r\n    buttonIndexMap = {}\r\n    local howManyButtons = 0\r\n\r\n    local objsToHaveButtons = {}\r\n    if move == true then\r\n        objsToHaveButtons = getAllObjectsInMemory()\r\n    else\r\n        objsToHaveButtons = getAllObjects()\r\n    end\r\n\r\n    for _, obj in ipairs(objsToHaveButtons) do\r\n        if obj ~= self then\r\n            --On a normal bag, the button positions aren't the same size as the bag.\r\n            globalScaleFactor = 1 * 1 / self.getScale().x\r\n            --Super sweet math to set button positions\r\n            local selfPos = self.getPosition()\r\n            local objPos = obj.getPosition()\r\n            local deltaPos = findOffsetDistance(selfPos, objPos, obj)\r\n            local objPos = rotateLocalCoordinates(deltaPos, self)\r\n            objPos.x = -objPos.x * globalScaleFactor\r\n            objPos.y = objPos.y * globalScaleFactor + 2\r\n            objPos.z = objPos.z * globalScaleFactor\r\n            --Workaround for custom PDFs\r\n            if obj.Book then\r\n                objPos.y = objPos.y + 0.5\r\n            end\r\n            --Offset rotation of bag\r\n            local rot = self.getRotation()\r\n            rot.y = -rot.y + 180\r\n            --Create function\r\n            local funcName = \"selectButton_\" .. howManyButtons\r\n            local func = function() buttonClick_selection(obj, move) end\r\n            local color = { 0.75, 0.25, 0.25, 0.6 }\r\n            local colorMove = { 0, 0, 1, 0.6 }\r\n            if move == true then\r\n                color = colorMove\r\n            end\r\n            self.setVar(funcName, func)\r\n            self.createButton({\r\n                click_function = funcName, function_owner = self,\r\n                position = objPos, rotation = rot, height = 1000, width = 1000,\r\n                color = color,\r\n            })\r\n            buttonIndexMap[obj.getGUID()] = howManyButtons\r\n            howManyButtons = howManyButtons + 1\r\n        end\r\n    end\r\nend\r\n\r\n  --Creates submit and cancel buttons\r\n  function createSetupActionButtons(move)\r\n      self.createButton({\r\n         label=\"Annuler\", click_function=\"buttonClick_cancel\", function_owner=self,\r\n         position={-1.15,0.3,2.1}, rotation={0,0,0}, height=350, width=1100,\r\n         font_size=250, color={0,0,0}, font_color={1,1,1}\r\n      })\r\n\r\n      self.createButton({\r\n        label=\"Valider\", click_function=\"buttonClick_submit\", function_owner=self,\r\n        position={-1.15,0.3,2.8}, rotation={0,0,0}, height=350, width=1100,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n      })\r\n\r\n      if move == false then\r\n        self.createButton({\r\n            label=\"Ajouter\", click_function=\"buttonClick_add\", function_owner=self,\r\n            position={1.15,0.3,2.1}, rotation={0,0,0}, height=350, width=1100,\r\n            font_size=250, color={0,0,0}, font_color={0.25,1,0.25}\r\n          })\r\n\r\n          self.createButton({\r\n              label=\"Sélection\", click_function=\"editDragSelection\", function_owner=self,\r\n              position={-1.15,0.3,3.5}, rotation={0,0,0}, height=350, width=1100,\r\n              font_size=250, color={0,0,0}, font_color={1,1,1}\r\n          })\r\n\r\n          if fresh == false then\r\n              self.createButton({\r\n                  label=\"Mise à Jour\", click_function=\"buttonClick_setNew\", function_owner=self,\r\n                  position={1.15,0.3,3.5}, rotation={0,0,0}, height=350, width=1100,\r\n                  font_size=180, color={0,0,0}, font_color={0.75,0.75,1}\r\n              })\r\n              self.createButton({\r\n                  label=\"Retirer\", click_function=\"buttonClick_remove\", function_owner=self,\r\n                  position={1.15,0.3,2.8}, rotation={0,0,0}, height=350, width=1100,\r\n                  font_size=250, color={0,0,0}, font_color={1,0.25,0.25}\r\n              })\r\n          end\r\n      end\r\n\r\n      self.createButton({\r\n          label=\"Reset\", click_function=\"buttonClick_reset\", function_owner=self,\r\n          position={0,0.3,-2}, rotation={0,0,0}, height=350, width=800,\r\n          font_size=250, color={0,0,0}, font_color={1,1,1}\r\n      })\r\n  end\r\n\r\n\r\n--During Setup\r\n\r\n--Checks or unchecks buttons\r\nfunction buttonClick_selection(obj, move)\r\n    local index = buttonIndexMap[obj.getGUID()]\r\n    local colorMove = { 0, 0, 1, 0.6 }\r\n    local color = { 0, 1, 0, 0.6 }\r\n\r\n    previousGuid = selectedGuid\r\n    selectedGuid = obj.getGUID()\r\n\r\n    theList = memoryList\r\n    if move == true then\r\n        theList = moveList\r\n        if previousGuid ~= nil and previousGuid ~= selectedGuid then\r\n            local prevObj = getObjectFromGUID(previousGuid)\r\n            prevObj.highlightOff()\r\n            self.editButton({ index = previousIndex, color = colorMove })\r\n            theList[previousGuid] = nil\r\n        end\r\n        previousIndex = index\r\n    end\r\n\r\n    if theList[selectedGuid] == nil then\r\n        self.editButton({ index = index, color = color })\r\n        --Adding pos/rot to memory table\r\n        local pos, rot = obj.getPosition(), obj.getRotation()\r\n        --I need to add it like this or it won't save due to indexing issue\r\n        theList[obj.getGUID()] = {\r\n            pos = { x = round(pos.x, 4), y = round(pos.y, 4), z = round(pos.z, 4) },\r\n            rot = { x = round(rot.x, 4), y = round(rot.y, 4), z = round(rot.z, 4) },\r\n            lock = obj.getLock(),\r\n            tint = obj.getColorTint()\r\n        }\r\n        obj.highlightOn({ 0, 1, 0 })\r\n    else\r\n        color = { 0.75, 0.25, 0.25, 0.6 }\r\n        if move == true then\r\n            color = colorMove\r\n        end\r\n        self.editButton({ index = index, color = color })\r\n        theList[obj.getGUID()] = nil\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\nfunction editDragSelection(bagObj, player, remove)\r\n    local selectedObjs = Player[player].getSelectedObjects()\r\n    if not remove then\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            --Ignore if already in the memory list, or does not have a button\r\n            if index and not memoryList[obj.getGUID()] then\r\n                self.editButton({ index = index, color = { 0, 1, 0, 0.6 } })\r\n                --Adding pos/rot to memory table\r\n                local pos, rot = obj.getPosition(), obj.getRotation()\r\n                --I need to add it like this or it won't save due to indexing issue\r\n                memoryList[obj.getGUID()] = {\r\n                    pos = { x = round(pos.x, 4), y = round(pos.y, 4), z = round(pos.z, 4) },\r\n                    rot = { x = round(rot.x, 4), y = round(rot.y, 4), z = round(rot.z, 4) },\r\n                    lock = obj.getLock(),\r\n                    tint = obj.getColorTint()\r\n                }\r\n                obj.highlightOn({ 0, 1, 0 })\r\n            end\r\n        end\r\n    else\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            if index and memoryList[obj.getGUID()] then\r\n                color = { 0.75, 0.25, 0.25, 0.6 }\r\n                self.editButton({ index = index, color = color })\r\n                memoryList[obj.getGUID()] = nil\r\n                obj.highlightOff()\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\n--Cancels selection process\r\nfunction buttonClick_cancel()\r\n    memoryList = memoryListBackup\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        createMemoryActionButtons()\r\n    end\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Sélection annulée\", { 1, 1, 1 })\r\n    moveGuid = nil\r\nend\r\n\r\n--Saves selections\r\nfunction buttonClick_submit()\r\n    fresh = false\r\n    if next(moveList) ~= nil then\r\n        for guid in pairs(moveList) do\r\n            moveGuid = guid\r\n        end\r\n        if memoryListBackup[moveGuid] == nil then\r\n            broadcastToAll(\"Item selected for moving is not already in memory\", { 1, 0.25, 0.25 })\r\n        else\r\n            broadcastToAll(\"Moving all items in memory relative to new objects position!\", { 0.75, 0.75, 1 })\r\n            self.clearButtons()\r\n            self.clearInputs()\r\n            createMemoryActionButtons()\r\n            local count = 0\r\n            for guid in pairs(moveList) do\r\n                moveGuid = guid\r\n                count = count + 1\r\n                local obj = getObjectFromGUID(guid)\r\n                if obj ~= nil then obj.highlightOff() end\r\n            end\r\n            updateMemoryWithMoves()\r\n            updateSave()\r\n            buttonClick_place()\r\n        end\r\n    elseif next(memoryList) == nil and moveGuid == nil then\r\n        memoryList = memoryListBackup\r\n        broadcastToAll(\"No selections made.\", { 0.75, 0.25, 0.25 })\r\n    end\r\n    combineMemoryFromBagsWithin()\r\n    groupNameInput:setGroupNameToInputField()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count .. \" Objects Saved\", { 1, 1, 1 })\r\n    updateSave()\r\n    moveGuid = nil\r\nend\r\n\r\nfunction combineTables(first_table, second_table)\r\n    for k, v in pairs(second_table) do first_table[k] = v end\r\nend\r\n\r\nfunction buttonClick_add()\r\n    fresh = false\r\n    combineTables(memoryList, memoryListBackup)\r\n    broadcastToAll(\"Adding internal bags and selections to existing memory\", { 0.25, 0.75, 0.25 })\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count .. \" Objects Saved\", { 1, 1, 1 })\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_remove()\r\n    broadcastToAll(\"Removing Selected Entries From Memory\", { 1.0, 0.25, 0.25 })\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        memoryListBackup[guid] = nil\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count .. \" Objects Removed\", { 1, 1, 1 })\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_setNew()\r\n    broadcastToAll(\"Setting new position relative to items in memory\", { 0.75, 0.75, 1 })\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        guid = obj.guid\r\n        if memoryListBackup[guid] ~= nil then\r\n            count = count + 1\r\n            memoryListBackup[guid].pos = obj.getPosition()\r\n            memoryListBackup[guid].rot = obj.getRotation()\r\n            memoryListBackup[guid].lock = obj.getLock()\r\n            memoryListBackup[guid].tint = obj.getColorTint()\r\n        end\r\n    end\r\n    broadcastToAll(count .. \" Objects Saved\", { 1, 1, 1 })\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\n--Resets bag to starting status\r\nfunction buttonClick_reset()\r\n    fresh = true\r\n    memoryList = {}\r\n    memoryGroupName:set(nil)\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createSetupButton()\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Tool Reset\", { 1, 1, 1 })\r\n    updateSave()\r\nend\r\n\r\n--After Setup\r\n\r\n--Creates recall and place buttons\r\nfunction createMemoryActionButtons()\r\n    self.createButton({\r\n        label=\"Placer au hasard\", click_function=\"buttonClick_place\", function_owner=self,\r\n        position={0,0.3,2}, rotation={0,0,0}, height=350, width=2000,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Ranger\", click_function=\"buttonClick_recall\", function_owner=self,\r\n        position={0,0.3,2.8}, rotation={0,0,0}, height=350, width=1000,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n        position={2,0.3,0}, rotation={0,90,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    ---    self.createButton({\r\n    ---      label=\"Bouger\", click_function=\"buttonClick_transpose\", function_owner=self,\r\n    ---      position={-2,0.3,0.8}, rotation={0,270,0}, height=350, width=800,\r\n    ---      font_size=250, color={0,0,0}, font_color={0.75,0.75,1}\r\n    ---\r\nend\r\n\r\n--Sends objects from bag/table to their saved position/rotation\r\nfunction buttonClick_place()\r\n    if anyOtherBagsInMyGroupArePlaced() then\r\n        recallOtherBagsInMyGroup()\r\n        Wait.frames(_placeObjects, CONFIG.MEMORY_GROUP.FRAME_DELAY_BEFORE_PLACING_OBJECTS)\r\n    else\r\n        _placeObjects()\r\n    end\r\nend\r\n\r\nfunction _placeObjects()\r\n    local bagObjList = self.getObjects()\r\n\r\n    -- randomize memorylist position\r\n    local positionList = {}\r\n    for guid, entry in pairs(memoryList) do\r\n        table.insert(positionList, memoryList[guid].pos)\r\n    end\r\n\r\n    for i = #positionList, 2, -1 do\r\n        local j = math.random(i)\r\n        positionList[i], positionList[j] = positionList[j], positionList[i]\r\n    end\r\n\r\n    local i = 1\r\n    for guid, entry in pairs(memoryList) do\r\n        memoryList[guid].pos = positionList[i]\r\n        i = i + 1\r\n    end\r\n\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        --If obj is out on the table, move it to the saved pos/rot\r\n        if obj ~= nil then\r\n            obj.setPositionSmooth(entry.pos)\r\n            obj.setRotationSmooth(entry.rot)\r\n            obj.setLock(entry.lock)\r\n            obj.setColorTint(entry.tint)\r\n        else\r\n            --If obj is inside of the bag\r\n            for _, bagObj in ipairs(bagObjList) do\r\n                if bagObj.guid == guid then\r\n                    local item = self.takeObject({\r\n                        guid = guid, position = entry.pos, rotation = entry.rot, smooth = false\r\n                    })\r\n                    item.setLock(entry.lock)\r\n                    item.setColorTint(entry.tint)\r\n                    break\r\n                end\r\n            end\r\n        end\r\n    end\r\n    broadcastToAll(\"Objets placés au hasard\", {1,1,1})\r\nend\r\n\r\n--Recalls objects to bag from table\r\nfunction buttonClick_recall()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then self.putObject(obj) end\r\n    end\r\n    broadcastToAll(\"Objets rangés\", {1,1,1})\r\nend\r\n\r\n--Utility functions\r\n\r\n--Find delta (difference) between 2 x/y/z coordinates\r\nfunction findOffsetDistance(p1, p2, obj)\r\n    local yOffset = 0\r\n    if obj ~= nil then\r\n        local bounds = obj.getBounds()\r\n        yOffset = (bounds.size.y - bounds.offset.y)\r\n    end\r\n    local deltaPos = {}\r\n    deltaPos.x = (p2.x - p1.x)\r\n    deltaPos.y = (p2.y - p1.y) + yOffset\r\n    deltaPos.z = (p2.z - p1.z)\r\n    return deltaPos\r\nend\r\n\r\n--Used to rotate a set of coordinates by an angle\r\nfunction rotateLocalCoordinates(desiredPos, obj)\r\n    local objPos, objRot = obj.getPosition(), obj.getRotation()\r\n    local angle = math.rad(objRot.y)\r\n    local x = desiredPos.x * math.cos(angle) - desiredPos.z * math.sin(angle)\r\n    local z = desiredPos.x * math.sin(angle) + desiredPos.z * math.cos(angle)\r\n    --return {x=objPos.x+x, y=objPos.y+desiredPos.y, z=objPos.z+z}\r\n    return { x = x, y = desiredPos.y, z = z }\r\nend\r\n\r\nfunction rotateMyCoordinates(desiredPos, obj)\r\n    local angle = math.rad(obj.getRotation().y)\r\n    local x = desiredPos.x * math.sin(angle)\r\n    local z = desiredPos.z * math.cos(angle)\r\n    return { x = x, y = desiredPos.y, z = z }\r\nend\r\n\r\n--Coroutine delay, in seconds\r\nfunction wait(time)\r\n    local start = os.time()\r\n    repeat coroutine.yield(0) until os.time() > start + time\r\nend\r\n\r\n--Duplicates a table (needed to prevent it making reference to the same objects)\r\nfunction duplicateTable(oldTable)\r\n    local newTable = {}\r\n    for k, v in pairs(oldTable) do\r\n        newTable[k] = v\r\n    end\r\n    return newTable\r\nend\r\n\r\n--Moves scripted highlight from all objects\r\nfunction removeAllHighlights()\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\n--Round number (num) to the Nth decimal (dec)\r\nfunction round(num, dec)\r\n    local mult = 10 ^ (dec or 0)\r\n    return math.floor(num * mult + 0.5) / mult\r\nend\r\n\r\n--[[ This object provides access to a variable stored on the \"Global script\".\r\nThe variable holds the GUIDs for every Utility Memory Bag in the scene.\r\nExample: {'805ebd', '35cc21', 'fc8886', 'f50264', '5f5f63'} --]]\r\nAllMemoryBagsInScene = {\r\n    NAME_OF_GLOBAL_VARIABLE = \"_UtilityMemoryBag_AllMemoryBagsInScene\"\r\n}\r\n\r\nfunction AllMemoryBagsInScene:add(guid)\r\n    local guids = Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\n    table.insert(guids, guid)\r\n    Global.setTable(self.NAME_OF_GLOBAL_VARIABLE, guids)\r\nend\r\n\r\nfunction AllMemoryBagsInScene:getGuidList()\r\n    return Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\nend\r\n","LuaScriptState":"{\"ml\":{\"3a0b17\":{\"lock\":false,\"pos\":{\"x\":22.5,\"y\":1.5201,\"z\":27},\"rot\":{\"x\":0,\"y\":180.0036,\"z\":-0.0001},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"3e7375\":{\"lock\":false,\"pos\":{\"x\":22.5,\"y\":1.5201,\"z\":10.5},\"rot\":{\"x\":0,\"y\":180.0037,\"z\":-0.0001},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"e39d20\":{\"lock\":false,\"pos\":{\"x\":22.5,\"y\":1.5201,\"z\":18.5},\"rot\":{\"x\":0,\"y\":180.0074,\"z\":-0.0001},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}}}}","XmlUI":"","ContainedObjects":[{"GUID":"3a0b17","Name":"Card","Transform":{"posX":22.5000019,"posY":1.51693714,"posZ":10.4999981,"rotX":0.010891119,"rotY":180.003555,"rotZ":0.004948929,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Porte de Derrière","Description":"Club du Trèfle.","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02075\",\n  \"locationBack\": {\n    \"connections\": \"Diamond\",\n    \"icons\": \"Hourglass\",\n    \"uses\": {\n      \"countPerInvestigator\": 1,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    },\n    \"victory\": 1\n  },\n  \"locationFront\": {\n    \"connections\": \"Diamond\",\n    \"icons\": \"Tee\"\n  },\n  \"traits\": \"Clover Club.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":116910,"SidewaysCard":false,"CustomDeck":{"1169":{"FaceURL":"https://i.imgur.com/iZag7R1.jpg","BackURL":"https://i.imgur.com/ArR45VU.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"3e7375","Name":"Card","Transform":{"posX":22.5000019,"posY":1.51845789,"posZ":18.4999981,"rotX":0.0108911227,"rotY":180.003616,"rotZ":0.00494886143,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Porte de Derrière","Description":"Club du Trèfle.","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02076\",\n  \"locationBack\": {\n    \"connections\": \"Diamond\",\n    \"icons\": \"Plus\",\n    \"uses\": {\n      \"countPerInvestigator\": 1,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    },\n    \"victory\": 1\n  },\n  \"locationFront\": {\n    \"connections\": \"Diamond\",\n    \"icons\": \"Tee\"\n  },\n  \"traits\": \"Clover Club.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":116909,"SidewaysCard":false,"CustomDeck":{"1169":{"FaceURL":"https://i.imgur.com/iZag7R1.jpg","BackURL":"https://i.imgur.com/ArR45VU.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"e39d20","Name":"Card","Transform":{"posX":22.5000057,"posY":1.52007365,"posZ":26.9999962,"rotX":0.0108906776,"rotY":180.007584,"rotZ":0.004949547,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Porte de Derrière","Description":"Club du Trèfle.","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02077\",\n  \"locationBack\": {\n    \"connections\": \"Diamond\",\n    \"icons\": \"Tilde\",\n    \"uses\": {\n      \"countPerInvestigator\": 1,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    },\n    \"victory\": 1\n  },\n  \"locationFront\": {\n    \"connections\": \"Diamond\",\n    \"icons\": \"Tee\"\n  },\n  \"traits\": \"Clover Club.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":116908,"SidewaysCard":false,"CustomDeck":{"1169":{"FaceURL":"https://i.imgur.com/iZag7R1.jpg","BackURL":"https://i.imgur.com/ArR45VU.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""}]},{"GUID":"1e1893","Name":"Deck","Transform":{"posX":17.4999981,"posY":1.54081428,"posZ":-5.99989653,"rotX":0.00494794874,"rotY":89.99839,"rotZ":359.9891,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Deck Acte","Description":"La Banque Gagne Toujours","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":false,"SidewaysCard":true,"DeckIDs":[14502,14503,14501,14500],"CustomDeck":{"145":{"FaceURL":"https://i.imgur.com/KaarVN0.jpg","BackURL":"https://i.imgur.com/KH4fqod.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":"","ContainedObjects":[{"GUID":"0cf38e","Name":"Card","Transform":{"posX":17.4999981,"posY":4.645354,"posZ":-5.999899,"rotX":0.004945479,"rotY":89.99843,"rotZ":359.9891,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Repli","Description":"Acte 3a","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02069\",\n  \"type\": \"Act\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":14502,"SidewaysCard":true,"CustomDeck":{"145":{"FaceURL":"https://i.imgur.com/KaarVN0.jpg","BackURL":"https://i.imgur.com/KH4fqod.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"3d7816","Name":"Card","Transform":{"posX":17.4999981,"posY":4.796218,"posZ":-5.99989748,"rotX":0.00494754547,"rotY":89.99843,"rotZ":359.9891,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Tout Compris","Description":"Acte 3a","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02068\",\n  \"type\": \"Act\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":14503,"SidewaysCard":true,"CustomDeck":{"145":{"FaceURL":"https://i.imgur.com/KaarVN0.jpg","BackURL":"https://i.imgur.com/KH4fqod.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"48223c","Name":"Card","Transform":{"posX":17.4999981,"posY":4.596218,"posZ":-5.99989748,"rotX":0.00494754547,"rotY":89.99843,"rotZ":359.9891,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Jeu de Dupes","Description":"Acte 2a","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"clueThresholdPerInvestigator\": 2,\n  \"cycle\": \"Standalone\",\n  \"id\": \"02067\",\n  \"type\": \"Act\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":14501,"SidewaysCard":true,"CustomDeck":{"145":{"FaceURL":"https://i.imgur.com/KaarVN0.jpg","BackURL":"https://i.imgur.com/KH4fqod.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"1e8ed7","Name":"Card","Transform":{"posX":17.5000057,"posY":1.62136936,"posZ":-5.99991369,"rotX":0.00454399968,"rotY":89.99843,"rotZ":359.986938,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"La Chance du Débutant","Description":"Acte 1a","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"clueThresholdPerInvestigator\": 4,\n  \"cycle\": \"Standalone\",\n  \"id\": \"02066\",\n  \"type\": \"Act\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":14500,"SidewaysCard":true,"CustomDeck":{"145":{"FaceURL":"https://i.imgur.com/KaarVN0.jpg","BackURL":"https://i.imgur.com/KH4fqod.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""}]},{"GUID":"219139","Name":"CardCustom","Transform":{"posX":-30.4997082,"posY":1.77890623,"posZ":3.99759054,"rotX":-0.000004986689,"rotY":179.98735,"rotZ":1.24732466e-7,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Peter Clover","Description":"Toutes les Cartes en Main","GMNotes":"{\n  \"class\": \"Neutral\",\n  \"cost\": 0,\n  \"cycle\": \"Standalone\",\n  \"health\": 3,\n  \"id\": \"02079\",\n  \"sanity\": 2,\n  \"traits\": \"Humanoid. Criminal.\",\n  \"type\": \"Asset\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":558000,"SidewaysCard":false,"CustomDeck":{"5580":{"FaceURL":"http://cloud-3.steamusercontent.com/ugc/1770458304230270044/49552496FCD9A2D5BF67E1B67D75E50986BC5B0C/","BackURL":"http://cloud-3.steamusercontent.com/ugc/1770458235286543751/CFBD8007EA0629896D499363E84F9AEE6A405D78/","NumWidth":1,"NumHeight":1,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"23a9e6","Name":"Custom_Tile","Transform":{"posX":-5,"posY":1.5052321,"posZ":8,"rotX":0.010889654,"rotY":180.020477,"rotZ":0.00495533971,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/vppt2my.png","ImageSecondaryURL":"https://i.imgur.com/vppt2my.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":"","States":{"2":{"GUID":"44b0c5","Name":"Custom_Tile","Transform":{"posX":-39.7933121,"posY":1.63758957,"posZ":2.038383,"rotX":359.9201,"rotY":269.9961,"rotZ":0.0168742146,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/HyfE8m8.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""},"3":{"GUID":"5b38c6","Name":"Custom_Tile","Transform":{"posX":-38.8217163,"posY":1.99356019,"posZ":0.4159239,"rotX":359.9201,"rotY":272.9828,"rotZ":0.01687373,"scaleX":0.8,"scaleY":1,"scaleZ":0.8},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/dHKBLoD.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""}}},{"GUID":"259f05","Name":"Card","Transform":{"posX":23.5000954,"posY":1.513794,"posZ":-5.499999,"rotX":0.011041305,"rotY":179.999908,"rotZ":0.003930165,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Référence","Description":"La Banque Gagne Toujours","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":116800,"SidewaysCard":false,"CustomDeck":{"1168":{"FaceURL":"https://i.imgur.com/iZag7R1.jpg","BackURL":"https://i.imgur.com/ArR45VU.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"2c8685","Name":"CardCustom","Transform":{"posX":-7.5,"posY":1.519718,"posZ":11.5,"rotX":0.0108918119,"rotY":179.997787,"rotZ":0.004947879,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Chef de Salle du Club du Trèfle","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"health\": 4,\n  \"id\": \"02078\",\n  \"traits\": \"Humanoid. Criminal. Elite.\",\n  \"type\": \"Enemy\",\n  \"victory\": 1\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":1108700,"SidewaysCard":false,"CustomDeck":{"11087":{"FaceURL":"http://cloud-3.steamusercontent.com/ugc/1770458304229763403/62A0641CED0F0CD3587BB669ADD58BCAE6B8ECB8/","BackURL":"http://cloud-3.steamusercontent.com/ugc/1770458235286397281/EDD671AFB49FF60CC3A7A17A9EA23D2F54CD886E/","NumWidth":1,"NumHeight":1,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"35fb70","Name":"Custom_Model","Transform":{"posX":-26.9995041,"posY":1.76630068,"posZ":11.4983959,"rotX":0.0000054148436,"rotY":0.0402839854,"rotZ":4.296127e-8,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Text Tool","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0,"g":0,"b":0,"a":0},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":false,"Snap":false,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":false,"Tooltip":false,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomMesh":{"MeshURL":"http://cloud-3.steamusercontent.com/ugc/1478820768302617365/27883B7913E0E69143C3AA03493B7E7C4E8C29C0/","DiffuseURL":"","NormalURL":"","ColliderURL":"","Convex":true,"MaterialIndex":1,"TypeIndex":0,"CastShadows":true},"LuaScript":"-- Code for bag to identify text tool objects\r\nmovableTextTool_cowgoesmoo33 = true\r\n\r\n-- Number of characters before the text box width expands.\r\nEXPAND_INTERVAL = 20\r\n\r\n-- This table controls what is passed between save/load\r\ndata = {}\r\n\r\nfunction onLoad(saved_data)\r\n  if saved_data ~= '' then\r\n    data = JSON.decode(saved_data)\r\n    if data.text ~= '' then\r\n      self.interactable = data.interactable\r\n      staticMode()\r\n      return\r\n    end\r\n  else\r\n    data = {size=200, color=Color(0,0,0), text='', interactable=true,\r\n        enter_to_finish=false, autolock=false, autolift=false,\r\n        hover_height=0.05, box_transparency=1}\r\n  end\r\n\r\n  inputMode()\r\nend\r\n\r\n-- True if in the middle of delay after pressing Enter (with enter_to_finish on)\r\nfinishing = false\r\nfunction input_func(obj, color, input, stillEditing)\r\n  local params = getBox(input)\r\n  if params then\r\n    params.value = input\r\n    self.editInput(params)\r\n  end\r\n\r\n  if not stillEditing then\r\n    data.text = input\r\n    updateState()\r\n    if input ~= '' then staticMode(color) end\r\n  elseif data.enter_to_finish then\r\n    -- If enter is pressed: remove last newline and force finish\r\n    if not finishing and input:sub(-1) == '\\n' then\r\n      finishing = true\r\n      -- Delay to avoid user's Enter keypress being detected (opens chat box)\r\n      Wait.frames(function()\r\n        input = input:sub(1, -2)\r\n        data.text = input\r\n        updateState()\r\n        if input ~= '' then staticMode(color) else inputMode() end\r\n        finishing = false\r\n      end, 10)\r\n    end\r\n  end\r\nend\r\n\r\n-- When the inpupt box appears and lets the player type in it.\r\nfunction inputMode()\r\n  self.clearContextMenu()\r\n  self.clearInputs()\r\n  self.clearButtons()\r\n\r\n  local size = getBox(data.text, true)\r\n\r\n  self.createInput({\r\n    input_function = \"input_func\",\r\n    function_owner = self,\r\n    label          = \"Type Here\",\r\n    alignment      = 3,\r\n    position       = {x=0, y=data.hover_height, z=0},\r\n    rotation       = {0, 180, 0},\r\n    width          = size.width,\r\n    height         = size.height,\r\n    color          = getBackground(data.color),\r\n    font_color     = data.color,\r\n    font_size      = data.size,\r\n    value          = data.text,\r\n  })\r\n\r\n  self.addContextMenuItem('Color: Object Tint', function(color)\r\n    applyMultiple(color, 'setColor')\r\n  end)\r\n  self.addContextMenuItem('Color: Player', function(color)\r\n    applyMultiple(color, 'setColor', {Color.fromString(color)})\r\n  end)\r\n  self.addContextMenuItem('Color: Black', function(color)\r\n    applyMultiple(color, 'setColor', {Color(0,0,0)})\r\n  end)\r\n  self.addContextMenuItem('Color: White', function(color)\r\n    applyMultiple(color, 'setColor', {Color(1,1,1)})\r\n  end)\r\n  self.addContextMenuItem('Size: Increase', function(color)\r\n    applyMultiple(color, 'changeSize', {50})\r\n  end, true)\r\n  self.addContextMenuItem('Size: Decrease', function(color)\r\n    applyMultiple(color, 'changeSize', {-50})\r\n  end, true)\r\nend\r\n\r\n-- When the input box disappears and displays the text.\r\nfunction staticMode(player)\r\n  self.clearContextMenu()\r\n  if data.autolock then\r\n    self.locked = true\r\n  end\r\n  if self.getInputs() and #self.getInputs() ~= 0 then\r\n    self.removeInput(0)\r\n  end\r\n\r\n  -- Clear from selecting player\r\n  if player then\r\n    self.removeFromPlayerSelection(player)\r\n  end\r\n\r\n  local displayText = data.text\r\n  if data.enter_to_finish then\r\n    displayText = displayText:gsub('%[n%]', '\\n')\r\n  end\r\n\r\n  self.createButton({\r\n    label=displayText,\r\n    click_function=\"none\",\r\n    function_owner=self,\r\n    position={0,data.hover_height,0}, rotation={0,180,0}, height=0, width=0,\r\n    font_color=data.color, font_size=data.size\r\n  })\r\n\r\n  self.addContextMenuItem('Edit Text', function(color)\r\n    self.removeFromPlayerSelection(color)\r\n    inputMode()\r\n  end)\r\n  self.addContextMenuItem('Clear', function(color)\r\n    applyMultiple(color, 'clear', _, true)\r\n  end)\r\n  self.addContextMenuItem('Color: Object Tint', function(color)\r\n    applyMultiple(color, 'setColor')\r\n  end)\r\n  self.addContextMenuItem('Color: Player', function(color)\r\n    applyMultiple(color, 'setColor', {Color.fromString(color)})\r\n  end)\r\n  self.addContextMenuItem('Color: Black', function(color)\r\n    applyMultiple(color, 'setColor', {Color(0,0,0)})\r\n  end)\r\n  self.addContextMenuItem('Color: White', function(color)\r\n    applyMultiple(color, 'setColor', {Color(1,1,1)})\r\n  end)\r\n  self.addContextMenuItem('Size: Increase', function(color)\r\n    applyMultiple(color, 'changeSize', {50})\r\n  end, true)\r\n  self.addContextMenuItem('Size: Decrease', function(color)\r\n    applyMultiple(color, 'changeSize', {-50})\r\n  end, true)\r\n  self.addContextMenuItem('Permanently Attach', attemptAttach)\r\n  self.addContextMenuItem('Permalock', function(color)\r\n    applyMultiple(color, 'permalock', _, true)\r\n  end)\r\nend\r\n\r\nfunction changeSize(params)\r\n  local delta = params[1]\r\n  local newSize = data.size + delta\r\n  if newSize > 800  or newSize < 50 then\r\n    return\r\n  end\r\n  data.size = newSize\r\n  updateState()\r\n  if self.getButtons() and #self.getButtons() ~= 0 then\r\n    self.editButton({font_size=data.size})\r\n  else\r\n    local size = getBox(data.text, true)\r\n    self.editInput({width=size.width, height=size.height, font_size=data.size})\r\n  end\r\nend\r\n\r\nfunction setColor(params)\r\n  if params and params[1] then\r\n    data.color = params[1]\r\n  else\r\n    data.color = self.getColorTint():setAt('a', 1) -- Take on color of object tint\r\n  end\r\n  updateState()\r\n  if self.getButtons() and #self.getButtons() ~= 0 then\r\n    self.editButton({font_color=data.color})\r\n  else\r\n    self.editInput({font_color=data.color, color=getBackground(data.color)})\r\n  end\r\nend\r\n\r\nfunction getBackground(color) --determines whether to use black or white depending on luminance\r\n  local r,g,b = Color(color):get()\r\n\r\n  local lum = 0.2126*r + 0.7152*g + 0.0722*b\r\n  if lum > 0.75 then\r\n    return {0.2,0.2,0.2, data.box_transparency}\r\n  else\r\n    return {1,1,1, data.box_transparency}\r\n  end\r\nend\r\n\r\nfunction clear()\r\n  data.text = ''\r\n  updateState()\r\n  inputMode()\r\nend\r\n\r\nfunction permalock()\r\n  self.interactable = false\r\n  data.interactable = false\r\n  updateState()\r\nend\r\n\r\nlocal target_script = [[\r\nfunction onLoad(script_state)\r\n  if script_state and script_state ~= '' then\r\n    local state = JSON.decode(script_state)\r\n    for _,entry in ipairs(state) do\r\n      self.createButton(entry)\r\n    end\r\n    self.addContextMenuItem('Clear All Text', function(color)\r\n      self.clearContextMenu()\r\n      self.clearButtons()\r\n      self.script_state = ''\r\n      self.script_code = ''\r\n    end)\r\n  end\r\nend\r\n]]\r\n\r\nfunction attemptAttach(player_color)\r\n  local objs = Player[player_color].getSelectedObjects()\r\n  local attachee\r\n  local attachers = {}\r\n  for _,obj in ipairs(objs) do\r\n    if obj.getVar('movableTextTool_cowgoesmoo33') then\r\n      if obj ~= self then\r\n        table.insert(attachers, obj)\r\n      end\r\n    else\r\n      if attachee then\r\n        broadcastToColor(\"More than one target selected.\", player_color)\r\n        return\r\n      else\r\n        attachee = obj\r\n      end\r\n    end\r\n  end\r\n  if attachee then\r\n    local code = attachee.script_code\r\n    if code and code ~= '' and code ~= target_script then\r\n      broadcastToColor(\"Warning: script on card has been overriden. Rewind time to undo.\", player_color)\r\n    end\r\n    for i,attacher in ipairs(attachers) do\r\n      attacher.call('attach', {target = attachee})\r\n    end\r\n    attach({target = attachee})\r\n    local type, flip = attachee.type, attachee.getRotation().z\r\n    if (type == 'Card' or type == 'Deck') and flip > 175 and flip < 185 then\r\n      broadcastToColor(\"Warning: text will not display if card or deck is facing down.\", player_color)\r\n    end\r\n  else\r\n    broadcastToColor(\"You must have a target object in your selection (using click-and-drag or Ctrl+Click) to use this option.\", player_color)\r\n  end\r\nend\r\n\r\nfunction attach(params)\r\n  local target = params.target\r\n  local displayText = data.text\r\n  if data.enter_to_finish then\r\n    displayText = displayText:gsub('%[n%]', '\\n')\r\n  end\r\n\r\n  local textRotation = self.getRotation():sub(target.getRotation())\r\n    :add(Vector(180, 0, 180))\r\n\r\n  local textPosition = target.positionToLocal(\r\n    self.getPosition():add(Vector(0, data.hover_height, 0))\r\n  )\r\n  textPosition.x = -textPosition.x\r\n\r\n  local textScale = {}\r\n  textScale.x = self.getScale().x / target.getScale().x\r\n  textScale.y = self.getScale().x / target.getScale().y\r\n  textScale.z = self.getScale().x / target.getScale().z\r\n\r\n  local details = {\r\n    label=displayText,\r\n    click_function=\"none\",\r\n    function_owner=nil,\r\n    position=textPosition,\r\n    rotation=textRotation,\r\n    scale=textScale,\r\n    height=0, width=0,\r\n    font_color=data.color, font_size=data.size\r\n  }\r\n\r\n  target.createButton(details)\r\n\r\n  local script_state = target.script_state\r\n  if script_state and script_state ~= '' then\r\n    local state = JSON.decode(script_state)\r\n    table.insert(state, details)\r\n    target.script_state = JSON.encode(state)\r\n  else\r\n    target.script_state = JSON.encode({[1]=details})\r\n  end\r\n\r\n  target.script_code = target_script\r\n\r\n  self.destruct()\r\nend\r\n\r\nfunction applyMultiple(player_color, func_string, params, static_only)\r\n  local objs = Player[player_color].getSelectedObjects()\r\n  for _,obj in ipairs(objs) do\r\n    if obj.getVar('movableTextTool_cowgoesmoo33') then\r\n      if not static_only or obj.call('isStatic') then\r\n        obj.call(func_string, params)\r\n      end\r\n    end\r\n  end\r\nend\r\n\r\nfunction isStatic()\r\n  local input = self.getInputs()\r\n  return not input or #input == 0\r\nend\r\n\r\nfunction getBox(input, force)\r\n  local maxLength, lineCount = EXPAND_INTERVAL, 1\r\n  local lineLength = 0\r\n  for i = 1, #input do\r\n    local c = input:sub(i,i)\r\n    if c == '\\n' then\r\n      lineCount = lineCount + 1\r\n      if lineLength > maxLength then maxLength = (math.floor(lineLength / EXPAND_INTERVAL) + 1) * EXPAND_INTERVAL end\r\n      lineLength = 0\r\n    else\r\n      lineLength = lineLength + 1\r\n    end\r\n  end\r\n  if lineLength > maxLength then maxLength = (math.floor(lineLength / EXPAND_INTERVAL) + 1) * EXPAND_INTERVAL end\r\n\r\n  newWidth = data.size * maxLength * 0.9\r\n  newHeight = data.size * lineCount + 23\r\n\r\n  if force or boxWidth ~= newWidth or boxHeight ~= newHeight then\r\n    boxWidth, boxHeight = newWidth, newHeight\r\n    return {width = boxWidth, height = boxHeight}\r\n  end\r\n  return nil\r\nend\r\n\r\ntemp_lift = nil\r\nfunction onPickUp(player_color)\r\n  if data.autolift then\r\n    local player = Player[player_color]\r\n    temp_lift = player.lift_height\r\n    player.lift_height = 0\r\n  end\r\nend\r\n\r\nfunction onDrop(player_color)\r\n  if data.autolift and temp_lift then\r\n    Player[player_color].lift_height = temp_lift\r\n  end\r\nend\r\n\r\n-- Should be called every time data is modified, allows info to be saved on copy/paste\r\nfunction updateState()\r\n  self.script_state = JSON.encode(data)\r\nend\r\n\r\nfunction onSave()\r\n  self.script_state = JSON.encode(data)\r\n  return self.script_state\r\nend","LuaScriptState":"{\"autolift\":false,\"autolock\":false,\"box_transparency\":1,\"color\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1},\"enter_to_finish\":false,\"hover_height\":0.05,\"interactable\":true,\"size\":200,\"text\":\"Lounges du club\"}","XmlUI":""},{"GUID":"418388","Name":"Deck","Transform":{"posX":30.5,"posY":1.67617822,"posZ":-3.0001,"rotX":-0.00059128,"rotY":180.0013,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Deck Rencontre","Description":"La Banque Gagne Toujours","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":false,"SidewaysCard":false,"DeckIDs":[18101,18100,18038,18203,18207,1108800,279700,1108900,1105000,276044,18608,18609,18607,18605,18606,18603,18336,18337,18335,18333,276047,276046,276045],"CustomDeck":{"180":{"FaceURL":"https://i.imgur.com/nB9kjFF.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0},"181":{"FaceURL":"https://i.imgur.com/AdR3VIZ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0},"182":{"FaceURL":"https://i.imgur.com/AdR3VIZ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0},"183":{"FaceURL":"https://i.imgur.com/nB9kjFF.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0},"186":{"FaceURL":"https://i.imgur.com/f8FRV80.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0},"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0},"2797":{"FaceURL":"http://cloud-3.steamusercontent.com/ugc/1770458304229777503/55A13270F3B20A1B9C84A0678370228A453AC62C/","BackURL":"http://cloud-3.steamusercontent.com/ugc/1835784131957489171/6E3F1D1BAA5FBB7101D3F84B5E8502CD0F7E299E/","NumWidth":1,"NumHeight":1,"BackIsHidden":true,"UniqueBack":false,"Type":0},"11050":{"FaceURL":"http://cloud-3.steamusercontent.com/ugc/1770458304229776378/80A298BDA6AAB46A2F6F6231EA6F663CE41B055B/","BackURL":"http://cloud-3.steamusercontent.com/ugc/1835784131957489171/6E3F1D1BAA5FBB7101D3F84B5E8502CD0F7E299E/","NumWidth":1,"NumHeight":1,"BackIsHidden":true,"UniqueBack":false,"Type":0},"11088":{"FaceURL":"http://cloud-3.steamusercontent.com/ugc/1770458304229777503/55A13270F3B20A1B9C84A0678370228A453AC62C/","BackURL":"http://cloud-3.steamusercontent.com/ugc/1835784131957489171/6E3F1D1BAA5FBB7101D3F84B5E8502CD0F7E299E/","NumWidth":1,"NumHeight":1,"BackIsHidden":true,"UniqueBack":false,"Type":0},"11089":{"FaceURL":"http://cloud-3.steamusercontent.com/ugc/1770458304229776378/80A298BDA6AAB46A2F6F6231EA6F663CE41B055B/","BackURL":"http://cloud-3.steamusercontent.com/ugc/1835784131957489171/6E3F1D1BAA5FBB7101D3F84B5E8502CD0F7E299E/","NumWidth":1,"NumHeight":1,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":"","ContainedObjects":[{"GUID":"3c41d5","Name":"Card","Transform":{"posX":30.5,"posY":8.9315815,"posZ":-3.0001,"rotX":-0.0005909549,"rotY":180.0013,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Nuée de Rats","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"health\": 1,\n  \"id\": \"01159\",\n  \"traits\": \"Creature.\",\n  \"type\": \"Enemy\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":18101,"SidewaysCard":false,"CustomDeck":{"181":{"FaceURL":"https://i.imgur.com/AdR3VIZ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"8041a2","Name":"Card","Transform":{"posX":30.5,"posY":8.731581,"posZ":-3.0001,"rotX":-0.0005909549,"rotY":180.0013,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Nuée de Rats","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"health\": 1,\n  \"id\": \"01159\",\n  \"traits\": \"Creature.\",\n  \"type\": \"Enemy\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":18100,"SidewaysCard":false,"CustomDeck":{"181":{"FaceURL":"https://i.imgur.com/AdR3VIZ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"b1178a","Name":"Card","Transform":{"posX":30.5,"posY":8.531581,"posZ":-3.0001,"rotX":-0.0005909549,"rotY":180.0013,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Nuée de Rats","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"health\": 1,\n  \"id\": \"01159\",\n  \"traits\": \"Creature.\",\n  \"type\": \"Enemy\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":18038,"SidewaysCard":false,"CustomDeck":{"180":{"FaceURL":"https://i.imgur.com/nB9kjFF.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"d5b82e","Name":"Card","Transform":{"posX":30.5,"posY":8.331581,"posZ":-3.0001,"rotX":-0.0005909549,"rotY":180.0013,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Pourchassé","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02099\",\n  \"traits\": \"Tactic.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":18203,"SidewaysCard":false,"CustomDeck":{"182":{"FaceURL":"https://i.imgur.com/AdR3VIZ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"fcf0e9","Name":"Card","Transform":{"posX":30.5,"posY":7.79409456,"posZ":-3.00009966,"rotX":-0.0005909533,"rotY":180.0013,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Pourchassé","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02099\",\n  \"traits\": \"Tactic.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":18207,"SidewaysCard":false,"CustomDeck":{"182":{"FaceURL":"https://i.imgur.com/AdR3VIZ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"612943","Name":"CardCustom","Transform":{"posX":30.5,"posY":7.9315815,"posZ":-3.0001,"rotX":-0.0005909549,"rotY":180.0013,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Malfrat","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"health\": 2,\n  \"id\": \"02098\",\n  \"traits\": \"Humanoid. Criminal. Syndicate.\",\n  \"type\": \"Enemy\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":1108800,"SidewaysCard":false,"CustomDeck":{"11088":{"FaceURL":"http://cloud-3.steamusercontent.com/ugc/1770458304229777503/55A13270F3B20A1B9C84A0678370228A453AC62C/","BackURL":"http://cloud-3.steamusercontent.com/ugc/1835784131957489171/6E3F1D1BAA5FBB7101D3F84B5E8502CD0F7E299E/","NumWidth":1,"NumHeight":1,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"6faab1","Name":"CardCustom","Transform":{"posX":30.5,"posY":7.73158073,"posZ":-3.0001,"rotX":-0.0005909549,"rotY":180.0013,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Malfrat","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"health\": 2,\n  \"id\": \"02098\",\n  \"traits\": \"Humanoid. Criminal. Syndicate.\",\n  \"type\": \"Enemy\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":279700,"SidewaysCard":false,"CustomDeck":{"2797":{"FaceURL":"http://cloud-3.steamusercontent.com/ugc/1770458304229777503/55A13270F3B20A1B9C84A0678370228A453AC62C/","BackURL":"http://cloud-3.steamusercontent.com/ugc/1835784131957489171/6E3F1D1BAA5FBB7101D3F84B5E8502CD0F7E299E/","NumWidth":1,"NumHeight":1,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"113ffe","Name":"CardCustom","Transform":{"posX":30.5,"posY":7.531581,"posZ":-3.0001,"rotX":-0.0005909549,"rotY":180.0013,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Crapule d'O'Bannion","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"health\": 2,\n  \"id\": \"02097\",\n  \"traits\": \"Humanoid. Criminal. Syndicate.\",\n  \"type\": \"Enemy\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":1108900,"SidewaysCard":false,"CustomDeck":{"11089":{"FaceURL":"http://cloud-3.steamusercontent.com/ugc/1770458304229776378/80A298BDA6AAB46A2F6F6231EA6F663CE41B055B/","BackURL":"http://cloud-3.steamusercontent.com/ugc/1835784131957489171/6E3F1D1BAA5FBB7101D3F84B5E8502CD0F7E299E/","NumWidth":1,"NumHeight":1,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"858dcb","Name":"CardCustom","Transform":{"posX":30.5,"posY":7.331581,"posZ":-3.0001,"rotX":-0.0005909549,"rotY":180.0013,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Crapule d'O'Bannion","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"health\": 2,\n  \"id\": \"02097\",\n  \"traits\": \"Humanoid. Criminal. Syndicate.\",\n  \"type\": \"Enemy\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":1105000,"SidewaysCard":false,"CustomDeck":{"11050":{"FaceURL":"http://cloud-3.steamusercontent.com/ugc/1770458304229776378/80A298BDA6AAB46A2F6F6231EA6F663CE41B055B/","BackURL":"http://cloud-3.steamusercontent.com/ugc/1835784131957489171/6E3F1D1BAA5FBB7101D3F84B5E8502CD0F7E299E/","NumWidth":1,"NumHeight":1,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"10038a","Name":"Card","Transform":{"posX":30.5,"posY":5.620594,"posZ":-3.0001,"rotX":-0.0005904562,"rotY":180.0013,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"51019\",\n  \"traits\": \"Illicit.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276044,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"d8d1a1","Name":"Card","Transform":{"posX":30.5,"posY":6.79409552,"posZ":-3.00009966,"rotX":-0.000590883836,"rotY":180.0013,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Coup du Sort","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02093\",\n  \"traits\": \"Omen.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":18608,"SidewaysCard":false,"CustomDeck":{"186":{"FaceURL":"https://i.imgur.com/f8FRV80.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"0ee4ad","Name":"Card","Transform":{"posX":30.5,"posY":6.93158245,"posZ":-3.0001,"rotX":-0.0005909549,"rotY":180.0013,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Coup du Sort","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02093\",\n  \"traits\": \"Omen.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":18609,"SidewaysCard":false,"CustomDeck":{"186":{"FaceURL":"https://i.imgur.com/f8FRV80.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"9b7bc0","Name":"Card","Transform":{"posX":30.5,"posY":6.731582,"posZ":-3.0001,"rotX":-0.0005909549,"rotY":180.0013,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Coup du Sort","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02093\",\n  \"traits\": \"Omen.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":18607,"SidewaysCard":false,"CustomDeck":{"186":{"FaceURL":"https://i.imgur.com/f8FRV80.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"695a70","Name":"Card","Transform":{"posX":30.5,"posY":6.531582,"posZ":-3.0001,"rotX":-0.0005909549,"rotY":180.0013,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Chance Maudite","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02092\",\n  \"traits\": \"Omen.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":18605,"SidewaysCard":false,"CustomDeck":{"186":{"FaceURL":"https://i.imgur.com/f8FRV80.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"941ff9","Name":"Card","Transform":{"posX":30.5,"posY":6.331582,"posZ":-3.0001,"rotX":-0.0005909549,"rotY":180.0013,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Chance Maudite","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02092\",\n  \"traits\": \"Omen.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":18606,"SidewaysCard":false,"CustomDeck":{"186":{"FaceURL":"https://i.imgur.com/f8FRV80.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"368d2c","Name":"Card","Transform":{"posX":30.5,"posY":6.131582,"posZ":-3.0001,"rotX":-0.0005909549,"rotY":180.0013,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Chance Maudite","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02092\",\n  \"traits\": \"Omen.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":18603,"SidewaysCard":false,"CustomDeck":{"186":{"FaceURL":"https://i.imgur.com/f8FRV80.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"f09129","Name":"Card","Transform":{"posX":30.5,"posY":5.931582,"posZ":-3.0001,"rotX":-0.0005909549,"rotY":180.0013,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Éveiller les Soupçons","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02082\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":18336,"SidewaysCard":false,"CustomDeck":{"183":{"FaceURL":"https://i.imgur.com/nB9kjFF.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"d92427","Name":"Card","Transform":{"posX":30.5,"posY":5.394096,"posZ":-3.00009966,"rotX":-0.0005908884,"rotY":180.0013,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Éveiller les Soupçons","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02082\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":18337,"SidewaysCard":false,"CustomDeck":{"183":{"FaceURL":"https://i.imgur.com/nB9kjFF.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"111a9a","Name":"Card","Transform":{"posX":30.5,"posY":5.531582,"posZ":-3.0001,"rotX":-0.0005909549,"rotY":180.0013,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Un Goût Suspect","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02081\",\n  \"traits\": \"Poison. Illicit.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":18335,"SidewaysCard":false,"CustomDeck":{"183":{"FaceURL":"https://i.imgur.com/nB9kjFF.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"b5fe64","Name":"Card","Transform":{"posX":30.5,"posY":5.331582,"posZ":-3.0001,"rotX":-0.0005909549,"rotY":180.0013,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Un Goût Suspect","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02081\",\n  \"traits\": \"Poison. Illicit.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":18333,"SidewaysCard":false,"CustomDeck":{"183":{"FaceURL":"https://i.imgur.com/nB9kjFF.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"439e87","Name":"Card","Transform":{"posX":30.5,"posY":5.131582,"posZ":-3.0001,"rotX":-0.0005909549,"rotY":180.0013,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"51018\",\n  \"traits\": \"Illicit.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276047,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"e884db","Name":"Card","Transform":{"posX":30.5,"posY":4.931582,"posZ":-3.0001,"rotX":-0.0005909549,"rotY":180.0013,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"51019\",\n  \"traits\": \"Illicit.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276046,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"75b6f3","Name":"Card","Transform":{"posX":30.5000019,"posY":1.63865018,"posZ":-3.00009918,"rotX":-0.00222500949,"rotY":180.0013,"rotZ":180.002563,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"51018\",\n  \"traits\": \"Illicit.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276045,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""}]},{"GUID":"453f78","Name":"Card","Transform":{"posX":-4.99999952,"posY":1.52083278,"posZ":18.5,"rotX":0.0108914468,"rotY":180.001389,"rotZ":0.004948587,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Bar du Club du Trèfle","Description":"Club du Trèfle.","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02072\",\n  \"locationBack\": {\n    \"connections\": \"Triangle|Circle\",\n    \"icons\": \"Square\"\n  },\n  \"locationFront\": {\n    \"connections\": \"Triangle|Circle\",\n    \"icons\": \"Square\"\n  },\n  \"traits\": \"Clover Club.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":116902,"SidewaysCard":false,"CustomDeck":{"1169":{"FaceURL":"https://i.imgur.com/iZag7R1.jpg","BackURL":"https://i.imgur.com/ArR45VU.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"47d6f7","Name":"Custom_Tile","Transform":{"posX":-5,"posY":1.50656271,"posZ":15,"rotX":0.0108898832,"rotY":180.020477,"rotZ":0.0049564275,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/vppt2my.png","ImageSecondaryURL":"https://i.imgur.com/vppt2my.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":"","States":{"2":{"GUID":"44b0c5","Name":"Custom_Tile","Transform":{"posX":-39.7933121,"posY":1.63758957,"posZ":2.038383,"rotX":359.9201,"rotY":269.9961,"rotZ":0.0168742146,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/HyfE8m8.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""},"3":{"GUID":"5b38c6","Name":"Custom_Tile","Transform":{"posX":-38.8217163,"posY":1.99356019,"posZ":0.4159239,"rotX":359.9201,"rotY":272.9828,"rotZ":0.01687373,"scaleX":0.8,"scaleY":1,"scaleZ":0.8},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/dHKBLoD.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""}}},{"GUID":"4d9bd7","Name":"Custom_Tile","Transform":{"posX":17.5,"posY":1.505285,"posZ":18.5,"rotX":0.0049479343,"rotY":90.0003,"rotZ":359.9891,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/vppt2my.png","ImageSecondaryURL":"https://i.imgur.com/vppt2my.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":"","States":{"2":{"GUID":"4d3553","Name":"Custom_Tile","Transform":{"posX":-17.11995,"posY":1.60650957,"posZ":3.85999179,"rotX":359.9831,"rotY":359.984558,"rotZ":359.920074,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/HyfE8m8.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""},"3":{"GUID":"5b38c6","Name":"Custom_Tile","Transform":{"posX":-17.1199474,"posY":1.60650969,"posZ":3.85999274,"rotX":359.983124,"rotY":359.984467,"rotZ":359.9201,"scaleX":0.8,"scaleY":1,"scaleZ":0.8},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/dHKBLoD.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""}}},{"GUID":"55ce4f","Name":"Custom_Tile","Transform":{"posX":17.5,"posY":1.5040493,"posZ":12,"rotX":359.990265,"rotY":299.9997,"rotZ":0.00696417969,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/vppt2my.png","ImageSecondaryURL":"https://i.imgur.com/vppt2my.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":"","States":{"2":{"GUID":"4d3553","Name":"Custom_Tile","Transform":{"posX":-17.11995,"posY":1.60650957,"posZ":3.85999179,"rotX":359.9831,"rotY":359.984558,"rotZ":359.920074,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/HyfE8m8.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""},"3":{"GUID":"5b38c6","Name":"Custom_Tile","Transform":{"posX":-17.1199474,"posY":1.60650969,"posZ":3.85999274,"rotX":359.983124,"rotY":359.984467,"rotZ":359.9201,"scaleX":0.8,"scaleY":1,"scaleZ":0.8},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/dHKBLoD.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""}}},{"GUID":"5c303b","Name":"Card","Transform":{"posX":4,"posY":1.52005553,"posZ":18.5000019,"rotX":0.0108913574,"rotY":180.001465,"rotZ":0.0049485825,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Salle de Jeu du Club du Trèfle","Description":"Club du Trèfle.","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02073\",\n  \"locationBack\": {\n    \"connections\": \"Circle|Square|Diamond\",\n    \"icons\": \"Triangle\"\n  },\n  \"locationFront\": {\n    \"connections\": \"Circle|Square|Diamond\",\n    \"icons\": \"Triangle\"\n  },\n  \"traits\": \"Clover Club.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":116903,"SidewaysCard":false,"CustomDeck":{"1169":{"FaceURL":"https://i.imgur.com/iZag7R1.jpg","BackURL":"https://i.imgur.com/ArR45VU.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"7234af","Name":"Custom_Tile","Transform":{"posX":8.499999,"posY":1.50606227,"posZ":18.5,"rotX":0.00494864443,"rotY":90.0042,"rotZ":359.9891,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/vppt2my.png","ImageSecondaryURL":"https://i.imgur.com/vppt2my.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":"","States":{"2":{"GUID":"4d3553","Name":"Custom_Tile","Transform":{"posX":-17.11995,"posY":1.60650957,"posZ":3.85999179,"rotX":359.9831,"rotY":359.984558,"rotZ":359.920074,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/HyfE8m8.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""},"3":{"GUID":"5b38c6","Name":"Custom_Tile","Transform":{"posX":-17.1199474,"posY":1.60650969,"posZ":3.85999274,"rotX":359.983124,"rotY":359.984467,"rotZ":359.9201,"scaleX":0.8,"scaleY":1,"scaleZ":0.8},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/dHKBLoD.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""}}},{"GUID":"77812e","Name":"CardCustom","Transform":{"posX":-12.500001,"posY":1.52138543,"posZ":18,"rotX":0.0108914534,"rotY":180.000275,"rotZ":0.004948335,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":true,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":1105200,"SidewaysCard":false,"CustomDeck":{"11052":{"FaceURL":"http://cloud-3.steamusercontent.com/ugc/1874087573755651660/BCAEA91773E0F48B541E36E414024C5F4E1C437F/","BackURL":"http://cloud-3.steamusercontent.com/ugc/1874087573755651660/BCAEA91773E0F48B541E36E414024C5F4E1C437F/","NumWidth":1,"NumHeight":1,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"80552a","Name":"Custom_Tile","Transform":{"posX":-11.0000019,"posY":1.5069859,"posZ":14.5,"rotX":0.01120057,"rotY":134.999619,"rotZ":-0.0042043156,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/vppt2my.png","ImageSecondaryURL":"https://i.imgur.com/vppt2my.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":"","States":{"2":{"GUID":"44b0c5","Name":"Custom_Tile","Transform":{"posX":-39.7933121,"posY":1.63758957,"posZ":2.038383,"rotX":359.9201,"rotY":269.9961,"rotZ":0.0168742146,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/HyfE8m8.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""},"3":{"GUID":"5b38c6","Name":"Custom_Tile","Transform":{"posX":-38.8217163,"posY":1.99356019,"posZ":0.4159239,"rotX":359.9201,"rotY":272.9828,"rotZ":0.01687373,"scaleX":0.8,"scaleY":1,"scaleZ":0.8},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/dHKBLoD.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""}}},{"GUID":"81059f","Name":"Custom_Model_Bag","Transform":{"posX":-27.0000076,"posY":1.83530128,"posZ":3.99999142,"rotX":-0.00000614382543,"rotY":179.9849,"rotZ":3.32780246e-7,"scaleX":0.7,"scaleY":0.7,"scaleZ":0.7},"Nickname":"Soutiens/faiblesses d'histoire","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":1,"g":1,"b":1},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"MaterialIndex":-1,"MeshIndex":-1,"CustomMesh":{"MeshURL":"https://pastebin.com/raw/ALrYhQGb","DiffuseURL":"http://cloud-3.steamusercontent.com/ugc/5077277234347423622/F89B4508C6E2782780C2B5593FB68379E0FB2DB6/","NormalURL":"","ColliderURL":"","Convex":true,"MaterialIndex":3,"TypeIndex":6,"CustomShader":{"SpecularColor":{"r":1,"g":1,"b":1},"SpecularIntensity":0,"SpecularSharpness":2,"FresnelStrength":0},"CastShadows":true},"Bag":{"Order":0},"LuaScript":"","LuaScriptState":"{\"ml\":[]}","XmlUI":"","ContainedObjects":[{"GUID":"e19503","Name":"Card","Transform":{"posX":-26.999424,"posY":1.95265794,"posZ":3.499822,"rotX":0.122646227,"rotY":180.000565,"rotZ":1.36944222,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"class\": \"Neutral\",\n  \"cost\": 2,\n  \"cycle\": \"Standalone\",\n  \"health\": 2,\n  \"id\": \"02040\",\n  \"sanity\": 2,\n  \"traits\": \"Ally. Miskatonic.\",\n  \"type\": \"Asset\",\n  \"wildIcons\": 2\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":115015,"SidewaysCard":false,"CustomDeck":{"1150":{"FaceURL":"https://i.imgur.com/YYrN92e.jpg","BackURL":"https://i.imgur.com/QGyVZgX.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"549635","Name":"Card","Transform":{"posX":-26.9965572,"posY":1.94494784,"posZ":4.00011349,"rotX":-0.00543089537,"rotY":180.019058,"rotZ":358.644867,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Dr Francis Morgan","Description":"Professeur d'Archéologie","GMNotes":"{\n  \"class\": \"Neutral\",\n  \"combatIcons\": 1,\n  \"cost\": 3,\n  \"cycle\": \"Standalone\",\n  \"health\": 4,\n  \"id\": \"02080\",\n  \"sanity\": 1,\n  \"traits\": \"Ally. Miskatonic.\",\n  \"type\": \"Asset\",\n  \"wildIcons\": 1\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":117211,"SidewaysCard":false,"CustomDeck":{"1172":{"FaceURL":"https://i.imgur.com/iZag7R1.jpg","BackURL":"https://i.imgur.com/ArR45VU.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""}]},{"GUID":"9c60ac","Name":"Deck","Transform":{"posX":-23.9996071,"posY":1.800674,"posZ":3.99779367,"rotX":-0.00000492648542,"rotY":179.985733,"rotZ":-8.69996e-9,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Hideuses Abominations","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":false,"SidewaysCard":false,"DeckIDs":[17930,17931,17934],"CustomDeck":{"179":{"FaceURL":"https://i.imgur.com/nB9kjFF.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":"","ContainedObjects":[{"GUID":"c8d931","Name":"Card","Transform":{"posX":-23.9996185,"posY":4.85607767,"posZ":3.997783,"rotX":-0.000005077084,"rotY":179.985886,"rotZ":2.0192094e-7,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Agglomérat de Sphères","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"health\": 6,\n  \"id\": \"02103\",\n  \"traits\": \"Monster. Abomination.\",\n  \"type\": \"Enemy\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":17930,"SidewaysCard":false,"CustomDeck":{"179":{"FaceURL":"https://i.imgur.com/nB9kjFF.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"70c221","Name":"Card","Transform":{"posX":-23.9996185,"posY":5.056078,"posZ":3.997783,"rotX":-0.000005077084,"rotY":179.985886,"rotZ":2.0192094e-7,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Serviteur du Rôdeur","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"health\": 5,\n  \"id\": \"02104\",\n  \"traits\": \"Monster. Abomination.\",\n  \"type\": \"Enemy\",\n  \"victory\": 1\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":17931,"SidewaysCard":false,"CustomDeck":{"179":{"FaceURL":"https://i.imgur.com/nB9kjFF.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"87be51","Name":"Card","Transform":{"posX":-23.9996185,"posY":1.877322,"posZ":3.997783,"rotX":0.00291122,"rotY":179.985886,"rotZ":-0.00133885373,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Agglomérat de Sphères","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"health\": 6,\n  \"id\": \"02103\",\n  \"traits\": \"Monster. Abomination.\",\n  \"type\": \"Enemy\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":17934,"SidewaysCard":false,"CustomDeck":{"179":{"FaceURL":"https://i.imgur.com/nB9kjFF.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""}]},{"GUID":"a2cc1c","Name":"Custom_Tile","Transform":{"posX":-0.50000006,"posY":1.5060792,"posZ":14.5,"rotX":-0.00420066062,"rotY":45.0116844,"rotZ":359.9888,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/vppt2my.png","ImageSecondaryURL":"https://i.imgur.com/vppt2my.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":"","States":{"2":{"GUID":"44b0c5","Name":"Custom_Tile","Transform":{"posX":-39.7933121,"posY":1.63758957,"posZ":2.038383,"rotX":359.9201,"rotY":269.9961,"rotZ":0.0168742146,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/HyfE8m8.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""},"3":{"GUID":"5b38c6","Name":"Custom_Tile","Transform":{"posX":-38.8217163,"posY":1.99356019,"posZ":0.4159239,"rotX":359.9201,"rotY":272.9828,"rotZ":0.01687373,"scaleX":0.8,"scaleY":1,"scaleZ":0.8},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/dHKBLoD.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""}}},{"GUID":"a5e1e5","Name":"CardCustom","Transform":{"posX":13,"posY":1.51927829,"posZ":18.5,"rotX":0.0108916136,"rotY":179.999481,"rotZ":0.004948163,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":true,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":1106400,"SidewaysCard":false,"CustomDeck":{"11064":{"FaceURL":"http://cloud-3.steamusercontent.com/ugc/1874087573755653629/A77401F8797D68D5D5B5440F2A1D8463A16F0C26/","BackURL":"http://cloud-3.steamusercontent.com/ugc/1874087573755653629/A77401F8797D68D5D5B5440F2A1D8463A16F0C26/","NumWidth":1,"NumHeight":1,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"b3fd28","Name":"Deck","Transform":{"posX":12.4999981,"posY":1.536432,"posZ":-5.999999,"rotX":0.00494872453,"rotY":90.00366,"rotZ":359.9891,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Deck Intrigue","Description":"La Banque Gagne Toujours","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":false,"SidewaysCard":true,"DeckIDs":[14506,14505,14504],"CustomDeck":{"145":{"FaceURL":"https://i.imgur.com/KaarVN0.jpg","BackURL":"https://i.imgur.com/KH4fqod.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":"","ContainedObjects":[{"GUID":"430d10","Name":"Card","Transform":{"posX":12.5,"posY":4.791836,"posZ":-6.00000429,"rotX":0.00494882045,"rotY":90.00379,"rotZ":359.9891,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Chaos au Club du Trèfle","Description":"Intrigue 3a","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"doomThreshold\": 7,\n  \"id\": \"02065\",\n  \"type\": \"Agenda\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":14506,"SidewaysCard":true,"CustomDeck":{"145":{"FaceURL":"https://i.imgur.com/KaarVN0.jpg","BackURL":"https://i.imgur.com/KH4fqod.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"ecd977","Name":"Card","Transform":{"posX":12.5,"posY":4.5918355,"posZ":-6.00000429,"rotX":0.00494882045,"rotY":90.00379,"rotZ":359.9891,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Rixe Souterraine","Description":"Intrigue 2a","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"doomThreshold\": 3,\n  \"id\": \"02064\",\n  \"type\": \"Agenda\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":14505,"SidewaysCard":true,"CustomDeck":{"145":{"FaceURL":"https://i.imgur.com/KaarVN0.jpg","BackURL":"https://i.imgur.com/KH4fqod.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"f7e2f9","Name":"Card","Transform":{"posX":12.5000067,"posY":1.61307991,"posZ":-6.00001955,"rotX":0.007869522,"rotY":90.00379,"rotZ":359.9878,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Le Club du Trèfle","Description":"Intrigue 1a","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"doomThreshold\": 4,\n  \"id\": \"02063\",\n  \"type\": \"Agenda\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":14504,"SidewaysCard":true,"CustomDeck":{"145":{"FaceURL":"https://i.imgur.com/KaarVN0.jpg","BackURL":"https://i.imgur.com/KH4fqod.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""}]},{"GUID":"b64c58","Name":"Custom_Tile","Transform":{"posX":-9.000001,"posY":1.50747859,"posZ":18,"rotX":0.004948203,"rotY":90.00064,"rotZ":359.9891,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/vppt2my.png","ImageSecondaryURL":"https://i.imgur.com/vppt2my.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":"","States":{"2":{"GUID":"44b0c5","Name":"Custom_Tile","Transform":{"posX":-39.7933121,"posY":1.63758957,"posZ":2.038383,"rotX":359.9201,"rotY":269.9961,"rotZ":0.0168742146,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/HyfE8m8.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""},"3":{"GUID":"5b38c6","Name":"Custom_Tile","Transform":{"posX":-38.8217163,"posY":1.99356019,"posZ":0.4159239,"rotX":359.9201,"rotY":272.9828,"rotZ":0.01687373,"scaleX":0.8,"scaleY":1,"scaleZ":0.8},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/dHKBLoD.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""}}},{"GUID":"bfc6f0","Name":"Card","Transform":{"posX":-5,"posY":1.51817155,"posZ":4.5,"rotX":0.0108911693,"rotY":180.002975,"rotZ":0.00494879158,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"La Bella Luna","Description":"Arkham.","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02070\",\n  \"locationBack\": {\n    \"connections\": \"Circle\",\n    \"icons\": \"Crescent\",\n    \"uses\": {\n      \"countPerInvestigator\": 1,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    }\n  },\n  \"locationFront\": {\n    \"connections\": \"Circle\",\n    \"icons\": \"Crescent\"\n  },\n  \"traits\": \"Arkham.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":116904,"SidewaysCard":false,"CustomDeck":{"1169":{"FaceURL":"https://i.imgur.com/iZag7R1.jpg","BackURL":"https://i.imgur.com/ArR45VU.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"c37eef","Name":"Card","Transform":{"posX":-19.0000019,"posY":1.77890623,"posZ":3.9989984,"rotX":-0.00000493535663,"rotY":179.993149,"rotZ":2.421592e-7,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"51017\",\n  \"locationBack\": {\n    \"connections\": \"Circle|Square\",\n    \"icons\": \"Heart\"\n  },\n  \"locationFront\": {\n    \"connections\": \"Circle|Square\",\n    \"icons\": \"Heart\"\n  },\n  \"traits\": \"Clover Club.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276103,"SidewaysCard":false,"CustomDeck":{"2761":{"FaceURL":"https://i.imgur.com/FVWxpyu.jpg","BackURL":"https://i.imgur.com/EmJxccn.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"c79201","Name":"Custom_Model","Transform":{"posX":-30.0862961,"posY":1.76629913,"posZ":28.7351036,"rotX":0.00000492558456,"rotY":-0.0000828402844,"rotZ":-2.21363578e-7,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Text Tool","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0,"g":0,"b":0,"a":0},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":false,"Snap":false,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":false,"Tooltip":false,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomMesh":{"MeshURL":"http://cloud-3.steamusercontent.com/ugc/1478820768302617365/27883B7913E0E69143C3AA03493B7E7C4E8C29C0/","DiffuseURL":"","NormalURL":"","ColliderURL":"","Convex":true,"MaterialIndex":1,"TypeIndex":0,"CastShadows":true},"LuaScript":"-- Code for bag to identify text tool objects\r\nmovableTextTool_cowgoesmoo33 = true\r\n\r\n-- Number of characters before the text box width expands.\r\nEXPAND_INTERVAL = 20\r\n\r\n-- This table controls what is passed between save/load\r\ndata = {}\r\n\r\nfunction onLoad(saved_data)\r\n  if saved_data ~= '' then\r\n    data = JSON.decode(saved_data)\r\n    if data.text ~= '' then\r\n      self.interactable = data.interactable\r\n      staticMode()\r\n      return\r\n    end\r\n  else\r\n    data = {size=200, color=Color(0,0,0), text='', interactable=true,\r\n        enter_to_finish=false, autolock=false, autolift=false,\r\n        hover_height=0.05, box_transparency=1}\r\n  end\r\n\r\n  inputMode()\r\nend\r\n\r\n-- True if in the middle of delay after pressing Enter (with enter_to_finish on)\r\nfinishing = false\r\nfunction input_func(obj, color, input, stillEditing)\r\n  local params = getBox(input)\r\n  if params then\r\n    params.value = input\r\n    self.editInput(params)\r\n  end\r\n\r\n  if not stillEditing then\r\n    data.text = input\r\n    updateState()\r\n    if input ~= '' then staticMode(color) end\r\n  elseif data.enter_to_finish then\r\n    -- If enter is pressed: remove last newline and force finish\r\n    if not finishing and input:sub(-1) == '\\n' then\r\n      finishing = true\r\n      -- Delay to avoid user's Enter keypress being detected (opens chat box)\r\n      Wait.frames(function()\r\n        input = input:sub(1, -2)\r\n        data.text = input\r\n        updateState()\r\n        if input ~= '' then staticMode(color) else inputMode() end\r\n        finishing = false\r\n      end, 10)\r\n    end\r\n  end\r\nend\r\n\r\n-- When the inpupt box appears and lets the player type in it.\r\nfunction inputMode()\r\n  self.clearContextMenu()\r\n  self.clearInputs()\r\n  self.clearButtons()\r\n\r\n  local size = getBox(data.text, true)\r\n\r\n  self.createInput({\r\n    input_function = \"input_func\",\r\n    function_owner = self,\r\n    label          = \"Type Here\",\r\n    alignment      = 3,\r\n    position       = {x=0, y=data.hover_height, z=0},\r\n    rotation       = {0, 180, 0},\r\n    width          = size.width,\r\n    height         = size.height,\r\n    color          = getBackground(data.color),\r\n    font_color     = data.color,\r\n    font_size      = data.size,\r\n    value          = data.text,\r\n  })\r\n\r\n  self.addContextMenuItem('Color: Object Tint', function(color)\r\n    applyMultiple(color, 'setColor')\r\n  end)\r\n  self.addContextMenuItem('Color: Player', function(color)\r\n    applyMultiple(color, 'setColor', {Color.fromString(color)})\r\n  end)\r\n  self.addContextMenuItem('Color: Black', function(color)\r\n    applyMultiple(color, 'setColor', {Color(0,0,0)})\r\n  end)\r\n  self.addContextMenuItem('Color: White', function(color)\r\n    applyMultiple(color, 'setColor', {Color(1,1,1)})\r\n  end)\r\n  self.addContextMenuItem('Size: Increase', function(color)\r\n    applyMultiple(color, 'changeSize', {50})\r\n  end, true)\r\n  self.addContextMenuItem('Size: Decrease', function(color)\r\n    applyMultiple(color, 'changeSize', {-50})\r\n  end, true)\r\nend\r\n\r\n-- When the input box disappears and displays the text.\r\nfunction staticMode(player)\r\n  self.clearContextMenu()\r\n  if data.autolock then\r\n    self.locked = true\r\n  end\r\n  if self.getInputs() and #self.getInputs() ~= 0 then\r\n    self.removeInput(0)\r\n  end\r\n\r\n  -- Clear from selecting player\r\n  if player then\r\n    self.removeFromPlayerSelection(player)\r\n  end\r\n\r\n  local displayText = data.text\r\n  if data.enter_to_finish then\r\n    displayText = displayText:gsub('%[n%]', '\\n')\r\n  end\r\n\r\n  self.createButton({\r\n    label=displayText,\r\n    click_function=\"none\",\r\n    function_owner=self,\r\n    position={0,data.hover_height,0}, rotation={0,180,0}, height=0, width=0,\r\n    font_color=data.color, font_size=data.size\r\n  })\r\n\r\n  self.addContextMenuItem('Edit Text', function(color)\r\n    self.removeFromPlayerSelection(color)\r\n    inputMode()\r\n  end)\r\n  self.addContextMenuItem('Clear', function(color)\r\n    applyMultiple(color, 'clear', _, true)\r\n  end)\r\n  self.addContextMenuItem('Color: Object Tint', function(color)\r\n    applyMultiple(color, 'setColor')\r\n  end)\r\n  self.addContextMenuItem('Color: Player', function(color)\r\n    applyMultiple(color, 'setColor', {Color.fromString(color)})\r\n  end)\r\n  self.addContextMenuItem('Color: Black', function(color)\r\n    applyMultiple(color, 'setColor', {Color(0,0,0)})\r\n  end)\r\n  self.addContextMenuItem('Color: White', function(color)\r\n    applyMultiple(color, 'setColor', {Color(1,1,1)})\r\n  end)\r\n  self.addContextMenuItem('Size: Increase', function(color)\r\n    applyMultiple(color, 'changeSize', {50})\r\n  end, true)\r\n  self.addContextMenuItem('Size: Decrease', function(color)\r\n    applyMultiple(color, 'changeSize', {-50})\r\n  end, true)\r\n  self.addContextMenuItem('Permanently Attach', attemptAttach)\r\n  self.addContextMenuItem('Permalock', function(color)\r\n    applyMultiple(color, 'permalock', _, true)\r\n  end)\r\nend\r\n\r\nfunction changeSize(params)\r\n  local delta = params[1]\r\n  local newSize = data.size + delta\r\n  if newSize > 800  or newSize < 50 then\r\n    return\r\n  end\r\n  data.size = newSize\r\n  updateState()\r\n  if self.getButtons() and #self.getButtons() ~= 0 then\r\n    self.editButton({font_size=data.size})\r\n  else\r\n    local size = getBox(data.text, true)\r\n    self.editInput({width=size.width, height=size.height, font_size=data.size})\r\n  end\r\nend\r\n\r\nfunction setColor(params)\r\n  if params and params[1] then\r\n    data.color = params[1]\r\n  else\r\n    data.color = self.getColorTint():setAt('a', 1) -- Take on color of object tint\r\n  end\r\n  updateState()\r\n  if self.getButtons() and #self.getButtons() ~= 0 then\r\n    self.editButton({font_color=data.color})\r\n  else\r\n    self.editInput({font_color=data.color, color=getBackground(data.color)})\r\n  end\r\nend\r\n\r\nfunction getBackground(color) --determines whether to use black or white depending on luminance\r\n  local r,g,b = Color(color):get()\r\n\r\n  local lum = 0.2126*r + 0.7152*g + 0.0722*b\r\n  if lum > 0.75 then\r\n    return {0.2,0.2,0.2, data.box_transparency}\r\n  else\r\n    return {1,1,1, data.box_transparency}\r\n  end\r\nend\r\n\r\nfunction clear()\r\n  data.text = ''\r\n  updateState()\r\n  inputMode()\r\nend\r\n\r\nfunction permalock()\r\n  self.interactable = false\r\n  data.interactable = false\r\n  updateState()\r\nend\r\n\r\nlocal target_script = [[\r\nfunction onLoad(script_state)\r\n  if script_state and script_state ~= '' then\r\n    local state = JSON.decode(script_state)\r\n    for _,entry in ipairs(state) do\r\n      self.createButton(entry)\r\n    end\r\n    self.addContextMenuItem('Clear All Text', function(color)\r\n      self.clearContextMenu()\r\n      self.clearButtons()\r\n      self.script_state = ''\r\n      self.script_code = ''\r\n    end)\r\n  end\r\nend\r\n]]\r\n\r\nfunction attemptAttach(player_color)\r\n  local objs = Player[player_color].getSelectedObjects()\r\n  local attachee\r\n  local attachers = {}\r\n  for _,obj in ipairs(objs) do\r\n    if obj.getVar('movableTextTool_cowgoesmoo33') then\r\n      if obj ~= self then\r\n        table.insert(attachers, obj)\r\n      end\r\n    else\r\n      if attachee then\r\n        broadcastToColor(\"More than one target selected.\", player_color)\r\n        return\r\n      else\r\n        attachee = obj\r\n      end\r\n    end\r\n  end\r\n  if attachee then\r\n    local code = attachee.script_code\r\n    if code and code ~= '' and code ~= target_script then\r\n      broadcastToColor(\"Warning: script on card has been overriden. Rewind time to undo.\", player_color)\r\n    end\r\n    for i,attacher in ipairs(attachers) do\r\n      attacher.call('attach', {target = attachee})\r\n    end\r\n    attach({target = attachee})\r\n    local type, flip = attachee.type, attachee.getRotation().z\r\n    if (type == 'Card' or type == 'Deck') and flip > 175 and flip < 185 then\r\n      broadcastToColor(\"Warning: text will not display if card or deck is facing down.\", player_color)\r\n    end\r\n  else\r\n    broadcastToColor(\"You must have a target object in your selection (using click-and-drag or Ctrl+Click) to use this option.\", player_color)\r\n  end\r\nend\r\n\r\nfunction attach(params)\r\n  local target = params.target\r\n  local displayText = data.text\r\n  if data.enter_to_finish then\r\n    displayText = displayText:gsub('%[n%]', '\\n')\r\n  end\r\n\r\n  local textRotation = self.getRotation():sub(target.getRotation())\r\n    :add(Vector(180, 0, 180))\r\n\r\n  local textPosition = target.positionToLocal(\r\n    self.getPosition():add(Vector(0, data.hover_height, 0))\r\n  )\r\n  textPosition.x = -textPosition.x\r\n\r\n  local textScale = {}\r\n  textScale.x = self.getScale().x / target.getScale().x\r\n  textScale.y = self.getScale().x / target.getScale().y\r\n  textScale.z = self.getScale().x / target.getScale().z\r\n\r\n  local details = {\r\n    label=displayText,\r\n    click_function=\"none\",\r\n    function_owner=nil,\r\n    position=textPosition,\r\n    rotation=textRotation,\r\n    scale=textScale,\r\n    height=0, width=0,\r\n    font_color=data.color, font_size=data.size\r\n  }\r\n\r\n  target.createButton(details)\r\n\r\n  local script_state = target.script_state\r\n  if script_state and script_state ~= '' then\r\n    local state = JSON.decode(script_state)\r\n    table.insert(state, details)\r\n    target.script_state = JSON.encode(state)\r\n  else\r\n    target.script_state = JSON.encode({[1]=details})\r\n  end\r\n\r\n  target.script_code = target_script\r\n\r\n  self.destruct()\r\nend\r\n\r\nfunction applyMultiple(player_color, func_string, params, static_only)\r\n  local objs = Player[player_color].getSelectedObjects()\r\n  for _,obj in ipairs(objs) do\r\n    if obj.getVar('movableTextTool_cowgoesmoo33') then\r\n      if not static_only or obj.call('isStatic') then\r\n        obj.call(func_string, params)\r\n      end\r\n    end\r\n  end\r\nend\r\n\r\nfunction isStatic()\r\n  local input = self.getInputs()\r\n  return not input or #input == 0\r\nend\r\n\r\nfunction getBox(input, force)\r\n  local maxLength, lineCount = EXPAND_INTERVAL, 1\r\n  local lineLength = 0\r\n  for i = 1, #input do\r\n    local c = input:sub(i,i)\r\n    if c == '\\n' then\r\n      lineCount = lineCount + 1\r\n      if lineLength > maxLength then maxLength = (math.floor(lineLength / EXPAND_INTERVAL) + 1) * EXPAND_INTERVAL end\r\n      lineLength = 0\r\n    else\r\n      lineLength = lineLength + 1\r\n    end\r\n  end\r\n  if lineLength > maxLength then maxLength = (math.floor(lineLength / EXPAND_INTERVAL) + 1) * EXPAND_INTERVAL end\r\n\r\n  newWidth = data.size * maxLength * 0.9\r\n  newHeight = data.size * lineCount + 23\r\n\r\n  if force or boxWidth ~= newWidth or boxHeight ~= newHeight then\r\n    boxWidth, boxHeight = newWidth, newHeight\r\n    return {width = boxWidth, height = boxHeight}\r\n  end\r\n  return nil\r\nend\r\n\r\ntemp_lift = nil\r\nfunction onPickUp(player_color)\r\n  if data.autolift then\r\n    local player = Player[player_color]\r\n    temp_lift = player.lift_height\r\n    player.lift_height = 0\r\n  end\r\nend\r\n\r\nfunction onDrop(player_color)\r\n  if data.autolift and temp_lift then\r\n    Player[player_color].lift_height = temp_lift\r\n  end\r\nend\r\n\r\n-- Should be called every time data is modified, allows info to be saved on copy/paste\r\nfunction updateState()\r\n  self.script_state = JSON.encode(data)\r\nend\r\n\r\nfunction onSave()\r\n  self.script_state = JSON.encode(data)\r\n  return self.script_state\r\nend","LuaScriptState":"{\"autolift\":false,\"autolock\":false,\"box_transparency\":1,\"color\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1},\"enter_to_finish\":false,\"hover_height\":0.05,\"interactable\":true,\"size\":350,\"text\":\"Hors Jeu\"}","XmlUI":""},{"GUID":"c8ca62","Name":"Custom_Model","Transform":{"posX":-19.5523,"posY":1.76630068,"posZ":11.52,"rotX":0.00000474055423,"rotY":0.0462091,"rotZ":1.34777673e-8,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Text Tool","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0,"g":0,"b":0,"a":0},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":false,"Snap":false,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":false,"Tooltip":false,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomMesh":{"MeshURL":"http://cloud-3.steamusercontent.com/ugc/1478820768302617365/27883B7913E0E69143C3AA03493B7E7C4E8C29C0/","DiffuseURL":"","NormalURL":"","ColliderURL":"","Convex":true,"MaterialIndex":1,"TypeIndex":0,"CastShadows":true},"LuaScript":"-- Code for bag to identify text tool objects\r\nmovableTextTool_cowgoesmoo33 = true\r\n\r\n-- Number of characters before the text box width expands.\r\nEXPAND_INTERVAL = 20\r\n\r\n-- This table controls what is passed between save/load\r\ndata = {}\r\n\r\nfunction onLoad(saved_data)\r\n  if saved_data ~= '' then\r\n    data = JSON.decode(saved_data)\r\n    if data.text ~= '' then\r\n      self.interactable = data.interactable\r\n      staticMode()\r\n      return\r\n    end\r\n  else\r\n    data = {size=200, color=Color(0,0,0), text='', interactable=true,\r\n        enter_to_finish=false, autolock=false, autolift=false,\r\n        hover_height=0.05, box_transparency=1}\r\n  end\r\n\r\n  inputMode()\r\nend\r\n\r\n-- True if in the middle of delay after pressing Enter (with enter_to_finish on)\r\nfinishing = false\r\nfunction input_func(obj, color, input, stillEditing)\r\n  local params = getBox(input)\r\n  if params then\r\n    params.value = input\r\n    self.editInput(params)\r\n  end\r\n\r\n  if not stillEditing then\r\n    data.text = input\r\n    updateState()\r\n    if input ~= '' then staticMode(color) end\r\n  elseif data.enter_to_finish then\r\n    -- If enter is pressed: remove last newline and force finish\r\n    if not finishing and input:sub(-1) == '\\n' then\r\n      finishing = true\r\n      -- Delay to avoid user's Enter keypress being detected (opens chat box)\r\n      Wait.frames(function()\r\n        input = input:sub(1, -2)\r\n        data.text = input\r\n        updateState()\r\n        if input ~= '' then staticMode(color) else inputMode() end\r\n        finishing = false\r\n      end, 10)\r\n    end\r\n  end\r\nend\r\n\r\n-- When the inpupt box appears and lets the player type in it.\r\nfunction inputMode()\r\n  self.clearContextMenu()\r\n  self.clearInputs()\r\n  self.clearButtons()\r\n\r\n  local size = getBox(data.text, true)\r\n\r\n  self.createInput({\r\n    input_function = \"input_func\",\r\n    function_owner = self,\r\n    label          = \"Type Here\",\r\n    alignment      = 3,\r\n    position       = {x=0, y=data.hover_height, z=0},\r\n    rotation       = {0, 180, 0},\r\n    width          = size.width,\r\n    height         = size.height,\r\n    color          = getBackground(data.color),\r\n    font_color     = data.color,\r\n    font_size      = data.size,\r\n    value          = data.text,\r\n  })\r\n\r\n  self.addContextMenuItem('Color: Object Tint', function(color)\r\n    applyMultiple(color, 'setColor')\r\n  end)\r\n  self.addContextMenuItem('Color: Player', function(color)\r\n    applyMultiple(color, 'setColor', {Color.fromString(color)})\r\n  end)\r\n  self.addContextMenuItem('Color: Black', function(color)\r\n    applyMultiple(color, 'setColor', {Color(0,0,0)})\r\n  end)\r\n  self.addContextMenuItem('Color: White', function(color)\r\n    applyMultiple(color, 'setColor', {Color(1,1,1)})\r\n  end)\r\n  self.addContextMenuItem('Size: Increase', function(color)\r\n    applyMultiple(color, 'changeSize', {50})\r\n  end, true)\r\n  self.addContextMenuItem('Size: Decrease', function(color)\r\n    applyMultiple(color, 'changeSize', {-50})\r\n  end, true)\r\nend\r\n\r\n-- When the input box disappears and displays the text.\r\nfunction staticMode(player)\r\n  self.clearContextMenu()\r\n  if data.autolock then\r\n    self.locked = true\r\n  end\r\n  if self.getInputs() and #self.getInputs() ~= 0 then\r\n    self.removeInput(0)\r\n  end\r\n\r\n  -- Clear from selecting player\r\n  if player then\r\n    self.removeFromPlayerSelection(player)\r\n  end\r\n\r\n  local displayText = data.text\r\n  if data.enter_to_finish then\r\n    displayText = displayText:gsub('%[n%]', '\\n')\r\n  end\r\n\r\n  self.createButton({\r\n    label=displayText,\r\n    click_function=\"none\",\r\n    function_owner=self,\r\n    position={0,data.hover_height,0}, rotation={0,180,0}, height=0, width=0,\r\n    font_color=data.color, font_size=data.size\r\n  })\r\n\r\n  self.addContextMenuItem('Edit Text', function(color)\r\n    self.removeFromPlayerSelection(color)\r\n    inputMode()\r\n  end)\r\n  self.addContextMenuItem('Clear', function(color)\r\n    applyMultiple(color, 'clear', _, true)\r\n  end)\r\n  self.addContextMenuItem('Color: Object Tint', function(color)\r\n    applyMultiple(color, 'setColor')\r\n  end)\r\n  self.addContextMenuItem('Color: Player', function(color)\r\n    applyMultiple(color, 'setColor', {Color.fromString(color)})\r\n  end)\r\n  self.addContextMenuItem('Color: Black', function(color)\r\n    applyMultiple(color, 'setColor', {Color(0,0,0)})\r\n  end)\r\n  self.addContextMenuItem('Color: White', function(color)\r\n    applyMultiple(color, 'setColor', {Color(1,1,1)})\r\n  end)\r\n  self.addContextMenuItem('Size: Increase', function(color)\r\n    applyMultiple(color, 'changeSize', {50})\r\n  end, true)\r\n  self.addContextMenuItem('Size: Decrease', function(color)\r\n    applyMultiple(color, 'changeSize', {-50})\r\n  end, true)\r\n  self.addContextMenuItem('Permanently Attach', attemptAttach)\r\n  self.addContextMenuItem('Permalock', function(color)\r\n    applyMultiple(color, 'permalock', _, true)\r\n  end)\r\nend\r\n\r\nfunction changeSize(params)\r\n  local delta = params[1]\r\n  local newSize = data.size + delta\r\n  if newSize > 800  or newSize < 50 then\r\n    return\r\n  end\r\n  data.size = newSize\r\n  updateState()\r\n  if self.getButtons() and #self.getButtons() ~= 0 then\r\n    self.editButton({font_size=data.size})\r\n  else\r\n    local size = getBox(data.text, true)\r\n    self.editInput({width=size.width, height=size.height, font_size=data.size})\r\n  end\r\nend\r\n\r\nfunction setColor(params)\r\n  if params and params[1] then\r\n    data.color = params[1]\r\n  else\r\n    data.color = self.getColorTint():setAt('a', 1) -- Take on color of object tint\r\n  end\r\n  updateState()\r\n  if self.getButtons() and #self.getButtons() ~= 0 then\r\n    self.editButton({font_color=data.color})\r\n  else\r\n    self.editInput({font_color=data.color, color=getBackground(data.color)})\r\n  end\r\nend\r\n\r\nfunction getBackground(color) --determines whether to use black or white depending on luminance\r\n  local r,g,b = Color(color):get()\r\n\r\n  local lum = 0.2126*r + 0.7152*g + 0.0722*b\r\n  if lum > 0.75 then\r\n    return {0.2,0.2,0.2, data.box_transparency}\r\n  else\r\n    return {1,1,1, data.box_transparency}\r\n  end\r\nend\r\n\r\nfunction clear()\r\n  data.text = ''\r\n  updateState()\r\n  inputMode()\r\nend\r\n\r\nfunction permalock()\r\n  self.interactable = false\r\n  data.interactable = false\r\n  updateState()\r\nend\r\n\r\nlocal target_script = [[\r\nfunction onLoad(script_state)\r\n  if script_state and script_state ~= '' then\r\n    local state = JSON.decode(script_state)\r\n    for _,entry in ipairs(state) do\r\n      self.createButton(entry)\r\n    end\r\n    self.addContextMenuItem('Clear All Text', function(color)\r\n      self.clearContextMenu()\r\n      self.clearButtons()\r\n      self.script_state = ''\r\n      self.script_code = ''\r\n    end)\r\n  end\r\nend\r\n]]\r\n\r\nfunction attemptAttach(player_color)\r\n  local objs = Player[player_color].getSelectedObjects()\r\n  local attachee\r\n  local attachers = {}\r\n  for _,obj in ipairs(objs) do\r\n    if obj.getVar('movableTextTool_cowgoesmoo33') then\r\n      if obj ~= self then\r\n        table.insert(attachers, obj)\r\n      end\r\n    else\r\n      if attachee then\r\n        broadcastToColor(\"More than one target selected.\", player_color)\r\n        return\r\n      else\r\n        attachee = obj\r\n      end\r\n    end\r\n  end\r\n  if attachee then\r\n    local code = attachee.script_code\r\n    if code and code ~= '' and code ~= target_script then\r\n      broadcastToColor(\"Warning: script on card has been overriden. Rewind time to undo.\", player_color)\r\n    end\r\n    for i,attacher in ipairs(attachers) do\r\n      attacher.call('attach', {target = attachee})\r\n    end\r\n    attach({target = attachee})\r\n    local type, flip = attachee.type, attachee.getRotation().z\r\n    if (type == 'Card' or type == 'Deck') and flip > 175 and flip < 185 then\r\n      broadcastToColor(\"Warning: text will not display if card or deck is facing down.\", player_color)\r\n    end\r\n  else\r\n    broadcastToColor(\"You must have a target object in your selection (using click-and-drag or Ctrl+Click) to use this option.\", player_color)\r\n  end\r\nend\r\n\r\nfunction attach(params)\r\n  local target = params.target\r\n  local displayText = data.text\r\n  if data.enter_to_finish then\r\n    displayText = displayText:gsub('%[n%]', '\\n')\r\n  end\r\n\r\n  local textRotation = self.getRotation():sub(target.getRotation())\r\n    :add(Vector(180, 0, 180))\r\n\r\n  local textPosition = target.positionToLocal(\r\n    self.getPosition():add(Vector(0, data.hover_height, 0))\r\n  )\r\n  textPosition.x = -textPosition.x\r\n\r\n  local textScale = {}\r\n  textScale.x = self.getScale().x / target.getScale().x\r\n  textScale.y = self.getScale().x / target.getScale().y\r\n  textScale.z = self.getScale().x / target.getScale().z\r\n\r\n  local details = {\r\n    label=displayText,\r\n    click_function=\"none\",\r\n    function_owner=nil,\r\n    position=textPosition,\r\n    rotation=textRotation,\r\n    scale=textScale,\r\n    height=0, width=0,\r\n    font_color=data.color, font_size=data.size\r\n  }\r\n\r\n  target.createButton(details)\r\n\r\n  local script_state = target.script_state\r\n  if script_state and script_state ~= '' then\r\n    local state = JSON.decode(script_state)\r\n    table.insert(state, details)\r\n    target.script_state = JSON.encode(state)\r\n  else\r\n    target.script_state = JSON.encode({[1]=details})\r\n  end\r\n\r\n  target.script_code = target_script\r\n\r\n  self.destruct()\r\nend\r\n\r\nfunction applyMultiple(player_color, func_string, params, static_only)\r\n  local objs = Player[player_color].getSelectedObjects()\r\n  for _,obj in ipairs(objs) do\r\n    if obj.getVar('movableTextTool_cowgoesmoo33') then\r\n      if not static_only or obj.call('isStatic') then\r\n        obj.call(func_string, params)\r\n      end\r\n    end\r\n  end\r\nend\r\n\r\nfunction isStatic()\r\n  local input = self.getInputs()\r\n  return not input or #input == 0\r\nend\r\n\r\nfunction getBox(input, force)\r\n  local maxLength, lineCount = EXPAND_INTERVAL, 1\r\n  local lineLength = 0\r\n  for i = 1, #input do\r\n    local c = input:sub(i,i)\r\n    if c == '\\n' then\r\n      lineCount = lineCount + 1\r\n      if lineLength > maxLength then maxLength = (math.floor(lineLength / EXPAND_INTERVAL) + 1) * EXPAND_INTERVAL end\r\n      lineLength = 0\r\n    else\r\n      lineLength = lineLength + 1\r\n    end\r\n  end\r\n  if lineLength > maxLength then maxLength = (math.floor(lineLength / EXPAND_INTERVAL) + 1) * EXPAND_INTERVAL end\r\n\r\n  newWidth = data.size * maxLength * 0.9\r\n  newHeight = data.size * lineCount + 23\r\n\r\n  if force or boxWidth ~= newWidth or boxHeight ~= newHeight then\r\n    boxWidth, boxHeight = newWidth, newHeight\r\n    return {width = boxWidth, height = boxHeight}\r\n  end\r\n  return nil\r\nend\r\n\r\ntemp_lift = nil\r\nfunction onPickUp(player_color)\r\n  if data.autolift then\r\n    local player = Player[player_color]\r\n    temp_lift = player.lift_height\r\n    player.lift_height = 0\r\n  end\r\nend\r\n\r\nfunction onDrop(player_color)\r\n  if data.autolift and temp_lift then\r\n    Player[player_color].lift_height = temp_lift\r\n  end\r\nend\r\n\r\n-- Should be called every time data is modified, allows info to be saved on copy/paste\r\nfunction updateState()\r\n  self.script_state = JSON.encode(data)\r\nend\r\n\r\nfunction onSave()\r\n  self.script_state = JSON.encode(data)\r\n  return self.script_state\r\nend","LuaScriptState":"{\"autolift\":false,\"autolock\":false,\"box_transparency\":1,\"color\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1},\"enter_to_finish\":false,\"hover_height\":0.05,\"interactable\":true,\"size\":200,\"text\":\"Portes de derrière\"}","XmlUI":""},{"GUID":"caf9d1","Name":"Custom_Tile","Transform":{"posX":17.5,"posY":1.50652063,"posZ":25,"rotX":-0.00116117473,"rotY":60.0001,"rotZ":359.9881,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/vppt2my.png","ImageSecondaryURL":"https://i.imgur.com/vppt2my.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":"","States":{"2":{"GUID":"4d3553","Name":"Custom_Tile","Transform":{"posX":-17.11995,"posY":1.60650957,"posZ":3.85999179,"rotX":359.9831,"rotY":359.984558,"rotZ":359.920074,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/HyfE8m8.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""},"3":{"GUID":"5b38c6","Name":"Custom_Tile","Transform":{"posX":-17.1199474,"posY":1.60650969,"posZ":3.85999274,"rotX":359.983124,"rotY":359.984467,"rotZ":359.9201,"scaleX":0.8,"scaleY":1,"scaleZ":0.8},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/dHKBLoD.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""}}},{"GUID":"cbab46","Name":"Card","Transform":{"posX":-22.4997,"posY":1.77890575,"posZ":8.997899,"rotX":-0.00000511765757,"rotY":179.999878,"rotZ":6.111463e-8,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Couloir Obscur","Description":"Club du Trèfle.","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02074\",\n  \"locationBack\": {\n    \"connections\": \"Triangle|Tee|Hourglass|Plus|Tilde\",\n    \"icons\": \"Diamond\"\n  },\n  \"locationFront\": {\n    \"connections\": \"Triangle\",\n    \"icons\": \"Diamond\"\n  },\n  \"traits\": \"Clover Club.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":116905,"SidewaysCard":false,"CustomDeck":{"1169":{"FaceURL":"https://i.imgur.com/iZag7R1.jpg","BackURL":"https://i.imgur.com/ArR45VU.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"e57ccb","Name":"Custom_Tile","Transform":{"posX":-0.5000001,"posY":1.50683951,"posZ":18.5,"rotX":0.004947801,"rotY":90.0002,"rotZ":359.9891,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/vppt2my.png","ImageSecondaryURL":"https://i.imgur.com/vppt2my.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":"","States":{"2":{"GUID":"44b0c5","Name":"Custom_Tile","Transform":{"posX":-39.7933121,"posY":1.63758957,"posZ":2.038383,"rotX":359.9201,"rotY":269.9961,"rotZ":0.0168742146,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/HyfE8m8.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""},"3":{"GUID":"5b38c6","Name":"Custom_Tile","Transform":{"posX":-38.8217163,"posY":1.99356019,"posZ":0.4159239,"rotX":359.9201,"rotY":272.9828,"rotZ":0.01687373,"scaleX":0.8,"scaleY":1,"scaleZ":0.8},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/dHKBLoD.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""}}},{"GUID":"f800b3","Name":"Card","Transform":{"posX":25.00025,"posY":1.53323245,"posZ":-5.49998236,"rotX":0.0108896233,"rotY":180.0012,"rotZ":181.059021,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276102,"SidewaysCard":false,"CustomDeck":{"2761":{"FaceURL":"https://i.imgur.com/FVWxpyu.jpg","BackURL":"https://i.imgur.com/EmJxccn.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"fad42f","Name":"Deck","Transform":{"posX":-21.4998035,"posY":1.8199302,"posZ":3.99799466,"rotX":-0.0000048119573,"rotY":179.995728,"rotZ":-3.40673381e-7,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":false,"SidewaysCard":false,"DeckIDs":[276017,276018,276019,276020,276021,276022,276016],"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":"","ContainedObjects":[{"GUID":"57d787","Name":"Card","Transform":{"posX":-21.49981,"posY":4.875334,"posZ":3.99798632,"rotX":-0.000005023378,"rotY":179.9958,"rotZ":6.405492e-8,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"51068\",\n  \"traits\": \"Terror.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276017,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"7990a4","Name":"Card","Transform":{"posX":-21.49981,"posY":5.075334,"posZ":3.99798632,"rotX":-0.000005023378,"rotY":179.9958,"rotZ":6.405492e-8,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"51070\",\n  \"traits\": \"Terror.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276018,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"b34f35","Name":"Card","Transform":{"posX":-21.49981,"posY":5.275334,"posZ":3.99798632,"rotX":-0.000005023378,"rotY":179.9958,"rotZ":6.405492e-8,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"51069\",\n  \"traits\": \"Terror.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276019,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"35b48f","Name":"Card","Transform":{"posX":-21.49981,"posY":5.47533369,"posZ":3.99798632,"rotX":-0.000005023378,"rotY":179.9958,"rotZ":6.405492e-8,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"51070\",\n  \"traits\": \"Terror.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276020,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"9ec9fe","Name":"Card","Transform":{"posX":-21.49981,"posY":5.675334,"posZ":3.99798632,"rotX":-0.000005023378,"rotY":179.9958,"rotZ":6.405492e-8,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"51068\",\n  \"traits\": \"Terror.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276021,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"cac119","Name":"Card","Transform":{"posX":-21.49981,"posY":5.875334,"posZ":3.99798632,"rotX":-0.000005023378,"rotY":179.9958,"rotZ":6.405492e-8,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"51069\",\n  \"traits\": \"Terror.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276022,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"5c600e","Name":"Card","Transform":{"posX":-21.49981,"posY":1.91197634,"posZ":3.99798632,"rotX":-0.00247980747,"rotY":179.9958,"rotZ":-0.00108634122,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"51070\",\n  \"traits\": \"Terror.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276016,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""}]}],"AttachedDecals":[{"Transform":{"posX":-0.0021877822,"posY":-0.08963572,"posZ":-0.00288731651,"rotX":270,"rotY":359.869568,"rotZ":0,"scaleX":2.00000215,"scaleY":2.00000238,"scaleZ":2.00000262},"CustomDecal":{"Name":"dunwich_back","ImageURL":"http://cloud-3.steamusercontent.com/ugc/959719855119695911/931B9829687A20F4DEADB36DA57B7E6D76792231/","Size":7.4}}]},{"GUID":"3ebbf6","Name":"Custom_Model_Bag","Transform":{"posX":3.49999785,"posY":0.9799974,"posZ":44.9999962,"rotX":-0.000005040128,"rotY":180.022614,"rotZ":5.266932e-7,"scaleX":1.20052135,"scaleY":0.249882281,"scaleZ":1.3145982},"Nickname":"III : L'Express du Comté d'Essex ","Description":"Renouveau : L'Héritage de Dunwich","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":1,"g":1,"b":1},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"MaterialIndex":-1,"MeshIndex":-1,"CustomMesh":{"MeshURL":"https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/advboxes/tuckbox_h_MSH.obj","DiffuseURL":"http://cloud-3.steamusercontent.com/ugc/829135118403754230/0142FE1AC59471A8F7E46F07E089A73F47D59AA5/","NormalURL":"","ColliderURL":"","Convex":true,"MaterialIndex":3,"TypeIndex":6,"CustomShader":{"SpecularColor":{"r":1,"g":1,"b":1},"SpecularIntensity":0,"SpecularSharpness":2,"FresnelStrength":0},"CastShadows":true},"Bag":{"Order":0},"LuaScript":"-- Utility memory bag by Directsun\r\n-- Version 2.7.0\r\n-- Fork of Memory Bag 2.0 by MrStump\r\n--\r\n-- Want to contribute? Create an issue or fork the code on GitHub and submit a pull request:\r\n-- https://github.com/sunflowermans/TTS-UtilityMemoryBag\r\n\r\n\r\nfunction updateSave()\r\n    local data_to_save = {[\"ml\"]=memoryList}\r\n    saved_data = JSON.encode(data_to_save)\r\n    self.script_state = saved_data\r\nend\r\n\r\nfunction combineMemoryFromBagsWithin()\r\n    local bagObjList = self.getObjects()\r\n    for _, bagObj in ipairs(bagObjList) do\r\n        local data = bagObj.lua_script_state\r\n        if data ~= nil then\r\n            local j = JSON.decode(data)\r\n            if j ~= nil and j.ml ~= nil then\r\n                for guid, entry in pairs(j.ml) do\r\n                    memoryList[guid] = entry\r\n                end\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\nfunction updateMemoryWithMoves()\r\n    memoryList = memoryListBackup\r\n    --get the first transposed object's coordinates\r\n    local obj = getObjectFromGUID(moveGuid)\r\n\r\n    -- p1 is where needs to go, p2 is where it was\r\n    local refObjPos = memoryList[moveGuid].pos\r\n    local deltaPos = findOffsetDistance(obj.getPosition(), refObjPos, nil)\r\n    local movedRotation = obj.getRotation()\r\n    for guid, entry in pairs(memoryList) do\r\n        memoryList[guid].pos.x = entry.pos.x - deltaPos.x\r\n        memoryList[guid].pos.y = entry.pos.y - deltaPos.y\r\n        memoryList[guid].pos.z = entry.pos.z - deltaPos.z\r\n        -- memoryList[guid].rot.x = movedRotation.x\r\n        -- memoryList[guid].rot.y = movedRotation.y\r\n        -- memoryList[guid].rot.z = movedRotation.z\r\n    end\r\n\r\n    --theList[obj.getGUID()] = {\r\n    --    pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n    --    rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n    --    lock=obj.getLock()\r\n    --}\r\n    moveList = {}\r\nend\r\n\r\nfunction onload(saved_data)\r\n\r\n    fresh = true\r\n    if saved_data ~= \"\" then\r\n        local loaded_data = JSON.decode(saved_data)\r\n        --Set up information off of loaded_data\r\n        memoryList = loaded_data.ml\r\n    else\r\n        --Set up information for if there is no saved saved data\r\n        memoryList = {}\r\n\r\n    end\r\n\r\n    moveList = {}\r\n    moveGuid = nil\r\n\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        fresh = false\r\n        createMemoryActionButtons()\r\n    end\r\nend\r\n\r\n\r\n--Beginning Setup\r\n\r\n\r\n--Make setup button\r\n function createSetupButton()\r\n    self.createButton({\r\n      label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n      position={0,0.1,-2.1}, rotation={0,0,0}, height=275, width=625,\r\n      font_size=150, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n end\r\n\r\n--Triggered by Transpose button\r\nfunction buttonClick_transpose()\r\n    moveGuid = nil\r\n    broadcastToAll(\"Select one object and move it- all objects will move relative to the new location\", {0.75, 0.75, 1})\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(true)\r\n    createSetupActionButtons(true)\r\nend\r\n\r\n--Triggered by setup button,\r\nfunction buttonClick_setup()\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(false)\r\n    createSetupActionButtons(false)\r\nend\r\n\r\nfunction getAllObjectsInMemory()\r\n    local objTable = {}\r\n    local curObj = {}\r\n\r\n    for guid in pairs(memoryListBackup) do\r\n        curObj = getObjectFromGUID(guid)\r\n        table.insert(objTable, curObj)\r\n    end\r\n\r\n    return objTable\r\n    -- return getAllObjects()\r\nend\r\n\r\n--Creates selection buttons on objects\r\nfunction createButtonsOnAllObjects(move)\r\n    buttonIndexMap = {}\r\n    local howManyButtons = 0\r\n\r\n    local objsToHaveButtons = {}\r\n    if move == true then\r\n        objsToHaveButtons = getAllObjectsInMemory()\r\n    else\r\n        objsToHaveButtons = getAllObjects()\r\n    end\r\n\r\n    for _, obj in ipairs(objsToHaveButtons) do\r\n        if obj ~= self then\r\n            --On a normal bag, the button positions aren't the same size as the bag.\r\n            globalScaleFactor = 1* 1/self.getScale().x\r\n            --Super sweet math to set button positions\r\n            local selfPos = self.getPosition()\r\n            local objPos = obj.getPosition()\r\n            local deltaPos = findOffsetDistance(selfPos, objPos, obj)\r\n            local objPos = rotateLocalCoordinates(deltaPos, self)\r\n            objPos.x = -objPos.x * globalScaleFactor\r\n            objPos.y = objPos.y * globalScaleFactor + 2\r\n            objPos.z = objPos.z * globalScaleFactor * 0.9\r\n            --Workaround for custom PDFs\r\n            if obj.Book then\r\n                objPos.y = objPos.y + 0.5\r\n            end\r\n            --Offset rotation of bag\r\n            local rot = self.getRotation()\r\n            rot.y = -rot.y + 180\r\n            --Create function\r\n            local funcName = \"selectButton_\" .. howManyButtons\r\n            local func = function() buttonClick_selection(obj, move) end\r\n            local color = {0.75,0.25,0.25,0.6}\r\n            local colorMove = {0,0,1,0.6}\r\n            if move == true then\r\n                color = colorMove\r\n            end\r\n            self.setVar(funcName, func)\r\n            self.createButton({\r\n                click_function=funcName, function_owner=self,\r\n                position=objPos, rotation=rot, height=500, width=500,\r\n                color=color,\r\n            })\r\n            buttonIndexMap[obj.getGUID()] = howManyButtons\r\n            howManyButtons = howManyButtons + 1\r\n        end\r\n    end\r\nend\r\n\r\n--Creates submit and cancel buttons\r\nfunction createSetupActionButtons(move)\r\n    self.createButton({\r\n        label=\"Annuler\", click_function=\"buttonClick_cancel\", function_owner=self,\r\n      position={-0.7,0.1,2.1}, rotation={0,0,0}, height=275, width=625,\r\n      font_size=145, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n\r\n    self.createButton({\r\n        label=\"Valider\", click_function=\"buttonClick_submit\", function_owner=self,\r\n        position={-0.7,0.3,2.6}, rotation={0,0,0}, height=275, width=625,\r\n        font_size=140, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n\r\n    if move == false then\r\n      self.createButton({\r\n          label=\"Ajouter\", click_function=\"buttonClick_add\", function_owner=self,\r\n          position={0.7,0.3,2.1}, rotation={0,0,0}, height=275, width=625,\r\n          font_size=140, color={0,0,0}, font_color={0.25,1,0.25}\r\n      })\r\n\r\n        self.createButton({\r\n            label=\"Sélection\", click_function=\"editDragSelection\", function_owner=self,\r\n            position={-0.7,0.3,3.1}, rotation={0,0,0}, height=275, width=625,\r\n            font_size=125, color={0,0,0}, font_color={1,1,1}\r\n        })\r\n\r\n        if fresh == false then\r\n                self.createButton({\r\n                    label=\"Mise à jour\", click_function=\"buttonClick_setNew\", function_owner=self,\r\n                    position={0.7,0.3,3.1}, rotation={0,0,0}, height=275, width=625,\r\n                    font_size=105, color={0,0,0}, font_color={0.75,0.75,1}\r\n                })\r\n                self.createButton({\r\n                    label=\"Retirer\", click_function=\"buttonClick_remove\", function_owner=self,\r\n                    position={0.7,0.3,2.6}, rotation={0,0,0}, height=275, width=625,\r\n                    font_size=140, color={0,0,0}, font_color={1,0.25,0.25}\r\n                })\r\n            end\r\n        end\r\n\r\n        self.createButton({\r\n            label=\"Reset\", click_function=\"buttonClick_reset\", function_owner=self,\r\n            position={0,0.3,-2.1}, rotation={0,0,0}, height=275, width=625,\r\n            font_size=165, color={0,0,0}, font_color={1,1,1}\r\n        })\r\n    end\r\n\r\n\r\n--During Setup\r\n\r\n\r\n--Checks or unchecks buttons\r\nfunction buttonClick_selection(obj, move)\r\n    local index = buttonIndexMap[obj.getGUID()]\r\n    local colorMove = {0,0,1,0.6}\r\n    local color = {0,1,0,0.6}\r\n\r\n    previousGuid = selectedGuid\r\n    selectedGuid = obj.getGUID()\r\n\r\n    theList = memoryList\r\n    if move == true then\r\n        theList = moveList\r\n        if previousGuid ~= nil and previousGuid ~= selectedGuid then\r\n            local prevObj = getObjectFromGUID(previousGuid)\r\n            prevObj.highlightOff()\r\n            self.editButton({index=previousIndex, color=colorMove})\r\n            theList[previousGuid] = nil\r\n        end\r\n        previousIndex = index\r\n    end\r\n\r\n    if theList[selectedGuid] == nil then\r\n        self.editButton({index=index, color=color})\r\n        --Adding pos/rot to memory table\r\n        local pos, rot = obj.getPosition(), obj.getRotation()\r\n        --I need to add it like this or it won't save due to indexing issue\r\n        theList[obj.getGUID()] = {\r\n            pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n            rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n            lock=obj.getLock(),\r\n            tint=obj.getColorTint()\r\n        }\r\n        obj.highlightOn({0,1,0})\r\n    else\r\n        color = {0.75,0.25,0.25,0.6}\r\n        if move == true then\r\n            color = colorMove\r\n        end\r\n        self.editButton({index=index, color=color})\r\n        theList[obj.getGUID()] = nil\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\nfunction editDragSelection(bagObj, player, remove)\r\n    local selectedObjs = Player[player].getSelectedObjects()\r\n    if not remove then\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            --Ignore if already in the memory list, or does not have a button\r\n            if index and not memoryList[obj.getGUID()] then\r\n                self.editButton({index=index, color={0,1,0,0.6}})\r\n                --Adding pos/rot to memory table\r\n                local pos, rot = obj.getPosition(), obj.getRotation()\r\n                --I need to add it like this or it won't save due to indexing issue\r\n                memoryList[obj.getGUID()] = {\r\n                    pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n                    rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n                    lock=obj.getLock(),\r\n                    tint=obj.getColorTint()\r\n                }\r\n                obj.highlightOn({0,1,0})\r\n            end\r\n        end\r\n    else\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            if index and memoryList[obj.getGUID()] then\r\n                color = {0.75,0.25,0.25,0.6}\r\n                self.editButton({index=index, color=color})\r\n                memoryList[obj.getGUID()] = nil\r\n                obj.highlightOff()\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\n--Cancels selection process\r\nfunction buttonClick_cancel()\r\n    memoryList = memoryListBackup\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        createMemoryActionButtons()\r\n    end\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Sélection annulée\", {1,1,1})\r\n    moveGuid = nil\r\nend\r\n\r\n--Saves selections\r\nfunction buttonClick_submit()\r\n    fresh = false\r\n    if next(moveList) ~= nil then\r\n        for guid in pairs(moveList) do\r\n            moveGuid = guid\r\n        end\r\n        if memoryListBackup[moveGuid] == nil then\r\n            broadcastToAll(\"Item selected for moving is not already in memory\", {1, 0.25, 0.25})\r\n        else\r\n            broadcastToAll(\"Moving all items in memory relative to new objects position!\", {0.75, 0.75, 1})\r\n            self.clearButtons()\r\n            self.clearInputs()\r\n            createMemoryActionButtons()\r\n            local count = 0\r\n            for guid in pairs(moveList) do\r\n                moveGuid = guid\r\n                count = count + 1\r\n                local obj = getObjectFromGUID(guid)\r\n                if obj ~= nil then obj.highlightOff() end\r\n            end\r\n            updateMemoryWithMoves()\r\n            updateSave()\r\n            buttonClick_place()\r\n        end\r\n    elseif next(memoryList) == nil and moveGuid == nil then\r\n        memoryList = memoryListBackup\r\n        broadcastToAll(\"No selections made.\", {0.75, 0.25, 0.25})\r\n    end\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    updateSave()\r\n    moveGuid = nil\r\nend\r\n\r\nfunction combineTables(first_table, second_table)\r\n    for k,v in pairs(second_table) do first_table[k] = v end\r\nend\r\n\r\nfunction buttonClick_add()\r\n    fresh = false\r\n    combineTables(memoryList, memoryListBackup)\r\n    broadcastToAll(\"Adding internal bags and selections to existing memory\", {0.25, 0.75, 0.25})\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_remove()\r\n    broadcastToAll(\"Removing Selected Entries From Memory\", {1.0, 0.25, 0.25})\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        memoryListBackup[guid] = nil\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Removed\", {1,1,1})\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_setNew()\r\n    broadcastToAll(\"Setting new position relative to items in memory\", {0.75, 0.75, 1})\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        guid = obj.guid\r\n        if memoryListBackup[guid] ~= nil then\r\n            count = count + 1\r\n            memoryListBackup[guid].pos = obj.getPosition()\r\n            memoryListBackup[guid].rot = obj.getRotation()\r\n            memoryListBackup[guid].lock = obj.getLock()\r\n            memoryListBackup[guid].tint = obj.getColorTint()\r\n        end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\n--Resets bag to starting status\r\nfunction buttonClick_reset()\r\n    fresh = true\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createSetupButton()\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Tool Reset\", {1,1,1})\r\n    updateSave()\r\nend\r\n\r\n\r\n--After Setup\r\n\r\n\r\n--Creates recall and place buttons\r\nfunction createMemoryActionButtons()\r\n    self.createButton({\r\n        label=\"Placer\", click_function=\"buttonClick_place\", function_owner=self,\r\n        position={0.7,0.1,2.2}, rotation={0,0,0}, height=275, width=625,\r\n        font_size=150, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Ranger\", click_function=\"buttonClick_recall\", function_owner=self,\r\n        position={-0.7,0.1,2.2}, rotation={0,0,0}, height=275, width=625,\r\n        font_size=150, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n        position={0,0.1,-2.2}, rotation={0,0,0}, height=275, width=625,\r\n        font_size=150, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    ---    self.createButton({\r\n    ---      label=\"Bouger\", click_function=\"buttonClick_transpose\", function_owner=self,\r\n    ---      position={-2,0.3,0.8}, rotation={0,270,0}, height=350, width=800,\r\n    ---      font_size=250, color={0,0,0}, font_color={0.75,0.75,1}\r\n    ---\r\nend\r\n\r\n--Sends objects from bag/table to their saved position/rotation\r\nfunction buttonClick_place()\r\n    local bagObjList = self.getObjects()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        --If obj is out on the table, move it to the saved pos/rot\r\n        if obj ~= nil then\r\n            obj.setPositionSmooth(entry.pos)\r\n            obj.setRotationSmooth(entry.rot)\r\n            obj.setLock(entry.lock)\r\n            obj.setColorTint(entry.tint)\r\n        else\r\n            --If obj is inside of the bag\r\n            for _, bagObj in ipairs(bagObjList) do\r\n                if bagObj.guid == guid then\r\n                    local item = self.takeObject({\r\n                        guid=guid, position=entry.pos, rotation=entry.rot, smooth=false\r\n                    })\r\n                    item.setLock(entry.lock)\r\n                    item.setColorTint(entry.tint)\r\n                    break\r\n                end\r\n            end\r\n        end\r\n    end\r\n    broadcastToAll(\"Objets placés\", {1,1,1})\r\nend\r\n\r\n--Recalls objects to bag from table\r\nfunction buttonClick_recall()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then self.putObject(obj) end\r\n    end\r\n    broadcastToAll(\"Objets rangés\", {1,1,1})\r\nend\r\n\r\n\r\n--Utility functions\r\n\r\n\r\n--Find delta (difference) between 2 x/y/z coordinates\r\nfunction findOffsetDistance(p1, p2, obj)\r\n    local yOffset = 0\r\n    if obj ~= nil then\r\n        local bounds = obj.getBounds()\r\n        yOffset = (bounds.size.y - bounds.offset.y)\r\n    end\r\n    local deltaPos = {}\r\n    deltaPos.x = (p2.x-p1.x)\r\n    deltaPos.y = (p2.y-p1.y) + yOffset\r\n    deltaPos.z = (p2.z-p1.z)\r\n    return deltaPos\r\nend\r\n\r\n--Used to rotate a set of coordinates by an angle\r\nfunction rotateLocalCoordinates(desiredPos, obj)\r\n    local objPos, objRot = obj.getPosition(), obj.getRotation()\r\n    local angle = math.rad(objRot.y)\r\n    local x = desiredPos.x * math.cos(angle) - desiredPos.z * math.sin(angle)\r\n    local z = desiredPos.x * math.sin(angle) + desiredPos.z * math.cos(angle)\r\n    --return {x=objPos.x+x, y=objPos.y+desiredPos.y, z=objPos.z+z}\r\n    return {x=x, y=desiredPos.y, z=z}\r\nend\r\n\r\nfunction rotateMyCoordinates(desiredPos, obj)\r\n    local angle = math.rad(obj.getRotation().y)\r\n    local x = desiredPos.x * math.sin(angle)\r\n    local z = desiredPos.z * math.cos(angle)\r\n    return {x=x, y=desiredPos.y, z=z}\r\nend\r\n\r\n--Coroutine delay, in seconds\r\nfunction wait(time)\r\n    local start = os.time()\r\n    repeat coroutine.yield(0) until os.time() > start + time\r\nend\r\n\r\n--Duplicates a table (needed to prevent it making reference to the same objects)\r\nfunction duplicateTable(oldTable)\r\n    local newTable = {}\r\n    for k, v in pairs(oldTable) do\r\n        newTable[k] = v\r\n    end\r\n    return newTable\r\nend\r\n\r\n--Moves scripted highlight from all objects\r\nfunction removeAllHighlights()\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\n--Round number (num) to the Nth decimal (dec)\r\nfunction round(num, dec)\r\n    local mult = 10^(dec or 0)\r\n    return math.floor(num * mult + 0.5) / mult\r\nend\r\n\r\n\r\n--[[\r\nThis object provides access to a variable stored on the \"Global script\".\r\nThe variable holds the GUIDs for every Utility Memory Bag in the scene.\r\nExample:\r\n{'805ebd', '35cc21', 'fc8886', 'f50264', '5f5f63'}\r\n--]]\r\nAllMemoryBagsInScene = {\r\n    NAME_OF_GLOBAL_VARIABLE = \"_UtilityMemoryBag_AllMemoryBagsInScene\"\r\n}\r\n\r\nfunction AllMemoryBagsInScene:add(guid)\r\n    local guids = Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\n    table.insert(guids, guid)\r\n    Global.setTable(self.NAME_OF_GLOBAL_VARIABLE, guids)\r\nend\r\n\r\nfunction AllMemoryBagsInScene:getGuidList()\r\n    return Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\nend\r\n","LuaScriptState":"{\"ml\":{\"0314c8\":{\"lock\":false,\"pos\":{\"x\":-20.8024,\"y\":1.8287,\"z\":24.0004},\"rot\":{\"x\":0.0009,\"y\":179.9942,\"z\":0.0048},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"0544a2\":{\"lock\":false,\"pos\":{\"x\":-30.5,\"y\":1.7789,\"z\":3.5},\"rot\":{\"x\":0,\"y\":179.9982,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"0b2cbf\":{\"lock\":false,\"pos\":{\"x\":-28.5003,\"y\":1.7787,\"z\":23.9999},\"rot\":{\"x\":0.0022,\"y\":180.0045,\"z\":359.9844},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"0b34de\":{\"lock\":false,\"pos\":{\"x\":12.501,\"y\":1.5509,\"z\":-6.0168},\"rot\":{\"x\":0.0049,\"y\":90.0094,\"z\":359.9891},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"1a48df\":{\"lock\":false,\"pos\":{\"x\":-24.5,\"y\":1.4935,\"z\":-5.5},\"rot\":{\"x\":0,\"y\":180,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"1d8503\":{\"lock\":false,\"pos\":{\"x\":-27.009,\"y\":1.8353,\"z\":10.0076},\"rot\":{\"x\":0,\"y\":179.9735,\"z\":0},\"tint\":{\"a\":1,\"b\":0,\"g\":0,\"r\":0.614982545375824}},\"283e30\":{\"lock\":false,\"pos\":{\"x\":17,\"y\":1.5179,\"z\":13},\"rot\":{\"x\":0.0109,\"y\":179.9923,\"z\":0.0049},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"3dc101\":{\"lock\":false,\"pos\":{\"x\":-27.9052,\"y\":1.828,\"z\":23.9999},\"rot\":{\"x\":0.003,\"y\":180.0045,\"z\":0.069},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"462b79\":{\"lock\":false,\"pos\":{\"x\":22.5,\"y\":1.5174,\"z\":13},\"rot\":{\"x\":0.0109,\"y\":179.9945,\"z\":0.0049},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"4c4a9a\":{\"lock\":false,\"pos\":{\"x\":-27.3102,\"y\":1.8815,\"z\":23.9998},\"rot\":{\"x\":0.003,\"y\":180.0063,\"z\":0.069},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"5bcebd\":{\"lock\":false,\"pos\":{\"x\":0.5,\"y\":1.5193,\"z\":13},\"rot\":{\"x\":0.0109,\"y\":179.9917,\"z\":0.0049},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"61f16e\":{\"lock\":false,\"pos\":{\"x\":-26.7157,\"y\":1.9386,\"z\":24},\"rot\":{\"x\":0.0033,\"y\":179.9991,\"z\":0.0927},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"6d62ef\":{\"lock\":false,\"pos\":{\"x\":-21.3975,\"y\":1.7788,\"z\":24.0003},\"rot\":{\"x\":0.0007,\"y\":179.9942,\"z\":-0.0045},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"74ebaa\":{\"lock\":false,\"pos\":{\"x\":-20.5,\"y\":1.7789,\"z\":19.5},\"rot\":{\"x\":0,\"y\":90.008,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"76346f\":{\"lock\":false,\"pos\":{\"x\":23.5013,\"y\":1.5138,\"z\":-5.5229},\"rot\":{\"x\":0.0109,\"y\":179.9781,\"z\":0.0049},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"8caffb\":{\"lock\":false,\"pos\":{\"x\":-21.0073,\"y\":1.8353,\"z\":10.0045},\"rot\":{\"x\":0,\"y\":179.9727,\"z\":0},\"tint\":{\"a\":1,\"b\":0,\"g\":0,\"r\":0.614982545375824}},\"9cbf2f\":{\"lock\":false,\"pos\":{\"x\":-34,\"y\":1.8353,\"z\":3.5},\"rot\":{\"x\":0,\"y\":179.9805,\"z\":0},\"tint\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1}},\"9fea68\":{\"lock\":false,\"pos\":{\"x\":30.4999,\"y\":1.7339,\"z\":-3.0001},\"rot\":{\"x\":-0.0006,\"y\":180.0035,\"z\":180.0011},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"a35225\":{\"lock\":false,\"pos\":{\"x\":11.5,\"y\":1.5184,\"z\":13},\"rot\":{\"x\":0.0109,\"y\":179.9954,\"z\":0.0049},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"a7c9c0\":{\"lock\":false,\"pos\":{\"x\":-10.5,\"y\":1.5203,\"z\":13},\"rot\":{\"x\":0.0109,\"y\":179.9919,\"z\":0.0049},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"a8be35\":{\"lock\":false,\"pos\":{\"x\":17.5,\"y\":1.5312,\"z\":-5.9999},\"rot\":{\"x\":0.0049,\"y\":90.0016,\"z\":359.9891},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"a97712\":{\"lock\":false,\"pos\":{\"x\":-26.8502,\"y\":1.7663,\"z\":11.8679},\"rot\":{\"x\":0,\"y\":0.0001,\"z\":0},\"tint\":{\"a\":0,\"b\":0,\"g\":0,\"r\":0}},\"b087d2\":{\"lock\":false,\"pos\":{\"x\":-20.2075,\"y\":1.883,\"z\":24.0004},\"rot\":{\"x\":0.0013,\"y\":179.9961,\"z\":0.0152},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"b22dfd\":{\"lock\":false,\"pos\":{\"x\":3,\"y\":1.6016,\"z\":-6.5},\"rot\":{\"x\":0.0172,\"y\":180.0226,\"z\":0.0057},\"tint\":{\"a\":1,\"b\":0.701960802078247,\"g\":0.800000011920929,\"r\":0.874509811401367}},\"d19c9f\":{\"lock\":false,\"pos\":{\"x\":-24.5524,\"y\":1.7663,\"z\":26.5546},\"rot\":{\"x\":0,\"y\":0.0002,\"z\":0},\"tint\":{\"a\":0,\"b\":0,\"g\":0,\"r\":0}},\"d87cdb\":{\"lock\":false,\"pos\":{\"x\":-5,\"y\":1.5198,\"z\":13},\"rot\":{\"x\":0.0109,\"y\":179.992,\"z\":0.0049},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"d8c6a2\":{\"lock\":false,\"pos\":{\"x\":-20.9699,\"y\":1.7663,\"z\":11.9468},\"rot\":{\"x\":0,\"y\":0.0003,\"z\":0},\"tint\":{\"a\":0,\"b\":0,\"g\":0,\"r\":0}},\"f43d73\":{\"lock\":false,\"pos\":{\"x\":6,\"y\":1.5188,\"z\":13},\"rot\":{\"x\":0.0109,\"y\":179.9915,\"z\":0.0049},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}}}}","XmlUI":"","ContainedObjects":[{"GUID":"0544a2","Name":"Card","Transform":{"posX":-30.50001,"posY":1.77890623,"posZ":3.499991,"rotX":-0.00000495992663,"rotY":179.998215,"rotZ":-3.18829265e-8,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"class\": \"Neutral\",\n  \"cycle\": \"Standalone\",\n  \"health\": 2,\n  \"id\": \"51031\",\n  \"sanity\": 2,\n  \"traits\": \"Ally. Bystander.\",\n  \"type\": \"Asset\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276039,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"0b34de","Name":"Deck","Transform":{"posX":12.5010014,"posY":1.5508709,"posZ":-6.01679659,"rotX":0.00494979,"rotY":90.0094147,"rotZ":359.9891,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Deck Intrigue","Description":"L'Express du Comté d'Essex","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":false,"SidewaysCard":true,"DeckIDs":[275903,22606,22605,22604,22603,275902],"CustomDeck":{"226":{"FaceURL":"https://i.imgur.com/hHavNex.jpg","BackURL":"https://i.imgur.com/WS70v17.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0},"2759":{"FaceURL":"https://i.imgur.com/LyGnl4m.jpg","BackURL":"https://i.imgur.com/wbSb1m1.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":"","ContainedObjects":[{"GUID":"a20bc9","Name":"Card","Transform":{"posX":12.501008,"posY":1.6390779,"posZ":-6.016817,"rotX":0.00322252279,"rotY":90.00932,"rotZ":359.987762,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"backEnemy\": {\n    \"health\": 4,\n    \"traits\": \"Monster. Elite.\"\n  },\n  \"cycle\": \"Standalone\",\n  \"doomThreshold\": 2,\n  \"id\": \"51026\",\n  \"type\": \"Agenda\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":275903,"SidewaysCard":true,"CustomDeck":{"2759":{"FaceURL":"https://i.imgur.com/LyGnl4m.jpg","BackURL":"https://i.imgur.com/wbSb1m1.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"788383","Name":"Card","Transform":{"posX":12.5010023,"posY":4.668119,"posZ":-6.016804,"rotX":0.00494211027,"rotY":90.00932,"rotZ":359.989136,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Plus de Temps","Description":"Intrigue 5a","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"doomThreshold\": 3,\n  \"id\": \"02164\",\n  \"type\": \"Agenda\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":22606,"SidewaysCard":true,"CustomDeck":{"226":{"FaceURL":"https://i.imgur.com/hHavNex.jpg","BackURL":"https://i.imgur.com/WS70v17.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"06a836","Name":"Card","Transform":{"posX":12.501,"posY":4.65126657,"posZ":-6.01679945,"rotX":0.00494992454,"rotY":90.00932,"rotZ":359.9891,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Submergé","Description":"Intrigue 4a","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"doomThreshold\": 3,\n  \"id\": \"02163\",\n  \"type\": \"Agenda\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":22605,"SidewaysCard":true,"CustomDeck":{"226":{"FaceURL":"https://i.imgur.com/hHavNex.jpg","BackURL":"https://i.imgur.com/WS70v17.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"20a53e","Name":"Card","Transform":{"posX":12.501,"posY":4.926077,"posZ":-6.0168004,"rotX":0.00494996272,"rotY":90.00932,"rotZ":359.9891,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Marche Arrière","Description":"Intrigue 3a","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"doomThreshold\": 4,\n  \"id\": \"02162\",\n  \"type\": \"Agenda\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":22604,"SidewaysCard":true,"CustomDeck":{"226":{"FaceURL":"https://i.imgur.com/hHavNex.jpg","BackURL":"https://i.imgur.com/WS70v17.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"d2e33a","Name":"Card","Transform":{"posX":12.501,"posY":4.80627441,"posZ":-6.01679945,"rotX":0.00494992454,"rotY":90.00932,"rotZ":359.9891,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"La Fissure s'Élargit","Description":"Intrigue 2a","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"doomThreshold\": 3,\n  \"id\": \"02161\",\n  \"type\": \"Agenda\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":22603,"SidewaysCard":true,"CustomDeck":{"226":{"FaceURL":"https://i.imgur.com/hHavNex.jpg","BackURL":"https://i.imgur.com/WS70v17.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"b74c86","Name":"Card","Transform":{"posX":12.501,"posY":4.6062746,"posZ":-6.01679945,"rotX":0.00494992454,"rotY":90.00932,"rotZ":359.9891,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"doomThreshold\": 2,\n  \"id\": \"51027\",\n  \"type\": \"Agenda\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":275902,"SidewaysCard":true,"CustomDeck":{"2759":{"FaceURL":"https://i.imgur.com/LyGnl4m.jpg","BackURL":"https://i.imgur.com/wbSb1m1.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""}]},{"GUID":"1a48df","Name":"Card","Transform":{"posX":-24.5,"posY":1.49346447,"posZ":-5.5,"rotX":-4.638013e-8,"rotY":180,"rotZ":-2.48123342e-7,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276108,"SidewaysCard":false,"CustomDeck":{"2761":{"FaceURL":"https://i.imgur.com/FVWxpyu.jpg","BackURL":"https://i.imgur.com/EmJxccn.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"1d8503","Name":"Custom_Model_Bag","Transform":{"posX":-27.0090027,"posY":1.83530092,"posZ":10.0075979,"rotX":-0.000005239907,"rotY":179.9735,"rotZ":2.04818818e-7,"scaleX":0.7,"scaleY":0.7,"scaleZ":0.7},"Nickname":"bag coin aléatoire","Description":"merci à Chr1Z pour le script","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.614982545,"g":0,"b":0},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"MaterialIndex":-1,"MeshIndex":-1,"CustomMesh":{"MeshURL":"https://pastebin.com/raw/ALrYhQGb","DiffuseURL":"http://cloud-3.steamusercontent.com/ugc/1932636167914787917/DED7D4BA88ADFDADA7F3E964D76508687386E957/","NormalURL":"","ColliderURL":"","Convex":true,"MaterialIndex":3,"TypeIndex":6,"CustomShader":{"SpecularColor":{"r":1,"g":1,"b":1},"SpecularIntensity":0,"SpecularSharpness":2,"FresnelStrength":0},"CastShadows":true},"Bag":{"Order":0},"LuaScript":"-- Random memory bag\r\n-- based on Utility memory bag by Directsun (Version 2.7.0)\r\n\r\nlocal CONFIG = {\r\n    MEMORY_GROUP = {\r\n        -- This determines how many frames to wait before actually placing objects onto the table when the \"Place\" button is clicked.\r\n        -- This gives the other bags time to recall their objects.\r\n        -- The delay ONLY occurs if other bags have objects out.\r\n        FRAME_DELAY_BEFORE_PLACING_OBJECTS = 30\r\n    }\r\n}\r\n\r\nmath.randomseed(os.time())\r\n\r\n--[[ Memory Bag Groups ]]\r\n--[[ Utility Memory Bags may be added to a named group, called a \"memory group\".\r\nYou can add a bag to a group through the bag's UI: \"Setup\" > \"Group Name\" (to the left of the bag).\r\nOnly one bag from a group may have it's contents placed on the table at a time.\r\nWhen \"Place\" is clicked on a bag, the other bags in it's memory group are recalled.\r\nBy default a memory bag is not in any group. It's memory group is \"nil\". --]]\r\n\r\nmemoryGroupName = { memoryBag = self }\r\nfunction memoryGroupName:get()\r\n    return self._name\r\nend\r\n\r\nfunction memoryGroupName:set(newName)\r\n    GlobalMemoryGroups:unregisterBagInGroup(self:get(), self.memoryBag.getGUID())\r\n    GlobalMemoryGroups:registerBagInGroup(newName, self.memoryBag.getGUID())\r\n\r\n    if newName == \"\" then\r\n        self._name = nil\r\n    else\r\n        self._name = newName\r\n    end\r\nend\r\n\r\n-- Click the \"Recall\" button on all other bags in my memory group.\r\nfunction recallOtherBagsInMyGroup()\r\n    for _, bag in ipairs(getOtherBagsInMyGroup()) do\r\n        bag.call('buttonClick_recall')\r\n    end\r\nend\r\n\r\n-- Return \"true\" if another bag in my memory group has any objects out on the table.\r\nfunction anyOtherBagsInMyGroupArePlaced()\r\n    for _, bag in ipairs(getOtherBagsInMyGroup()) do\r\n        local state = bag.call('areAnyOfMyObjectsPlaced')\r\n        if state then return true end\r\n    end\r\n\r\n    return false\r\nend\r\n\r\n-- Return \"true\" if at least one object from this memory bag is out on the table.\r\nfunction areAnyOfMyObjectsPlaced()\r\n    for guid, _ in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then\r\n            return true\r\n        end\r\n    end\r\n    return false\r\nend\r\n\r\nfunction getOtherBagsInMyGroup()\r\n    local bags = {}\r\n    for bagGuid, _ in pairs(GlobalMemoryGroups:getGroup(memoryGroupName:get())) do\r\n        if bagGuid ~= self.getGUID() then\r\n            bag = getObjectFromGUID(bagGuid)\r\n            -- \"bag\" is nill if it has been deleted since the last time onLoad() was called.\r\n            if bag ~= nil then\r\n                table.insert(bags, bag)\r\n            end\r\n        end\r\n    end\r\n    return bags\r\nend\r\n\r\n--[[\r\nThis object provides access to a variable stored on the \"Global script\".\r\nThe variable holds the names & guids of all memory bag groups.\r\nThe global variable is a table and holds data like this:\r\n{\r\n    'My First Group Name' = {\r\n        '805ebd' = {},\r\n        '35cc21' = {},\r\n        'fc8886' = {},\r\n    },\r\n    'My Second Group Name' = {\r\n        'f50264' = {},\r\n        '5f5f63' = {},\r\n    },\r\n}\r\n--]]\r\nGlobalMemoryGroups = { NAME_OF_GLOBAL_VARIABLE = '_GlobalUtilityMemoryBagGroups' }\r\n\r\n-- Call me inside this script's \"onLoad()\" method!\r\nfunction GlobalMemoryGroups:onLoad(myGuid)\r\n    -- Create and initialize the global variable if it doesn't already exist:\r\n    if self:_getGroups() == nil then\r\n        self:_setGroups({})\r\n    end\r\nend\r\n\r\n-- Return the GUIDs of all bags in the \"groupName\". The return value is a dictionary that maps [GUID -> empty table].\r\nfunction GlobalMemoryGroups:getGroup(groupName)\r\n    guids = self:_getGroups()[groupName] or {}\r\n    return guids\r\nend\r\n\r\n-- Registers a bag in a memory group. Creates a new group if one doesn't exist.\r\nfunction GlobalMemoryGroups:registerBagInGroup(groupName, bagGuid)\r\n    if groupName == nil or groupName == \"\" then\r\n        return\r\n    end\r\n\r\n    self:_tryCreateNewGroup(groupName)\r\n    local groups = self:_getGroups()\r\n    groups[groupName][bagGuid] = {}\r\n    self:_setGroups(groups)\r\nend\r\n\r\n-- Removes this bag from the memory group.\r\nfunction GlobalMemoryGroups:unregisterBagInGroup(groupName, bagGuid)\r\n    local groups = self:_getGroups()\r\n    local group = groups[groupName]\r\n    if group ~= nil then\r\n        group[bagGuid] = nil\r\n        self:_setGroups(groups)\r\n    end\r\nend\r\n\r\n-- Return the global variable, which is a table holding all memory group names & guids.\r\nfunction GlobalMemoryGroups:_getGroups()\r\n    return Global.getTable(self.NAME_OF_GLOBAL_VARIABLE)\r\nend\r\n\r\n-- Override the global variable (i.e. the entire table).\r\nfunction GlobalMemoryGroups:_setGroups(newTable)\r\n    Global.setTable(self.NAME_OF_GLOBAL_VARIABLE, newTable)\r\nend\r\n\r\n-- Add a new memory group named \"groupName\" to the global variable, if one doesn't already exist.\r\nfunction GlobalMemoryGroups:_tryCreateNewGroup(groupName)\r\n    local groups = self:_getGroups()\r\n    if groups[groupName] == nil then\r\n        groups[groupName] = {}\r\n        self:_setGroups(groups)\r\n    end\r\nend\r\n\r\n-- This object controls the \"Group Name\" input text field that is part of the bag's ingame UI.\r\ngroupNameInput = {\r\n    greyedOutText     = \"Group Name\",\r\n    widthPerCharacter = 100,\r\n    padding           = 4,\r\n    memoryBag         = self\r\n}\r\nfunction groupNameInput:create(optionalStartingValue)\r\n    local effectiveText = optionalStartingValue or self.greyedOutText\r\n    local width = self:computeWidth(effectiveText)\r\n\r\n    self.memoryBag.createInput({\r\n        label = self.greyedOutText,\r\n        value = optionalStartingValue or nil,\r\n        alignment = 3, -- Center aligned\r\n        input_function = \"groupNameInput_onCharacterTyped\", function_owner = self.memoryBag,\r\n        position = { 2.1, 0.3, 0 }, rotation = { 0, 270, 0 }, width = width, height = 350,\r\n        font_size = 250, color = { 0, 0, 0 }, font_color = { 1, 1, 1 },\r\n    })\r\nend\r\n\r\nfunction groupNameInput:computeWidth(text)\r\n    return (string.len(text) + self.padding) * self.widthPerCharacter\r\nend\r\n\r\nfunction groupNameInput:updatedWidth(text)\r\n    self.memoryBag.editInput({\r\n        index = 0,\r\n        width = self:computeWidth(text)\r\n    })\r\nend\r\n\r\nfunction groupNameInput:onCharacterTyped(text, stillEditing)\r\n    if stillEditing then\r\n        self:updatedWidth(text)\r\n    else\r\n        if text == \"\" then\r\n            self:updatedWidth(self.greyedOutText)\r\n        end\r\n    end\r\nend\r\n\r\nfunction groupNameInput_onCharacterTyped(memoryBag, playerColor, text, stillEditing)\r\n    groupNameInput:onCharacterTyped(text, stillEditing)\r\nend\r\n\r\nfunction groupNameInput:setGroupNameToInputField()\r\n    local inputFields = self.memoryBag.getInputs()\r\n    if inputFields ~= nil then\r\n        -- Get input field 0, which corresponds to the groupNameInput.\r\n        -- Unfortunately \"self.getInputs()\" doesn't return the inputs in a guaranteed order.\r\n        local nameField = nil\r\n        for _, field in ipairs(inputFields) do\r\n            if field.index == 0 then\r\n                nameField = field\r\n            end\r\n        end\r\n\r\n        memoryGroupName:set(nameField.value)\r\n    end\r\nend\r\n\r\nfunction updateSave()\r\n    local data_to_save = { [\"ml\"] = memoryList, [\"groupName\"] = memoryGroupName:get() }\r\n    saved_data = JSON.encode(data_to_save)\r\n    self.script_state = saved_data\r\nend\r\n\r\nfunction combineMemoryFromBagsWithin()\r\n    local bagObjList = self.getObjects()\r\n    for _, bagObj in ipairs(bagObjList) do\r\n        local data = bagObj.lua_script_state\r\n        if data ~= nil then\r\n            local j = JSON.decode(data)\r\n            if j ~= nil and j.ml ~= nil then\r\n                for guid, entry in pairs(j.ml) do\r\n                    memoryList[guid] = entry\r\n                end\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\nfunction updateMemoryWithMoves()\r\n    memoryList = memoryListBackup\r\n    --get the first transposed object's coordinates\r\n    local obj = getObjectFromGUID(moveGuid)\r\n\r\n    -- p1 is where needs to go, p2 is where it was\r\n    local refObjPos = memoryList[moveGuid].pos\r\n    local deltaPos = findOffsetDistance(obj.getPosition(), refObjPos, nil)\r\n    local movedRotation = obj.getRotation()\r\n    for guid, entry in pairs(memoryList) do\r\n        memoryList[guid].pos.x = entry.pos.x - deltaPos.x\r\n        memoryList[guid].pos.y = entry.pos.y - deltaPos.y\r\n        memoryList[guid].pos.z = entry.pos.z - deltaPos.z\r\n    end\r\n    moveList = {}\r\nend\r\n\r\nfunction onload(saved_data)\r\n    GlobalMemoryGroups:onLoad(self.getGUID())\r\n    AllMemoryBagsInScene:add(self.getGUID())\r\n\r\n    fresh = true\r\n    if saved_data ~= \"\" then\r\n        local loaded_data = JSON.decode(saved_data)\r\n        --Set up information off of loaded_data\r\n        memoryList = loaded_data.ml\r\n        memoryGroupName:set(loaded_data.groupName)\r\n    else\r\n        --Set up information for if there is no saved saved data\r\n        memoryList = {}\r\n        memoryGroupName:set(nil)\r\n    end\r\n\r\n    moveList = {}\r\n    moveGuid = nil\r\n\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        fresh = false\r\n        createMemoryActionButtons()\r\n    end\r\nend\r\n\r\n--Beginning Setup\r\n\r\n--Make setup button\r\nfunction createSetupButton()\r\n    self.createButton({\r\n      label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n      position={0,0.3,2}, rotation={0,0,0}, height=350, width=800,\r\n      font_size=250, color={0,0,0}, font_color={1,1,1}\r\n  })\r\nend\r\n\r\n--Triggered by Transpose button\r\nfunction buttonClick_transpose()\r\n    moveGuid = nil\r\n    broadcastToAll(\"Select one object and move it- all objects will move relative to the new location\", { 0.75, 0.75, 1 })\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(true)\r\n    createSetupActionButtons(true)\r\nend\r\n\r\n--Triggered by setup button,\r\nfunction buttonClick_setup()\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(false)\r\n    createSetupActionButtons(false)\r\nend\r\n\r\nfunction getAllObjectsInMemory()\r\n    local objTable = {}\r\n    local curObj = {}\r\n\r\n    for guid in pairs(memoryListBackup) do\r\n        curObj = getObjectFromGUID(guid)\r\n        table.insert(objTable, curObj)\r\n    end\r\n\r\n    return objTable\r\nend\r\n\r\n--Creates selection buttons on objects\r\nfunction createButtonsOnAllObjects(move)\r\n    buttonIndexMap = {}\r\n    local howManyButtons = 0\r\n\r\n    local objsToHaveButtons = {}\r\n    if move == true then\r\n        objsToHaveButtons = getAllObjectsInMemory()\r\n    else\r\n        objsToHaveButtons = getAllObjects()\r\n    end\r\n\r\n    for _, obj in ipairs(objsToHaveButtons) do\r\n        if obj ~= self then\r\n            --On a normal bag, the button positions aren't the same size as the bag.\r\n            globalScaleFactor = 1 * 1 / self.getScale().x\r\n            --Super sweet math to set button positions\r\n            local selfPos = self.getPosition()\r\n            local objPos = obj.getPosition()\r\n            local deltaPos = findOffsetDistance(selfPos, objPos, obj)\r\n            local objPos = rotateLocalCoordinates(deltaPos, self)\r\n            objPos.x = -objPos.x * globalScaleFactor\r\n            objPos.y = objPos.y * globalScaleFactor + 2\r\n            objPos.z = objPos.z * globalScaleFactor\r\n            --Workaround for custom PDFs\r\n            if obj.Book then\r\n                objPos.y = objPos.y + 0.5\r\n            end\r\n            --Offset rotation of bag\r\n            local rot = self.getRotation()\r\n            rot.y = -rot.y + 180\r\n            --Create function\r\n            local funcName = \"selectButton_\" .. howManyButtons\r\n            local func = function() buttonClick_selection(obj, move) end\r\n            local color = { 0.75, 0.25, 0.25, 0.6 }\r\n            local colorMove = { 0, 0, 1, 0.6 }\r\n            if move == true then\r\n                color = colorMove\r\n            end\r\n            self.setVar(funcName, func)\r\n            self.createButton({\r\n                click_function = funcName, function_owner = self,\r\n                position = objPos, rotation = rot, height = 1000, width = 1000,\r\n                color = color,\r\n            })\r\n            buttonIndexMap[obj.getGUID()] = howManyButtons\r\n            howManyButtons = howManyButtons + 1\r\n        end\r\n    end\r\nend\r\n\r\n  --Creates submit and cancel buttons\r\n  function createSetupActionButtons(move)\r\n      self.createButton({\r\n         label=\"Annuler\", click_function=\"buttonClick_cancel\", function_owner=self,\r\n         position={-1.15,0.3,2.1}, rotation={0,0,0}, height=350, width=1100,\r\n         font_size=250, color={0,0,0}, font_color={1,1,1}\r\n      })\r\n\r\n      self.createButton({\r\n        label=\"Valider\", click_function=\"buttonClick_submit\", function_owner=self,\r\n        position={-1.15,0.3,2.8}, rotation={0,0,0}, height=350, width=1100,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n      })\r\n\r\n      if move == false then\r\n        self.createButton({\r\n            label=\"Ajouter\", click_function=\"buttonClick_add\", function_owner=self,\r\n            position={1.15,0.3,2.1}, rotation={0,0,0}, height=350, width=1100,\r\n            font_size=250, color={0,0,0}, font_color={0.25,1,0.25}\r\n          })\r\n\r\n          self.createButton({\r\n              label=\"Sélection\", click_function=\"editDragSelection\", function_owner=self,\r\n              position={-1.15,0.3,3.5}, rotation={0,0,0}, height=350, width=1100,\r\n              font_size=250, color={0,0,0}, font_color={1,1,1}\r\n          })\r\n\r\n          if fresh == false then\r\n              self.createButton({\r\n                  label=\"Mise à Jour\", click_function=\"buttonClick_setNew\", function_owner=self,\r\n                  position={1.15,0.3,3.5}, rotation={0,0,0}, height=350, width=1100,\r\n                  font_size=180, color={0,0,0}, font_color={0.75,0.75,1}\r\n              })\r\n              self.createButton({\r\n                  label=\"Retirer\", click_function=\"buttonClick_remove\", function_owner=self,\r\n                  position={1.15,0.3,2.8}, rotation={0,0,0}, height=350, width=1100,\r\n                  font_size=250, color={0,0,0}, font_color={1,0.25,0.25}\r\n              })\r\n          end\r\n      end\r\n\r\n      self.createButton({\r\n          label=\"Reset\", click_function=\"buttonClick_reset\", function_owner=self,\r\n          position={0,0.3,-2}, rotation={0,0,0}, height=350, width=800,\r\n          font_size=250, color={0,0,0}, font_color={1,1,1}\r\n      })\r\n  end\r\n\r\n\r\n--During Setup\r\n\r\n--Checks or unchecks buttons\r\nfunction buttonClick_selection(obj, move)\r\n    local index = buttonIndexMap[obj.getGUID()]\r\n    local colorMove = { 0, 0, 1, 0.6 }\r\n    local color = { 0, 1, 0, 0.6 }\r\n\r\n    previousGuid = selectedGuid\r\n    selectedGuid = obj.getGUID()\r\n\r\n    theList = memoryList\r\n    if move == true then\r\n        theList = moveList\r\n        if previousGuid ~= nil and previousGuid ~= selectedGuid then\r\n            local prevObj = getObjectFromGUID(previousGuid)\r\n            prevObj.highlightOff()\r\n            self.editButton({ index = previousIndex, color = colorMove })\r\n            theList[previousGuid] = nil\r\n        end\r\n        previousIndex = index\r\n    end\r\n\r\n    if theList[selectedGuid] == nil then\r\n        self.editButton({ index = index, color = color })\r\n        --Adding pos/rot to memory table\r\n        local pos, rot = obj.getPosition(), obj.getRotation()\r\n        --I need to add it like this or it won't save due to indexing issue\r\n        theList[obj.getGUID()] = {\r\n            pos = { x = round(pos.x, 4), y = round(pos.y, 4), z = round(pos.z, 4) },\r\n            rot = { x = round(rot.x, 4), y = round(rot.y, 4), z = round(rot.z, 4) },\r\n            lock = obj.getLock(),\r\n            tint = obj.getColorTint()\r\n        }\r\n        obj.highlightOn({ 0, 1, 0 })\r\n    else\r\n        color = { 0.75, 0.25, 0.25, 0.6 }\r\n        if move == true then\r\n            color = colorMove\r\n        end\r\n        self.editButton({ index = index, color = color })\r\n        theList[obj.getGUID()] = nil\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\nfunction editDragSelection(bagObj, player, remove)\r\n    local selectedObjs = Player[player].getSelectedObjects()\r\n    if not remove then\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            --Ignore if already in the memory list, or does not have a button\r\n            if index and not memoryList[obj.getGUID()] then\r\n                self.editButton({ index = index, color = { 0, 1, 0, 0.6 } })\r\n                --Adding pos/rot to memory table\r\n                local pos, rot = obj.getPosition(), obj.getRotation()\r\n                --I need to add it like this or it won't save due to indexing issue\r\n                memoryList[obj.getGUID()] = {\r\n                    pos = { x = round(pos.x, 4), y = round(pos.y, 4), z = round(pos.z, 4) },\r\n                    rot = { x = round(rot.x, 4), y = round(rot.y, 4), z = round(rot.z, 4) },\r\n                    lock = obj.getLock(),\r\n                    tint = obj.getColorTint()\r\n                }\r\n                obj.highlightOn({ 0, 1, 0 })\r\n            end\r\n        end\r\n    else\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            if index and memoryList[obj.getGUID()] then\r\n                color = { 0.75, 0.25, 0.25, 0.6 }\r\n                self.editButton({ index = index, color = color })\r\n                memoryList[obj.getGUID()] = nil\r\n                obj.highlightOff()\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\n--Cancels selection process\r\nfunction buttonClick_cancel()\r\n    memoryList = memoryListBackup\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        createMemoryActionButtons()\r\n    end\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Sélection annulée\", { 1, 1, 1 })\r\n    moveGuid = nil\r\nend\r\n\r\n--Saves selections\r\nfunction buttonClick_submit()\r\n    fresh = false\r\n    if next(moveList) ~= nil then\r\n        for guid in pairs(moveList) do\r\n            moveGuid = guid\r\n        end\r\n        if memoryListBackup[moveGuid] == nil then\r\n            broadcastToAll(\"Item selected for moving is not already in memory\", { 1, 0.25, 0.25 })\r\n        else\r\n            broadcastToAll(\"Moving all items in memory relative to new objects position!\", { 0.75, 0.75, 1 })\r\n            self.clearButtons()\r\n            self.clearInputs()\r\n            createMemoryActionButtons()\r\n            local count = 0\r\n            for guid in pairs(moveList) do\r\n                moveGuid = guid\r\n                count = count + 1\r\n                local obj = getObjectFromGUID(guid)\r\n                if obj ~= nil then obj.highlightOff() end\r\n            end\r\n            updateMemoryWithMoves()\r\n            updateSave()\r\n            buttonClick_place()\r\n        end\r\n    elseif next(memoryList) == nil and moveGuid == nil then\r\n        memoryList = memoryListBackup\r\n        broadcastToAll(\"No selections made.\", { 0.75, 0.25, 0.25 })\r\n    end\r\n    combineMemoryFromBagsWithin()\r\n    groupNameInput:setGroupNameToInputField()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count .. \" Objects Saved\", { 1, 1, 1 })\r\n    updateSave()\r\n    moveGuid = nil\r\nend\r\n\r\nfunction combineTables(first_table, second_table)\r\n    for k, v in pairs(second_table) do first_table[k] = v end\r\nend\r\n\r\nfunction buttonClick_add()\r\n    fresh = false\r\n    combineTables(memoryList, memoryListBackup)\r\n    broadcastToAll(\"Adding internal bags and selections to existing memory\", { 0.25, 0.75, 0.25 })\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count .. \" Objects Saved\", { 1, 1, 1 })\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_remove()\r\n    broadcastToAll(\"Removing Selected Entries From Memory\", { 1.0, 0.25, 0.25 })\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        memoryListBackup[guid] = nil\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count .. \" Objects Removed\", { 1, 1, 1 })\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_setNew()\r\n    broadcastToAll(\"Setting new position relative to items in memory\", { 0.75, 0.75, 1 })\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        guid = obj.guid\r\n        if memoryListBackup[guid] ~= nil then\r\n            count = count + 1\r\n            memoryListBackup[guid].pos = obj.getPosition()\r\n            memoryListBackup[guid].rot = obj.getRotation()\r\n            memoryListBackup[guid].lock = obj.getLock()\r\n            memoryListBackup[guid].tint = obj.getColorTint()\r\n        end\r\n    end\r\n    broadcastToAll(count .. \" Objects Saved\", { 1, 1, 1 })\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\n--Resets bag to starting status\r\nfunction buttonClick_reset()\r\n    fresh = true\r\n    memoryList = {}\r\n    memoryGroupName:set(nil)\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createSetupButton()\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Tool Reset\", { 1, 1, 1 })\r\n    updateSave()\r\nend\r\n\r\n--After Setup\r\n\r\n--Creates recall and place buttons\r\nfunction createMemoryActionButtons()\r\n    self.createButton({\r\n        label=\"Placer au hasard\", click_function=\"buttonClick_place\", function_owner=self,\r\n        position={0,0.3,2}, rotation={0,0,0}, height=350, width=2000,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Ranger\", click_function=\"buttonClick_recall\", function_owner=self,\r\n        position={0,0.3,2.8}, rotation={0,0,0}, height=350, width=1000,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n        position={2,0.3,0}, rotation={0,90,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    ---    self.createButton({\r\n    ---      label=\"Bouger\", click_function=\"buttonClick_transpose\", function_owner=self,\r\n    ---      position={-2,0.3,0.8}, rotation={0,270,0}, height=350, width=800,\r\n    ---      font_size=250, color={0,0,0}, font_color={0.75,0.75,1}\r\n    ---\r\nend\r\n\r\n--Sends objects from bag/table to their saved position/rotation\r\nfunction buttonClick_place()\r\n    if anyOtherBagsInMyGroupArePlaced() then\r\n        recallOtherBagsInMyGroup()\r\n        Wait.frames(_placeObjects, CONFIG.MEMORY_GROUP.FRAME_DELAY_BEFORE_PLACING_OBJECTS)\r\n    else\r\n        _placeObjects()\r\n    end\r\nend\r\n\r\nfunction _placeObjects()\r\n    local bagObjList = self.getObjects()\r\n\r\n    -- randomize memorylist position\r\n    local positionList = {}\r\n    for guid, entry in pairs(memoryList) do\r\n        table.insert(positionList, memoryList[guid].pos)\r\n    end\r\n\r\n    for i = #positionList, 2, -1 do\r\n        local j = math.random(i)\r\n        positionList[i], positionList[j] = positionList[j], positionList[i]\r\n    end\r\n\r\n    local i = 1\r\n    for guid, entry in pairs(memoryList) do\r\n        memoryList[guid].pos = positionList[i]\r\n        i = i + 1\r\n    end\r\n\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        --If obj is out on the table, move it to the saved pos/rot\r\n        if obj ~= nil then\r\n            obj.setPositionSmooth(entry.pos)\r\n            obj.setRotationSmooth(entry.rot)\r\n            obj.setLock(entry.lock)\r\n            obj.setColorTint(entry.tint)\r\n        else\r\n            --If obj is inside of the bag\r\n            for _, bagObj in ipairs(bagObjList) do\r\n                if bagObj.guid == guid then\r\n                    local item = self.takeObject({\r\n                        guid = guid, position = entry.pos, rotation = entry.rot, smooth = false\r\n                    })\r\n                    item.setLock(entry.lock)\r\n                    item.setColorTint(entry.tint)\r\n                    break\r\n                end\r\n            end\r\n        end\r\n    end\r\n    broadcastToAll(\"Objets placés au hasard\", {1,1,1})\r\nend\r\n\r\n--Recalls objects to bag from table\r\nfunction buttonClick_recall()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then self.putObject(obj) end\r\n    end\r\n    broadcastToAll(\"Objets rangés\", {1,1,1})\r\nend\r\n\r\n--Utility functions\r\n\r\n--Find delta (difference) between 2 x/y/z coordinates\r\nfunction findOffsetDistance(p1, p2, obj)\r\n    local yOffset = 0\r\n    if obj ~= nil then\r\n        local bounds = obj.getBounds()\r\n        yOffset = (bounds.size.y - bounds.offset.y)\r\n    end\r\n    local deltaPos = {}\r\n    deltaPos.x = (p2.x - p1.x)\r\n    deltaPos.y = (p2.y - p1.y) + yOffset\r\n    deltaPos.z = (p2.z - p1.z)\r\n    return deltaPos\r\nend\r\n\r\n--Used to rotate a set of coordinates by an angle\r\nfunction rotateLocalCoordinates(desiredPos, obj)\r\n    local objPos, objRot = obj.getPosition(), obj.getRotation()\r\n    local angle = math.rad(objRot.y)\r\n    local x = desiredPos.x * math.cos(angle) - desiredPos.z * math.sin(angle)\r\n    local z = desiredPos.x * math.sin(angle) + desiredPos.z * math.cos(angle)\r\n    --return {x=objPos.x+x, y=objPos.y+desiredPos.y, z=objPos.z+z}\r\n    return { x = x, y = desiredPos.y, z = z }\r\nend\r\n\r\nfunction rotateMyCoordinates(desiredPos, obj)\r\n    local angle = math.rad(obj.getRotation().y)\r\n    local x = desiredPos.x * math.sin(angle)\r\n    local z = desiredPos.z * math.cos(angle)\r\n    return { x = x, y = desiredPos.y, z = z }\r\nend\r\n\r\n--Coroutine delay, in seconds\r\nfunction wait(time)\r\n    local start = os.time()\r\n    repeat coroutine.yield(0) until os.time() > start + time\r\nend\r\n\r\n--Duplicates a table (needed to prevent it making reference to the same objects)\r\nfunction duplicateTable(oldTable)\r\n    local newTable = {}\r\n    for k, v in pairs(oldTable) do\r\n        newTable[k] = v\r\n    end\r\n    return newTable\r\nend\r\n\r\n--Moves scripted highlight from all objects\r\nfunction removeAllHighlights()\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\n--Round number (num) to the Nth decimal (dec)\r\nfunction round(num, dec)\r\n    local mult = 10 ^ (dec or 0)\r\n    return math.floor(num * mult + 0.5) / mult\r\nend\r\n\r\n--[[ This object provides access to a variable stored on the \"Global script\".\r\nThe variable holds the GUIDs for every Utility Memory Bag in the scene.\r\nExample: {'805ebd', '35cc21', 'fc8886', 'f50264', '5f5f63'} --]]\r\nAllMemoryBagsInScene = {\r\n    NAME_OF_GLOBAL_VARIABLE = \"_UtilityMemoryBag_AllMemoryBagsInScene\"\r\n}\r\n\r\nfunction AllMemoryBagsInScene:add(guid)\r\n    local guids = Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\n    table.insert(guids, guid)\r\n    Global.setTable(self.NAME_OF_GLOBAL_VARIABLE, guids)\r\nend\r\n\r\nfunction AllMemoryBagsInScene:getGuidList()\r\n    return Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\nend\r\n","LuaScriptState":"{\"ml\":{\"0b2cbf\":{\"lock\":false,\"pos\":{\"x\":-28.5003,\"y\":1.7787,\"z\":23.9999},\"rot\":{\"x\":0.0022,\"y\":180.0045,\"z\":359.9844},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"283e30\":{\"lock\":false,\"pos\":{\"x\":17,\"y\":1.5179,\"z\":13},\"rot\":{\"x\":0.0109,\"y\":179.9923,\"z\":0.0049},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"3dc101\":{\"lock\":false,\"pos\":{\"x\":-27.9052,\"y\":1.828,\"z\":23.9999},\"rot\":{\"x\":0.003,\"y\":180.0045,\"z\":0.069},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"4c4a9a\":{\"lock\":false,\"pos\":{\"x\":-27.3102,\"y\":1.8815,\"z\":23.9998},\"rot\":{\"x\":0.003,\"y\":180.0063,\"z\":0.069},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"5bcebd\":{\"lock\":false,\"pos\":{\"x\":0.5,\"y\":1.5193,\"z\":13},\"rot\":{\"x\":0.0109,\"y\":179.9917,\"z\":0.0049},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"61f16e\":{\"lock\":false,\"pos\":{\"x\":-26.7157,\"y\":1.9386,\"z\":24},\"rot\":{\"x\":0.0033,\"y\":179.9991,\"z\":0.0927},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"a35225\":{\"lock\":false,\"pos\":{\"x\":11.5,\"y\":1.5184,\"z\":13},\"rot\":{\"x\":0.0109,\"y\":179.9954,\"z\":0.0049},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"a7c9c0\":{\"lock\":false,\"pos\":{\"x\":-10.5,\"y\":1.5203,\"z\":13},\"rot\":{\"x\":0.0109,\"y\":179.9919,\"z\":0.0049},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"d87cdb\":{\"lock\":false,\"pos\":{\"x\":-5,\"y\":1.5198,\"z\":13},\"rot\":{\"x\":0.0109,\"y\":179.992,\"z\":0.0049},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"f43d73\":{\"lock\":false,\"pos\":{\"x\":6,\"y\":1.5188,\"z\":13},\"rot\":{\"x\":0.0109,\"y\":179.9915,\"z\":0.0049},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}}}}","XmlUI":"","ContainedObjects":[{"GUID":"0b2cbf","Name":"Card","Transform":{"posX":-10.5000019,"posY":1.52026224,"posZ":12.9999981,"rotX":0.010891106,"rotY":180.004822,"rotZ":0.00494927,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Wagon","Description":"Train.","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02170\",\n  \"locationBack\": {\n    \"connections\": \"\",\n    \"icons\": \"\",\n    \"uses\": {\n      \"countPerInvestigator\": 2,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    }\n  },\n  \"traits\": \"Train.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":22712,"SidewaysCard":false,"CustomDeck":{"227":{"FaceURL":"https://i.imgur.com/c9RZqMN.jpg","BackURL":"https://i.imgur.com/ZcuZ22n.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"283e30","Name":"Card","Transform":{"posX":11.5,"posY":1.51836228,"posZ":13,"rotX":0.010892204,"rotY":179.9923,"rotZ":0.00494668866,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Wagon","Description":"Train.","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02174\",\n  \"locationBack\": {\n    \"connections\": \"\",\n    \"icons\": \"\",\n    \"uses\": {\n      \"countPerInvestigator\": 1,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    },\n    \"victory\": 1\n  },\n  \"traits\": \"Train.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":22711,"SidewaysCard":false,"CustomDeck":{"227":{"FaceURL":"https://i.imgur.com/c9RZqMN.jpg","BackURL":"https://i.imgur.com/ZcuZ22n.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"3dc101","Name":"Card","Transform":{"posX":-28.500288,"posY":1.778671,"posZ":23.9999332,"rotX":0.0022487368,"rotY":180.004318,"rotZ":359.984344,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Wagon","Description":"Train.","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02167\",\n  \"locationBack\": {\n    \"connections\": \"\",\n    \"icons\": \"\",\n    \"uses\": {\n      \"countPerInvestigator\": 3,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    }\n  },\n  \"traits\": \"Train.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":22705,"SidewaysCard":false,"CustomDeck":{"227":{"FaceURL":"https://i.imgur.com/c9RZqMN.jpg","BackURL":"https://i.imgur.com/ZcuZ22n.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"4c4a9a","Name":"Card","Transform":{"posX":-5.0000186,"posY":1.51978731,"posZ":12.9999981,"rotX":0.010890943,"rotY":180.006439,"rotZ":0.00494952174,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"51029\",\n  \"locationBack\": {\n    \"connections\": \"\",\n    \"icons\": \"\",\n    \"uses\": {\n      \"countPerInvestigator\": 2,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    }\n  },\n  \"traits\": \"Train.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276110,"SidewaysCard":false,"CustomDeck":{"2761":{"FaceURL":"https://i.imgur.com/FVWxpyu.jpg","BackURL":"https://i.imgur.com/EmJxccn.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"5bcebd","Name":"Card","Transform":{"posX":6,"posY":1.51883733,"posZ":13,"rotX":0.0108922729,"rotY":179.991653,"rotZ":0.00494667655,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Wagon","Description":"Train.","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02173\",\n  \"traits\": \"Train.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":22707,"SidewaysCard":false,"CustomDeck":{"227":{"FaceURL":"https://i.imgur.com/c9RZqMN.jpg","BackURL":"https://i.imgur.com/ZcuZ22n.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"61f16e","Name":"Card","Transform":{"posX":-27.9051552,"posY":1.82829463,"posZ":23.9999275,"rotX":0.002634463,"rotY":179.998947,"rotZ":0.0226987377,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"51030\",\n  \"locationBack\": {\n    \"connections\": \"\",\n    \"icons\": \"\",\n    \"uses\": {\n      \"count\": 3,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    }\n  },\n  \"traits\": \"Train.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276111,"SidewaysCard":false,"CustomDeck":{"2761":{"FaceURL":"https://i.imgur.com/FVWxpyu.jpg","BackURL":"https://i.imgur.com/EmJxccn.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"a35225","Name":"Card","Transform":{"posX":0.499997675,"posY":1.51931226,"posZ":13,"rotX":0.01089194,"rotY":179.995316,"rotZ":0.0049474393,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Wagon","Description":"Train.","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02168\",\n  \"locationBack\": {\n    \"connections\": \"\",\n    \"icons\": \"\",\n    \"uses\": {\n      \"countPerInvestigator\": 1,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    }\n  },\n  \"traits\": \"Train.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":22708,"SidewaysCard":false,"CustomDeck":{"227":{"FaceURL":"https://i.imgur.com/c9RZqMN.jpg","BackURL":"https://i.imgur.com/ZcuZ22n.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"a7c9c0","Name":"Card","Transform":{"posX":17.0000038,"posY":1.51788735,"posZ":13,"rotX":0.0108922115,"rotY":179.99173,"rotZ":0.00494677,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Wagon","Description":"Train.","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02172\",\n  \"locationBack\": {\n    \"connections\": \"\",\n    \"icons\": \"\",\n    \"uses\": {\n      \"count\": 1,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    }\n  },\n  \"traits\": \"Train.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":22710,"SidewaysCard":false,"CustomDeck":{"227":{"FaceURL":"https://i.imgur.com/c9RZqMN.jpg","BackURL":"https://i.imgur.com/ZcuZ22n.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"d87cdb","Name":"Card","Transform":{"posX":-27.31016,"posY":1.87799525,"posZ":23.9998283,"rotX":0.003373508,"rotY":179.991821,"rotZ":0.09373633,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Wagon","Description":"Train.","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02169\",\n  \"locationBack\": {\n    \"connections\": \"\",\n    \"icons\": \"\",\n    \"uses\": {\n      \"countPerInvestigator\": 2,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    }\n  },\n  \"traits\": \"Train.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":22706,"SidewaysCard":false,"CustomDeck":{"227":{"FaceURL":"https://i.imgur.com/c9RZqMN.jpg","BackURL":"https://i.imgur.com/ZcuZ22n.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"f43d73","Name":"Card","Transform":{"posX":-26.71563,"posY":1.92759538,"posZ":24.0000343,"rotX":0.00337397074,"rotY":179.991135,"rotZ":0.0937363654,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Wagon","Description":"Train.","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02171\",\n  \"locationBack\": {\n    \"connections\": \"\",\n    \"icons\": \"\",\n    \"uses\": {\n      \"countPerInvestigator\": 1,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    }\n  },\n  \"traits\": \"Train.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":22709,"SidewaysCard":false,"CustomDeck":{"227":{"FaceURL":"https://i.imgur.com/c9RZqMN.jpg","BackURL":"https://i.imgur.com/ZcuZ22n.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""}]},{"GUID":"74ebaa","Name":"Card","Transform":{"posX":-20.4999962,"posY":1.7789048,"posZ":19.5000038,"rotX":-8.293462e-8,"rotY":90.008,"rotZ":0.00000495208269,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Un Accroc dans la Réalité","Description":"Intrigue 1a","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"doomThreshold\": 4,\n  \"id\": \"02160\",\n  \"type\": \"Agenda\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":22602,"SidewaysCard":true,"CustomDeck":{"226":{"FaceURL":"https://i.imgur.com/hHavNex.jpg","BackURL":"https://i.imgur.com/WS70v17.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"76346f","Name":"Card","Transform":{"posX":23.5013,"posY":1.51380479,"posZ":-5.5229,"rotX":0.0108934334,"rotY":179.978088,"rotZ":0.00494410656,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Référence","Description":"L'Express du Comté d'Essex","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":22700,"SidewaysCard":false,"CustomDeck":{"227":{"FaceURL":"https://i.imgur.com/c9RZqMN.jpg","BackURL":"https://i.imgur.com/ZcuZ22n.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"8caffb","Name":"Custom_Model_Bag","Transform":{"posX":-21.0073,"posY":1.8353008,"posZ":10.0045,"rotX":-0.0000052145183,"rotY":179.972763,"rotZ":4.65678966e-7,"scaleX":0.7,"scaleY":0.7,"scaleZ":0.7},"Nickname":"bag coin aléatoire","Description":"merci à Chr1Z pour le script","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.614982545,"g":0,"b":0},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"MaterialIndex":-1,"MeshIndex":-1,"CustomMesh":{"MeshURL":"https://pastebin.com/raw/ALrYhQGb","DiffuseURL":"http://cloud-3.steamusercontent.com/ugc/1932636167914787917/DED7D4BA88ADFDADA7F3E964D76508687386E957/","NormalURL":"","ColliderURL":"","Convex":true,"MaterialIndex":3,"TypeIndex":6,"CustomShader":{"SpecularColor":{"r":1,"g":1,"b":1},"SpecularIntensity":0,"SpecularSharpness":2,"FresnelStrength":0},"CastShadows":true},"Bag":{"Order":0},"LuaScript":"-- Random memory bag\r\n-- based on Utility memory bag by Directsun (Version 2.7.0)\r\n\r\nlocal CONFIG = {\r\n    MEMORY_GROUP = {\r\n        -- This determines how many frames to wait before actually placing objects onto the table when the \"Place\" button is clicked.\r\n        -- This gives the other bags time to recall their objects.\r\n        -- The delay ONLY occurs if other bags have objects out.\r\n        FRAME_DELAY_BEFORE_PLACING_OBJECTS = 30\r\n    }\r\n}\r\n\r\nmath.randomseed(os.time())\r\n\r\n--[[ Memory Bag Groups ]]\r\n--[[ Utility Memory Bags may be added to a named group, called a \"memory group\".\r\nYou can add a bag to a group through the bag's UI: \"Setup\" > \"Group Name\" (to the left of the bag).\r\nOnly one bag from a group may have it's contents placed on the table at a time.\r\nWhen \"Place\" is clicked on a bag, the other bags in it's memory group are recalled.\r\nBy default a memory bag is not in any group. It's memory group is \"nil\". --]]\r\n\r\nmemoryGroupName = { memoryBag = self }\r\nfunction memoryGroupName:get()\r\n    return self._name\r\nend\r\n\r\nfunction memoryGroupName:set(newName)\r\n    GlobalMemoryGroups:unregisterBagInGroup(self:get(), self.memoryBag.getGUID())\r\n    GlobalMemoryGroups:registerBagInGroup(newName, self.memoryBag.getGUID())\r\n\r\n    if newName == \"\" then\r\n        self._name = nil\r\n    else\r\n        self._name = newName\r\n    end\r\nend\r\n\r\n-- Click the \"Recall\" button on all other bags in my memory group.\r\nfunction recallOtherBagsInMyGroup()\r\n    for _, bag in ipairs(getOtherBagsInMyGroup()) do\r\n        bag.call('buttonClick_recall')\r\n    end\r\nend\r\n\r\n-- Return \"true\" if another bag in my memory group has any objects out on the table.\r\nfunction anyOtherBagsInMyGroupArePlaced()\r\n    for _, bag in ipairs(getOtherBagsInMyGroup()) do\r\n        local state = bag.call('areAnyOfMyObjectsPlaced')\r\n        if state then return true end\r\n    end\r\n\r\n    return false\r\nend\r\n\r\n-- Return \"true\" if at least one object from this memory bag is out on the table.\r\nfunction areAnyOfMyObjectsPlaced()\r\n    for guid, _ in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then\r\n            return true\r\n        end\r\n    end\r\n    return false\r\nend\r\n\r\nfunction getOtherBagsInMyGroup()\r\n    local bags = {}\r\n    for bagGuid, _ in pairs(GlobalMemoryGroups:getGroup(memoryGroupName:get())) do\r\n        if bagGuid ~= self.getGUID() then\r\n            bag = getObjectFromGUID(bagGuid)\r\n            -- \"bag\" is nill if it has been deleted since the last time onLoad() was called.\r\n            if bag ~= nil then\r\n                table.insert(bags, bag)\r\n            end\r\n        end\r\n    end\r\n    return bags\r\nend\r\n\r\n--[[\r\nThis object provides access to a variable stored on the \"Global script\".\r\nThe variable holds the names & guids of all memory bag groups.\r\nThe global variable is a table and holds data like this:\r\n{\r\n    'My First Group Name' = {\r\n        '805ebd' = {},\r\n        '35cc21' = {},\r\n        'fc8886' = {},\r\n    },\r\n    'My Second Group Name' = {\r\n        'f50264' = {},\r\n        '5f5f63' = {},\r\n    },\r\n}\r\n--]]\r\nGlobalMemoryGroups = { NAME_OF_GLOBAL_VARIABLE = '_GlobalUtilityMemoryBagGroups' }\r\n\r\n-- Call me inside this script's \"onLoad()\" method!\r\nfunction GlobalMemoryGroups:onLoad(myGuid)\r\n    -- Create and initialize the global variable if it doesn't already exist:\r\n    if self:_getGroups() == nil then\r\n        self:_setGroups({})\r\n    end\r\nend\r\n\r\n-- Return the GUIDs of all bags in the \"groupName\". The return value is a dictionary that maps [GUID -> empty table].\r\nfunction GlobalMemoryGroups:getGroup(groupName)\r\n    guids = self:_getGroups()[groupName] or {}\r\n    return guids\r\nend\r\n\r\n-- Registers a bag in a memory group. Creates a new group if one doesn't exist.\r\nfunction GlobalMemoryGroups:registerBagInGroup(groupName, bagGuid)\r\n    if groupName == nil or groupName == \"\" then\r\n        return\r\n    end\r\n\r\n    self:_tryCreateNewGroup(groupName)\r\n    local groups = self:_getGroups()\r\n    groups[groupName][bagGuid] = {}\r\n    self:_setGroups(groups)\r\nend\r\n\r\n-- Removes this bag from the memory group.\r\nfunction GlobalMemoryGroups:unregisterBagInGroup(groupName, bagGuid)\r\n    local groups = self:_getGroups()\r\n    local group = groups[groupName]\r\n    if group ~= nil then\r\n        group[bagGuid] = nil\r\n        self:_setGroups(groups)\r\n    end\r\nend\r\n\r\n-- Return the global variable, which is a table holding all memory group names & guids.\r\nfunction GlobalMemoryGroups:_getGroups()\r\n    return Global.getTable(self.NAME_OF_GLOBAL_VARIABLE)\r\nend\r\n\r\n-- Override the global variable (i.e. the entire table).\r\nfunction GlobalMemoryGroups:_setGroups(newTable)\r\n    Global.setTable(self.NAME_OF_GLOBAL_VARIABLE, newTable)\r\nend\r\n\r\n-- Add a new memory group named \"groupName\" to the global variable, if one doesn't already exist.\r\nfunction GlobalMemoryGroups:_tryCreateNewGroup(groupName)\r\n    local groups = self:_getGroups()\r\n    if groups[groupName] == nil then\r\n        groups[groupName] = {}\r\n        self:_setGroups(groups)\r\n    end\r\nend\r\n\r\n-- This object controls the \"Group Name\" input text field that is part of the bag's ingame UI.\r\ngroupNameInput = {\r\n    greyedOutText     = \"Group Name\",\r\n    widthPerCharacter = 100,\r\n    padding           = 4,\r\n    memoryBag         = self\r\n}\r\nfunction groupNameInput:create(optionalStartingValue)\r\n    local effectiveText = optionalStartingValue or self.greyedOutText\r\n    local width = self:computeWidth(effectiveText)\r\n\r\n    self.memoryBag.createInput({\r\n        label = self.greyedOutText,\r\n        value = optionalStartingValue or nil,\r\n        alignment = 3, -- Center aligned\r\n        input_function = \"groupNameInput_onCharacterTyped\", function_owner = self.memoryBag,\r\n        position = { 2.1, 0.3, 0 }, rotation = { 0, 270, 0 }, width = width, height = 350,\r\n        font_size = 250, color = { 0, 0, 0 }, font_color = { 1, 1, 1 },\r\n    })\r\nend\r\n\r\nfunction groupNameInput:computeWidth(text)\r\n    return (string.len(text) + self.padding) * self.widthPerCharacter\r\nend\r\n\r\nfunction groupNameInput:updatedWidth(text)\r\n    self.memoryBag.editInput({\r\n        index = 0,\r\n        width = self:computeWidth(text)\r\n    })\r\nend\r\n\r\nfunction groupNameInput:onCharacterTyped(text, stillEditing)\r\n    if stillEditing then\r\n        self:updatedWidth(text)\r\n    else\r\n        if text == \"\" then\r\n            self:updatedWidth(self.greyedOutText)\r\n        end\r\n    end\r\nend\r\n\r\nfunction groupNameInput_onCharacterTyped(memoryBag, playerColor, text, stillEditing)\r\n    groupNameInput:onCharacterTyped(text, stillEditing)\r\nend\r\n\r\nfunction groupNameInput:setGroupNameToInputField()\r\n    local inputFields = self.memoryBag.getInputs()\r\n    if inputFields ~= nil then\r\n        -- Get input field 0, which corresponds to the groupNameInput.\r\n        -- Unfortunately \"self.getInputs()\" doesn't return the inputs in a guaranteed order.\r\n        local nameField = nil\r\n        for _, field in ipairs(inputFields) do\r\n            if field.index == 0 then\r\n                nameField = field\r\n            end\r\n        end\r\n\r\n        memoryGroupName:set(nameField.value)\r\n    end\r\nend\r\n\r\nfunction updateSave()\r\n    local data_to_save = { [\"ml\"] = memoryList, [\"groupName\"] = memoryGroupName:get() }\r\n    saved_data = JSON.encode(data_to_save)\r\n    self.script_state = saved_data\r\nend\r\n\r\nfunction combineMemoryFromBagsWithin()\r\n    local bagObjList = self.getObjects()\r\n    for _, bagObj in ipairs(bagObjList) do\r\n        local data = bagObj.lua_script_state\r\n        if data ~= nil then\r\n            local j = JSON.decode(data)\r\n            if j ~= nil and j.ml ~= nil then\r\n                for guid, entry in pairs(j.ml) do\r\n                    memoryList[guid] = entry\r\n                end\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\nfunction updateMemoryWithMoves()\r\n    memoryList = memoryListBackup\r\n    --get the first transposed object's coordinates\r\n    local obj = getObjectFromGUID(moveGuid)\r\n\r\n    -- p1 is where needs to go, p2 is where it was\r\n    local refObjPos = memoryList[moveGuid].pos\r\n    local deltaPos = findOffsetDistance(obj.getPosition(), refObjPos, nil)\r\n    local movedRotation = obj.getRotation()\r\n    for guid, entry in pairs(memoryList) do\r\n        memoryList[guid].pos.x = entry.pos.x - deltaPos.x\r\n        memoryList[guid].pos.y = entry.pos.y - deltaPos.y\r\n        memoryList[guid].pos.z = entry.pos.z - deltaPos.z\r\n    end\r\n    moveList = {}\r\nend\r\n\r\nfunction onload(saved_data)\r\n    GlobalMemoryGroups:onLoad(self.getGUID())\r\n    AllMemoryBagsInScene:add(self.getGUID())\r\n\r\n    fresh = true\r\n    if saved_data ~= \"\" then\r\n        local loaded_data = JSON.decode(saved_data)\r\n        --Set up information off of loaded_data\r\n        memoryList = loaded_data.ml\r\n        memoryGroupName:set(loaded_data.groupName)\r\n    else\r\n        --Set up information for if there is no saved saved data\r\n        memoryList = {}\r\n        memoryGroupName:set(nil)\r\n    end\r\n\r\n    moveList = {}\r\n    moveGuid = nil\r\n\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        fresh = false\r\n        createMemoryActionButtons()\r\n    end\r\nend\r\n\r\n--Beginning Setup\r\n\r\n--Make setup button\r\nfunction createSetupButton()\r\n    self.createButton({\r\n      label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n      position={0,0.3,2}, rotation={0,0,0}, height=350, width=800,\r\n      font_size=250, color={0,0,0}, font_color={1,1,1}\r\n  })\r\nend\r\n\r\n--Triggered by Transpose button\r\nfunction buttonClick_transpose()\r\n    moveGuid = nil\r\n    broadcastToAll(\"Select one object and move it- all objects will move relative to the new location\", { 0.75, 0.75, 1 })\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(true)\r\n    createSetupActionButtons(true)\r\nend\r\n\r\n--Triggered by setup button,\r\nfunction buttonClick_setup()\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(false)\r\n    createSetupActionButtons(false)\r\nend\r\n\r\nfunction getAllObjectsInMemory()\r\n    local objTable = {}\r\n    local curObj = {}\r\n\r\n    for guid in pairs(memoryListBackup) do\r\n        curObj = getObjectFromGUID(guid)\r\n        table.insert(objTable, curObj)\r\n    end\r\n\r\n    return objTable\r\nend\r\n\r\n--Creates selection buttons on objects\r\nfunction createButtonsOnAllObjects(move)\r\n    buttonIndexMap = {}\r\n    local howManyButtons = 0\r\n\r\n    local objsToHaveButtons = {}\r\n    if move == true then\r\n        objsToHaveButtons = getAllObjectsInMemory()\r\n    else\r\n        objsToHaveButtons = getAllObjects()\r\n    end\r\n\r\n    for _, obj in ipairs(objsToHaveButtons) do\r\n        if obj ~= self then\r\n            --On a normal bag, the button positions aren't the same size as the bag.\r\n            globalScaleFactor = 1 * 1 / self.getScale().x\r\n            --Super sweet math to set button positions\r\n            local selfPos = self.getPosition()\r\n            local objPos = obj.getPosition()\r\n            local deltaPos = findOffsetDistance(selfPos, objPos, obj)\r\n            local objPos = rotateLocalCoordinates(deltaPos, self)\r\n            objPos.x = -objPos.x * globalScaleFactor\r\n            objPos.y = objPos.y * globalScaleFactor + 2\r\n            objPos.z = objPos.z * globalScaleFactor\r\n            --Workaround for custom PDFs\r\n            if obj.Book then\r\n                objPos.y = objPos.y + 0.5\r\n            end\r\n            --Offset rotation of bag\r\n            local rot = self.getRotation()\r\n            rot.y = -rot.y + 180\r\n            --Create function\r\n            local funcName = \"selectButton_\" .. howManyButtons\r\n            local func = function() buttonClick_selection(obj, move) end\r\n            local color = { 0.75, 0.25, 0.25, 0.6 }\r\n            local colorMove = { 0, 0, 1, 0.6 }\r\n            if move == true then\r\n                color = colorMove\r\n            end\r\n            self.setVar(funcName, func)\r\n            self.createButton({\r\n                click_function = funcName, function_owner = self,\r\n                position = objPos, rotation = rot, height = 1000, width = 1000,\r\n                color = color,\r\n            })\r\n            buttonIndexMap[obj.getGUID()] = howManyButtons\r\n            howManyButtons = howManyButtons + 1\r\n        end\r\n    end\r\nend\r\n\r\n  --Creates submit and cancel buttons\r\n  function createSetupActionButtons(move)\r\n      self.createButton({\r\n         label=\"Annuler\", click_function=\"buttonClick_cancel\", function_owner=self,\r\n         position={-1.15,0.3,2.1}, rotation={0,0,0}, height=350, width=1100,\r\n         font_size=250, color={0,0,0}, font_color={1,1,1}\r\n      })\r\n\r\n      self.createButton({\r\n        label=\"Valider\", click_function=\"buttonClick_submit\", function_owner=self,\r\n        position={-1.15,0.3,2.8}, rotation={0,0,0}, height=350, width=1100,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n      })\r\n\r\n      if move == false then\r\n        self.createButton({\r\n            label=\"Ajouter\", click_function=\"buttonClick_add\", function_owner=self,\r\n            position={1.15,0.3,2.1}, rotation={0,0,0}, height=350, width=1100,\r\n            font_size=250, color={0,0,0}, font_color={0.25,1,0.25}\r\n          })\r\n\r\n          self.createButton({\r\n              label=\"Sélection\", click_function=\"editDragSelection\", function_owner=self,\r\n              position={-1.15,0.3,3.5}, rotation={0,0,0}, height=350, width=1100,\r\n              font_size=250, color={0,0,0}, font_color={1,1,1}\r\n          })\r\n\r\n          if fresh == false then\r\n              self.createButton({\r\n                  label=\"Mise à Jour\", click_function=\"buttonClick_setNew\", function_owner=self,\r\n                  position={1.15,0.3,3.5}, rotation={0,0,0}, height=350, width=1100,\r\n                  font_size=180, color={0,0,0}, font_color={0.75,0.75,1}\r\n              })\r\n              self.createButton({\r\n                  label=\"Retirer\", click_function=\"buttonClick_remove\", function_owner=self,\r\n                  position={1.15,0.3,2.8}, rotation={0,0,0}, height=350, width=1100,\r\n                  font_size=250, color={0,0,0}, font_color={1,0.25,0.25}\r\n              })\r\n          end\r\n      end\r\n\r\n      self.createButton({\r\n          label=\"Reset\", click_function=\"buttonClick_reset\", function_owner=self,\r\n          position={0,0.3,-2}, rotation={0,0,0}, height=350, width=800,\r\n          font_size=250, color={0,0,0}, font_color={1,1,1}\r\n      })\r\n  end\r\n\r\n\r\n--During Setup\r\n\r\n--Checks or unchecks buttons\r\nfunction buttonClick_selection(obj, move)\r\n    local index = buttonIndexMap[obj.getGUID()]\r\n    local colorMove = { 0, 0, 1, 0.6 }\r\n    local color = { 0, 1, 0, 0.6 }\r\n\r\n    previousGuid = selectedGuid\r\n    selectedGuid = obj.getGUID()\r\n\r\n    theList = memoryList\r\n    if move == true then\r\n        theList = moveList\r\n        if previousGuid ~= nil and previousGuid ~= selectedGuid then\r\n            local prevObj = getObjectFromGUID(previousGuid)\r\n            prevObj.highlightOff()\r\n            self.editButton({ index = previousIndex, color = colorMove })\r\n            theList[previousGuid] = nil\r\n        end\r\n        previousIndex = index\r\n    end\r\n\r\n    if theList[selectedGuid] == nil then\r\n        self.editButton({ index = index, color = color })\r\n        --Adding pos/rot to memory table\r\n        local pos, rot = obj.getPosition(), obj.getRotation()\r\n        --I need to add it like this or it won't save due to indexing issue\r\n        theList[obj.getGUID()] = {\r\n            pos = { x = round(pos.x, 4), y = round(pos.y, 4), z = round(pos.z, 4) },\r\n            rot = { x = round(rot.x, 4), y = round(rot.y, 4), z = round(rot.z, 4) },\r\n            lock = obj.getLock(),\r\n            tint = obj.getColorTint()\r\n        }\r\n        obj.highlightOn({ 0, 1, 0 })\r\n    else\r\n        color = { 0.75, 0.25, 0.25, 0.6 }\r\n        if move == true then\r\n            color = colorMove\r\n        end\r\n        self.editButton({ index = index, color = color })\r\n        theList[obj.getGUID()] = nil\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\nfunction editDragSelection(bagObj, player, remove)\r\n    local selectedObjs = Player[player].getSelectedObjects()\r\n    if not remove then\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            --Ignore if already in the memory list, or does not have a button\r\n            if index and not memoryList[obj.getGUID()] then\r\n                self.editButton({ index = index, color = { 0, 1, 0, 0.6 } })\r\n                --Adding pos/rot to memory table\r\n                local pos, rot = obj.getPosition(), obj.getRotation()\r\n                --I need to add it like this or it won't save due to indexing issue\r\n                memoryList[obj.getGUID()] = {\r\n                    pos = { x = round(pos.x, 4), y = round(pos.y, 4), z = round(pos.z, 4) },\r\n                    rot = { x = round(rot.x, 4), y = round(rot.y, 4), z = round(rot.z, 4) },\r\n                    lock = obj.getLock(),\r\n                    tint = obj.getColorTint()\r\n                }\r\n                obj.highlightOn({ 0, 1, 0 })\r\n            end\r\n        end\r\n    else\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            if index and memoryList[obj.getGUID()] then\r\n                color = { 0.75, 0.25, 0.25, 0.6 }\r\n                self.editButton({ index = index, color = color })\r\n                memoryList[obj.getGUID()] = nil\r\n                obj.highlightOff()\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\n--Cancels selection process\r\nfunction buttonClick_cancel()\r\n    memoryList = memoryListBackup\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        createMemoryActionButtons()\r\n    end\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Sélection annulée\", { 1, 1, 1 })\r\n    moveGuid = nil\r\nend\r\n\r\n--Saves selections\r\nfunction buttonClick_submit()\r\n    fresh = false\r\n    if next(moveList) ~= nil then\r\n        for guid in pairs(moveList) do\r\n            moveGuid = guid\r\n        end\r\n        if memoryListBackup[moveGuid] == nil then\r\n            broadcastToAll(\"Item selected for moving is not already in memory\", { 1, 0.25, 0.25 })\r\n        else\r\n            broadcastToAll(\"Moving all items in memory relative to new objects position!\", { 0.75, 0.75, 1 })\r\n            self.clearButtons()\r\n            self.clearInputs()\r\n            createMemoryActionButtons()\r\n            local count = 0\r\n            for guid in pairs(moveList) do\r\n                moveGuid = guid\r\n                count = count + 1\r\n                local obj = getObjectFromGUID(guid)\r\n                if obj ~= nil then obj.highlightOff() end\r\n            end\r\n            updateMemoryWithMoves()\r\n            updateSave()\r\n            buttonClick_place()\r\n        end\r\n    elseif next(memoryList) == nil and moveGuid == nil then\r\n        memoryList = memoryListBackup\r\n        broadcastToAll(\"No selections made.\", { 0.75, 0.25, 0.25 })\r\n    end\r\n    combineMemoryFromBagsWithin()\r\n    groupNameInput:setGroupNameToInputField()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count .. \" Objects Saved\", { 1, 1, 1 })\r\n    updateSave()\r\n    moveGuid = nil\r\nend\r\n\r\nfunction combineTables(first_table, second_table)\r\n    for k, v in pairs(second_table) do first_table[k] = v end\r\nend\r\n\r\nfunction buttonClick_add()\r\n    fresh = false\r\n    combineTables(memoryList, memoryListBackup)\r\n    broadcastToAll(\"Adding internal bags and selections to existing memory\", { 0.25, 0.75, 0.25 })\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count .. \" Objects Saved\", { 1, 1, 1 })\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_remove()\r\n    broadcastToAll(\"Removing Selected Entries From Memory\", { 1.0, 0.25, 0.25 })\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        memoryListBackup[guid] = nil\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count .. \" Objects Removed\", { 1, 1, 1 })\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_setNew()\r\n    broadcastToAll(\"Setting new position relative to items in memory\", { 0.75, 0.75, 1 })\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        guid = obj.guid\r\n        if memoryListBackup[guid] ~= nil then\r\n            count = count + 1\r\n            memoryListBackup[guid].pos = obj.getPosition()\r\n            memoryListBackup[guid].rot = obj.getRotation()\r\n            memoryListBackup[guid].lock = obj.getLock()\r\n            memoryListBackup[guid].tint = obj.getColorTint()\r\n        end\r\n    end\r\n    broadcastToAll(count .. \" Objects Saved\", { 1, 1, 1 })\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\n--Resets bag to starting status\r\nfunction buttonClick_reset()\r\n    fresh = true\r\n    memoryList = {}\r\n    memoryGroupName:set(nil)\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createSetupButton()\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Tool Reset\", { 1, 1, 1 })\r\n    updateSave()\r\nend\r\n\r\n--After Setup\r\n\r\n--Creates recall and place buttons\r\nfunction createMemoryActionButtons()\r\n    self.createButton({\r\n        label=\"Placer au hasard\", click_function=\"buttonClick_place\", function_owner=self,\r\n        position={0,0.3,2}, rotation={0,0,0}, height=350, width=2000,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Ranger\", click_function=\"buttonClick_recall\", function_owner=self,\r\n        position={0,0.3,2.8}, rotation={0,0,0}, height=350, width=1000,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n        position={2,0.3,0}, rotation={0,90,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    ---    self.createButton({\r\n    ---      label=\"Bouger\", click_function=\"buttonClick_transpose\", function_owner=self,\r\n    ---      position={-2,0.3,0.8}, rotation={0,270,0}, height=350, width=800,\r\n    ---      font_size=250, color={0,0,0}, font_color={0.75,0.75,1}\r\n    ---\r\nend\r\n\r\n--Sends objects from bag/table to their saved position/rotation\r\nfunction buttonClick_place()\r\n    if anyOtherBagsInMyGroupArePlaced() then\r\n        recallOtherBagsInMyGroup()\r\n        Wait.frames(_placeObjects, CONFIG.MEMORY_GROUP.FRAME_DELAY_BEFORE_PLACING_OBJECTS)\r\n    else\r\n        _placeObjects()\r\n    end\r\nend\r\n\r\nfunction _placeObjects()\r\n    local bagObjList = self.getObjects()\r\n\r\n    -- randomize memorylist position\r\n    local positionList = {}\r\n    for guid, entry in pairs(memoryList) do\r\n        table.insert(positionList, memoryList[guid].pos)\r\n    end\r\n\r\n    for i = #positionList, 2, -1 do\r\n        local j = math.random(i)\r\n        positionList[i], positionList[j] = positionList[j], positionList[i]\r\n    end\r\n\r\n    local i = 1\r\n    for guid, entry in pairs(memoryList) do\r\n        memoryList[guid].pos = positionList[i]\r\n        i = i + 1\r\n    end\r\n\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        --If obj is out on the table, move it to the saved pos/rot\r\n        if obj ~= nil then\r\n            obj.setPositionSmooth(entry.pos)\r\n            obj.setRotationSmooth(entry.rot)\r\n            obj.setLock(entry.lock)\r\n            obj.setColorTint(entry.tint)\r\n        else\r\n            --If obj is inside of the bag\r\n            for _, bagObj in ipairs(bagObjList) do\r\n                if bagObj.guid == guid then\r\n                    local item = self.takeObject({\r\n                        guid = guid, position = entry.pos, rotation = entry.rot, smooth = false\r\n                    })\r\n                    item.setLock(entry.lock)\r\n                    item.setColorTint(entry.tint)\r\n                    break\r\n                end\r\n            end\r\n        end\r\n    end\r\n    broadcastToAll(\"Objets placés au hasard\", {1,1,1})\r\nend\r\n\r\n--Recalls objects to bag from table\r\nfunction buttonClick_recall()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then self.putObject(obj) end\r\n    end\r\n    broadcastToAll(\"Objets rangés\", {1,1,1})\r\nend\r\n\r\n--Utility functions\r\n\r\n--Find delta (difference) between 2 x/y/z coordinates\r\nfunction findOffsetDistance(p1, p2, obj)\r\n    local yOffset = 0\r\n    if obj ~= nil then\r\n        local bounds = obj.getBounds()\r\n        yOffset = (bounds.size.y - bounds.offset.y)\r\n    end\r\n    local deltaPos = {}\r\n    deltaPos.x = (p2.x - p1.x)\r\n    deltaPos.y = (p2.y - p1.y) + yOffset\r\n    deltaPos.z = (p2.z - p1.z)\r\n    return deltaPos\r\nend\r\n\r\n--Used to rotate a set of coordinates by an angle\r\nfunction rotateLocalCoordinates(desiredPos, obj)\r\n    local objPos, objRot = obj.getPosition(), obj.getRotation()\r\n    local angle = math.rad(objRot.y)\r\n    local x = desiredPos.x * math.cos(angle) - desiredPos.z * math.sin(angle)\r\n    local z = desiredPos.x * math.sin(angle) + desiredPos.z * math.cos(angle)\r\n    --return {x=objPos.x+x, y=objPos.y+desiredPos.y, z=objPos.z+z}\r\n    return { x = x, y = desiredPos.y, z = z }\r\nend\r\n\r\nfunction rotateMyCoordinates(desiredPos, obj)\r\n    local angle = math.rad(obj.getRotation().y)\r\n    local x = desiredPos.x * math.sin(angle)\r\n    local z = desiredPos.z * math.cos(angle)\r\n    return { x = x, y = desiredPos.y, z = z }\r\nend\r\n\r\n--Coroutine delay, in seconds\r\nfunction wait(time)\r\n    local start = os.time()\r\n    repeat coroutine.yield(0) until os.time() > start + time\r\nend\r\n\r\n--Duplicates a table (needed to prevent it making reference to the same objects)\r\nfunction duplicateTable(oldTable)\r\n    local newTable = {}\r\n    for k, v in pairs(oldTable) do\r\n        newTable[k] = v\r\n    end\r\n    return newTable\r\nend\r\n\r\n--Moves scripted highlight from all objects\r\nfunction removeAllHighlights()\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\n--Round number (num) to the Nth decimal (dec)\r\nfunction round(num, dec)\r\n    local mult = 10 ^ (dec or 0)\r\n    return math.floor(num * mult + 0.5) / mult\r\nend\r\n\r\n--[[ This object provides access to a variable stored on the \"Global script\".\r\nThe variable holds the GUIDs for every Utility Memory Bag in the scene.\r\nExample: {'805ebd', '35cc21', 'fc8886', 'f50264', '5f5f63'} --]]\r\nAllMemoryBagsInScene = {\r\n    NAME_OF_GLOBAL_VARIABLE = \"_UtilityMemoryBag_AllMemoryBagsInScene\"\r\n}\r\n\r\nfunction AllMemoryBagsInScene:add(guid)\r\n    local guids = Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\n    table.insert(guids, guid)\r\n    Global.setTable(self.NAME_OF_GLOBAL_VARIABLE, guids)\r\nend\r\n\r\nfunction AllMemoryBagsInScene:getGuidList()\r\n    return Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\nend\r\n","LuaScriptState":"{\"ml\":{\"0314c8\":{\"lock\":false,\"pos\":{\"x\":-20.8024,\"y\":1.8287,\"z\":24.0004},\"rot\":{\"x\":0.0009,\"y\":179.9942,\"z\":0.0048},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"462b79\":{\"lock\":false,\"pos\":{\"x\":22.5,\"y\":1.5174,\"z\":13},\"rot\":{\"x\":0.0109,\"y\":179.9945,\"z\":0.0049},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"6d62ef\":{\"lock\":false,\"pos\":{\"x\":-21.3975,\"y\":1.7788,\"z\":24.0003},\"rot\":{\"x\":0.0007,\"y\":179.9942,\"z\":-0.0045},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"b087d2\":{\"lock\":false,\"pos\":{\"x\":-20.2075,\"y\":1.883,\"z\":24.0004},\"rot\":{\"x\":0.0013,\"y\":179.9961,\"z\":0.0152},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}}}}","XmlUI":"","ContainedObjects":[{"GUID":"0314c8","Name":"Card","Transform":{"posX":-20.2074451,"posY":1.87852454,"posZ":24.0004387,"rotX":0.00109672849,"rotY":179.99411,"rotZ":0.0132141476,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Locomotive","Description":"Train.","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02177\",\n  \"locationBack\": {\n    \"connections\": \"\",\n    \"icons\": \"\",\n    \"uses\": {\n      \"countPerInvestigator\": 2,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    },\n    \"victory\": 1\n  },\n  \"traits\": \"Train.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":22702,"SidewaysCard":false,"CustomDeck":{"227":{"FaceURL":"https://i.imgur.com/c9RZqMN.jpg","BackURL":"https://i.imgur.com/ZcuZ22n.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"462b79","Name":"Card","Transform":{"posX":-20.8023548,"posY":1.82866073,"posZ":24.00044,"rotX":0.00109665841,"rotY":179.994415,"rotZ":0.01321414,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Locomotive","Description":"Train.","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02176\",\n  \"locationBack\": {\n    \"connections\": \"\",\n    \"icons\": \"\",\n    \"uses\": {\n      \"countPerInvestigator\": 2,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    },\n    \"victory\": 1\n  },\n  \"traits\": \"Train.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":22704,"SidewaysCard":false,"CustomDeck":{"227":{"FaceURL":"https://i.imgur.com/c9RZqMN.jpg","BackURL":"https://i.imgur.com/ZcuZ22n.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"6d62ef","Name":"Card","Transform":{"posX":22.5000019,"posY":1.5174123,"posZ":12.9999971,"rotX":0.0108920559,"rotY":179.993973,"rotZ":0.004947135,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Locomotive","Description":"Train.","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02175\",\n  \"locationBack\": {\n    \"connections\": \"\",\n    \"icons\": \"\",\n    \"uses\": {\n      \"countPerInvestigator\": 2,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    },\n    \"victory\": 1\n  },\n  \"traits\": \"Train.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":22703,"SidewaysCard":false,"CustomDeck":{"227":{"FaceURL":"https://i.imgur.com/c9RZqMN.jpg","BackURL":"https://i.imgur.com/ZcuZ22n.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"b087d2","Name":"Card","Transform":{"posX":-21.39746,"posY":1.77883577,"posZ":24.0003433,"rotX":0.000663305458,"rotY":179.995972,"rotZ":-0.00466383,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"51028\",\n  \"locationBack\": {\n    \"connections\": \"\",\n    \"icons\": \"\",\n    \"uses\": {\n      \"countPerInvestigator\": 2,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    },\n    \"victory\": 1\n  },\n  \"traits\": \"Train.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276109,"SidewaysCard":false,"CustomDeck":{"2761":{"FaceURL":"https://i.imgur.com/FVWxpyu.jpg","BackURL":"https://i.imgur.com/EmJxccn.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""}]},{"GUID":"9cbf2f","Name":"Custom_Model_Bag","Transform":{"posX":-34.0000038,"posY":1.83530128,"posZ":3.499995,"rotX":-0.0000066876064,"rotY":179.980576,"rotZ":-6.058855e-8,"scaleX":0.7,"scaleY":0.7,"scaleZ":0.7},"Nickname":"Soutiens/faiblesses d'histoire","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":1,"g":1,"b":1},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"MaterialIndex":-1,"MeshIndex":-1,"CustomMesh":{"MeshURL":"https://pastebin.com/raw/ALrYhQGb","DiffuseURL":"http://cloud-3.steamusercontent.com/ugc/5077277234347423622/F89B4508C6E2782780C2B5593FB68379E0FB2DB6/","NormalURL":"","ColliderURL":"","Convex":true,"MaterialIndex":3,"TypeIndex":6,"CustomShader":{"SpecularColor":{"r":1,"g":1,"b":1},"SpecularIntensity":0,"SpecularSharpness":2,"FresnelStrength":0},"CastShadows":true},"Bag":{"Order":0},"LuaScript":"","LuaScriptState":"{\"ml\":[]}","XmlUI":"","ContainedObjects":[{"GUID":"f16dcc","Name":"Card","Transform":{"posX":-33.9995041,"posY":1.9809351,"posZ":3.504077,"rotX":4.162318,"rotY":179.971527,"rotZ":0.0131622953,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"À Travers l'Espace et le Temps","Description":"","GMNotes":"{\n  \"class\": \"Neutral\",\n  \"cost\": 0,\n  \"cycle\": \"The Dunwich Legacy\",\n  \"id\": \"02178\",\n  \"traits\": \"Madness.\",\n  \"type\": \"Treachery\",\n  \"weakness\": \"true\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":22701,"SidewaysCard":false,"CustomDeck":{"227":{"FaceURL":"https://i.imgur.com/c9RZqMN.jpg","BackURL":"https://i.imgur.com/ZcuZ22n.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"606e9e","Name":"Card","Transform":{"posX":-34.5,"posY":1.93750453,"posZ":3.5,"rotX":-0.000008934564,"rotY":180.001,"rotZ":-0.00008608977,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"À Travers l'Espace et le Temps","Description":"","GMNotes":"{\n  \"class\": \"Neutral\",\n  \"cost\": 0,\n  \"cycle\": \"The Dunwich Legacy\",\n  \"id\": \"02178\",\n  \"traits\": \"Madness.\",\n  \"type\": \"Treachery\",\n  \"weakness\": \"true\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":22701,"SidewaysCard":false,"CustomDeck":{"227":{"FaceURL":"https://i.imgur.com/c9RZqMN.jpg","BackURL":"https://i.imgur.com/ZcuZ22n.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"af47e9","Name":"Card","Transform":{"posX":-34,"posY":1.93748212,"posZ":4,"rotX":-0.0009880734,"rotY":180.02739,"rotZ":0.00007487273,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"À Travers l'Espace et le Temps","Description":"","GMNotes":"{\n  \"class\": \"Neutral\",\n  \"cost\": 0,\n  \"cycle\": \"The Dunwich Legacy\",\n  \"id\": \"02178\",\n  \"traits\": \"Madness.\",\n  \"type\": \"Treachery\",\n  \"weakness\": \"true\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":22701,"SidewaysCard":false,"CustomDeck":{"227":{"FaceURL":"https://i.imgur.com/c9RZqMN.jpg","BackURL":"https://i.imgur.com/ZcuZ22n.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"fa509c","Name":"Card","Transform":{"posX":-33.5,"posY":1.93749261,"posZ":3.5,"rotX":0.0000967877859,"rotY":180.000122,"rotZ":0.00000267150767,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"À Travers l'Espace et le Temps","Description":"","GMNotes":"{\n  \"class\": \"Neutral\",\n  \"cost\": 0,\n  \"cycle\": \"The Dunwich Legacy\",\n  \"id\": \"02178\",\n  \"traits\": \"Madness.\",\n  \"type\": \"Treachery\",\n  \"weakness\": \"true\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":22701,"SidewaysCard":false,"CustomDeck":{"227":{"FaceURL":"https://i.imgur.com/c9RZqMN.jpg","BackURL":"https://i.imgur.com/ZcuZ22n.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""}]},{"GUID":"9fea68","Name":"Deck","Transform":{"posX":30.4999,"posY":1.73394668,"posZ":-3.00010014,"rotX":-0.0005911821,"rotY":180.003479,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Deck Rencontre","Description":"L'Express du Comté d'Essex","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":false,"SidewaysCard":false,"DeckIDs":[276025,276024,276023,18717,18721,18718,18723,18720,18719,276022,276021,276020,276019,276018,276017,276016,276001,276000,276003,276002,18824,276004,276005,18832,18822,18835,18831,18830,18827,18829,18828,18833,18834,18826,18825],"CustomDeck":{"187":{"FaceURL":"https://i.imgur.com/f8FRV80.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0},"188":{"FaceURL":"https://i.imgur.com/f8FRV80.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0},"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":"","ContainedObjects":[{"GUID":"cfa45a","Name":"Card","Transform":{"posX":30.4999,"posY":11.38935,"posZ":-3.00010014,"rotX":-0.0005911151,"rotY":180.003479,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"51064\",\n  \"traits\": \"Omen.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276025,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"4126bc","Name":"Card","Transform":{"posX":30.4999,"posY":11.1893492,"posZ":-3.00010014,"rotX":-0.0005911151,"rotY":180.003479,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"51064\",\n  \"traits\": \"Omen.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276024,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"29c506","Name":"Card","Transform":{"posX":30.4999,"posY":10.9893494,"posZ":-3.00010014,"rotX":-0.0005911151,"rotY":180.003479,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"51064\",\n  \"traits\": \"Omen.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276023,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"7db7c9","Name":"Card","Transform":{"posX":30.4999,"posY":10.78935,"posZ":-3.00010014,"rotX":-0.0005911151,"rotY":180.003479,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Mystérieuse Mélopée","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"01171\",\n  \"traits\": \"Hex.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":18717,"SidewaysCard":false,"CustomDeck":{"187":{"FaceURL":"https://i.imgur.com/f8FRV80.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"898692","Name":"Card","Transform":{"posX":30.4999,"posY":10.58935,"posZ":-3.00010014,"rotX":-0.0005911151,"rotY":180.003479,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Mystérieuse Mélopée","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"01171\",\n  \"traits\": \"Hex.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":18721,"SidewaysCard":false,"CustomDeck":{"187":{"FaceURL":"https://i.imgur.com/f8FRV80.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"089a5c","Name":"Card","Transform":{"posX":30.4999,"posY":10.38935,"posZ":-3.00010014,"rotX":-0.0005911151,"rotY":180.003479,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Magicien de l'Ordre","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"health\": 2,\n  \"id\": \"01170\",\n  \"traits\": \"Humanoid. Cultist.\",\n  \"type\": \"Enemy\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":18718,"SidewaysCard":false,"CustomDeck":{"187":{"FaceURL":"https://i.imgur.com/f8FRV80.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"0cf87d","Name":"Card","Transform":{"posX":30.4999,"posY":10.1893492,"posZ":-3.00010014,"rotX":-0.0005911151,"rotY":180.003479,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Acolyte","Description":"","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"01131\",\n  \"locationBack\": {\n    \"connections\": \"Crescent|Tee\",\n    \"icons\": \"Triangle\",\n    \"uses\": {\n      \"countPerInvestigator\": 2,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    },\n    \"victory\": 1\n  },\n  \"locationFront\": {\n    \"connections\": \"Crescent|Tee\",\n    \"icons\": \"Triangle\"\n  },\n  \"traits\": \"Arkham.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":18723,"SidewaysCard":false,"CustomDeck":{"187":{"FaceURL":"https://i.imgur.com/f8FRV80.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"3da314","Name":"Card","Transform":{"posX":30.4999,"posY":9.989349,"posZ":-3.00010014,"rotX":-0.0005911151,"rotY":180.003479,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Acolyte","Description":"","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"health\": 1,\n  \"id\": \"01169\",\n  \"traits\": \"Humanoid. Cultist.\",\n  \"type\": \"Enemy\",\n  \"uses\": {\n    \"count\": 1,\n    \"token\": \"doom\",\n    \"type\": \"Doom\"\n  }\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":18720,"SidewaysCard":false,"CustomDeck":{"187":{"FaceURL":"https://i.imgur.com/f8FRV80.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"8a91f9","Name":"Card","Transform":{"posX":30.4999,"posY":9.451863,"posZ":-3.0001,"rotX":-0.000591125048,"rotY":180.003479,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Acolyte","Description":"","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"health\": 1,\n  \"id\": \"01169\",\n  \"traits\": \"Humanoid. Cultist.\",\n  \"type\": \"Enemy\",\n  \"uses\": {\n    \"count\": 1,\n    \"token\": \"doom\",\n    \"type\": \"Doom\"\n  }\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":18719,"SidewaysCard":false,"CustomDeck":{"187":{"FaceURL":"https://i.imgur.com/f8FRV80.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"cac119","Name":"Card","Transform":{"posX":30.4999,"posY":9.58935,"posZ":-3.00010014,"rotX":-0.0005911151,"rotY":180.003479,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"51069\",\n  \"traits\": \"Terror.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276022,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"9ec9fe","Name":"Card","Transform":{"posX":30.4999,"posY":9.38935,"posZ":-3.00010014,"rotX":-0.0005911151,"rotY":180.003479,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"51068\",\n  \"traits\": \"Terror.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276021,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"35b48f","Name":"Card","Transform":{"posX":30.4999,"posY":8.851863,"posZ":-3.0001,"rotX":-0.0005911398,"rotY":180.003479,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"51070\",\n  \"traits\": \"Terror.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276020,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"b34f35","Name":"Card","Transform":{"posX":30.4999,"posY":8.989349,"posZ":-3.00010014,"rotX":-0.0005911151,"rotY":180.003479,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"51069\",\n  \"traits\": \"Terror.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276019,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"7990a4","Name":"Card","Transform":{"posX":30.4999,"posY":8.78935,"posZ":-3.00010014,"rotX":-0.0005911151,"rotY":180.003479,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"51070\",\n  \"traits\": \"Terror.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276018,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"57d787","Name":"Card","Transform":{"posX":30.4999,"posY":8.251863,"posZ":-3.0001,"rotX":-0.000591204851,"rotY":180.003479,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"51068\",\n  \"traits\": \"Terror.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276017,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"5c600e","Name":"Card","Transform":{"posX":30.4999,"posY":8.38935,"posZ":-3.00010014,"rotX":-0.0005911151,"rotY":180.003479,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"51070\",\n  \"traits\": \"Terror.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276016,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"0236d6","Name":"Card","Transform":{"posX":30.4999,"posY":8.189349,"posZ":-3.00010014,"rotX":-0.0005911151,"rotY":180.003479,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"51063\",\n  \"traits\": \"Hex.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276001,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"612d05","Name":"Card","Transform":{"posX":30.4999,"posY":7.651863,"posZ":-3.0001,"rotX":-0.00059113116,"rotY":180.003479,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"51063\",\n  \"traits\": \"Hex.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276000,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"d4d20c","Name":"Card","Transform":{"posX":30.4999,"posY":7.789349,"posZ":-3.00010014,"rotX":-0.0005911151,"rotY":180.003479,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"51062\",\n  \"traits\": \"Hex.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276003,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"6fc7cc","Name":"Card","Transform":{"posX":30.4999,"posY":7.58934927,"posZ":-3.00010014,"rotX":-0.0005911151,"rotY":180.003479,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"51062\",\n  \"traits\": \"Hex.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276002,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"d905b5","Name":"Card","Transform":{"posX":30.4999,"posY":5.699737,"posZ":-3.00010061,"rotX":-0.00059,"rotY":180.003479,"rotZ":180.001053,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Passager Sans Défense","Description":"Allié. Passant.","GMNotes":"{\n  \"class\": \"Neutral\",\n  \"cost\": 0,\n  \"cycle\": \"Standalone\",\n  \"health\": 1,\n  \"id\": \"02179\",\n  \"sanity\": 1,\n  \"traits\": \"Ally. Bystander.\",\n  \"type\": \"Asset\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":18824,"SidewaysCard":false,"CustomDeck":{"188":{"FaceURL":"https://i.imgur.com/f8FRV80.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"9ec870","Name":"Card","Transform":{"posX":30.4999,"posY":7.38935,"posZ":-3.00010014,"rotX":-0.0005911151,"rotY":180.003479,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"51061\",\n  \"traits\": \"Hex.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276004,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"5c7d44","Name":"Card","Transform":{"posX":30.4999,"posY":7.189349,"posZ":-3.00010014,"rotX":-0.0005911151,"rotY":180.003479,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"51061\",\n  \"traits\": \"Hex.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276005,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"a96642","Name":"Card","Transform":{"posX":30.4999,"posY":6.98934937,"posZ":-3.00010014,"rotX":-0.0005911151,"rotY":180.003479,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Monstruosité Émergente","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"health\": 5,\n  \"id\": \"02183\",\n  \"traits\": \"Monster. Abomination.\",\n  \"type\": \"Enemy\",\n  \"victory\": 1\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":18832,"SidewaysCard":false,"CustomDeck":{"188":{"FaceURL":"https://i.imgur.com/f8FRV80.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"f7ad7e","Name":"Card","Transform":{"posX":30.4999,"posY":6.78935051,"posZ":-3.00010014,"rotX":-0.0005911151,"rotY":180.003479,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Monstruosité Émergente","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"health\": 5,\n  \"id\": \"02183\",\n  \"traits\": \"Monster. Abomination.\",\n  \"type\": \"Enemy\",\n  \"victory\": 1\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":18822,"SidewaysCard":false,"CustomDeck":{"188":{"FaceURL":"https://i.imgur.com/f8FRV80.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"641e6d","Name":"Card","Transform":{"posX":30.4999,"posY":6.5893507,"posZ":-3.00010014,"rotX":-0.0005911151,"rotY":180.003479,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Horreur Agrippante","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"health\": 3,\n  \"id\": \"02182\",\n  \"traits\": \"Monster. Abomination.\",\n  \"type\": \"Enemy\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":18835,"SidewaysCard":false,"CustomDeck":{"188":{"FaceURL":"https://i.imgur.com/f8FRV80.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"7404b1","Name":"Card","Transform":{"posX":30.4999,"posY":6.38935041,"posZ":-3.00010014,"rotX":-0.0005911151,"rotY":180.003479,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Horreur Agrippante","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"health\": 3,\n  \"id\": \"02182\",\n  \"traits\": \"Monster. Abomination.\",\n  \"type\": \"Enemy\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":18831,"SidewaysCard":false,"CustomDeck":{"188":{"FaceURL":"https://i.imgur.com/f8FRV80.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"b76ae8","Name":"Card","Transform":{"posX":30.4999,"posY":6.18935061,"posZ":-3.00010014,"rotX":-0.0005911151,"rotY":180.003479,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Rails Brisés","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02181\",\n  \"traits\": \"Hazard.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":18830,"SidewaysCard":false,"CustomDeck":{"188":{"FaceURL":"https://i.imgur.com/f8FRV80.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"4e974c","Name":"Card","Transform":{"posX":30.4999,"posY":5.98935032,"posZ":-3.00010014,"rotX":-0.0005911151,"rotY":180.003479,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Rails Brisés","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02181\",\n  \"traits\": \"Hazard.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":18827,"SidewaysCard":false,"CustomDeck":{"188":{"FaceURL":"https://i.imgur.com/f8FRV80.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"70ba57","Name":"Card","Transform":{"posX":30.4999,"posY":5.78935051,"posZ":-3.00010014,"rotX":-0.0005911151,"rotY":180.003479,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Rails Brisés","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02181\",\n  \"traits\": \"Hazard.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":18829,"SidewaysCard":false,"CustomDeck":{"188":{"FaceURL":"https://i.imgur.com/f8FRV80.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"3e1cb1","Name":"Card","Transform":{"posX":30.4999,"posY":5.5893507,"posZ":-3.00010014,"rotX":-0.0005911151,"rotY":180.003479,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Griffes de Vapeur","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02180\",\n  \"traits\": \"Power.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":18828,"SidewaysCard":false,"CustomDeck":{"188":{"FaceURL":"https://i.imgur.com/f8FRV80.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"f7bd4b","Name":"Card","Transform":{"posX":30.4999,"posY":5.38935041,"posZ":-3.00010014,"rotX":-0.0005911151,"rotY":180.003479,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Griffes de Vapeur","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02180\",\n  \"traits\": \"Power.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":18833,"SidewaysCard":false,"CustomDeck":{"188":{"FaceURL":"https://i.imgur.com/f8FRV80.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"b813bc","Name":"Card","Transform":{"posX":30.4999,"posY":5.18935061,"posZ":-3.00010014,"rotX":-0.0005911151,"rotY":180.003479,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Griffes de Vapeur","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02180\",\n  \"traits\": \"Power.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":18834,"SidewaysCard":false,"CustomDeck":{"188":{"FaceURL":"https://i.imgur.com/f8FRV80.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"939ba1","Name":"Card","Transform":{"posX":30.4999,"posY":4.98935032,"posZ":-3.00010014,"rotX":-0.0005911151,"rotY":180.003479,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Passager Sans Défense","Description":"Allié. Passant.","GMNotes":"{\n  \"class\": \"Neutral\",\n  \"cost\": 0,\n  \"cycle\": \"Standalone\",\n  \"health\": 1,\n  \"id\": \"02179\",\n  \"sanity\": 1,\n  \"traits\": \"Ally. Bystander.\",\n  \"type\": \"Asset\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":18826,"SidewaysCard":false,"CustomDeck":{"188":{"FaceURL":"https://i.imgur.com/f8FRV80.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"9d6527","Name":"Card","Transform":{"posX":30.4999,"posY":4.78935051,"posZ":-3.00010014,"rotX":-0.0005911151,"rotY":180.003479,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Passager Sans Défense","Description":"Allié. Passant.","GMNotes":"{\n  \"class\": \"Neutral\",\n  \"cost\": 0,\n  \"cycle\": \"Standalone\",\n  \"health\": 1,\n  \"id\": \"02179\",\n  \"sanity\": 1,\n  \"traits\": \"Ally. Bystander.\",\n  \"type\": \"Asset\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":18825,"SidewaysCard":false,"CustomDeck":{"188":{"FaceURL":"https://i.imgur.com/f8FRV80.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""}]},{"GUID":"a8be35","Name":"Deck","Transform":{"posX":17.4999981,"posY":1.53118622,"posZ":-5.999897,"rotX":0.004948407,"rotY":90.0015945,"rotZ":359.9891,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":false,"SidewaysCard":true,"DeckIDs":[22601,22600],"CustomDeck":{"226":{"FaceURL":"https://i.imgur.com/hHavNex.jpg","BackURL":"https://i.imgur.com/WS70v17.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":"","ContainedObjects":[{"GUID":"97868c","Name":"Card","Transform":{"posX":17.5000019,"posY":1.60574543,"posZ":-5.999904,"rotX":0.00428212946,"rotY":90.00159,"rotZ":359.988464,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Relancer la Locomotive !","Description":"Acte 2a","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02166\",\n  \"type\": \"Act\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":22601,"SidewaysCard":true,"CustomDeck":{"226":{"FaceURL":"https://i.imgur.com/hHavNex.jpg","BackURL":"https://i.imgur.com/WS70v17.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"409ce7","Name":"Card","Transform":{"posX":17.5000038,"posY":1.6039803,"posZ":-5.99991226,"rotX":0.00259574759,"rotY":90.00159,"rotZ":359.9881,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Courrez !","Description":"Acte 1a","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02165\",\n  \"type\": \"Act\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":22600,"SidewaysCard":true,"CustomDeck":{"226":{"FaceURL":"https://i.imgur.com/hHavNex.jpg","BackURL":"https://i.imgur.com/WS70v17.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""}]},{"GUID":"a97712","Name":"Custom_Model","Transform":{"posX":-26.8502026,"posY":1.76630056,"posZ":11.8678989,"rotX":0.000004835479,"rotY":0.0000462559838,"rotZ":-2.5127045e-7,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Text Tool","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0,"g":0,"b":0,"a":0},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":false,"Snap":false,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":false,"Tooltip":false,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomMesh":{"MeshURL":"http://cloud-3.steamusercontent.com/ugc/1478820768302617365/27883B7913E0E69143C3AA03493B7E7C4E8C29C0/","DiffuseURL":"","NormalURL":"","ColliderURL":"","Convex":true,"MaterialIndex":1,"TypeIndex":0,"CastShadows":true},"LuaScript":"-- Code for bag to identify text tool objects\r\nmovableTextTool_cowgoesmoo33 = true\r\n\r\n-- Number of characters before the text box width expands.\r\nEXPAND_INTERVAL = 20\r\n\r\n-- This table controls what is passed between save/load\r\ndata = {}\r\n\r\nfunction onLoad(saved_data)\r\n  if saved_data ~= '' then\r\n    data = JSON.decode(saved_data)\r\n    if data.text ~= '' then\r\n      self.interactable = data.interactable\r\n      staticMode()\r\n      return\r\n    end\r\n  else\r\n    data = {size=200, color=Color(0,0,0), text='', interactable=true,\r\n        enter_to_finish=false, autolock=false, autolift=false,\r\n        hover_height=0.05, box_transparency=1}\r\n  end\r\n\r\n  inputMode()\r\nend\r\n\r\n-- True if in the middle of delay after pressing Enter (with enter_to_finish on)\r\nfinishing = false\r\nfunction input_func(obj, color, input, stillEditing)\r\n  local params = getBox(input)\r\n  if params then\r\n    params.value = input\r\n    self.editInput(params)\r\n  end\r\n\r\n  if not stillEditing then\r\n    data.text = input\r\n    updateState()\r\n    if input ~= '' then staticMode(color) end\r\n  elseif data.enter_to_finish then\r\n    -- If enter is pressed: remove last newline and force finish\r\n    if not finishing and input:sub(-1) == '\\n' then\r\n      finishing = true\r\n      -- Delay to avoid user's Enter keypress being detected (opens chat box)\r\n      Wait.frames(function()\r\n        input = input:sub(1, -2)\r\n        data.text = input\r\n        updateState()\r\n        if input ~= '' then staticMode(color) else inputMode() end\r\n        finishing = false\r\n      end, 10)\r\n    end\r\n  end\r\nend\r\n\r\n-- When the inpupt box appears and lets the player type in it.\r\nfunction inputMode()\r\n  self.clearContextMenu()\r\n  self.clearInputs()\r\n  self.clearButtons()\r\n\r\n  local size = getBox(data.text, true)\r\n\r\n  self.createInput({\r\n    input_function = \"input_func\",\r\n    function_owner = self,\r\n    label          = \"Type Here\",\r\n    alignment      = 3,\r\n    position       = {x=0, y=data.hover_height, z=0},\r\n    rotation       = {0, 180, 0},\r\n    width          = size.width,\r\n    height         = size.height,\r\n    color          = getBackground(data.color),\r\n    font_color     = data.color,\r\n    font_size      = data.size,\r\n    value          = data.text,\r\n  })\r\n\r\n  self.addContextMenuItem('Color: Object Tint', function(color)\r\n    applyMultiple(color, 'setColor')\r\n  end)\r\n  self.addContextMenuItem('Color: Player', function(color)\r\n    applyMultiple(color, 'setColor', {Color.fromString(color)})\r\n  end)\r\n  self.addContextMenuItem('Color: Black', function(color)\r\n    applyMultiple(color, 'setColor', {Color(0,0,0)})\r\n  end)\r\n  self.addContextMenuItem('Color: White', function(color)\r\n    applyMultiple(color, 'setColor', {Color(1,1,1)})\r\n  end)\r\n  self.addContextMenuItem('Size: Increase', function(color)\r\n    applyMultiple(color, 'changeSize', {50})\r\n  end, true)\r\n  self.addContextMenuItem('Size: Decrease', function(color)\r\n    applyMultiple(color, 'changeSize', {-50})\r\n  end, true)\r\nend\r\n\r\n-- When the input box disappears and displays the text.\r\nfunction staticMode(player)\r\n  self.clearContextMenu()\r\n  if data.autolock then\r\n    self.locked = true\r\n  end\r\n  if self.getInputs() and #self.getInputs() ~= 0 then\r\n    self.removeInput(0)\r\n  end\r\n\r\n  -- Clear from selecting player\r\n  if player then\r\n    self.removeFromPlayerSelection(player)\r\n  end\r\n\r\n  local displayText = data.text\r\n  if data.enter_to_finish then\r\n    displayText = displayText:gsub('%[n%]', '\\n')\r\n  end\r\n\r\n  self.createButton({\r\n    label=displayText,\r\n    click_function=\"none\",\r\n    function_owner=self,\r\n    position={0,data.hover_height,0}, rotation={0,180,0}, height=0, width=0,\r\n    font_color=data.color, font_size=data.size\r\n  })\r\n\r\n  self.addContextMenuItem('Edit Text', function(color)\r\n    self.removeFromPlayerSelection(color)\r\n    inputMode()\r\n  end)\r\n  self.addContextMenuItem('Clear', function(color)\r\n    applyMultiple(color, 'clear', _, true)\r\n  end)\r\n  self.addContextMenuItem('Color: Object Tint', function(color)\r\n    applyMultiple(color, 'setColor')\r\n  end)\r\n  self.addContextMenuItem('Color: Player', function(color)\r\n    applyMultiple(color, 'setColor', {Color.fromString(color)})\r\n  end)\r\n  self.addContextMenuItem('Color: Black', function(color)\r\n    applyMultiple(color, 'setColor', {Color(0,0,0)})\r\n  end)\r\n  self.addContextMenuItem('Color: White', function(color)\r\n    applyMultiple(color, 'setColor', {Color(1,1,1)})\r\n  end)\r\n  self.addContextMenuItem('Size: Increase', function(color)\r\n    applyMultiple(color, 'changeSize', {50})\r\n  end, true)\r\n  self.addContextMenuItem('Size: Decrease', function(color)\r\n    applyMultiple(color, 'changeSize', {-50})\r\n  end, true)\r\n  self.addContextMenuItem('Permanently Attach', attemptAttach)\r\n  self.addContextMenuItem('Permalock', function(color)\r\n    applyMultiple(color, 'permalock', _, true)\r\n  end)\r\nend\r\n\r\nfunction changeSize(params)\r\n  local delta = params[1]\r\n  local newSize = data.size + delta\r\n  if newSize > 800  or newSize < 50 then\r\n    return\r\n  end\r\n  data.size = newSize\r\n  updateState()\r\n  if self.getButtons() and #self.getButtons() ~= 0 then\r\n    self.editButton({font_size=data.size})\r\n  else\r\n    local size = getBox(data.text, true)\r\n    self.editInput({width=size.width, height=size.height, font_size=data.size})\r\n  end\r\nend\r\n\r\nfunction setColor(params)\r\n  if params and params[1] then\r\n    data.color = params[1]\r\n  else\r\n    data.color = self.getColorTint():setAt('a', 1) -- Take on color of object tint\r\n  end\r\n  updateState()\r\n  if self.getButtons() and #self.getButtons() ~= 0 then\r\n    self.editButton({font_color=data.color})\r\n  else\r\n    self.editInput({font_color=data.color, color=getBackground(data.color)})\r\n  end\r\nend\r\n\r\nfunction getBackground(color) --determines whether to use black or white depending on luminance\r\n  local r,g,b = Color(color):get()\r\n\r\n  local lum = 0.2126*r + 0.7152*g + 0.0722*b\r\n  if lum > 0.75 then\r\n    return {0.2,0.2,0.2, data.box_transparency}\r\n  else\r\n    return {1,1,1, data.box_transparency}\r\n  end\r\nend\r\n\r\nfunction clear()\r\n  data.text = ''\r\n  updateState()\r\n  inputMode()\r\nend\r\n\r\nfunction permalock()\r\n  self.interactable = false\r\n  data.interactable = false\r\n  updateState()\r\nend\r\n\r\nlocal target_script = [[\r\nfunction onLoad(script_state)\r\n  if script_state and script_state ~= '' then\r\n    local state = JSON.decode(script_state)\r\n    for _,entry in ipairs(state) do\r\n      self.createButton(entry)\r\n    end\r\n    self.addContextMenuItem('Clear All Text', function(color)\r\n      self.clearContextMenu()\r\n      self.clearButtons()\r\n      self.script_state = ''\r\n      self.script_code = ''\r\n    end)\r\n  end\r\nend\r\n]]\r\n\r\nfunction attemptAttach(player_color)\r\n  local objs = Player[player_color].getSelectedObjects()\r\n  local attachee\r\n  local attachers = {}\r\n  for _,obj in ipairs(objs) do\r\n    if obj.getVar('movableTextTool_cowgoesmoo33') then\r\n      if obj ~= self then\r\n        table.insert(attachers, obj)\r\n      end\r\n    else\r\n      if attachee then\r\n        broadcastToColor(\"More than one target selected.\", player_color)\r\n        return\r\n      else\r\n        attachee = obj\r\n      end\r\n    end\r\n  end\r\n  if attachee then\r\n    local code = attachee.script_code\r\n    if code and code ~= '' and code ~= target_script then\r\n      broadcastToColor(\"Warning: script on card has been overriden. Rewind time to undo.\", player_color)\r\n    end\r\n    for i,attacher in ipairs(attachers) do\r\n      attacher.call('attach', {target = attachee})\r\n    end\r\n    attach({target = attachee})\r\n    local type, flip = attachee.type, attachee.getRotation().z\r\n    if (type == 'Card' or type == 'Deck') and flip > 175 and flip < 185 then\r\n      broadcastToColor(\"Warning: text will not display if card or deck is facing down.\", player_color)\r\n    end\r\n  else\r\n    broadcastToColor(\"You must have a target object in your selection (using click-and-drag or Ctrl+Click) to use this option.\", player_color)\r\n  end\r\nend\r\n\r\nfunction attach(params)\r\n  local target = params.target\r\n  local displayText = data.text\r\n  if data.enter_to_finish then\r\n    displayText = displayText:gsub('%[n%]', '\\n')\r\n  end\r\n\r\n  local textRotation = self.getRotation():sub(target.getRotation())\r\n    :add(Vector(180, 0, 180))\r\n\r\n  local textPosition = target.positionToLocal(\r\n    self.getPosition():add(Vector(0, data.hover_height, 0))\r\n  )\r\n  textPosition.x = -textPosition.x\r\n\r\n  local textScale = {}\r\n  textScale.x = self.getScale().x / target.getScale().x\r\n  textScale.y = self.getScale().x / target.getScale().y\r\n  textScale.z = self.getScale().x / target.getScale().z\r\n\r\n  local details = {\r\n    label=displayText,\r\n    click_function=\"none\",\r\n    function_owner=nil,\r\n    position=textPosition,\r\n    rotation=textRotation,\r\n    scale=textScale,\r\n    height=0, width=0,\r\n    font_color=data.color, font_size=data.size\r\n  }\r\n\r\n  target.createButton(details)\r\n\r\n  local script_state = target.script_state\r\n  if script_state and script_state ~= '' then\r\n    local state = JSON.decode(script_state)\r\n    table.insert(state, details)\r\n    target.script_state = JSON.encode(state)\r\n  else\r\n    target.script_state = JSON.encode({[1]=details})\r\n  end\r\n\r\n  target.script_code = target_script\r\n\r\n  self.destruct()\r\nend\r\n\r\nfunction applyMultiple(player_color, func_string, params, static_only)\r\n  local objs = Player[player_color].getSelectedObjects()\r\n  for _,obj in ipairs(objs) do\r\n    if obj.getVar('movableTextTool_cowgoesmoo33') then\r\n      if not static_only or obj.call('isStatic') then\r\n        obj.call(func_string, params)\r\n      end\r\n    end\r\n  end\r\nend\r\n\r\nfunction isStatic()\r\n  local input = self.getInputs()\r\n  return not input or #input == 0\r\nend\r\n\r\nfunction getBox(input, force)\r\n  local maxLength, lineCount = EXPAND_INTERVAL, 1\r\n  local lineLength = 0\r\n  for i = 1, #input do\r\n    local c = input:sub(i,i)\r\n    if c == '\\n' then\r\n      lineCount = lineCount + 1\r\n      if lineLength > maxLength then maxLength = (math.floor(lineLength / EXPAND_INTERVAL) + 1) * EXPAND_INTERVAL end\r\n      lineLength = 0\r\n    else\r\n      lineLength = lineLength + 1\r\n    end\r\n  end\r\n  if lineLength > maxLength then maxLength = (math.floor(lineLength / EXPAND_INTERVAL) + 1) * EXPAND_INTERVAL end\r\n\r\n  newWidth = data.size * maxLength * 0.9\r\n  newHeight = data.size * lineCount + 23\r\n\r\n  if force or boxWidth ~= newWidth or boxHeight ~= newHeight then\r\n    boxWidth, boxHeight = newWidth, newHeight\r\n    return {width = boxWidth, height = boxHeight}\r\n  end\r\n  return nil\r\nend\r\n\r\ntemp_lift = nil\r\nfunction onPickUp(player_color)\r\n  if data.autolift then\r\n    local player = Player[player_color]\r\n    temp_lift = player.lift_height\r\n    player.lift_height = 0\r\n  end\r\nend\r\n\r\nfunction onDrop(player_color)\r\n  if data.autolift and temp_lift then\r\n    Player[player_color].lift_height = temp_lift\r\n  end\r\nend\r\n\r\n-- Should be called every time data is modified, allows info to be saved on copy/paste\r\nfunction updateState()\r\n  self.script_state = JSON.encode(data)\r\nend\r\n\r\nfunction onSave()\r\n  self.script_state = JSON.encode(data)\r\n  return self.script_state\r\nend","LuaScriptState":"{\"autolift\":false,\"autolock\":false,\"box_transparency\":1,\"color\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1},\"enter_to_finish\":false,\"hover_height\":0.05,\"interactable\":true,\"size\":200,\"text\":\"Placement wagons\"}","XmlUI":""},{"GUID":"b22dfd","Name":"Custom_Tile","Transform":{"posX":2.999997,"posY":1.60163224,"posZ":-6.499995,"rotX":0.01717701,"rotY":180.0226,"rotZ":0.00565792667,"scaleX":1.6428808,"scaleY":1,"scaleZ":1.6428808},"Nickname":"Mise en place du Chaos Bag","Description":"III : L'Express du Comté d'Essex","GMNotes":"{\"data\":\"The Essex County Express\",\"easy\":false,\"expert\":false,\"hard\":false,\"normal\":false,\"standalone\":true}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.8745098,"g":0.8,"b":0.7019608},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"http://cloud-3.steamusercontent.com/ugc/2011456161884106028/81BF2DAD34FE18B6788B56E21F16B81E6525AD99/","ImageSecondaryURL":"http://cloud-3.steamusercontent.com/ugc/2011456161884106028/81BF2DAD34FE18B6788B56E21F16B81E6525AD99/","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"\r\njacqueline_guid = '42cd6e'\r\n\r\nbuttonparams = {\r\n   ['easy'] = {label = \"Facile\", click_function = 'modeEasy', z_i = -0.2},\r\n   ['normal'] = {label = \"Standard\", click_function = 'modeNormal', z_i = 0.1},\r\n   ['hard'] = {label = \"Difficile\", click_function = 'modeHard', z_i = 0.4},\r\n   ['expert'] = {label = \"Expert\", click_function = 'modeExpert', z_i = 0.7},\r\n   ['standalone'] = {label = \"Indépendant\", click_function = 'modeStandalone', z_i = 0},\r\n}\r\n\r\nfunction onLoad()\r\n\r\n    metadata = JSON.decode(self.getGMNotes())\r\n    buttontable = {}\r\n    for key, value in pairs(buttonparams) do\r\n        if metadata[key] == true then\r\n            table.insert(buttontable,value)\r\n        end\r\n        \r\n    end\r\n\r\n    for _, button in pairs(buttontable) do\r\n        local data = {\r\n            click_function = button.click_function, \r\n            function_owner = self, \r\n            label = button.label, \r\n            position = {0, 0.1, button.z_i}, \r\n            scale = {0.3, 0.5, 0.3}, \r\n            width = 1500, \r\n            height = 400, \r\n            font_size = 250, \r\n            tooltip = \"Chaos bag du mode \"..button.label,\r\n            color = {0.5647, 0.4627, 0.2353, 1}, \r\n            font_color = {0.9041, 0.8313, 0.7356, 1},\r\n            hover_color = {99/255, 85/255, 48/255},\r\n            press_color = {192/255, 152/255, 94/255} }\r\n        self.createButton(data)\r\n        \r\n    end\r\n    jacqueline = getObjectFromGUID(jacqueline_guid)\r\n    chaosdata = jacqueline.getTable('chaosdata')\r\nend\r\n\r\nfunction modeEasy()\r\n    local  params ={}\r\n     params.mode = 'easy'\r\n     params.data = metadata.data\r\n     jacqueline.call('setChaosBag', params)\r\n  \r\nend\r\n\r\nfunction modeNormal()\r\n      local  params ={}\r\n       params.mode = 'normal'\r\n       params.data = metadata.data\r\n       jacqueline.call('setChaosBag', params)\r\n    \r\nend\r\n\r\nfunction modeHard()\r\n    local  params ={}\r\n     params.mode = 'hard'\r\n     params.data = metadata.data\r\n     jacqueline.call('setChaosBag', params)\r\n  \r\nend\r\n\r\nfunction modeExpert()\r\n    local  params ={}\r\n     params.mode = 'expert'\r\n     params.data = metadata.data\r\n     jacqueline.call('setChaosBag', params)\r\n  \r\nend\r\n\r\nfunction modeStandalone()\r\n    local  params ={}\r\n     params.mode = 'standalone'\r\n     params.data = metadata.data\r\n     jacqueline.call('setChaosBag', params)\r\n  \r\nend","LuaScriptState":"","XmlUI":""},{"GUID":"d19c9f","Name":"Custom_Model","Transform":{"posX":-24.5523968,"posY":1.76629937,"posZ":26.5546036,"rotX":0.00000504590025,"rotY":0.000216468718,"rotZ":-6.914445e-8,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Text Tool","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0,"g":0,"b":0,"a":0},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":false,"Snap":false,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":false,"Tooltip":false,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomMesh":{"MeshURL":"http://cloud-3.steamusercontent.com/ugc/1478820768302617365/27883B7913E0E69143C3AA03493B7E7C4E8C29C0/","DiffuseURL":"","NormalURL":"","ColliderURL":"","Convex":true,"MaterialIndex":1,"TypeIndex":0,"CastShadows":true},"LuaScript":"-- Code for bag to identify text tool objects\r\nmovableTextTool_cowgoesmoo33 = true\r\n\r\n-- Number of characters before the text box width expands.\r\nEXPAND_INTERVAL = 20\r\n\r\n-- This table controls what is passed between save/load\r\ndata = {}\r\n\r\nfunction onLoad(saved_data)\r\n  if saved_data ~= '' then\r\n    data = JSON.decode(saved_data)\r\n    if data.text ~= '' then\r\n      self.interactable = data.interactable\r\n      staticMode()\r\n      return\r\n    end\r\n  else\r\n    data = {size=200, color=Color(0,0,0), text='', interactable=true,\r\n        enter_to_finish=false, autolock=false, autolift=false,\r\n        hover_height=0.05, box_transparency=1}\r\n  end\r\n\r\n  inputMode()\r\nend\r\n\r\n-- True if in the middle of delay after pressing Enter (with enter_to_finish on)\r\nfinishing = false\r\nfunction input_func(obj, color, input, stillEditing)\r\n  local params = getBox(input)\r\n  if params then\r\n    params.value = input\r\n    self.editInput(params)\r\n  end\r\n\r\n  if not stillEditing then\r\n    data.text = input\r\n    updateState()\r\n    if input ~= '' then staticMode(color) end\r\n  elseif data.enter_to_finish then\r\n    -- If enter is pressed: remove last newline and force finish\r\n    if not finishing and input:sub(-1) == '\\n' then\r\n      finishing = true\r\n      -- Delay to avoid user's Enter keypress being detected (opens chat box)\r\n      Wait.frames(function()\r\n        input = input:sub(1, -2)\r\n        data.text = input\r\n        updateState()\r\n        if input ~= '' then staticMode(color) else inputMode() end\r\n        finishing = false\r\n      end, 10)\r\n    end\r\n  end\r\nend\r\n\r\n-- When the inpupt box appears and lets the player type in it.\r\nfunction inputMode()\r\n  self.clearContextMenu()\r\n  self.clearInputs()\r\n  self.clearButtons()\r\n\r\n  local size = getBox(data.text, true)\r\n\r\n  self.createInput({\r\n    input_function = \"input_func\",\r\n    function_owner = self,\r\n    label          = \"Type Here\",\r\n    alignment      = 3,\r\n    position       = {x=0, y=data.hover_height, z=0},\r\n    rotation       = {0, 180, 0},\r\n    width          = size.width,\r\n    height         = size.height,\r\n    color          = getBackground(data.color),\r\n    font_color     = data.color,\r\n    font_size      = data.size,\r\n    value          = data.text,\r\n  })\r\n\r\n  self.addContextMenuItem('Color: Object Tint', function(color)\r\n    applyMultiple(color, 'setColor')\r\n  end)\r\n  self.addContextMenuItem('Color: Player', function(color)\r\n    applyMultiple(color, 'setColor', {Color.fromString(color)})\r\n  end)\r\n  self.addContextMenuItem('Color: Black', function(color)\r\n    applyMultiple(color, 'setColor', {Color(0,0,0)})\r\n  end)\r\n  self.addContextMenuItem('Color: White', function(color)\r\n    applyMultiple(color, 'setColor', {Color(1,1,1)})\r\n  end)\r\n  self.addContextMenuItem('Size: Increase', function(color)\r\n    applyMultiple(color, 'changeSize', {50})\r\n  end, true)\r\n  self.addContextMenuItem('Size: Decrease', function(color)\r\n    applyMultiple(color, 'changeSize', {-50})\r\n  end, true)\r\nend\r\n\r\n-- When the input box disappears and displays the text.\r\nfunction staticMode(player)\r\n  self.clearContextMenu()\r\n  if data.autolock then\r\n    self.locked = true\r\n  end\r\n  if self.getInputs() and #self.getInputs() ~= 0 then\r\n    self.removeInput(0)\r\n  end\r\n\r\n  -- Clear from selecting player\r\n  if player then\r\n    self.removeFromPlayerSelection(player)\r\n  end\r\n\r\n  local displayText = data.text\r\n  if data.enter_to_finish then\r\n    displayText = displayText:gsub('%[n%]', '\\n')\r\n  end\r\n\r\n  self.createButton({\r\n    label=displayText,\r\n    click_function=\"none\",\r\n    function_owner=self,\r\n    position={0,data.hover_height,0}, rotation={0,180,0}, height=0, width=0,\r\n    font_color=data.color, font_size=data.size\r\n  })\r\n\r\n  self.addContextMenuItem('Edit Text', function(color)\r\n    self.removeFromPlayerSelection(color)\r\n    inputMode()\r\n  end)\r\n  self.addContextMenuItem('Clear', function(color)\r\n    applyMultiple(color, 'clear', _, true)\r\n  end)\r\n  self.addContextMenuItem('Color: Object Tint', function(color)\r\n    applyMultiple(color, 'setColor')\r\n  end)\r\n  self.addContextMenuItem('Color: Player', function(color)\r\n    applyMultiple(color, 'setColor', {Color.fromString(color)})\r\n  end)\r\n  self.addContextMenuItem('Color: Black', function(color)\r\n    applyMultiple(color, 'setColor', {Color(0,0,0)})\r\n  end)\r\n  self.addContextMenuItem('Color: White', function(color)\r\n    applyMultiple(color, 'setColor', {Color(1,1,1)})\r\n  end)\r\n  self.addContextMenuItem('Size: Increase', function(color)\r\n    applyMultiple(color, 'changeSize', {50})\r\n  end, true)\r\n  self.addContextMenuItem('Size: Decrease', function(color)\r\n    applyMultiple(color, 'changeSize', {-50})\r\n  end, true)\r\n  self.addContextMenuItem('Permanently Attach', attemptAttach)\r\n  self.addContextMenuItem('Permalock', function(color)\r\n    applyMultiple(color, 'permalock', _, true)\r\n  end)\r\nend\r\n\r\nfunction changeSize(params)\r\n  local delta = params[1]\r\n  local newSize = data.size + delta\r\n  if newSize > 800  or newSize < 50 then\r\n    return\r\n  end\r\n  data.size = newSize\r\n  updateState()\r\n  if self.getButtons() and #self.getButtons() ~= 0 then\r\n    self.editButton({font_size=data.size})\r\n  else\r\n    local size = getBox(data.text, true)\r\n    self.editInput({width=size.width, height=size.height, font_size=data.size})\r\n  end\r\nend\r\n\r\nfunction setColor(params)\r\n  if params and params[1] then\r\n    data.color = params[1]\r\n  else\r\n    data.color = self.getColorTint():setAt('a', 1) -- Take on color of object tint\r\n  end\r\n  updateState()\r\n  if self.getButtons() and #self.getButtons() ~= 0 then\r\n    self.editButton({font_color=data.color})\r\n  else\r\n    self.editInput({font_color=data.color, color=getBackground(data.color)})\r\n  end\r\nend\r\n\r\nfunction getBackground(color) --determines whether to use black or white depending on luminance\r\n  local r,g,b = Color(color):get()\r\n\r\n  local lum = 0.2126*r + 0.7152*g + 0.0722*b\r\n  if lum > 0.75 then\r\n    return {0.2,0.2,0.2, data.box_transparency}\r\n  else\r\n    return {1,1,1, data.box_transparency}\r\n  end\r\nend\r\n\r\nfunction clear()\r\n  data.text = ''\r\n  updateState()\r\n  inputMode()\r\nend\r\n\r\nfunction permalock()\r\n  self.interactable = false\r\n  data.interactable = false\r\n  updateState()\r\nend\r\n\r\nlocal target_script = [[\r\nfunction onLoad(script_state)\r\n  if script_state and script_state ~= '' then\r\n    local state = JSON.decode(script_state)\r\n    for _,entry in ipairs(state) do\r\n      self.createButton(entry)\r\n    end\r\n    self.addContextMenuItem('Clear All Text', function(color)\r\n      self.clearContextMenu()\r\n      self.clearButtons()\r\n      self.script_state = ''\r\n      self.script_code = ''\r\n    end)\r\n  end\r\nend\r\n]]\r\n\r\nfunction attemptAttach(player_color)\r\n  local objs = Player[player_color].getSelectedObjects()\r\n  local attachee\r\n  local attachers = {}\r\n  for _,obj in ipairs(objs) do\r\n    if obj.getVar('movableTextTool_cowgoesmoo33') then\r\n      if obj ~= self then\r\n        table.insert(attachers, obj)\r\n      end\r\n    else\r\n      if attachee then\r\n        broadcastToColor(\"More than one target selected.\", player_color)\r\n        return\r\n      else\r\n        attachee = obj\r\n      end\r\n    end\r\n  end\r\n  if attachee then\r\n    local code = attachee.script_code\r\n    if code and code ~= '' and code ~= target_script then\r\n      broadcastToColor(\"Warning: script on card has been overriden. Rewind time to undo.\", player_color)\r\n    end\r\n    for i,attacher in ipairs(attachers) do\r\n      attacher.call('attach', {target = attachee})\r\n    end\r\n    attach({target = attachee})\r\n    local type, flip = attachee.type, attachee.getRotation().z\r\n    if (type == 'Card' or type == 'Deck') and flip > 175 and flip < 185 then\r\n      broadcastToColor(\"Warning: text will not display if card or deck is facing down.\", player_color)\r\n    end\r\n  else\r\n    broadcastToColor(\"You must have a target object in your selection (using click-and-drag or Ctrl+Click) to use this option.\", player_color)\r\n  end\r\nend\r\n\r\nfunction attach(params)\r\n  local target = params.target\r\n  local displayText = data.text\r\n  if data.enter_to_finish then\r\n    displayText = displayText:gsub('%[n%]', '\\n')\r\n  end\r\n\r\n  local textRotation = self.getRotation():sub(target.getRotation())\r\n    :add(Vector(180, 0, 180))\r\n\r\n  local textPosition = target.positionToLocal(\r\n    self.getPosition():add(Vector(0, data.hover_height, 0))\r\n  )\r\n  textPosition.x = -textPosition.x\r\n\r\n  local textScale = {}\r\n  textScale.x = self.getScale().x / target.getScale().x\r\n  textScale.y = self.getScale().x / target.getScale().y\r\n  textScale.z = self.getScale().x / target.getScale().z\r\n\r\n  local details = {\r\n    label=displayText,\r\n    click_function=\"none\",\r\n    function_owner=nil,\r\n    position=textPosition,\r\n    rotation=textRotation,\r\n    scale=textScale,\r\n    height=0, width=0,\r\n    font_color=data.color, font_size=data.size\r\n  }\r\n\r\n  target.createButton(details)\r\n\r\n  local script_state = target.script_state\r\n  if script_state and script_state ~= '' then\r\n    local state = JSON.decode(script_state)\r\n    table.insert(state, details)\r\n    target.script_state = JSON.encode(state)\r\n  else\r\n    target.script_state = JSON.encode({[1]=details})\r\n  end\r\n\r\n  target.script_code = target_script\r\n\r\n  self.destruct()\r\nend\r\n\r\nfunction applyMultiple(player_color, func_string, params, static_only)\r\n  local objs = Player[player_color].getSelectedObjects()\r\n  for _,obj in ipairs(objs) do\r\n    if obj.getVar('movableTextTool_cowgoesmoo33') then\r\n      if not static_only or obj.call('isStatic') then\r\n        obj.call(func_string, params)\r\n      end\r\n    end\r\n  end\r\nend\r\n\r\nfunction isStatic()\r\n  local input = self.getInputs()\r\n  return not input or #input == 0\r\nend\r\n\r\nfunction getBox(input, force)\r\n  local maxLength, lineCount = EXPAND_INTERVAL, 1\r\n  local lineLength = 0\r\n  for i = 1, #input do\r\n    local c = input:sub(i,i)\r\n    if c == '\\n' then\r\n      lineCount = lineCount + 1\r\n      if lineLength > maxLength then maxLength = (math.floor(lineLength / EXPAND_INTERVAL) + 1) * EXPAND_INTERVAL end\r\n      lineLength = 0\r\n    else\r\n      lineLength = lineLength + 1\r\n    end\r\n  end\r\n  if lineLength > maxLength then maxLength = (math.floor(lineLength / EXPAND_INTERVAL) + 1) * EXPAND_INTERVAL end\r\n\r\n  newWidth = data.size * maxLength * 0.9\r\n  newHeight = data.size * lineCount + 23\r\n\r\n  if force or boxWidth ~= newWidth or boxHeight ~= newHeight then\r\n    boxWidth, boxHeight = newWidth, newHeight\r\n    return {width = boxWidth, height = boxHeight}\r\n  end\r\n  return nil\r\nend\r\n\r\ntemp_lift = nil\r\nfunction onPickUp(player_color)\r\n  if data.autolift then\r\n    local player = Player[player_color]\r\n    temp_lift = player.lift_height\r\n    player.lift_height = 0\r\n  end\r\nend\r\n\r\nfunction onDrop(player_color)\r\n  if data.autolift and temp_lift then\r\n    Player[player_color].lift_height = temp_lift\r\n  end\r\nend\r\n\r\n-- Should be called every time data is modified, allows info to be saved on copy/paste\r\nfunction updateState()\r\n  self.script_state = JSON.encode(data)\r\nend\r\n\r\nfunction onSave()\r\n  self.script_state = JSON.encode(data)\r\n  return self.script_state\r\nend","LuaScriptState":"{\"autolift\":false,\"autolock\":false,\"box_transparency\":1,\"color\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1},\"enter_to_finish\":false,\"hover_height\":0.05,\"interactable\":true,\"size\":350,\"text\":\"Hors Jeu\"}","XmlUI":""},{"GUID":"d8c6a2","Name":"Custom_Model","Transform":{"posX":-20.9699,"posY":1.76630056,"posZ":11.9468,"rotX":0.000004588297,"rotY":0.000299965759,"rotZ":3.448334e-8,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Text Tool","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0,"g":0,"b":0,"a":0},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":false,"Snap":false,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":false,"Tooltip":false,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomMesh":{"MeshURL":"http://cloud-3.steamusercontent.com/ugc/1478820768302617365/27883B7913E0E69143C3AA03493B7E7C4E8C29C0/","DiffuseURL":"","NormalURL":"","ColliderURL":"","Convex":true,"MaterialIndex":1,"TypeIndex":0,"CastShadows":true},"LuaScript":"-- Code for bag to identify text tool objects\r\nmovableTextTool_cowgoesmoo33 = true\r\n\r\n-- Number of characters before the text box width expands.\r\nEXPAND_INTERVAL = 20\r\n\r\n-- This table controls what is passed between save/load\r\ndata = {}\r\n\r\nfunction onLoad(saved_data)\r\n  if saved_data ~= '' then\r\n    data = JSON.decode(saved_data)\r\n    if data.text ~= '' then\r\n      self.interactable = data.interactable\r\n      staticMode()\r\n      return\r\n    end\r\n  else\r\n    data = {size=200, color=Color(0,0,0), text='', interactable=true,\r\n        enter_to_finish=false, autolock=false, autolift=false,\r\n        hover_height=0.05, box_transparency=1}\r\n  end\r\n\r\n  inputMode()\r\nend\r\n\r\n-- True if in the middle of delay after pressing Enter (with enter_to_finish on)\r\nfinishing = false\r\nfunction input_func(obj, color, input, stillEditing)\r\n  local params = getBox(input)\r\n  if params then\r\n    params.value = input\r\n    self.editInput(params)\r\n  end\r\n\r\n  if not stillEditing then\r\n    data.text = input\r\n    updateState()\r\n    if input ~= '' then staticMode(color) end\r\n  elseif data.enter_to_finish then\r\n    -- If enter is pressed: remove last newline and force finish\r\n    if not finishing and input:sub(-1) == '\\n' then\r\n      finishing = true\r\n      -- Delay to avoid user's Enter keypress being detected (opens chat box)\r\n      Wait.frames(function()\r\n        input = input:sub(1, -2)\r\n        data.text = input\r\n        updateState()\r\n        if input ~= '' then staticMode(color) else inputMode() end\r\n        finishing = false\r\n      end, 10)\r\n    end\r\n  end\r\nend\r\n\r\n-- When the inpupt box appears and lets the player type in it.\r\nfunction inputMode()\r\n  self.clearContextMenu()\r\n  self.clearInputs()\r\n  self.clearButtons()\r\n\r\n  local size = getBox(data.text, true)\r\n\r\n  self.createInput({\r\n    input_function = \"input_func\",\r\n    function_owner = self,\r\n    label          = \"Type Here\",\r\n    alignment      = 3,\r\n    position       = {x=0, y=data.hover_height, z=0},\r\n    rotation       = {0, 180, 0},\r\n    width          = size.width,\r\n    height         = size.height,\r\n    color          = getBackground(data.color),\r\n    font_color     = data.color,\r\n    font_size      = data.size,\r\n    value          = data.text,\r\n  })\r\n\r\n  self.addContextMenuItem('Color: Object Tint', function(color)\r\n    applyMultiple(color, 'setColor')\r\n  end)\r\n  self.addContextMenuItem('Color: Player', function(color)\r\n    applyMultiple(color, 'setColor', {Color.fromString(color)})\r\n  end)\r\n  self.addContextMenuItem('Color: Black', function(color)\r\n    applyMultiple(color, 'setColor', {Color(0,0,0)})\r\n  end)\r\n  self.addContextMenuItem('Color: White', function(color)\r\n    applyMultiple(color, 'setColor', {Color(1,1,1)})\r\n  end)\r\n  self.addContextMenuItem('Size: Increase', function(color)\r\n    applyMultiple(color, 'changeSize', {50})\r\n  end, true)\r\n  self.addContextMenuItem('Size: Decrease', function(color)\r\n    applyMultiple(color, 'changeSize', {-50})\r\n  end, true)\r\nend\r\n\r\n-- When the input box disappears and displays the text.\r\nfunction staticMode(player)\r\n  self.clearContextMenu()\r\n  if data.autolock then\r\n    self.locked = true\r\n  end\r\n  if self.getInputs() and #self.getInputs() ~= 0 then\r\n    self.removeInput(0)\r\n  end\r\n\r\n  -- Clear from selecting player\r\n  if player then\r\n    self.removeFromPlayerSelection(player)\r\n  end\r\n\r\n  local displayText = data.text\r\n  if data.enter_to_finish then\r\n    displayText = displayText:gsub('%[n%]', '\\n')\r\n  end\r\n\r\n  self.createButton({\r\n    label=displayText,\r\n    click_function=\"none\",\r\n    function_owner=self,\r\n    position={0,data.hover_height,0}, rotation={0,180,0}, height=0, width=0,\r\n    font_color=data.color, font_size=data.size\r\n  })\r\n\r\n  self.addContextMenuItem('Edit Text', function(color)\r\n    self.removeFromPlayerSelection(color)\r\n    inputMode()\r\n  end)\r\n  self.addContextMenuItem('Clear', function(color)\r\n    applyMultiple(color, 'clear', _, true)\r\n  end)\r\n  self.addContextMenuItem('Color: Object Tint', function(color)\r\n    applyMultiple(color, 'setColor')\r\n  end)\r\n  self.addContextMenuItem('Color: Player', function(color)\r\n    applyMultiple(color, 'setColor', {Color.fromString(color)})\r\n  end)\r\n  self.addContextMenuItem('Color: Black', function(color)\r\n    applyMultiple(color, 'setColor', {Color(0,0,0)})\r\n  end)\r\n  self.addContextMenuItem('Color: White', function(color)\r\n    applyMultiple(color, 'setColor', {Color(1,1,1)})\r\n  end)\r\n  self.addContextMenuItem('Size: Increase', function(color)\r\n    applyMultiple(color, 'changeSize', {50})\r\n  end, true)\r\n  self.addContextMenuItem('Size: Decrease', function(color)\r\n    applyMultiple(color, 'changeSize', {-50})\r\n  end, true)\r\n  self.addContextMenuItem('Permanently Attach', attemptAttach)\r\n  self.addContextMenuItem('Permalock', function(color)\r\n    applyMultiple(color, 'permalock', _, true)\r\n  end)\r\nend\r\n\r\nfunction changeSize(params)\r\n  local delta = params[1]\r\n  local newSize = data.size + delta\r\n  if newSize > 800  or newSize < 50 then\r\n    return\r\n  end\r\n  data.size = newSize\r\n  updateState()\r\n  if self.getButtons() and #self.getButtons() ~= 0 then\r\n    self.editButton({font_size=data.size})\r\n  else\r\n    local size = getBox(data.text, true)\r\n    self.editInput({width=size.width, height=size.height, font_size=data.size})\r\n  end\r\nend\r\n\r\nfunction setColor(params)\r\n  if params and params[1] then\r\n    data.color = params[1]\r\n  else\r\n    data.color = self.getColorTint():setAt('a', 1) -- Take on color of object tint\r\n  end\r\n  updateState()\r\n  if self.getButtons() and #self.getButtons() ~= 0 then\r\n    self.editButton({font_color=data.color})\r\n  else\r\n    self.editInput({font_color=data.color, color=getBackground(data.color)})\r\n  end\r\nend\r\n\r\nfunction getBackground(color) --determines whether to use black or white depending on luminance\r\n  local r,g,b = Color(color):get()\r\n\r\n  local lum = 0.2126*r + 0.7152*g + 0.0722*b\r\n  if lum > 0.75 then\r\n    return {0.2,0.2,0.2, data.box_transparency}\r\n  else\r\n    return {1,1,1, data.box_transparency}\r\n  end\r\nend\r\n\r\nfunction clear()\r\n  data.text = ''\r\n  updateState()\r\n  inputMode()\r\nend\r\n\r\nfunction permalock()\r\n  self.interactable = false\r\n  data.interactable = false\r\n  updateState()\r\nend\r\n\r\nlocal target_script = [[\r\nfunction onLoad(script_state)\r\n  if script_state and script_state ~= '' then\r\n    local state = JSON.decode(script_state)\r\n    for _,entry in ipairs(state) do\r\n      self.createButton(entry)\r\n    end\r\n    self.addContextMenuItem('Clear All Text', function(color)\r\n      self.clearContextMenu()\r\n      self.clearButtons()\r\n      self.script_state = ''\r\n      self.script_code = ''\r\n    end)\r\n  end\r\nend\r\n]]\r\n\r\nfunction attemptAttach(player_color)\r\n  local objs = Player[player_color].getSelectedObjects()\r\n  local attachee\r\n  local attachers = {}\r\n  for _,obj in ipairs(objs) do\r\n    if obj.getVar('movableTextTool_cowgoesmoo33') then\r\n      if obj ~= self then\r\n        table.insert(attachers, obj)\r\n      end\r\n    else\r\n      if attachee then\r\n        broadcastToColor(\"More than one target selected.\", player_color)\r\n        return\r\n      else\r\n        attachee = obj\r\n      end\r\n    end\r\n  end\r\n  if attachee then\r\n    local code = attachee.script_code\r\n    if code and code ~= '' and code ~= target_script then\r\n      broadcastToColor(\"Warning: script on card has been overriden. Rewind time to undo.\", player_color)\r\n    end\r\n    for i,attacher in ipairs(attachers) do\r\n      attacher.call('attach', {target = attachee})\r\n    end\r\n    attach({target = attachee})\r\n    local type, flip = attachee.type, attachee.getRotation().z\r\n    if (type == 'Card' or type == 'Deck') and flip > 175 and flip < 185 then\r\n      broadcastToColor(\"Warning: text will not display if card or deck is facing down.\", player_color)\r\n    end\r\n  else\r\n    broadcastToColor(\"You must have a target object in your selection (using click-and-drag or Ctrl+Click) to use this option.\", player_color)\r\n  end\r\nend\r\n\r\nfunction attach(params)\r\n  local target = params.target\r\n  local displayText = data.text\r\n  if data.enter_to_finish then\r\n    displayText = displayText:gsub('%[n%]', '\\n')\r\n  end\r\n\r\n  local textRotation = self.getRotation():sub(target.getRotation())\r\n    :add(Vector(180, 0, 180))\r\n\r\n  local textPosition = target.positionToLocal(\r\n    self.getPosition():add(Vector(0, data.hover_height, 0))\r\n  )\r\n  textPosition.x = -textPosition.x\r\n\r\n  local textScale = {}\r\n  textScale.x = self.getScale().x / target.getScale().x\r\n  textScale.y = self.getScale().x / target.getScale().y\r\n  textScale.z = self.getScale().x / target.getScale().z\r\n\r\n  local details = {\r\n    label=displayText,\r\n    click_function=\"none\",\r\n    function_owner=nil,\r\n    position=textPosition,\r\n    rotation=textRotation,\r\n    scale=textScale,\r\n    height=0, width=0,\r\n    font_color=data.color, font_size=data.size\r\n  }\r\n\r\n  target.createButton(details)\r\n\r\n  local script_state = target.script_state\r\n  if script_state and script_state ~= '' then\r\n    local state = JSON.decode(script_state)\r\n    table.insert(state, details)\r\n    target.script_state = JSON.encode(state)\r\n  else\r\n    target.script_state = JSON.encode({[1]=details})\r\n  end\r\n\r\n  target.script_code = target_script\r\n\r\n  self.destruct()\r\nend\r\n\r\nfunction applyMultiple(player_color, func_string, params, static_only)\r\n  local objs = Player[player_color].getSelectedObjects()\r\n  for _,obj in ipairs(objs) do\r\n    if obj.getVar('movableTextTool_cowgoesmoo33') then\r\n      if not static_only or obj.call('isStatic') then\r\n        obj.call(func_string, params)\r\n      end\r\n    end\r\n  end\r\nend\r\n\r\nfunction isStatic()\r\n  local input = self.getInputs()\r\n  return not input or #input == 0\r\nend\r\n\r\nfunction getBox(input, force)\r\n  local maxLength, lineCount = EXPAND_INTERVAL, 1\r\n  local lineLength = 0\r\n  for i = 1, #input do\r\n    local c = input:sub(i,i)\r\n    if c == '\\n' then\r\n      lineCount = lineCount + 1\r\n      if lineLength > maxLength then maxLength = (math.floor(lineLength / EXPAND_INTERVAL) + 1) * EXPAND_INTERVAL end\r\n      lineLength = 0\r\n    else\r\n      lineLength = lineLength + 1\r\n    end\r\n  end\r\n  if lineLength > maxLength then maxLength = (math.floor(lineLength / EXPAND_INTERVAL) + 1) * EXPAND_INTERVAL end\r\n\r\n  newWidth = data.size * maxLength * 0.9\r\n  newHeight = data.size * lineCount + 23\r\n\r\n  if force or boxWidth ~= newWidth or boxHeight ~= newHeight then\r\n    boxWidth, boxHeight = newWidth, newHeight\r\n    return {width = boxWidth, height = boxHeight}\r\n  end\r\n  return nil\r\nend\r\n\r\ntemp_lift = nil\r\nfunction onPickUp(player_color)\r\n  if data.autolift then\r\n    local player = Player[player_color]\r\n    temp_lift = player.lift_height\r\n    player.lift_height = 0\r\n  end\r\nend\r\n\r\nfunction onDrop(player_color)\r\n  if data.autolift and temp_lift then\r\n    Player[player_color].lift_height = temp_lift\r\n  end\r\nend\r\n\r\n-- Should be called every time data is modified, allows info to be saved on copy/paste\r\nfunction updateState()\r\n  self.script_state = JSON.encode(data)\r\nend\r\n\r\nfunction onSave()\r\n  self.script_state = JSON.encode(data)\r\n  return self.script_state\r\nend","LuaScriptState":"{\"autolift\":false,\"autolock\":false,\"box_transparency\":1,\"color\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1},\"enter_to_finish\":false,\"hover_height\":0.05,\"interactable\":true,\"size\":200,\"text\":\"Placement locomotive\"}","XmlUI":""}],"AttachedDecals":[{"Transform":{"posX":-0.0021877822,"posY":-0.08963572,"posZ":-0.00288731651,"rotX":270,"rotY":359.869568,"rotZ":0,"scaleX":2.00000215,"scaleY":2.00000238,"scaleZ":2.00000262},"CustomDecal":{"Name":"dunwich_back","ImageURL":"http://cloud-3.steamusercontent.com/ugc/959719855119695911/931B9829687A20F4DEADB36DA57B7E6D76792231/","Size":7.4}}]},{"GUID":"4e84af","Name":"Custom_Model_Bag","Transform":{"posX":-9.999997,"posY":0.9799975,"posZ":45.0000038,"rotX":-0.00000502931,"rotY":180.026413,"rotZ":5.205455e-7,"scaleX":1.20052135,"scaleY":0.249882281,"scaleZ":1.3145982},"Nickname":"I-A : Activité Extrascolaire","Description":"Renouveau : L'Héritage de Dunwich","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":1,"g":1,"b":1},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"MaterialIndex":-1,"MeshIndex":-1,"CustomMesh":{"MeshURL":"https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/advboxes/tuckbox_h_MSH.obj","DiffuseURL":"http://cloud-3.steamusercontent.com/ugc/1991184321466653044/E8248DB08D597167DBA8E3D2CC03941E9FFF96DA/","NormalURL":"","ColliderURL":"","Convex":true,"MaterialIndex":3,"TypeIndex":6,"CustomShader":{"SpecularColor":{"r":1,"g":1,"b":1},"SpecularIntensity":0,"SpecularSharpness":2,"FresnelStrength":0},"CastShadows":true},"Bag":{"Order":0},"LuaScript":"-- Utility memory bag by Directsun\r\n-- Version 2.7.0\r\n-- Fork of Memory Bag 2.0 by MrStump\r\n--\r\n-- Want to contribute? Create an issue or fork the code on GitHub and submit a pull request:\r\n-- https://github.com/sunflowermans/TTS-UtilityMemoryBag\r\n\r\n\r\nfunction updateSave()\r\n    local data_to_save = {[\"ml\"]=memoryList}\r\n    saved_data = JSON.encode(data_to_save)\r\n    self.script_state = saved_data\r\nend\r\n\r\nfunction combineMemoryFromBagsWithin()\r\n    local bagObjList = self.getObjects()\r\n    for _, bagObj in ipairs(bagObjList) do\r\n        local data = bagObj.lua_script_state\r\n        if data ~= nil then\r\n            local j = JSON.decode(data)\r\n            if j ~= nil and j.ml ~= nil then\r\n                for guid, entry in pairs(j.ml) do\r\n                    memoryList[guid] = entry\r\n                end\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\nfunction updateMemoryWithMoves()\r\n    memoryList = memoryListBackup\r\n    --get the first transposed object's coordinates\r\n    local obj = getObjectFromGUID(moveGuid)\r\n\r\n    -- p1 is where needs to go, p2 is where it was\r\n    local refObjPos = memoryList[moveGuid].pos\r\n    local deltaPos = findOffsetDistance(obj.getPosition(), refObjPos, nil)\r\n    local movedRotation = obj.getRotation()\r\n    for guid, entry in pairs(memoryList) do\r\n        memoryList[guid].pos.x = entry.pos.x - deltaPos.x\r\n        memoryList[guid].pos.y = entry.pos.y - deltaPos.y\r\n        memoryList[guid].pos.z = entry.pos.z - deltaPos.z\r\n        -- memoryList[guid].rot.x = movedRotation.x\r\n        -- memoryList[guid].rot.y = movedRotation.y\r\n        -- memoryList[guid].rot.z = movedRotation.z\r\n    end\r\n\r\n    --theList[obj.getGUID()] = {\r\n    --    pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n    --    rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n    --    lock=obj.getLock()\r\n    --}\r\n    moveList = {}\r\nend\r\n\r\nfunction onload(saved_data)\r\n\r\n    fresh = true\r\n    if saved_data ~= \"\" then\r\n        local loaded_data = JSON.decode(saved_data)\r\n        --Set up information off of loaded_data\r\n        memoryList = loaded_data.ml\r\n    else\r\n        --Set up information for if there is no saved saved data\r\n        memoryList = {}\r\n\r\n    end\r\n\r\n    moveList = {}\r\n    moveGuid = nil\r\n\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        fresh = false\r\n        createMemoryActionButtons()\r\n    end\r\nend\r\n\r\n\r\n--Beginning Setup\r\n\r\n\r\n--Make setup button\r\n function createSetupButton()\r\n    self.createButton({\r\n      label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n      position={0,0.1,-2.1}, rotation={0,0,0}, height=275, width=625,\r\n      font_size=150, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n end\r\n\r\n--Triggered by Transpose button\r\nfunction buttonClick_transpose()\r\n    moveGuid = nil\r\n    broadcastToAll(\"Select one object and move it- all objects will move relative to the new location\", {0.75, 0.75, 1})\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(true)\r\n    createSetupActionButtons(true)\r\nend\r\n\r\n--Triggered by setup button,\r\nfunction buttonClick_setup()\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(false)\r\n    createSetupActionButtons(false)\r\nend\r\n\r\nfunction getAllObjectsInMemory()\r\n    local objTable = {}\r\n    local curObj = {}\r\n\r\n    for guid in pairs(memoryListBackup) do\r\n        curObj = getObjectFromGUID(guid)\r\n        table.insert(objTable, curObj)\r\n    end\r\n\r\n    return objTable\r\n    -- return getAllObjects()\r\nend\r\n\r\n--Creates selection buttons on objects\r\nfunction createButtonsOnAllObjects(move)\r\n    buttonIndexMap = {}\r\n    local howManyButtons = 0\r\n\r\n    local objsToHaveButtons = {}\r\n    if move == true then\r\n        objsToHaveButtons = getAllObjectsInMemory()\r\n    else\r\n        objsToHaveButtons = getAllObjects()\r\n    end\r\n\r\n    for _, obj in ipairs(objsToHaveButtons) do\r\n        if obj ~= self then\r\n            --On a normal bag, the button positions aren't the same size as the bag.\r\n            globalScaleFactor = 1* 1/self.getScale().x\r\n            --Super sweet math to set button positions\r\n            local selfPos = self.getPosition()\r\n            local objPos = obj.getPosition()\r\n            local deltaPos = findOffsetDistance(selfPos, objPos, obj)\r\n            local objPos = rotateLocalCoordinates(deltaPos, self)\r\n            objPos.x = -objPos.x * globalScaleFactor\r\n            objPos.y = objPos.y * globalScaleFactor + 2\r\n            objPos.z = objPos.z * globalScaleFactor * 0.9\r\n            --Workaround for custom PDFs\r\n            if obj.Book then\r\n                objPos.y = objPos.y + 0.5\r\n            end\r\n            --Offset rotation of bag\r\n            local rot = self.getRotation()\r\n            rot.y = -rot.y + 180\r\n            --Create function\r\n            local funcName = \"selectButton_\" .. howManyButtons\r\n            local func = function() buttonClick_selection(obj, move) end\r\n            local color = {0.75,0.25,0.25,0.6}\r\n            local colorMove = {0,0,1,0.6}\r\n            if move == true then\r\n                color = colorMove\r\n            end\r\n            self.setVar(funcName, func)\r\n            self.createButton({\r\n                click_function=funcName, function_owner=self,\r\n                position=objPos, rotation=rot, height=500, width=500,\r\n                color=color,\r\n            })\r\n            buttonIndexMap[obj.getGUID()] = howManyButtons\r\n            howManyButtons = howManyButtons + 1\r\n        end\r\n    end\r\nend\r\n\r\n--Creates submit and cancel buttons\r\nfunction createSetupActionButtons(move)\r\n    self.createButton({\r\n        label=\"Annuler\", click_function=\"buttonClick_cancel\", function_owner=self,\r\n      position={-0.7,0.1,2.1}, rotation={0,0,0}, height=275, width=625,\r\n      font_size=145, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n\r\n    self.createButton({\r\n        label=\"Valider\", click_function=\"buttonClick_submit\", function_owner=self,\r\n        position={-0.7,0.3,2.6}, rotation={0,0,0}, height=275, width=625,\r\n        font_size=140, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n\r\n    if move == false then\r\n      self.createButton({\r\n          label=\"Ajouter\", click_function=\"buttonClick_add\", function_owner=self,\r\n          position={0.7,0.3,2.1}, rotation={0,0,0}, height=275, width=625,\r\n          font_size=140, color={0,0,0}, font_color={0.25,1,0.25}\r\n      })\r\n\r\n        self.createButton({\r\n            label=\"Sélection\", click_function=\"editDragSelection\", function_owner=self,\r\n            position={-0.7,0.3,3.1}, rotation={0,0,0}, height=275, width=625,\r\n            font_size=125, color={0,0,0}, font_color={1,1,1}\r\n        })\r\n\r\n        if fresh == false then\r\n                self.createButton({\r\n                    label=\"Mise à jour\", click_function=\"buttonClick_setNew\", function_owner=self,\r\n                    position={0.7,0.3,3.1}, rotation={0,0,0}, height=275, width=625,\r\n                    font_size=105, color={0,0,0}, font_color={0.75,0.75,1}\r\n                })\r\n                self.createButton({\r\n                    label=\"Retirer\", click_function=\"buttonClick_remove\", function_owner=self,\r\n                    position={0.7,0.3,2.6}, rotation={0,0,0}, height=275, width=625,\r\n                    font_size=140, color={0,0,0}, font_color={1,0.25,0.25}\r\n                })\r\n            end\r\n        end\r\n\r\n        self.createButton({\r\n            label=\"Reset\", click_function=\"buttonClick_reset\", function_owner=self,\r\n            position={0,0.3,-2.1}, rotation={0,0,0}, height=275, width=625,\r\n            font_size=165, color={0,0,0}, font_color={1,1,1}\r\n        })\r\n    end\r\n\r\n\r\n--During Setup\r\n\r\n\r\n--Checks or unchecks buttons\r\nfunction buttonClick_selection(obj, move)\r\n    local index = buttonIndexMap[obj.getGUID()]\r\n    local colorMove = {0,0,1,0.6}\r\n    local color = {0,1,0,0.6}\r\n\r\n    previousGuid = selectedGuid\r\n    selectedGuid = obj.getGUID()\r\n\r\n    theList = memoryList\r\n    if move == true then\r\n        theList = moveList\r\n        if previousGuid ~= nil and previousGuid ~= selectedGuid then\r\n            local prevObj = getObjectFromGUID(previousGuid)\r\n            prevObj.highlightOff()\r\n            self.editButton({index=previousIndex, color=colorMove})\r\n            theList[previousGuid] = nil\r\n        end\r\n        previousIndex = index\r\n    end\r\n\r\n    if theList[selectedGuid] == nil then\r\n        self.editButton({index=index, color=color})\r\n        --Adding pos/rot to memory table\r\n        local pos, rot = obj.getPosition(), obj.getRotation()\r\n        --I need to add it like this or it won't save due to indexing issue\r\n        theList[obj.getGUID()] = {\r\n            pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n            rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n            lock=obj.getLock(),\r\n            tint=obj.getColorTint()\r\n        }\r\n        obj.highlightOn({0,1,0})\r\n    else\r\n        color = {0.75,0.25,0.25,0.6}\r\n        if move == true then\r\n            color = colorMove\r\n        end\r\n        self.editButton({index=index, color=color})\r\n        theList[obj.getGUID()] = nil\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\nfunction editDragSelection(bagObj, player, remove)\r\n    local selectedObjs = Player[player].getSelectedObjects()\r\n    if not remove then\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            --Ignore if already in the memory list, or does not have a button\r\n            if index and not memoryList[obj.getGUID()] then\r\n                self.editButton({index=index, color={0,1,0,0.6}})\r\n                --Adding pos/rot to memory table\r\n                local pos, rot = obj.getPosition(), obj.getRotation()\r\n                --I need to add it like this or it won't save due to indexing issue\r\n                memoryList[obj.getGUID()] = {\r\n                    pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n                    rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n                    lock=obj.getLock(),\r\n                    tint=obj.getColorTint()\r\n                }\r\n                obj.highlightOn({0,1,0})\r\n            end\r\n        end\r\n    else\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            if index and memoryList[obj.getGUID()] then\r\n                color = {0.75,0.25,0.25,0.6}\r\n                self.editButton({index=index, color=color})\r\n                memoryList[obj.getGUID()] = nil\r\n                obj.highlightOff()\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\n--Cancels selection process\r\nfunction buttonClick_cancel()\r\n    memoryList = memoryListBackup\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        createMemoryActionButtons()\r\n    end\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Sélection annulée\", {1,1,1})\r\n    moveGuid = nil\r\nend\r\n\r\n--Saves selections\r\nfunction buttonClick_submit()\r\n    fresh = false\r\n    if next(moveList) ~= nil then\r\n        for guid in pairs(moveList) do\r\n            moveGuid = guid\r\n        end\r\n        if memoryListBackup[moveGuid] == nil then\r\n            broadcastToAll(\"Item selected for moving is not already in memory\", {1, 0.25, 0.25})\r\n        else\r\n            broadcastToAll(\"Moving all items in memory relative to new objects position!\", {0.75, 0.75, 1})\r\n            self.clearButtons()\r\n            self.clearInputs()\r\n            createMemoryActionButtons()\r\n            local count = 0\r\n            for guid in pairs(moveList) do\r\n                moveGuid = guid\r\n                count = count + 1\r\n                local obj = getObjectFromGUID(guid)\r\n                if obj ~= nil then obj.highlightOff() end\r\n            end\r\n            updateMemoryWithMoves()\r\n            updateSave()\r\n            buttonClick_place()\r\n        end\r\n    elseif next(memoryList) == nil and moveGuid == nil then\r\n        memoryList = memoryListBackup\r\n        broadcastToAll(\"No selections made.\", {0.75, 0.25, 0.25})\r\n    end\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    updateSave()\r\n    moveGuid = nil\r\nend\r\n\r\nfunction combineTables(first_table, second_table)\r\n    for k,v in pairs(second_table) do first_table[k] = v end\r\nend\r\n\r\nfunction buttonClick_add()\r\n    fresh = false\r\n    combineTables(memoryList, memoryListBackup)\r\n    broadcastToAll(\"Adding internal bags and selections to existing memory\", {0.25, 0.75, 0.25})\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_remove()\r\n    broadcastToAll(\"Removing Selected Entries From Memory\", {1.0, 0.25, 0.25})\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        memoryListBackup[guid] = nil\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Removed\", {1,1,1})\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_setNew()\r\n    broadcastToAll(\"Setting new position relative to items in memory\", {0.75, 0.75, 1})\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        guid = obj.guid\r\n        if memoryListBackup[guid] ~= nil then\r\n            count = count + 1\r\n            memoryListBackup[guid].pos = obj.getPosition()\r\n            memoryListBackup[guid].rot = obj.getRotation()\r\n            memoryListBackup[guid].lock = obj.getLock()\r\n            memoryListBackup[guid].tint = obj.getColorTint()\r\n        end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\n--Resets bag to starting status\r\nfunction buttonClick_reset()\r\n    fresh = true\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createSetupButton()\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Tool Reset\", {1,1,1})\r\n    updateSave()\r\nend\r\n\r\n\r\n--After Setup\r\n\r\n\r\n--Creates recall and place buttons\r\nfunction createMemoryActionButtons()\r\n    self.createButton({\r\n        label=\"Placer\", click_function=\"buttonClick_place\", function_owner=self,\r\n        position={0.7,0.1,2.2}, rotation={0,0,0}, height=275, width=625,\r\n        font_size=150, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Ranger\", click_function=\"buttonClick_recall\", function_owner=self,\r\n        position={-0.7,0.1,2.2}, rotation={0,0,0}, height=275, width=625,\r\n        font_size=150, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n        position={0,0.1,-2.2}, rotation={0,0,0}, height=275, width=625,\r\n        font_size=150, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    ---    self.createButton({\r\n    ---      label=\"Bouger\", click_function=\"buttonClick_transpose\", function_owner=self,\r\n    ---      position={-2,0.3,0.8}, rotation={0,270,0}, height=350, width=800,\r\n    ---      font_size=250, color={0,0,0}, font_color={0.75,0.75,1}\r\n    ---\r\nend\r\n\r\n--Sends objects from bag/table to their saved position/rotation\r\nfunction buttonClick_place()\r\n    local bagObjList = self.getObjects()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        --If obj is out on the table, move it to the saved pos/rot\r\n        if obj ~= nil then\r\n            obj.setPositionSmooth(entry.pos)\r\n            obj.setRotationSmooth(entry.rot)\r\n            obj.setLock(entry.lock)\r\n            obj.setColorTint(entry.tint)\r\n        else\r\n            --If obj is inside of the bag\r\n            for _, bagObj in ipairs(bagObjList) do\r\n                if bagObj.guid == guid then\r\n                    local item = self.takeObject({\r\n                        guid=guid, position=entry.pos, rotation=entry.rot, smooth=false\r\n                    })\r\n                    item.setLock(entry.lock)\r\n                    item.setColorTint(entry.tint)\r\n                    break\r\n                end\r\n            end\r\n        end\r\n    end\r\n    broadcastToAll(\"Objets placés\", {1,1,1})\r\nend\r\n\r\n--Recalls objects to bag from table\r\nfunction buttonClick_recall()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then self.putObject(obj) end\r\n    end\r\n    broadcastToAll(\"Objets rangés\", {1,1,1})\r\nend\r\n\r\n\r\n--Utility functions\r\n\r\n\r\n--Find delta (difference) between 2 x/y/z coordinates\r\nfunction findOffsetDistance(p1, p2, obj)\r\n    local yOffset = 0\r\n    if obj ~= nil then\r\n        local bounds = obj.getBounds()\r\n        yOffset = (bounds.size.y - bounds.offset.y)\r\n    end\r\n    local deltaPos = {}\r\n    deltaPos.x = (p2.x-p1.x)\r\n    deltaPos.y = (p2.y-p1.y) + yOffset\r\n    deltaPos.z = (p2.z-p1.z)\r\n    return deltaPos\r\nend\r\n\r\n--Used to rotate a set of coordinates by an angle\r\nfunction rotateLocalCoordinates(desiredPos, obj)\r\n    local objPos, objRot = obj.getPosition(), obj.getRotation()\r\n    local angle = math.rad(objRot.y)\r\n    local x = desiredPos.x * math.cos(angle) - desiredPos.z * math.sin(angle)\r\n    local z = desiredPos.x * math.sin(angle) + desiredPos.z * math.cos(angle)\r\n    --return {x=objPos.x+x, y=objPos.y+desiredPos.y, z=objPos.z+z}\r\n    return {x=x, y=desiredPos.y, z=z}\r\nend\r\n\r\nfunction rotateMyCoordinates(desiredPos, obj)\r\n    local angle = math.rad(obj.getRotation().y)\r\n    local x = desiredPos.x * math.sin(angle)\r\n    local z = desiredPos.z * math.cos(angle)\r\n    return {x=x, y=desiredPos.y, z=z}\r\nend\r\n\r\n--Coroutine delay, in seconds\r\nfunction wait(time)\r\n    local start = os.time()\r\n    repeat coroutine.yield(0) until os.time() > start + time\r\nend\r\n\r\n--Duplicates a table (needed to prevent it making reference to the same objects)\r\nfunction duplicateTable(oldTable)\r\n    local newTable = {}\r\n    for k, v in pairs(oldTable) do\r\n        newTable[k] = v\r\n    end\r\n    return newTable\r\nend\r\n\r\n--Moves scripted highlight from all objects\r\nfunction removeAllHighlights()\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\n--Round number (num) to the Nth decimal (dec)\r\nfunction round(num, dec)\r\n    local mult = 10^(dec or 0)\r\n    return math.floor(num * mult + 0.5) / mult\r\nend\r\n\r\n\r\n--[[\r\nThis object provides access to a variable stored on the \"Global script\".\r\nThe variable holds the GUIDs for every Utility Memory Bag in the scene.\r\nExample:\r\n{'805ebd', '35cc21', 'fc8886', 'f50264', '5f5f63'}\r\n--]]\r\nAllMemoryBagsInScene = {\r\n    NAME_OF_GLOBAL_VARIABLE = \"_UtilityMemoryBag_AllMemoryBagsInScene\"\r\n}\r\n\r\nfunction AllMemoryBagsInScene:add(guid)\r\n    local guids = Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\n    table.insert(guids, guid)\r\n    Global.setTable(self.NAME_OF_GLOBAL_VARIABLE, guids)\r\nend\r\n\r\nfunction AllMemoryBagsInScene:getGuidList()\r\n    return Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\nend\r\n","LuaScriptState":"{\"ml\":{\"018503\":{\"lock\":true,\"pos\":{\"x\":13.5,\"y\":1.51610004901886,\"z\":2},\"rot\":{\"x\":0.0109000001102686,\"y\":180.004302978516,\"z\":0.00490000005811453},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"0e3f22\":{\"lock\":false,\"pos\":{\"x\":-21.5008888244629,\"y\":1.83529996871948,\"z\":18.5035133361816},\"rot\":{\"x\":-4.27775421485421E-06,\"y\":179.996719360352,\"z\":-5.05204809542192E-07},\"tint\":{\"a\":1,\"b\":0,\"g\":0,\"r\":0.614982545375824}},\"118416\":{\"lock\":false,\"pos\":{\"x\":-22.5,\"y\":1.7789,\"z\":8.5},\"rot\":{\"x\":0,\"y\":180.0224,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"26b179\":{\"lock\":false,\"pos\":{\"x\":-29.0000591278076,\"y\":1.77890610694885,\"z\":4.4999418258667},\"rot\":{\"x\":-5.10384643348516E-06,\"y\":180.000671386719,\"z\":4.90754032966834E-08},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"28ae94\":{\"lock\":false,\"pos\":{\"x\":-32.0012,\"y\":1.8354,\"z\":18.5055},\"rot\":{\"x\":0,\"y\":179.9848,\"z\":0},\"tint\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1}},\"2e37c4\":{\"lock\":false,\"pos\":{\"x\":2.49999976158142,\"y\":1.51970982551575,\"z\":16},\"rot\":{\"x\":0.0108914962038398,\"y\":180,\"z\":0.00494819646701217},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"2efca1\":{\"lock\":true,\"pos\":{\"x\":2.5,\"y\":1.51699995994568,\"z\":2},\"rot\":{\"x\":0.0109000001102686,\"y\":180.003005981445,\"z\":0.00490000005811453},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"376181\":{\"lock\":false,\"pos\":{\"x\":-26.9999,\"y\":1.7663,\"z\":20},\"rot\":{\"x\":0,\"y\":0,\"z\":0},\"tint\":{\"a\":0,\"b\":0,\"g\":0,\"r\":0}},\"427832\":{\"lock\":false,\"pos\":{\"x\":-25.5028247833252,\"y\":1.79585957527161,\"z\":8.49667453765869},\"rot\":{\"x\":-5.1076099225611E-06,\"y\":179.983047485352,\"z\":-8.34797262427855E-08},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"444795\":{\"lock\":false,\"pos\":{\"x\":-25.5,\"y\":1.7789,\"z\":8.5},\"rot\":{\"x\":0,\"y\":179.9851,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"44ca63\":{\"lock\":false,\"pos\":{\"x\":-3,\"y\":1.50591480731964,\"z\":12.5},\"rot\":{\"x\":-0.00116118765436113,\"y\":60.0000839233398,\"z\":359.988098144531},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"4badac\":{\"lock\":false,\"pos\":{\"x\":8,\"y\":1.50563025474548,\"z\":16},\"rot\":{\"x\":0.00494784116744995,\"y\":90,\"z\":359.989105224609},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"4ef076\":{\"lock\":false,\"pos\":{\"x\":17.5,\"y\":1.50480973720551,\"z\":16},\"rot\":{\"x\":0.00494928937405348,\"y\":90.0050659179688,\"z\":359.989105224609},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"502f4f\":{\"lock\":false,\"pos\":{\"x\":-22.5000247955322,\"y\":1.77890610694885,\"z\":4.4999737739563},\"rot\":{\"x\":-5.20107641932555E-06,\"y\":179.968170166016,\"z\":-1.45955691976951E-09},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"5953bc\":{\"lock\":false,\"pos\":{\"x\":-8.50000190734863,\"y\":1.5063898563385,\"z\":12.5},\"rot\":{\"x\":0.0108897117897868,\"y\":180.020462036133,\"z\":0.00495265796780586},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"5b52fc\":{\"lock\":false,\"pos\":{\"x\":-25.5000400543213,\"y\":1.77890610694885,\"z\":4.4999532699585},\"rot\":{\"x\":-5.00688065585564E-06,\"y\":180.001602172852,\"z\":-6.11543029549466E-08},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"6067b3\":{\"lock\":false,\"pos\":{\"x\":-28.746395111084,\"y\":1.76629900932312,\"z\":30.0336036682129},\"rot\":{\"x\":4.92294975629193E-06,\"y\":-1.09345683085849E-05,\"z\":1.33685645664627E-07},\"tint\":{\"a\":0,\"b\":0,\"g\":0,\"r\":0}},\"6b2b52\":{\"lock\":false,\"pos\":{\"x\":22.3267650604248,\"y\":1.51391160488129,\"z\":-5.49483823776245},\"rot\":{\"x\":0.0108914691954851,\"y\":180.000244140625,\"z\":0.00494831288233399},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"7234af\":{\"lock\":false,\"pos\":{\"x\":2.49999976158142,\"y\":1.50543975830078,\"z\":12.5},\"rot\":{\"x\":0.0108898244798183,\"y\":180.020492553711,\"z\":0.00495618255808949},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"7705b1\":{\"lock\":false,\"pos\":{\"x\":-3.00000095367432,\"y\":1.50658023357391,\"z\":16},\"rot\":{\"x\":0.00494773453101516,\"y\":89.9999465942383,\"z\":359.989105224609},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"7c1c7f\":{\"lock\":false,\"pos\":{\"x\":-31.9883060455322,\"y\":1.83530128002167,\"z\":4.48379373550415},\"rot\":{\"x\":-6.69902965455549E-06,\"y\":179.984924316406,\"z\":-2.35749837429466E-07},\"tint\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1}},\"7d1653\":{\"lock\":false,\"pos\":{\"x\":-29.000036239624,\"y\":1.77890574932098,\"z\":8.49996185302734},\"rot\":{\"x\":-5.07552840645076E-06,\"y\":179.991271972656,\"z\":-3.84895670890728E-08},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"9265a4\":{\"lock\":false,\"pos\":{\"x\":-21.4269962310791,\"y\":1.76629984378815,\"z\":20.1442031860352},\"rot\":{\"x\":5.11898178956471E-06,\"y\":0.00632004393264651,\"z\":3.40680799126858E-07},\"tint\":{\"a\":0,\"b\":0,\"g\":0,\"r\":0}},\"94d30e\":{\"lock\":true,\"pos\":{\"x\":21,\"y\":1.51810002326965,\"z\":16},\"rot\":{\"x\":0.0109000001102686,\"y\":180,\"z\":0.00490000005811453},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"95e2ed\":{\"lock\":false,\"pos\":{\"x\":8,\"y\":1.50496482849121,\"z\":12.5},\"rot\":{\"x\":0.00973109528422356,\"y\":120.000007629395,\"z\":359.993041992188},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"98e04b\":{\"lock\":false,\"pos\":{\"x\":17.5000019073486,\"y\":1.53600025177002,\"z\":-5.99989938735962},\"rot\":{\"x\":0.00494881113991141,\"y\":90.0050735473633,\"z\":359.989105224609},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"a34bbd\":{\"lock\":false,\"pos\":{\"x\":-32,\"y\":1.7663,\"z\":20},\"rot\":{\"x\":0,\"y\":-0.0002,\"z\":0},\"tint\":{\"a\":0,\"b\":0,\"g\":0,\"r\":0}},\"a730db\":{\"lock\":false,\"pos\":{\"x\":12.5000047683716,\"y\":1.53643202781677,\"z\":-5.99991607666016},\"rot\":{\"x\":0.0049481731839478,\"y\":90.0005493164063,\"z\":359.989105224609},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"b4cb94\":{\"lock\":false,\"pos\":{\"x\":2.50000143051147,\"y\":1.51837921142578,\"z\":9},\"rot\":{\"x\":0.0108915194869041,\"y\":180.000213623047,\"z\":0.00494826305657625},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"bb0c4e\":{\"lock\":false,\"pos\":{\"x\":-28.5000057220459,\"y\":1.79585921764374,\"z\":12.4999933242798},\"rot\":{\"x\":-4.97545033795177E-06,\"y\":180.009490966797,\"z\":-2.30465744266439E-07},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"bc5d18\":{\"lock\":false,\"pos\":{\"x\":24.9999980926514,\"y\":1.51367974281311,\"z\":-5.5000171661377},\"rot\":{\"x\":0.0108916042372584,\"y\":180.000076293945,\"z\":180.004959106445},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"c291f4\":{\"lock\":false,\"pos\":{\"x\":-27.0013,\"y\":1.8354,\"z\":18.5035},\"rot\":{\"x\":0,\"y\":179.9859,\"z\":0},\"tint\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1}},\"c37089\":{\"lock\":false,\"pos\":{\"x\":-32.0001640319824,\"y\":1.77890574932098,\"z\":8.49983978271484},\"rot\":{\"x\":-4.97160772283678E-06,\"y\":180.016815185547,\"z\":8.25209767185697E-08},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"c51b95\":{\"lock\":false,\"pos\":{\"x\":13.5,\"y\":1.50315916538239,\"z\":5.49999904632568},\"rot\":{\"x\":359.989105224609,\"y\":-1.21239754662383E-05,\"z\":-0.00495279580354691},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"c6ab70\":{\"lock\":false,\"pos\":{\"x\":13.5,\"y\":1.51875984668732,\"z\":16},\"rot\":{\"x\":0.0108915055170655,\"y\":180.000259399414,\"z\":0.0049482649192214},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"d2e6e8\":{\"lock\":false,\"pos\":{\"x\":-8.5,\"y\":1.51932919025421,\"z\":9},\"rot\":{\"x\":0.0108914850279689,\"y\":180.000152587891,\"z\":0.00494817830622196},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"f4527f\":{\"lock\":false,\"pos\":{\"x\":2.49999976158142,\"y\":1.50410914421082,\"z\":5.5},\"rot\":{\"x\":359.989105224609,\"y\":0.0127971945330501,\"z\":-0.00495620537549257},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"fa26f3\":{\"lock\":false,\"pos\":{\"x\":30.4999942779541,\"y\":1.72431862354279,\"z\":-3.00000047683716},\"rot\":{\"x\":-0.000591179355978966,\"y\":180,\"z\":180.001068115234},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"fedcda\":{\"lock\":false,\"pos\":{\"x\":13.4999570846558,\"y\":1.51742613315582,\"z\":8.99997997283936},\"rot\":{\"x\":0.0109223229810596,\"y\":180.000625610352,\"z\":0.00474009523168206},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}}}}","XmlUI":"","ContainedObjects":[{"GUID":"018503","Name":"CardCustom","Transform":{"posX":13.5,"posY":1.5161,"posZ":2,"rotX":0.0109,"rotY":180.0043,"rotZ":0.0049,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":true,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":1106400,"SidewaysCard":false,"CustomDeck":{"11064":{"FaceURL":"http://cloud-3.steamusercontent.com/ugc/1874087573755616213/4BA2D77C786D6072A7ECBD7B99A0A7C3C2048E41/","BackURL":"http://cloud-3.steamusercontent.com/ugc/1874087573755616213/4BA2D77C786D6072A7ECBD7B99A0A7C3C2048E41/","NumWidth":1,"NumHeight":1,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"0e3f22","Name":"Custom_Model_Bag","Transform":{"posX":-21.5008869,"posY":1.83530009,"posZ":18.5035152,"rotX":-0.00000498282634,"rotY":179.996719,"rotZ":1.29936907e-7,"scaleX":0.7,"scaleY":0.7,"scaleZ":0.7},"Nickname":"Biblio/Observatoire","Description":"merci à Chr1Z pour le script","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.614982545,"g":0,"b":0},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"MaterialIndex":-1,"MeshIndex":-1,"CustomMesh":{"MeshURL":"https://pastebin.com/raw/ALrYhQGb","DiffuseURL":"http://cloud-3.steamusercontent.com/ugc/1936013662302001975/7B1C2164A753181108452C97908B20F2F40F3F11/","NormalURL":"","ColliderURL":"","Convex":true,"MaterialIndex":3,"TypeIndex":6,"CustomShader":{"SpecularColor":{"r":1,"g":1,"b":1},"SpecularIntensity":0,"SpecularSharpness":2,"FresnelStrength":0},"CastShadows":true},"Bag":{"Order":0},"LuaScript":"-- Random memory bag\r\n-- based on Utility memory bag by Directsun (Version 2.7.0)\r\n\r\nlocal CONFIG = {\r\n    MEMORY_GROUP = {\r\n        -- This determines how many frames to wait before actually placing objects onto the table when the \"Place\" button is clicked.\r\n        -- This gives the other bags time to recall their objects.\r\n        -- The delay ONLY occurs if other bags have objects out.\r\n        FRAME_DELAY_BEFORE_PLACING_OBJECTS = 30\r\n    }\r\n}\r\n\r\nmath.randomseed(os.time())\r\n\r\n--[[ Memory Bag Groups ]]\r\n--[[ Utility Memory Bags may be added to a named group, called a \"memory group\".\r\nYou can add a bag to a group through the bag's UI: \"Setup\" > \"Group Name\" (to the left of the bag).\r\nOnly one bag from a group may have it's contents placed on the table at a time.\r\nWhen \"Place\" is clicked on a bag, the other bags in it's memory group are recalled.\r\nBy default a memory bag is not in any group. It's memory group is \"nil\". --]]\r\n\r\nmemoryGroupName = { memoryBag = self }\r\nfunction memoryGroupName:get()\r\n    return self._name\r\nend\r\n\r\nfunction memoryGroupName:set(newName)\r\n    GlobalMemoryGroups:unregisterBagInGroup(self:get(), self.memoryBag.getGUID())\r\n    GlobalMemoryGroups:registerBagInGroup(newName, self.memoryBag.getGUID())\r\n\r\n    if newName == \"\" then\r\n        self._name = nil\r\n    else\r\n        self._name = newName\r\n    end\r\nend\r\n\r\n-- Click the \"Recall\" button on all other bags in my memory group.\r\nfunction recallOtherBagsInMyGroup()\r\n    for _, bag in ipairs(getOtherBagsInMyGroup()) do\r\n        bag.call('buttonClick_recall')\r\n    end\r\nend\r\n\r\n-- Return \"true\" if another bag in my memory group has any objects out on the table.\r\nfunction anyOtherBagsInMyGroupArePlaced()\r\n    for _, bag in ipairs(getOtherBagsInMyGroup()) do\r\n        local state = bag.call('areAnyOfMyObjectsPlaced')\r\n        if state then return true end\r\n    end\r\n\r\n    return false\r\nend\r\n\r\n-- Return \"true\" if at least one object from this memory bag is out on the table.\r\nfunction areAnyOfMyObjectsPlaced()\r\n    for guid, _ in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then\r\n            return true\r\n        end\r\n    end\r\n    return false\r\nend\r\n\r\nfunction getOtherBagsInMyGroup()\r\n    local bags = {}\r\n    for bagGuid, _ in pairs(GlobalMemoryGroups:getGroup(memoryGroupName:get())) do\r\n        if bagGuid ~= self.getGUID() then\r\n            bag = getObjectFromGUID(bagGuid)\r\n            -- \"bag\" is nill if it has been deleted since the last time onLoad() was called.\r\n            if bag ~= nil then\r\n                table.insert(bags, bag)\r\n            end\r\n        end\r\n    end\r\n    return bags\r\nend\r\n\r\n--[[\r\nThis object provides access to a variable stored on the \"Global script\".\r\nThe variable holds the names & guids of all memory bag groups.\r\nThe global variable is a table and holds data like this:\r\n{\r\n    'My First Group Name' = {\r\n        '805ebd' = {},\r\n        '35cc21' = {},\r\n        'fc8886' = {},\r\n    },\r\n    'My Second Group Name' = {\r\n        'f50264' = {},\r\n        '5f5f63' = {},\r\n    },\r\n}\r\n--]]\r\nGlobalMemoryGroups = { NAME_OF_GLOBAL_VARIABLE = '_GlobalUtilityMemoryBagGroups' }\r\n\r\n-- Call me inside this script's \"onLoad()\" method!\r\nfunction GlobalMemoryGroups:onLoad(myGuid)\r\n    -- Create and initialize the global variable if it doesn't already exist:\r\n    if self:_getGroups() == nil then\r\n        self:_setGroups({})\r\n    end\r\nend\r\n\r\n-- Return the GUIDs of all bags in the \"groupName\". The return value is a dictionary that maps [GUID -> empty table].\r\nfunction GlobalMemoryGroups:getGroup(groupName)\r\n    guids = self:_getGroups()[groupName] or {}\r\n    return guids\r\nend\r\n\r\n-- Registers a bag in a memory group. Creates a new group if one doesn't exist.\r\nfunction GlobalMemoryGroups:registerBagInGroup(groupName, bagGuid)\r\n    if groupName == nil or groupName == \"\" then\r\n        return\r\n    end\r\n\r\n    self:_tryCreateNewGroup(groupName)\r\n    local groups = self:_getGroups()\r\n    groups[groupName][bagGuid] = {}\r\n    self:_setGroups(groups)\r\nend\r\n\r\n-- Removes this bag from the memory group.\r\nfunction GlobalMemoryGroups:unregisterBagInGroup(groupName, bagGuid)\r\n    local groups = self:_getGroups()\r\n    local group = groups[groupName]\r\n    if group ~= nil then\r\n        group[bagGuid] = nil\r\n        self:_setGroups(groups)\r\n    end\r\nend\r\n\r\n-- Return the global variable, which is a table holding all memory group names & guids.\r\nfunction GlobalMemoryGroups:_getGroups()\r\n    return Global.getTable(self.NAME_OF_GLOBAL_VARIABLE)\r\nend\r\n\r\n-- Override the global variable (i.e. the entire table).\r\nfunction GlobalMemoryGroups:_setGroups(newTable)\r\n    Global.setTable(self.NAME_OF_GLOBAL_VARIABLE, newTable)\r\nend\r\n\r\n-- Add a new memory group named \"groupName\" to the global variable, if one doesn't already exist.\r\nfunction GlobalMemoryGroups:_tryCreateNewGroup(groupName)\r\n    local groups = self:_getGroups()\r\n    if groups[groupName] == nil then\r\n        groups[groupName] = {}\r\n        self:_setGroups(groups)\r\n    end\r\nend\r\n\r\n-- This object controls the \"Group Name\" input text field that is part of the bag's ingame UI.\r\ngroupNameInput = {\r\n    greyedOutText     = \"Group Name\",\r\n    widthPerCharacter = 100,\r\n    padding           = 4,\r\n    memoryBag         = self\r\n}\r\nfunction groupNameInput:create(optionalStartingValue)\r\n    local effectiveText = optionalStartingValue or self.greyedOutText\r\n    local width = self:computeWidth(effectiveText)\r\n\r\n    self.memoryBag.createInput({\r\n        label = self.greyedOutText,\r\n        value = optionalStartingValue or nil,\r\n        alignment = 3, -- Center aligned\r\n        input_function = \"groupNameInput_onCharacterTyped\", function_owner = self.memoryBag,\r\n        position = { 2.1, 0.3, 0 }, rotation = { 0, 270, 0 }, width = width, height = 350,\r\n        font_size = 250, color = { 0, 0, 0 }, font_color = { 1, 1, 1 },\r\n    })\r\nend\r\n\r\nfunction groupNameInput:computeWidth(text)\r\n    return (string.len(text) + self.padding) * self.widthPerCharacter\r\nend\r\n\r\nfunction groupNameInput:updatedWidth(text)\r\n    self.memoryBag.editInput({\r\n        index = 0,\r\n        width = self:computeWidth(text)\r\n    })\r\nend\r\n\r\nfunction groupNameInput:onCharacterTyped(text, stillEditing)\r\n    if stillEditing then\r\n        self:updatedWidth(text)\r\n    else\r\n        if text == \"\" then\r\n            self:updatedWidth(self.greyedOutText)\r\n        end\r\n    end\r\nend\r\n\r\nfunction groupNameInput_onCharacterTyped(memoryBag, playerColor, text, stillEditing)\r\n    groupNameInput:onCharacterTyped(text, stillEditing)\r\nend\r\n\r\nfunction groupNameInput:setGroupNameToInputField()\r\n    local inputFields = self.memoryBag.getInputs()\r\n    if inputFields ~= nil then\r\n        -- Get input field 0, which corresponds to the groupNameInput.\r\n        -- Unfortunately \"self.getInputs()\" doesn't return the inputs in a guaranteed order.\r\n        local nameField = nil\r\n        for _, field in ipairs(inputFields) do\r\n            if field.index == 0 then\r\n                nameField = field\r\n            end\r\n        end\r\n\r\n        memoryGroupName:set(nameField.value)\r\n    end\r\nend\r\n\r\nfunction updateSave()\r\n    local data_to_save = { [\"ml\"] = memoryList, [\"groupName\"] = memoryGroupName:get() }\r\n    saved_data = JSON.encode(data_to_save)\r\n    self.script_state = saved_data\r\nend\r\n\r\nfunction combineMemoryFromBagsWithin()\r\n    local bagObjList = self.getObjects()\r\n    for _, bagObj in ipairs(bagObjList) do\r\n        local data = bagObj.lua_script_state\r\n        if data ~= nil then\r\n            local j = JSON.decode(data)\r\n            if j ~= nil and j.ml ~= nil then\r\n                for guid, entry in pairs(j.ml) do\r\n                    memoryList[guid] = entry\r\n                end\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\nfunction updateMemoryWithMoves()\r\n    memoryList = memoryListBackup\r\n    --get the first transposed object's coordinates\r\n    local obj = getObjectFromGUID(moveGuid)\r\n\r\n    -- p1 is where needs to go, p2 is where it was\r\n    local refObjPos = memoryList[moveGuid].pos\r\n    local deltaPos = findOffsetDistance(obj.getPosition(), refObjPos, nil)\r\n    local movedRotation = obj.getRotation()\r\n    for guid, entry in pairs(memoryList) do\r\n        memoryList[guid].pos.x = entry.pos.x - deltaPos.x\r\n        memoryList[guid].pos.y = entry.pos.y - deltaPos.y\r\n        memoryList[guid].pos.z = entry.pos.z - deltaPos.z\r\n    end\r\n    moveList = {}\r\nend\r\n\r\nfunction onload(saved_data)\r\n    GlobalMemoryGroups:onLoad(self.getGUID())\r\n    AllMemoryBagsInScene:add(self.getGUID())\r\n\r\n    fresh = true\r\n    if saved_data ~= \"\" then\r\n        local loaded_data = JSON.decode(saved_data)\r\n        --Set up information off of loaded_data\r\n        memoryList = loaded_data.ml\r\n        memoryGroupName:set(loaded_data.groupName)\r\n    else\r\n        --Set up information for if there is no saved saved data\r\n        memoryList = {}\r\n        memoryGroupName:set(nil)\r\n    end\r\n\r\n    moveList = {}\r\n    moveGuid = nil\r\n\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        fresh = false\r\n        createMemoryActionButtons()\r\n    end\r\nend\r\n\r\n--Beginning Setup\r\n\r\n--Make setup button\r\nfunction createSetupButton()\r\n    self.createButton({\r\n      label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n      position={0,0.3,2}, rotation={0,0,0}, height=350, width=800,\r\n      font_size=250, color={0,0,0}, font_color={1,1,1}\r\n  })\r\nend\r\n\r\n--Triggered by Transpose button\r\nfunction buttonClick_transpose()\r\n    moveGuid = nil\r\n    broadcastToAll(\"Select one object and move it- all objects will move relative to the new location\", { 0.75, 0.75, 1 })\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(true)\r\n    createSetupActionButtons(true)\r\nend\r\n\r\n--Triggered by setup button,\r\nfunction buttonClick_setup()\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(false)\r\n    createSetupActionButtons(false)\r\nend\r\n\r\nfunction getAllObjectsInMemory()\r\n    local objTable = {}\r\n    local curObj = {}\r\n\r\n    for guid in pairs(memoryListBackup) do\r\n        curObj = getObjectFromGUID(guid)\r\n        table.insert(objTable, curObj)\r\n    end\r\n\r\n    return objTable\r\nend\r\n\r\n--Creates selection buttons on objects\r\nfunction createButtonsOnAllObjects(move)\r\n    buttonIndexMap = {}\r\n    local howManyButtons = 0\r\n\r\n    local objsToHaveButtons = {}\r\n    if move == true then\r\n        objsToHaveButtons = getAllObjectsInMemory()\r\n    else\r\n        objsToHaveButtons = getAllObjects()\r\n    end\r\n\r\n    for _, obj in ipairs(objsToHaveButtons) do\r\n        if obj ~= self then\r\n            --On a normal bag, the button positions aren't the same size as the bag.\r\n            globalScaleFactor = 1 * 1 / self.getScale().x\r\n            --Super sweet math to set button positions\r\n            local selfPos = self.getPosition()\r\n            local objPos = obj.getPosition()\r\n            local deltaPos = findOffsetDistance(selfPos, objPos, obj)\r\n            local objPos = rotateLocalCoordinates(deltaPos, self)\r\n            objPos.x = -objPos.x * globalScaleFactor\r\n            objPos.y = objPos.y * globalScaleFactor + 2\r\n            objPos.z = objPos.z * globalScaleFactor\r\n            --Workaround for custom PDFs\r\n            if obj.Book then\r\n                objPos.y = objPos.y + 0.5\r\n            end\r\n            --Offset rotation of bag\r\n            local rot = self.getRotation()\r\n            rot.y = -rot.y + 180\r\n            --Create function\r\n            local funcName = \"selectButton_\" .. howManyButtons\r\n            local func = function() buttonClick_selection(obj, move) end\r\n            local color = { 0.75, 0.25, 0.25, 0.6 }\r\n            local colorMove = { 0, 0, 1, 0.6 }\r\n            if move == true then\r\n                color = colorMove\r\n            end\r\n            self.setVar(funcName, func)\r\n            self.createButton({\r\n                click_function = funcName, function_owner = self,\r\n                position = objPos, rotation = rot, height = 1000, width = 1000,\r\n                color = color,\r\n            })\r\n            buttonIndexMap[obj.getGUID()] = howManyButtons\r\n            howManyButtons = howManyButtons + 1\r\n        end\r\n    end\r\nend\r\n\r\n  --Creates submit and cancel buttons\r\n  function createSetupActionButtons(move)\r\n      self.createButton({\r\n         label=\"Annuler\", click_function=\"buttonClick_cancel\", function_owner=self,\r\n         position={-1.15,0.3,2.1}, rotation={0,0,0}, height=350, width=1100,\r\n         font_size=250, color={0,0,0}, font_color={1,1,1}\r\n      })\r\n\r\n      self.createButton({\r\n        label=\"Valider\", click_function=\"buttonClick_submit\", function_owner=self,\r\n        position={-1.15,0.3,2.8}, rotation={0,0,0}, height=350, width=1100,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n      })\r\n\r\n      if move == false then\r\n        self.createButton({\r\n            label=\"Ajouter\", click_function=\"buttonClick_add\", function_owner=self,\r\n            position={1.15,0.3,2.1}, rotation={0,0,0}, height=350, width=1100,\r\n            font_size=250, color={0,0,0}, font_color={0.25,1,0.25}\r\n          })\r\n\r\n          self.createButton({\r\n              label=\"Sélection\", click_function=\"editDragSelection\", function_owner=self,\r\n              position={-1.15,0.3,3.5}, rotation={0,0,0}, height=350, width=1100,\r\n              font_size=250, color={0,0,0}, font_color={1,1,1}\r\n          })\r\n\r\n          if fresh == false then\r\n              self.createButton({\r\n                  label=\"Mise à Jour\", click_function=\"buttonClick_setNew\", function_owner=self,\r\n                  position={1.15,0.3,3.5}, rotation={0,0,0}, height=350, width=1100,\r\n                  font_size=180, color={0,0,0}, font_color={0.75,0.75,1}\r\n              })\r\n              self.createButton({\r\n                  label=\"Retirer\", click_function=\"buttonClick_remove\", function_owner=self,\r\n                  position={1.15,0.3,2.8}, rotation={0,0,0}, height=350, width=1100,\r\n                  font_size=250, color={0,0,0}, font_color={1,0.25,0.25}\r\n              })\r\n          end\r\n      end\r\n\r\n      self.createButton({\r\n          label=\"Reset\", click_function=\"buttonClick_reset\", function_owner=self,\r\n          position={0,0.3,-2}, rotation={0,0,0}, height=350, width=800,\r\n          font_size=250, color={0,0,0}, font_color={1,1,1}\r\n      })\r\n  end\r\n\r\n\r\n--During Setup\r\n\r\n--Checks or unchecks buttons\r\nfunction buttonClick_selection(obj, move)\r\n    local index = buttonIndexMap[obj.getGUID()]\r\n    local colorMove = { 0, 0, 1, 0.6 }\r\n    local color = { 0, 1, 0, 0.6 }\r\n\r\n    previousGuid = selectedGuid\r\n    selectedGuid = obj.getGUID()\r\n\r\n    theList = memoryList\r\n    if move == true then\r\n        theList = moveList\r\n        if previousGuid ~= nil and previousGuid ~= selectedGuid then\r\n            local prevObj = getObjectFromGUID(previousGuid)\r\n            prevObj.highlightOff()\r\n            self.editButton({ index = previousIndex, color = colorMove })\r\n            theList[previousGuid] = nil\r\n        end\r\n        previousIndex = index\r\n    end\r\n\r\n    if theList[selectedGuid] == nil then\r\n        self.editButton({ index = index, color = color })\r\n        --Adding pos/rot to memory table\r\n        local pos, rot = obj.getPosition(), obj.getRotation()\r\n        --I need to add it like this or it won't save due to indexing issue\r\n        theList[obj.getGUID()] = {\r\n            pos = { x = round(pos.x, 4), y = round(pos.y, 4), z = round(pos.z, 4) },\r\n            rot = { x = round(rot.x, 4), y = round(rot.y, 4), z = round(rot.z, 4) },\r\n            lock = obj.getLock(),\r\n            tint = obj.getColorTint()\r\n        }\r\n        obj.highlightOn({ 0, 1, 0 })\r\n    else\r\n        color = { 0.75, 0.25, 0.25, 0.6 }\r\n        if move == true then\r\n            color = colorMove\r\n        end\r\n        self.editButton({ index = index, color = color })\r\n        theList[obj.getGUID()] = nil\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\nfunction editDragSelection(bagObj, player, remove)\r\n    local selectedObjs = Player[player].getSelectedObjects()\r\n    if not remove then\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            --Ignore if already in the memory list, or does not have a button\r\n            if index and not memoryList[obj.getGUID()] then\r\n                self.editButton({ index = index, color = { 0, 1, 0, 0.6 } })\r\n                --Adding pos/rot to memory table\r\n                local pos, rot = obj.getPosition(), obj.getRotation()\r\n                --I need to add it like this or it won't save due to indexing issue\r\n                memoryList[obj.getGUID()] = {\r\n                    pos = { x = round(pos.x, 4), y = round(pos.y, 4), z = round(pos.z, 4) },\r\n                    rot = { x = round(rot.x, 4), y = round(rot.y, 4), z = round(rot.z, 4) },\r\n                    lock = obj.getLock(),\r\n                    tint = obj.getColorTint()\r\n                }\r\n                obj.highlightOn({ 0, 1, 0 })\r\n            end\r\n        end\r\n    else\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            if index and memoryList[obj.getGUID()] then\r\n                color = { 0.75, 0.25, 0.25, 0.6 }\r\n                self.editButton({ index = index, color = color })\r\n                memoryList[obj.getGUID()] = nil\r\n                obj.highlightOff()\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\n--Cancels selection process\r\nfunction buttonClick_cancel()\r\n    memoryList = memoryListBackup\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        createMemoryActionButtons()\r\n    end\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Sélection annulée\", { 1, 1, 1 })\r\n    moveGuid = nil\r\nend\r\n\r\n--Saves selections\r\nfunction buttonClick_submit()\r\n    fresh = false\r\n    if next(moveList) ~= nil then\r\n        for guid in pairs(moveList) do\r\n            moveGuid = guid\r\n        end\r\n        if memoryListBackup[moveGuid] == nil then\r\n            broadcastToAll(\"Item selected for moving is not already in memory\", { 1, 0.25, 0.25 })\r\n        else\r\n            broadcastToAll(\"Moving all items in memory relative to new objects position!\", { 0.75, 0.75, 1 })\r\n            self.clearButtons()\r\n            self.clearInputs()\r\n            createMemoryActionButtons()\r\n            local count = 0\r\n            for guid in pairs(moveList) do\r\n                moveGuid = guid\r\n                count = count + 1\r\n                local obj = getObjectFromGUID(guid)\r\n                if obj ~= nil then obj.highlightOff() end\r\n            end\r\n            updateMemoryWithMoves()\r\n            updateSave()\r\n            buttonClick_place()\r\n        end\r\n    elseif next(memoryList) == nil and moveGuid == nil then\r\n        memoryList = memoryListBackup\r\n        broadcastToAll(\"No selections made.\", { 0.75, 0.25, 0.25 })\r\n    end\r\n    combineMemoryFromBagsWithin()\r\n    groupNameInput:setGroupNameToInputField()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count .. \" Objects Saved\", { 1, 1, 1 })\r\n    updateSave()\r\n    moveGuid = nil\r\nend\r\n\r\nfunction combineTables(first_table, second_table)\r\n    for k, v in pairs(second_table) do first_table[k] = v end\r\nend\r\n\r\nfunction buttonClick_add()\r\n    fresh = false\r\n    combineTables(memoryList, memoryListBackup)\r\n    broadcastToAll(\"Adding internal bags and selections to existing memory\", { 0.25, 0.75, 0.25 })\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count .. \" Objects Saved\", { 1, 1, 1 })\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_remove()\r\n    broadcastToAll(\"Removing Selected Entries From Memory\", { 1.0, 0.25, 0.25 })\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        memoryListBackup[guid] = nil\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count .. \" Objects Removed\", { 1, 1, 1 })\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_setNew()\r\n    broadcastToAll(\"Setting new position relative to items in memory\", { 0.75, 0.75, 1 })\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        guid = obj.guid\r\n        if memoryListBackup[guid] ~= nil then\r\n            count = count + 1\r\n            memoryListBackup[guid].pos = obj.getPosition()\r\n            memoryListBackup[guid].rot = obj.getRotation()\r\n            memoryListBackup[guid].lock = obj.getLock()\r\n            memoryListBackup[guid].tint = obj.getColorTint()\r\n        end\r\n    end\r\n    broadcastToAll(count .. \" Objects Saved\", { 1, 1, 1 })\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\n--Resets bag to starting status\r\nfunction buttonClick_reset()\r\n    fresh = true\r\n    memoryList = {}\r\n    memoryGroupName:set(nil)\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createSetupButton()\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Tool Reset\", { 1, 1, 1 })\r\n    updateSave()\r\nend\r\n\r\n--After Setup\r\n\r\n--Creates recall and place buttons\r\nfunction createMemoryActionButtons()\r\n    self.createButton({\r\n        label=\"Placer au hasard\", click_function=\"buttonClick_place\", function_owner=self,\r\n        position={0,0.3,2}, rotation={0,0,0}, height=350, width=2000,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Ranger\", click_function=\"buttonClick_recall\", function_owner=self,\r\n        position={0,0.3,2.8}, rotation={0,0,0}, height=350, width=1000,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n        position={2,0.3,0}, rotation={0,90,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    ---    self.createButton({\r\n    ---      label=\"Bouger\", click_function=\"buttonClick_transpose\", function_owner=self,\r\n    ---      position={-2,0.3,0.8}, rotation={0,270,0}, height=350, width=800,\r\n    ---      font_size=250, color={0,0,0}, font_color={0.75,0.75,1}\r\n    ---\r\nend\r\n\r\n--Sends objects from bag/table to their saved position/rotation\r\nfunction buttonClick_place()\r\n    if anyOtherBagsInMyGroupArePlaced() then\r\n        recallOtherBagsInMyGroup()\r\n        Wait.frames(_placeObjects, CONFIG.MEMORY_GROUP.FRAME_DELAY_BEFORE_PLACING_OBJECTS)\r\n    else\r\n        _placeObjects()\r\n    end\r\nend\r\n\r\nfunction _placeObjects()\r\n    local bagObjList = self.getObjects()\r\n\r\n    -- randomize memorylist position\r\n    local positionList = {}\r\n    for guid, entry in pairs(memoryList) do\r\n        table.insert(positionList, memoryList[guid].pos)\r\n    end\r\n\r\n    for i = #positionList, 2, -1 do\r\n        local j = math.random(i)\r\n        positionList[i], positionList[j] = positionList[j], positionList[i]\r\n    end\r\n\r\n    local i = 1\r\n    for guid, entry in pairs(memoryList) do\r\n        memoryList[guid].pos = positionList[i]\r\n        i = i + 1\r\n    end\r\n\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        --If obj is out on the table, move it to the saved pos/rot\r\n        if obj ~= nil then\r\n            obj.setPositionSmooth(entry.pos)\r\n            obj.setRotationSmooth(entry.rot)\r\n            obj.setLock(entry.lock)\r\n            obj.setColorTint(entry.tint)\r\n        else\r\n            --If obj is inside of the bag\r\n            for _, bagObj in ipairs(bagObjList) do\r\n                if bagObj.guid == guid then\r\n                    local item = self.takeObject({\r\n                        guid = guid, position = entry.pos, rotation = entry.rot, smooth = false\r\n                    })\r\n                    item.setLock(entry.lock)\r\n                    item.setColorTint(entry.tint)\r\n                    break\r\n                end\r\n            end\r\n        end\r\n    end\r\n    broadcastToAll(\"Objets placés au hasard\", {1,1,1})\r\nend\r\n\r\n--Recalls objects to bag from table\r\nfunction buttonClick_recall()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then self.putObject(obj) end\r\n    end\r\n    broadcastToAll(\"Objets rangés\", {1,1,1})\r\nend\r\n\r\n--Utility functions\r\n\r\n--Find delta (difference) between 2 x/y/z coordinates\r\nfunction findOffsetDistance(p1, p2, obj)\r\n    local yOffset = 0\r\n    if obj ~= nil then\r\n        local bounds = obj.getBounds()\r\n        yOffset = (bounds.size.y - bounds.offset.y)\r\n    end\r\n    local deltaPos = {}\r\n    deltaPos.x = (p2.x - p1.x)\r\n    deltaPos.y = (p2.y - p1.y) + yOffset\r\n    deltaPos.z = (p2.z - p1.z)\r\n    return deltaPos\r\nend\r\n\r\n--Used to rotate a set of coordinates by an angle\r\nfunction rotateLocalCoordinates(desiredPos, obj)\r\n    local objPos, objRot = obj.getPosition(), obj.getRotation()\r\n    local angle = math.rad(objRot.y)\r\n    local x = desiredPos.x * math.cos(angle) - desiredPos.z * math.sin(angle)\r\n    local z = desiredPos.x * math.sin(angle) + desiredPos.z * math.cos(angle)\r\n    --return {x=objPos.x+x, y=objPos.y+desiredPos.y, z=objPos.z+z}\r\n    return { x = x, y = desiredPos.y, z = z }\r\nend\r\n\r\nfunction rotateMyCoordinates(desiredPos, obj)\r\n    local angle = math.rad(obj.getRotation().y)\r\n    local x = desiredPos.x * math.sin(angle)\r\n    local z = desiredPos.z * math.cos(angle)\r\n    return { x = x, y = desiredPos.y, z = z }\r\nend\r\n\r\n--Coroutine delay, in seconds\r\nfunction wait(time)\r\n    local start = os.time()\r\n    repeat coroutine.yield(0) until os.time() > start + time\r\nend\r\n\r\n--Duplicates a table (needed to prevent it making reference to the same objects)\r\nfunction duplicateTable(oldTable)\r\n    local newTable = {}\r\n    for k, v in pairs(oldTable) do\r\n        newTable[k] = v\r\n    end\r\n    return newTable\r\nend\r\n\r\n--Moves scripted highlight from all objects\r\nfunction removeAllHighlights()\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\n--Round number (num) to the Nth decimal (dec)\r\nfunction round(num, dec)\r\n    local mult = 10 ^ (dec or 0)\r\n    return math.floor(num * mult + 0.5) / mult\r\nend\r\n\r\n--[[ This object provides access to a variable stored on the \"Global script\".\r\nThe variable holds the GUIDs for every Utility Memory Bag in the scene.\r\nExample: {'805ebd', '35cc21', 'fc8886', 'f50264', '5f5f63'} --]]\r\nAllMemoryBagsInScene = {\r\n    NAME_OF_GLOBAL_VARIABLE = \"_UtilityMemoryBag_AllMemoryBagsInScene\"\r\n}\r\n\r\nfunction AllMemoryBagsInScene:add(guid)\r\n    local guids = Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\n    table.insert(guids, guid)\r\n    Global.setTable(self.NAME_OF_GLOBAL_VARIABLE, guids)\r\nend\r\n\r\nfunction AllMemoryBagsInScene:getGuidList()\r\n    return Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\nend\r\n","LuaScriptState":"{\"ml\":{\"104a9a\":{\"lock\":false,\"pos\":{\"x\":-8.5,\"y\":1.5207,\"z\":16},\"rot\":{\"x\":0.0109,\"y\":179.9996,\"z\":0.0049},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"b221d4\":{\"lock\":false,\"pos\":{\"x\":-29,\"y\":1.7789,\"z\":27},\"rot\":{\"x\":0,\"y\":180.0015,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}}}}","XmlUI":"","ContainedObjects":[{"GUID":"104a9a","Name":"Card","Transform":{"posX":-28.9999886,"posY":1.7789042,"posZ":27.0000153,"rotX":-0.000005020546,"rotY":179.99968,"rotZ":-5.79635645e-11,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Bibliothèque Orne","Description":"Miskatonic.","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02050\",\n  \"locationBack\": {\n    \"connections\": \"Plus|Square\",\n    \"icons\": \"Triangle\",\n    \"uses\": {\n      \"countPerInvestigator\": 1,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    },\n    \"victory\": 1\n  },\n  \"locationFront\": {\n    \"connections\": \"Plus|Square\",\n    \"icons\": \"Triangle\"\n  },\n  \"traits\": \"Miskatonic.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":114605,"SidewaysCard":false,"CustomDeck":{"1146":{"FaceURL":"https://i.imgur.com/YYrN92e.jpg","BackURL":"https://i.imgur.com/QGyVZgX.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"b221d4","Name":"Card","Transform":{"posX":-8.5,"posY":1.5206598,"posZ":15.9999971,"rotX":0.0108913854,"rotY":180.001419,"rotZ":0.00494854944,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"51013\",\n  \"locationBack\": {\n    \"connections\": \"Plus|Square\",\n    \"icons\": \"Triangle\",\n    \"uses\": {\n      \"countPerInvestigator\": 1,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    },\n    \"victory\": 1\n  },\n  \"locationFront\": {\n    \"connections\": \"Plus|Square\",\n    \"icons\": \"Triangle\"\n  },\n  \"traits\": \"Miskatonic.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276101,"SidewaysCard":false,"CustomDeck":{"2761":{"FaceURL":"https://i.imgur.com/FVWxpyu.jpg","BackURL":"https://i.imgur.com/EmJxccn.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""}]},{"GUID":"26b179","Name":"Card","Transform":{"posX":-29.0000687,"posY":1.77890611,"posZ":4.49993134,"rotX":-0.000004880338,"rotY":180.000671,"rotZ":1.32792962e-7,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Mélange Alchimique","Description":"","GMNotes":"{\n  \"class\": \"Neutral\",\n  \"cost\": 0,\n  \"cycle\": \"Standalone\",\n  \"id\": \"02059\",\n  \"traits\": \"Item. Science.\",\n  \"type\": \"Asset\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":114812,"SidewaysCard":false,"CustomDeck":{"1148":{"FaceURL":"https://i.imgur.com/YYrN92e.jpg","BackURL":"https://i.imgur.com/QGyVZgX.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"28ae94","Name":"Custom_Model_Bag","Transform":{"posX":-32.0012,"posY":1.8353,"posZ":18.5055,"rotX":-0.00000639474,"rotY":179.984711,"rotZ":3.66539183e-7,"scaleX":0.7,"scaleY":0.7,"scaleZ":0.7},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":1,"g":1,"b":1},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"MaterialIndex":-1,"MeshIndex":-1,"CustomMesh":{"MeshURL":"https://pastebin.com/raw/ALrYhQGb","DiffuseURL":"http://cloud-3.steamusercontent.com/ugc/2027219646973273686/5CAEBE67144BD9F4C11BD9D2BB27363D6E4091DB/","NormalURL":"","ColliderURL":"","Convex":true,"MaterialIndex":3,"TypeIndex":6,"CustomShader":{"SpecularColor":{"r":1,"g":1,"b":1},"SpecularIntensity":0,"SpecularSharpness":2,"FresnelStrength":0},"CastShadows":true},"Bag":{"Order":0},"LuaScript":"-- Utility memory bag by Directsun\r\n-- Version 2.7.0\r\n-- Fork of Memory Bag 2.0 by MrStump\r\n--\r\n-- Want to contribute? Create an issue or fork the code on GitHub and submit a pull request:\r\n-- https://github.com/sunflowermans/TTS-UtilityMemoryBag\r\n\r\n\r\nfunction updateSave()\r\n    local data_to_save = {[\"ml\"]=memoryList}\r\n    saved_data = JSON.encode(data_to_save)\r\n    self.script_state = saved_data\r\nend\r\n\r\nfunction combineMemoryFromBagsWithin()\r\n    local bagObjList = self.getObjects()\r\n    for _, bagObj in ipairs(bagObjList) do\r\n        local data = bagObj.lua_script_state\r\n        if data ~= nil then\r\n            local j = JSON.decode(data)\r\n            if j ~= nil and j.ml ~= nil then\r\n                for guid, entry in pairs(j.ml) do\r\n                    memoryList[guid] = entry\r\n                end\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\nfunction updateMemoryWithMoves()\r\n    memoryList = memoryListBackup\r\n    --get the first transposed object's coordinates\r\n    local obj = getObjectFromGUID(moveGuid)\r\n\r\n    -- p1 is where needs to go, p2 is where it was\r\n    local refObjPos = memoryList[moveGuid].pos\r\n    local deltaPos = findOffsetDistance(obj.getPosition(), refObjPos, nil)\r\n    local movedRotation = obj.getRotation()\r\n    for guid, entry in pairs(memoryList) do\r\n        memoryList[guid].pos.x = entry.pos.x - deltaPos.x\r\n        memoryList[guid].pos.y = entry.pos.y - deltaPos.y\r\n        memoryList[guid].pos.z = entry.pos.z - deltaPos.z\r\n        -- memoryList[guid].rot.x = movedRotation.x\r\n        -- memoryList[guid].rot.y = movedRotation.y\r\n        -- memoryList[guid].rot.z = movedRotation.z\r\n    end\r\n\r\n    --theList[obj.getGUID()] = {\r\n    --    pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n    --    rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n    --    lock=obj.getLock()\r\n    --}\r\n    moveList = {}\r\nend\r\n\r\nfunction onload(saved_data)\r\n\r\n    fresh = true\r\n    if saved_data ~= \"\" then\r\n        local loaded_data = JSON.decode(saved_data)\r\n        --Set up information off of loaded_data\r\n        memoryList = loaded_data.ml\r\n    else\r\n        --Set up information for if there is no saved saved data\r\n        memoryList = {}\r\n\r\n    end\r\n\r\n    moveList = {}\r\n    moveGuid = nil\r\n\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        fresh = false\r\n        createMemoryActionButtons()\r\n    end\r\nend\r\n\r\n\r\n--Beginning Setup\r\n\r\n\r\n--Make setup button\r\nfunction createSetupButton()\r\n    self.createButton({\r\n        label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n        position={0,0.3,2}, rotation={0,0,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\nend\r\n\r\n--Triggered by Transpose button\r\nfunction buttonClick_transpose()\r\n    moveGuid = nil\r\n    broadcastToAll(\"Select one object and move it- all objects will move relative to the new location\", {0.75, 0.75, 1})\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(true)\r\n    createSetupActionButtons(true)\r\nend\r\n\r\n--Triggered by setup button,\r\nfunction buttonClick_setup()\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(false)\r\n    createSetupActionButtons(false)\r\nend\r\n\r\nfunction getAllObjectsInMemory()\r\n    local objTable = {}\r\n    local curObj = {}\r\n\r\n    for guid in pairs(memoryListBackup) do\r\n        curObj = getObjectFromGUID(guid)\r\n        table.insert(objTable, curObj)\r\n    end\r\n\r\n    return objTable\r\n    -- return getAllObjects()\r\nend\r\n\r\n--Creates selection buttons on objects\r\nfunction createButtonsOnAllObjects(move)\r\n    buttonIndexMap = {}\r\n    local howManyButtons = 0\r\n\r\n    local objsToHaveButtons = {}\r\n    if move == true then\r\n        objsToHaveButtons = getAllObjectsInMemory()\r\n    else\r\n        objsToHaveButtons = getAllObjects()\r\n    end\r\n\r\n    for _, obj in ipairs(objsToHaveButtons) do\r\n        if obj ~= self then\r\n            --On a normal bag, the button positions aren't the same size as the bag.\r\n            globalScaleFactor = 1 * 1/self.getScale().x\r\n            --Super sweet math to set button positions\r\n            local selfPos = self.getPosition()\r\n            local objPos = obj.getPosition()\r\n            local deltaPos = findOffsetDistance(selfPos, objPos, obj)\r\n            local objPos = rotateLocalCoordinates(deltaPos, self)\r\n            objPos.x = -objPos.x * globalScaleFactor\r\n            objPos.y = objPos.y * globalScaleFactor +2\r\n            objPos.z = objPos.z * globalScaleFactor\r\n            --Workaround for custom PDFs\r\n            if obj.Book then\r\n                objPos.y = objPos.y + 0.5\r\n            end\r\n            --Offset rotation of bag\r\n            local rot = self.getRotation()\r\n            rot.y = -rot.y + 180\r\n            --Create function\r\n            local funcName = \"selectButton_\" .. howManyButtons\r\n            local func = function() buttonClick_selection(obj, move) end\r\n            local color = {0.75,0.25,0.25,0.6}\r\n            local colorMove = {0,0,1,0.6}\r\n            if move == true then\r\n                color = colorMove\r\n            end\r\n            self.setVar(funcName, func)\r\n            self.createButton({\r\n                click_function=funcName, function_owner=self,\r\n                position=objPos, rotation=rot, height=1000, width=1000,\r\n                color=color,\r\n            })\r\n            buttonIndexMap[obj.getGUID()] = howManyButtons\r\n            howManyButtons = howManyButtons + 1\r\n        end\r\n    end\r\nend\r\n\r\n--Creates submit and cancel buttons\r\nfunction createSetupActionButtons(move)\r\n    self.createButton({\r\n       label=\"Annuler\", click_function=\"buttonClick_cancel\", function_owner=self,\r\n       position={-1.15,0.3,2.1}, rotation={0,0,0}, height=350, width=1100,\r\n       font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n\r\n    self.createButton({\r\n      label=\"Valider\", click_function=\"buttonClick_submit\", function_owner=self,\r\n      position={-1.15,0.3,2.8}, rotation={0,0,0}, height=350, width=1100,\r\n      font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n\r\n    if move == false then\r\n      self.createButton({\r\n          label=\"Ajouter\", click_function=\"buttonClick_add\", function_owner=self,\r\n          position={1.15,0.3,2.1}, rotation={0,0,0}, height=350, width=1100,\r\n          font_size=250, color={0,0,0}, font_color={0.25,1,0.25}\r\n        })\r\n\r\n        self.createButton({\r\n            label=\"Sélection\", click_function=\"editDragSelection\", function_owner=self,\r\n            position={-1.15,0.3,3.5}, rotation={0,0,0}, height=350, width=1100,\r\n            font_size=250, color={0,0,0}, font_color={1,1,1}\r\n        })\r\n\r\n        if fresh == false then\r\n            self.createButton({\r\n                label=\"Mise à Jour\", click_function=\"buttonClick_setNew\", function_owner=self,\r\n                position={1.15,0.3,3.5}, rotation={0,0,0}, height=350, width=1100,\r\n                font_size=180, color={0,0,0}, font_color={0.75,0.75,1}\r\n            })\r\n            self.createButton({\r\n                label=\"Retirer\", click_function=\"buttonClick_remove\", function_owner=self,\r\n                position={1.15,0.3,2.8}, rotation={0,0,0}, height=350, width=1100,\r\n                font_size=250, color={0,0,0}, font_color={1,0.25,0.25}\r\n            })\r\n        end\r\n    end\r\n\r\n    self.createButton({\r\n        label=\"Reset\", click_function=\"buttonClick_reset\", function_owner=self,\r\n        position={0,0.3,-2}, rotation={0,0,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\nend\r\n\r\n\r\n--During Setup\r\n\r\n\r\n--Checks or unchecks buttons\r\nfunction buttonClick_selection(obj, move)\r\n    local index = buttonIndexMap[obj.getGUID()]\r\n    local colorMove = {0,0,1,0.6}\r\n    local color = {0,1,0,0.6}\r\n\r\n    previousGuid = selectedGuid\r\n    selectedGuid = obj.getGUID()\r\n\r\n    theList = memoryList\r\n    if move == true then\r\n        theList = moveList\r\n        if previousGuid ~= nil and previousGuid ~= selectedGuid then\r\n            local prevObj = getObjectFromGUID(previousGuid)\r\n            prevObj.highlightOff()\r\n            self.editButton({index=previousIndex, color=colorMove})\r\n            theList[previousGuid] = nil\r\n        end\r\n        previousIndex = index\r\n    end\r\n\r\n    if theList[selectedGuid] == nil then\r\n        self.editButton({index=index, color=color})\r\n        --Adding pos/rot to memory table\r\n        local pos, rot = obj.getPosition(), obj.getRotation()\r\n        --I need to add it like this or it won't save due to indexing issue\r\n        theList[obj.getGUID()] = {\r\n            pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n            rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n            lock=obj.getLock(),\r\n            tint=obj.getColorTint()\r\n        }\r\n        obj.highlightOn({0,1,0})\r\n    else\r\n        color = {0.75,0.25,0.25,0.6}\r\n        if move == true then\r\n            color = colorMove\r\n        end\r\n        self.editButton({index=index, color=color})\r\n        theList[obj.getGUID()] = nil\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\nfunction editDragSelection(bagObj, player, remove)\r\n    local selectedObjs = Player[player].getSelectedObjects()\r\n    if not remove then\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            --Ignore if already in the memory list, or does not have a button\r\n            if index and not memoryList[obj.getGUID()] then\r\n                self.editButton({index=index, color={0,1,0,0.6}})\r\n                --Adding pos/rot to memory table\r\n                local pos, rot = obj.getPosition(), obj.getRotation()\r\n                --I need to add it like this or it won't save due to indexing issue\r\n                memoryList[obj.getGUID()] = {\r\n                    pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n                    rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n                    lock=obj.getLock(),\r\n                    tint=obj.getColorTint()\r\n                }\r\n                obj.highlightOn({0,1,0})\r\n            end\r\n        end\r\n    else\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            if index and memoryList[obj.getGUID()] then\r\n                color = {0.75,0.25,0.25,0.6}\r\n                self.editButton({index=index, color=color})\r\n                memoryList[obj.getGUID()] = nil\r\n                obj.highlightOff()\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\n--Cancels selection process\r\nfunction buttonClick_cancel()\r\n    memoryList = memoryListBackup\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        createMemoryActionButtons()\r\n    end\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Sélection annulée\", {1,1,1})\r\n    moveGuid = nil\r\nend\r\n\r\n--Saves selections\r\nfunction buttonClick_submit()\r\n    fresh = false\r\n    if next(moveList) ~= nil then\r\n        for guid in pairs(moveList) do\r\n            moveGuid = guid\r\n        end\r\n        if memoryListBackup[moveGuid] == nil then\r\n            broadcastToAll(\"Item selected for moving is not already in memory\", {1, 0.25, 0.25})\r\n        else\r\n            broadcastToAll(\"Moving all items in memory relative to new objects position!\", {0.75, 0.75, 1})\r\n            self.clearButtons()\r\n            self.clearInputs()\r\n            createMemoryActionButtons()\r\n            local count = 0\r\n            for guid in pairs(moveList) do\r\n                moveGuid = guid\r\n                count = count + 1\r\n                local obj = getObjectFromGUID(guid)\r\n                if obj ~= nil then obj.highlightOff() end\r\n            end\r\n            updateMemoryWithMoves()\r\n            updateSave()\r\n            buttonClick_place()\r\n        end\r\n    elseif next(memoryList) == nil and moveGuid == nil then\r\n        memoryList = memoryListBackup\r\n        broadcastToAll(\"No selections made.\", {0.75, 0.25, 0.25})\r\n    end\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    updateSave()\r\n    moveGuid = nil\r\nend\r\n\r\nfunction combineTables(first_table, second_table)\r\n    for k,v in pairs(second_table) do first_table[k] = v end\r\nend\r\n\r\nfunction buttonClick_add()\r\n    fresh = false\r\n    combineTables(memoryList, memoryListBackup)\r\n    broadcastToAll(\"Adding internal bags and selections to existing memory\", {0.25, 0.75, 0.25})\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_remove()\r\n    broadcastToAll(\"Removing Selected Entries From Memory\", {1.0, 0.25, 0.25})\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        memoryListBackup[guid] = nil\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Removed\", {1,1,1})\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_setNew()\r\n    broadcastToAll(\"Setting new position relative to items in memory\", {0.75, 0.75, 1})\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        guid = obj.guid\r\n        if memoryListBackup[guid] ~= nil then\r\n            count = count + 1\r\n            memoryListBackup[guid].pos = obj.getPosition()\r\n            memoryListBackup[guid].rot = obj.getRotation()\r\n            memoryListBackup[guid].lock = obj.getLock()\r\n            memoryListBackup[guid].tint = obj.getColorTint()\r\n        end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\n--Resets bag to starting status\r\nfunction buttonClick_reset()\r\n    fresh = true\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createSetupButton()\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Tool Reset\", {1,1,1})\r\n    updateSave()\r\nend\r\n\r\n\r\n--After Setup\r\n\r\n\r\n--Creates recall and place buttons\r\nfunction createMemoryActionButtons()\r\n    self.createButton({\r\n        label=\"Placer\", click_function=\"buttonClick_place\", function_owner=self,\r\n        position={0,0.3,2}, rotation={0,0,0}, height=350, width=1000,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Ranger\", click_function=\"buttonClick_recall\", function_owner=self,\r\n        position={0,0.3,2.8}, rotation={0,0,0}, height=350, width=1000,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n        position={2,0.3,0}, rotation={0,90,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    ---    self.createButton({\r\n    ---      label=\"Bouger\", click_function=\"buttonClick_transpose\", function_owner=self,\r\n    ---      position={-2,0.3,0.8}, rotation={0,270,0}, height=350, width=800,\r\n    ---      font_size=250, color={0,0,0}, font_color={0.75,0.75,1}\r\n    ---  \r\nend\r\n\r\n--Sends objects from bag/table to their saved position/rotation\r\nfunction buttonClick_place()\r\n    local bagObjList = self.getObjects()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        --If obj is out on the table, move it to the saved pos/rot\r\n        if obj ~= nil then\r\n            obj.setPositionSmooth(entry.pos)\r\n            obj.setRotationSmooth(entry.rot)\r\n            obj.setLock(entry.lock)\r\n            obj.setColorTint(entry.tint)\r\n        else\r\n            --If obj is inside of the bag\r\n            for _, bagObj in ipairs(bagObjList) do\r\n                if bagObj.guid == guid then\r\n                    local item = self.takeObject({\r\n                        guid=guid, position=entry.pos, rotation=entry.rot, smooth=false\r\n                    })\r\n                    item.setLock(entry.lock)\r\n                    item.setColorTint(entry.tint)\r\n                    break\r\n                end\r\n            end\r\n        end\r\n    end\r\n    broadcastToAll(\"Objets placés\", {1,1,1})\r\nend\r\n\r\n--Recalls objects to bag from table\r\nfunction buttonClick_recall()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then self.putObject(obj) end\r\n    end\r\n    broadcastToAll(\"Objets rangés\", {1,1,1})\r\nend\r\n\r\n\r\n--Utility functions\r\n\r\n\r\n--Find delta (difference) between 2 x/y/z coordinates\r\nfunction findOffsetDistance(p1, p2, obj)\r\n    local yOffset = 0\r\n    if obj ~= nil then\r\n        local bounds = obj.getBounds()\r\n        yOffset = (bounds.size.y - bounds.offset.y)\r\n    end\r\n    local deltaPos = {}\r\n    deltaPos.x = (p2.x-p1.x)\r\n    deltaPos.y = (p2.y-p1.y) + yOffset\r\n    deltaPos.z = (p2.z-p1.z)\r\n    return deltaPos\r\nend\r\n\r\n--Used to rotate a set of coordinates by an angle\r\nfunction rotateLocalCoordinates(desiredPos, obj)\r\n    local objPos, objRot = obj.getPosition(), obj.getRotation()\r\n    local angle = math.rad(objRot.y)\r\n    local x = desiredPos.x * math.cos(angle) - desiredPos.z * math.sin(angle)\r\n    local z = desiredPos.x * math.sin(angle) + desiredPos.z * math.cos(angle)\r\n    --return {x=objPos.x+x, y=objPos.y+desiredPos.y, z=objPos.z+z}\r\n    return {x=x, y=desiredPos.y, z=z}\r\nend\r\n\r\nfunction rotateMyCoordinates(desiredPos, obj)\r\n    local angle = math.rad(obj.getRotation().y)\r\n    local x = desiredPos.x * math.sin(angle)\r\n    local z = desiredPos.z * math.cos(angle)\r\n    return {x=x, y=desiredPos.y, z=z}\r\nend\r\n\r\n--Coroutine delay, in seconds\r\nfunction wait(time)\r\n    local start = os.time()\r\n    repeat coroutine.yield(0) until os.time() > start + time\r\nend\r\n\r\n--Duplicates a table (needed to prevent it making reference to the same objects)\r\nfunction duplicateTable(oldTable)\r\n    local newTable = {}\r\n    for k, v in pairs(oldTable) do\r\n        newTable[k] = v\r\n    end\r\n    return newTable\r\nend\r\n\r\n--Moves scripted highlight from all objects\r\nfunction removeAllHighlights()\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\n--Round number (num) to the Nth decimal (dec)\r\nfunction round(num, dec)\r\n    local mult = 10^(dec or 0)\r\n    return math.floor(num * mult + 0.5) / mult\r\nend\r\n\r\n\r\n--[[\r\nThis object provides access to a variable stored on the \"Global script\".\r\nThe variable holds the GUIDs for every Utility Memory Bag in the scene.\r\nExample:\r\n{'805ebd', '35cc21', 'fc8886', 'f50264', '5f5f63'}\r\n--]]\r\nAllMemoryBagsInScene = {\r\n    NAME_OF_GLOBAL_VARIABLE = \"_UtilityMemoryBag_AllMemoryBagsInScene\"\r\n}\r\n\r\nfunction AllMemoryBagsInScene:add(guid)\r\n    local guids = Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\n    table.insert(guids, guid)\r\n    Global.setTable(self.NAME_OF_GLOBAL_VARIABLE, guids)\r\nend\r\n\r\nfunction AllMemoryBagsInScene:getGuidList()\r\n    return Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\nend","LuaScriptState":"{\"ml\":{\"e2882d\":{\"lock\":false,\"pos\":{\"x\":14.5004,\"y\":1.5657,\"z\":9},\"rot\":{\"x\":0.0109,\"y\":180.0111,\"z\":0.005},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}}}}","XmlUI":"","ContainedObjects":[{"GUID":"e2882d","Name":"Card","Transform":{"posX":14.5004015,"posY":1.5674206,"posZ":9.000001,"rotX":0.0109505719,"rotY":180.011063,"rotZ":0.005045332,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"health\": 3,\n  \"id\": \"51014\",\n  \"traits\": \"Humanoid. Abomination.\",\n  \"type\": \"Enemy\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276049,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""}]},{"GUID":"2e37c4","Name":"Card","Transform":{"posX":2.49999976,"posY":1.51970983,"posZ":16,"rotX":0.0108915325,"rotY":180,"rotZ":0.004948272,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Cour de l'Université","Description":"Miskatonic.","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02048\",\n  \"locationBack\": {\n    \"connections\": \"Triangle|Hourglass|Square|Diamond|Circle\",\n    \"icons\": \"Plus\"\n  },\n  \"locationFront\": {\n    \"connections\": \"Triangle|Hourglass|Square|Diamond|Circle\",\n    \"icons\": \"Plus\"\n  },\n  \"traits\": \"Miskatonic.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":114607,"SidewaysCard":false,"CustomDeck":{"1146":{"FaceURL":"https://i.imgur.com/YYrN92e.jpg","BackURL":"https://i.imgur.com/QGyVZgX.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"2efca1","Name":"CardCustom","Transform":{"posX":2.5,"posY":1.517,"posZ":2,"rotX":0.0109,"rotY":180.003,"rotZ":0.0049,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":true,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":1106500,"SidewaysCard":false,"CustomDeck":{"11065":{"FaceURL":"http://cloud-3.steamusercontent.com/ugc/1874087573755654274/E1C516725CC32556A9F093B96384451BDB4AB8D1/","BackURL":"http://cloud-3.steamusercontent.com/ugc/1874087573755654274/E1C516725CC32556A9F093B96384451BDB4AB8D1/","NumWidth":1,"NumHeight":1,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"376181","Name":"Custom_Model","Transform":{"posX":-26.9999,"posY":1.76629984,"posZ":20,"rotX":0.000004401594,"rotY":0.0000857636041,"rotZ":-2.26687192e-7,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Text Tool","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0,"g":0,"b":0,"a":0},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":false,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":false,"Tooltip":false,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomMesh":{"MeshURL":"http://cloud-3.steamusercontent.com/ugc/1478820768302617365/27883B7913E0E69143C3AA03493B7E7C4E8C29C0/","DiffuseURL":"","NormalURL":"","ColliderURL":"","Convex":true,"MaterialIndex":1,"TypeIndex":0,"CastShadows":true},"LuaScript":"-- Code for bag to identify text tool objects\r\nmovableTextTool_cowgoesmoo33 = true\r\n\r\n-- Number of characters before the text box width expands.\r\nEXPAND_INTERVAL = 20\r\n\r\n-- This table controls what is passed between save/load\r\ndata = {}\r\n\r\nfunction onLoad(saved_data)\r\n  if saved_data ~= '' then\r\n    data = JSON.decode(saved_data)\r\n    if data.text ~= '' then\r\n      self.interactable = data.interactable\r\n      staticMode()\r\n      return\r\n    end\r\n  else\r\n    data = {size=200, color=Color(0,0,0), text='', interactable=true,\r\n        enter_to_finish=false, autolock=false, autolift=false,\r\n        hover_height=0.05, box_transparency=1}\r\n  end\r\n\r\n  inputMode()\r\nend\r\n\r\n-- True if in the middle of delay after pressing Enter (with enter_to_finish on)\r\nfinishing = false\r\nfunction input_func(obj, color, input, stillEditing)\r\n  local params = getBox(input)\r\n  if params then\r\n    params.value = input\r\n    self.editInput(params)\r\n  end\r\n\r\n  if not stillEditing then\r\n    data.text = input\r\n    updateState()\r\n    if input ~= '' then staticMode(color) end\r\n  elseif data.enter_to_finish then\r\n    -- If enter is pressed: remove last newline and force finish\r\n    if not finishing and input:sub(-1) == '\\n' then\r\n      finishing = true\r\n      -- Delay to avoid user's Enter keypress being detected (opens chat box)\r\n      Wait.frames(function()\r\n        input = input:sub(1, -2)\r\n        data.text = input\r\n        updateState()\r\n        if input ~= '' then staticMode(color) else inputMode() end\r\n        finishing = false\r\n      end, 10)\r\n    end\r\n  end\r\nend\r\n\r\n-- When the inpupt box appears and lets the player type in it.\r\nfunction inputMode()\r\n  self.clearContextMenu()\r\n  self.clearInputs()\r\n  self.clearButtons()\r\n\r\n  local size = getBox(data.text, true)\r\n\r\n  self.createInput({\r\n    input_function = \"input_func\",\r\n    function_owner = self,\r\n    label          = \"Type Here\",\r\n    alignment      = 3,\r\n    position       = {x=0, y=data.hover_height, z=0},\r\n    rotation       = {0, 180, 0},\r\n    width          = size.width,\r\n    height         = size.height,\r\n    color          = getBackground(data.color),\r\n    font_color     = data.color,\r\n    font_size      = data.size,\r\n    value          = data.text,\r\n  })\r\n\r\n  self.addContextMenuItem('Color: Object Tint', function(color)\r\n    applyMultiple(color, 'setColor')\r\n  end)\r\n  self.addContextMenuItem('Color: Player', function(color)\r\n    applyMultiple(color, 'setColor', {Color.fromString(color)})\r\n  end)\r\n  self.addContextMenuItem('Color: Black', function(color)\r\n    applyMultiple(color, 'setColor', {Color(0,0,0)})\r\n  end)\r\n  self.addContextMenuItem('Color: White', function(color)\r\n    applyMultiple(color, 'setColor', {Color(1,1,1)})\r\n  end)\r\n  self.addContextMenuItem('Size: Increase', function(color)\r\n    applyMultiple(color, 'changeSize', {50})\r\n  end, true)\r\n  self.addContextMenuItem('Size: Decrease', function(color)\r\n    applyMultiple(color, 'changeSize', {-50})\r\n  end, true)\r\nend\r\n\r\n-- When the input box disappears and displays the text.\r\nfunction staticMode(player)\r\n  self.clearContextMenu()\r\n  if data.autolock then\r\n    self.locked = true\r\n  end\r\n  if self.getInputs() and #self.getInputs() ~= 0 then\r\n    self.removeInput(0)\r\n  end\r\n\r\n  -- Clear from selecting player\r\n  if player then\r\n    self.removeFromPlayerSelection(player)\r\n  end\r\n\r\n  local displayText = data.text\r\n  if data.enter_to_finish then\r\n    displayText = displayText:gsub('%[n%]', '\\n')\r\n  end\r\n\r\n  self.createButton({\r\n    label=displayText,\r\n    click_function=\"none\",\r\n    function_owner=self,\r\n    position={0,data.hover_height,0}, rotation={0,180,0}, height=0, width=0,\r\n    font_color=data.color, font_size=data.size\r\n  })\r\n\r\n  self.addContextMenuItem('Edit Text', function(color)\r\n    self.removeFromPlayerSelection(color)\r\n    inputMode()\r\n  end)\r\n  self.addContextMenuItem('Clear', function(color)\r\n    applyMultiple(color, 'clear', _, true)\r\n  end)\r\n  self.addContextMenuItem('Color: Object Tint', function(color)\r\n    applyMultiple(color, 'setColor')\r\n  end)\r\n  self.addContextMenuItem('Color: Player', function(color)\r\n    applyMultiple(color, 'setColor', {Color.fromString(color)})\r\n  end)\r\n  self.addContextMenuItem('Color: Black', function(color)\r\n    applyMultiple(color, 'setColor', {Color(0,0,0)})\r\n  end)\r\n  self.addContextMenuItem('Color: White', function(color)\r\n    applyMultiple(color, 'setColor', {Color(1,1,1)})\r\n  end)\r\n  self.addContextMenuItem('Size: Increase', function(color)\r\n    applyMultiple(color, 'changeSize', {50})\r\n  end, true)\r\n  self.addContextMenuItem('Size: Decrease', function(color)\r\n    applyMultiple(color, 'changeSize', {-50})\r\n  end, true)\r\n  self.addContextMenuItem('Permanently Attach', attemptAttach)\r\n  self.addContextMenuItem('Permalock', function(color)\r\n    applyMultiple(color, 'permalock', _, true)\r\n  end)\r\nend\r\n\r\nfunction changeSize(params)\r\n  local delta = params[1]\r\n  local newSize = data.size + delta\r\n  if newSize > 800  or newSize < 50 then\r\n    return\r\n  end\r\n  data.size = newSize\r\n  updateState()\r\n  if self.getButtons() and #self.getButtons() ~= 0 then\r\n    self.editButton({font_size=data.size})\r\n  else\r\n    local size = getBox(data.text, true)\r\n    self.editInput({width=size.width, height=size.height, font_size=data.size})\r\n  end\r\nend\r\n\r\nfunction setColor(params)\r\n  if params and params[1] then\r\n    data.color = params[1]\r\n  else\r\n    data.color = self.getColorTint():setAt('a', 1) -- Take on color of object tint\r\n  end\r\n  updateState()\r\n  if self.getButtons() and #self.getButtons() ~= 0 then\r\n    self.editButton({font_color=data.color})\r\n  else\r\n    self.editInput({font_color=data.color, color=getBackground(data.color)})\r\n  end\r\nend\r\n\r\nfunction getBackground(color) --determines whether to use black or white depending on luminance\r\n  local r,g,b = Color(color):get()\r\n\r\n  local lum = 0.2126*r + 0.7152*g + 0.0722*b\r\n  if lum > 0.75 then\r\n    return {0.2,0.2,0.2, data.box_transparency}\r\n  else\r\n    return {1,1,1, data.box_transparency}\r\n  end\r\nend\r\n\r\nfunction clear()\r\n  data.text = ''\r\n  updateState()\r\n  inputMode()\r\nend\r\n\r\nfunction permalock()\r\n  self.interactable = false\r\n  data.interactable = false\r\n  updateState()\r\nend\r\n\r\nlocal target_script = [[\r\nfunction onLoad(script_state)\r\n  if script_state and script_state ~= '' then\r\n    local state = JSON.decode(script_state)\r\n    for _,entry in ipairs(state) do\r\n      self.createButton(entry)\r\n    end\r\n    self.addContextMenuItem('Clear All Text', function(color)\r\n      self.clearContextMenu()\r\n      self.clearButtons()\r\n      self.script_state = ''\r\n      self.script_code = ''\r\n    end)\r\n  end\r\nend\r\n]]\r\n\r\nfunction attemptAttach(player_color)\r\n  local objs = Player[player_color].getSelectedObjects()\r\n  local attachee\r\n  local attachers = {}\r\n  for _,obj in ipairs(objs) do\r\n    if obj.getVar('movableTextTool_cowgoesmoo33') then\r\n      if obj ~= self then\r\n        table.insert(attachers, obj)\r\n      end\r\n    else\r\n      if attachee then\r\n        broadcastToColor(\"More than one target selected.\", player_color)\r\n        return\r\n      else\r\n        attachee = obj\r\n      end\r\n    end\r\n  end\r\n  if attachee then\r\n    local code = attachee.script_code\r\n    if code and code ~= '' and code ~= target_script then\r\n      broadcastToColor(\"Warning: script on card has been overriden. Rewind time to undo.\", player_color)\r\n    end\r\n    for i,attacher in ipairs(attachers) do\r\n      attacher.call('attach', {target = attachee})\r\n    end\r\n    attach({target = attachee})\r\n    local type, flip = attachee.type, attachee.getRotation().z\r\n    if (type == 'Card' or type == 'Deck') and flip > 175 and flip < 185 then\r\n      broadcastToColor(\"Warning: text will not display if card or deck is facing down.\", player_color)\r\n    end\r\n  else\r\n    broadcastToColor(\"You must have a target object in your selection (using click-and-drag or Ctrl+Click) to use this option.\", player_color)\r\n  end\r\nend\r\n\r\nfunction attach(params)\r\n  local target = params.target\r\n  local displayText = data.text\r\n  if data.enter_to_finish then\r\n    displayText = displayText:gsub('%[n%]', '\\n')\r\n  end\r\n\r\n  local textRotation = self.getRotation():sub(target.getRotation())\r\n    :add(Vector(180, 0, 180))\r\n\r\n  local textPosition = target.positionToLocal(\r\n    self.getPosition():add(Vector(0, data.hover_height, 0))\r\n  )\r\n  textPosition.x = -textPosition.x\r\n\r\n  local textScale = {}\r\n  textScale.x = self.getScale().x / target.getScale().x\r\n  textScale.y = self.getScale().x / target.getScale().y\r\n  textScale.z = self.getScale().x / target.getScale().z\r\n\r\n  local details = {\r\n    label=displayText,\r\n    click_function=\"none\",\r\n    function_owner=nil,\r\n    position=textPosition,\r\n    rotation=textRotation,\r\n    scale=textScale,\r\n    height=0, width=0,\r\n    font_color=data.color, font_size=data.size\r\n  }\r\n\r\n  target.createButton(details)\r\n\r\n  local script_state = target.script_state\r\n  if script_state and script_state ~= '' then\r\n    local state = JSON.decode(script_state)\r\n    table.insert(state, details)\r\n    target.script_state = JSON.encode(state)\r\n  else\r\n    target.script_state = JSON.encode({[1]=details})\r\n  end\r\n\r\n  target.script_code = target_script\r\n\r\n  self.destruct()\r\nend\r\n\r\nfunction applyMultiple(player_color, func_string, params, static_only)\r\n  local objs = Player[player_color].getSelectedObjects()\r\n  for _,obj in ipairs(objs) do\r\n    if obj.getVar('movableTextTool_cowgoesmoo33') then\r\n      if not static_only or obj.call('isStatic') then\r\n        obj.call(func_string, params)\r\n      end\r\n    end\r\n  end\r\nend\r\n\r\nfunction isStatic()\r\n  local input = self.getInputs()\r\n  return not input or #input == 0\r\nend\r\n\r\nfunction getBox(input, force)\r\n  local maxLength, lineCount = EXPAND_INTERVAL, 1\r\n  local lineLength = 0\r\n  for i = 1, #input do\r\n    local c = input:sub(i,i)\r\n    if c == '\\n' then\r\n      lineCount = lineCount + 1\r\n      if lineLength > maxLength then maxLength = (math.floor(lineLength / EXPAND_INTERVAL) + 1) * EXPAND_INTERVAL end\r\n      lineLength = 0\r\n    else\r\n      lineLength = lineLength + 1\r\n    end\r\n  end\r\n  if lineLength > maxLength then maxLength = (math.floor(lineLength / EXPAND_INTERVAL) + 1) * EXPAND_INTERVAL end\r\n\r\n  newWidth = data.size * maxLength * 0.9\r\n  newHeight = data.size * lineCount + 23\r\n\r\n  if force or boxWidth ~= newWidth or boxHeight ~= newHeight then\r\n    boxWidth, boxHeight = newWidth, newHeight\r\n    return {width = boxWidth, height = boxHeight}\r\n  end\r\n  return nil\r\nend\r\n\r\ntemp_lift = nil\r\nfunction onPickUp(player_color)\r\n  if data.autolift then\r\n    local player = Player[player_color]\r\n    temp_lift = player.lift_height\r\n    player.lift_height = 0\r\n  end\r\nend\r\n\r\nfunction onDrop(player_color)\r\n  if data.autolift and temp_lift then\r\n    Player[player_color].lift_height = temp_lift\r\n  end\r\nend\r\n\r\n-- Should be called every time data is modified, allows info to be saved on copy/paste\r\nfunction updateState()\r\n  self.script_state = JSON.encode(data)\r\nend\r\n\r\nfunction onSave()\r\n  self.script_state = JSON.encode(data)\r\n  return self.script_state\r\nend","LuaScriptState":"{\"autolift\":false,\"autolock\":false,\"box_transparency\":1,\"color\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1},\"enter_to_finish\":false,\"hover_height\":0.05,\"interactable\":true,\"size\":200,\"text\":\"Activités extra-scolaire\\nest le premier scénario\"}","XmlUI":""},{"GUID":"427832","Name":"Deck","Transform":{"posX":-25.50283,"posY":1.79585958,"posZ":8.49667,"rotX":-0.0000048161246,"rotY":179.983047,"rotZ":-5.16761034e-8,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":false,"SidewaysCard":false,"DeckIDs":[114603,114611],"CustomDeck":{"1146":{"FaceURL":"https://i.imgur.com/YYrN92e.jpg","BackURL":"https://i.imgur.com/QGyVZgX.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":"","ContainedObjects":[{"GUID":"444795","Name":"Card","Transform":{"posX":-25.50285,"posY":1.87041771,"posZ":8.496653,"rotX":-0.0006897576,"rotY":179.983353,"rotZ":-0.0006458119,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Bureaux des Enseignants","Description":"[La Nuit Vient de Tomber]\nMiskatonic.","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02054\",\n  \"locationBack\": {\n    \"connections\": \"Circle\",\n    \"icons\": \"Tee\",\n    \"uses\": {\n      \"countPerInvestigator\": 2,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    },\n    \"victory\": 1\n  },\n  \"locationFront\": {\n    \"connections\": \"Circle\",\n    \"icons\": \"Tee\"\n  },\n  \"traits\": \"Miskatonic.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":114603,"SidewaysCard":false,"CustomDeck":{"1146":{"FaceURL":"https://i.imgur.com/YYrN92e.jpg","BackURL":"https://i.imgur.com/QGyVZgX.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"118416","Name":"Card","Transform":{"posX":-25.50285,"posY":1.8686552,"posZ":8.496653,"rotX":0.00285493187,"rotY":179.983353,"rotZ":-0.00343424384,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Bureaux des Enseignants","Description":"[Il se Fait Tard]\nMiskatonic.","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02055\",\n  \"locationBack\": {\n    \"connections\": \"Circle\",\n    \"icons\": \"Tee\"\n  },\n  \"locationFront\": {\n    \"connections\": \"Circle\",\n    \"icons\": \"Tee\"\n  },\n  \"traits\": \"Miskatonic.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":114611,"SidewaysCard":false,"CustomDeck":{"1146":{"FaceURL":"https://i.imgur.com/YYrN92e.jpg","BackURL":"https://i.imgur.com/QGyVZgX.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""}]},{"GUID":"44ca63","Name":"Custom_Tile","Transform":{"posX":-3,"posY":1.50591481,"posZ":12.5,"rotX":-0.0011609483,"rotY":60.0000839,"rotZ":359.9881,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/vppt2my.png","ImageSecondaryURL":"https://i.imgur.com/vppt2my.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":"","States":{"2":{"GUID":"44b0c5","Name":"Custom_Tile","Transform":{"posX":-39.7933121,"posY":1.63758957,"posZ":2.038383,"rotX":359.9201,"rotY":269.9961,"rotZ":0.0168742146,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/HyfE8m8.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""},"3":{"GUID":"5b38c6","Name":"Custom_Tile","Transform":{"posX":-38.8217163,"posY":1.99356019,"posZ":0.4159239,"rotX":359.9201,"rotY":272.9828,"rotZ":0.01687373,"scaleX":0.8,"scaleY":1,"scaleZ":0.8},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/dHKBLoD.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""}}},{"GUID":"4badac","Name":"Custom_Tile","Transform":{"posX":8,"posY":1.50563025,"posZ":16,"rotX":0.00494761532,"rotY":90.0000153,"rotZ":359.9891,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/vppt2my.png","ImageSecondaryURL":"https://i.imgur.com/vppt2my.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":"","States":{"2":{"GUID":"44b0c5","Name":"Custom_Tile","Transform":{"posX":-39.7933121,"posY":1.63758957,"posZ":2.038383,"rotX":359.9201,"rotY":269.9961,"rotZ":0.0168742146,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/HyfE8m8.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""},"3":{"GUID":"5b38c6","Name":"Custom_Tile","Transform":{"posX":-38.8217163,"posY":1.99356019,"posZ":0.4159239,"rotX":359.9201,"rotY":272.9828,"rotZ":0.01687373,"scaleX":0.8,"scaleY":1,"scaleZ":0.8},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/dHKBLoD.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""}}},{"GUID":"4ef076","Name":"Custom_Tile","Transform":{"posX":17.5,"posY":1.50480974,"posZ":16,"rotX":0.00494876457,"rotY":90.0050659,"rotZ":359.9891,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/vppt2my.png","ImageSecondaryURL":"https://i.imgur.com/vppt2my.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":"","States":{"2":{"GUID":"4d3553","Name":"Custom_Tile","Transform":{"posX":-17.11995,"posY":1.60650957,"posZ":3.85999179,"rotX":359.9831,"rotY":359.984558,"rotZ":359.920074,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/HyfE8m8.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""},"3":{"GUID":"5b38c6","Name":"Custom_Tile","Transform":{"posX":-17.1199474,"posY":1.60650969,"posZ":3.85999274,"rotX":359.983124,"rotY":359.984467,"rotZ":359.9201,"scaleX":0.8,"scaleY":1,"scaleZ":0.8},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/dHKBLoD.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""}}},{"GUID":"502f4f","Name":"Card","Transform":{"posX":-22.50003,"posY":1.77890611,"posZ":4.499969,"rotX":-0.00000492202025,"rotY":179.968185,"rotZ":-2.37909958e-8,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Dortoirs","Description":"Miskatonic.","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02052\",\n  \"locationBack\": {\n    \"connections\": \"Diamond\",\n    \"icons\": \"SlantedEquals\",\n    \"uses\": {\n      \"countPerInvestigator\": 3,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    },\n    \"victory\": 1\n  },\n  \"locationFront\": {\n    \"connections\": \"Diamond\",\n    \"icons\": \"SlantedEquals\"\n  },\n  \"traits\": \"Miskatonic.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":114602,"SidewaysCard":false,"CustomDeck":{"1146":{"FaceURL":"https://i.imgur.com/YYrN92e.jpg","BackURL":"https://i.imgur.com/QGyVZgX.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"5953bc","Name":"Custom_Tile","Transform":{"posX":-8.500002,"posY":1.50638986,"posZ":12.5,"rotX":0.0108898953,"rotY":180.020447,"rotZ":0.00495934626,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/vppt2my.png","ImageSecondaryURL":"https://i.imgur.com/vppt2my.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":"","States":{"2":{"GUID":"44b0c5","Name":"Custom_Tile","Transform":{"posX":-39.7933121,"posY":1.63758957,"posZ":2.038383,"rotX":359.9201,"rotY":269.9961,"rotZ":0.0168742146,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/HyfE8m8.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""},"3":{"GUID":"5b38c6","Name":"Custom_Tile","Transform":{"posX":-38.8217163,"posY":1.99356019,"posZ":0.4159239,"rotX":359.9201,"rotY":272.9828,"rotZ":0.01687373,"scaleX":0.8,"scaleY":1,"scaleZ":0.8},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/dHKBLoD.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""}}},{"GUID":"5b52fc","Name":"Card","Transform":{"posX":-25.50005,"posY":1.77890611,"posZ":4.49994469,"rotX":-0.000004966204,"rotY":180.001556,"rotZ":6.69221762e-8,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Labo d'Alchimie","Description":"Miskatonic.","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02057\",\n  \"locationBack\": {\n    \"connections\": \"Hourglass\",\n    \"icons\": \"Tilde\"\n  },\n  \"locationFront\": {\n    \"connections\": \"Hourglass\",\n    \"icons\": \"Tilde\"\n  },\n  \"traits\": \"Miskatonic.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":114608,"SidewaysCard":false,"CustomDeck":{"1146":{"FaceURL":"https://i.imgur.com/YYrN92e.jpg","BackURL":"https://i.imgur.com/QGyVZgX.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"6067b3","Name":"Custom_Model","Transform":{"posX":-28.7463913,"posY":1.766299,"posZ":30.0336056,"rotX":0.00000497444762,"rotY":-0.000101231672,"rotZ":1.30815909e-8,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Text Tool","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0,"g":0,"b":0,"a":0},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":false,"Snap":false,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":false,"Tooltip":false,"GridProjection":false,"HideWhenFaceDown":false,"Hands":true,"CustomMesh":{"MeshURL":"http://cloud-3.steamusercontent.com/ugc/1478820768302617365/27883B7913E0E69143C3AA03493B7E7C4E8C29C0/","DiffuseURL":"","NormalURL":"","ColliderURL":"","Convex":true,"MaterialIndex":1,"TypeIndex":0,"CastShadows":true},"LuaScript":"-- Code for bag to identify text tool objects\r\nmovableTextTool_cowgoesmoo33 = true\r\n\r\n-- Number of characters before the text box width expands.\r\nEXPAND_INTERVAL = 20\r\n\r\n-- This table controls what is passed between save/load\r\ndata = {}\r\n\r\nfunction onLoad(saved_data)\r\n  if saved_data ~= '' then\r\n    data = JSON.decode(saved_data)\r\n    if data.text ~= '' then\r\n      self.interactable = data.interactable\r\n      staticMode()\r\n      return\r\n    end\r\n  else\r\n    data = {size=200, color=Color(0,0,0), text='', interactable=true,\r\n        enter_to_finish=false, autolock=false, autolift=false,\r\n        hover_height=0.05, box_transparency=1}\r\n  end\r\n\r\n  inputMode()\r\nend\r\n\r\n-- True if in the middle of delay after pressing Enter (with enter_to_finish on)\r\nfinishing = false\r\nfunction input_func(obj, color, input, stillEditing)\r\n  local params = getBox(input)\r\n  if params then\r\n    params.value = input\r\n    self.editInput(params)\r\n  end\r\n\r\n  if not stillEditing then\r\n    data.text = input\r\n    updateState()\r\n    if input ~= '' then staticMode(color) end\r\n  elseif data.enter_to_finish then\r\n    -- If enter is pressed: remove last newline and force finish\r\n    if not finishing and input:sub(-1) == '\\n' then\r\n      finishing = true\r\n      -- Delay to avoid user's Enter keypress being detected (opens chat box)\r\n      Wait.frames(function()\r\n        input = input:sub(1, -2)\r\n        data.text = input\r\n        updateState()\r\n        if input ~= '' then staticMode(color) else inputMode() end\r\n        finishing = false\r\n      end, 10)\r\n    end\r\n  end\r\nend\r\n\r\n-- When the inpupt box appears and lets the player type in it.\r\nfunction inputMode()\r\n  self.clearContextMenu()\r\n  self.clearInputs()\r\n  self.clearButtons()\r\n\r\n  local size = getBox(data.text, true)\r\n\r\n  self.createInput({\r\n    input_function = \"input_func\",\r\n    function_owner = self,\r\n    label          = \"Type Here\",\r\n    alignment      = 3,\r\n    position       = {x=0, y=data.hover_height, z=0},\r\n    rotation       = {0, 180, 0},\r\n    width          = size.width,\r\n    height         = size.height,\r\n    color          = getBackground(data.color),\r\n    font_color     = data.color,\r\n    font_size      = data.size,\r\n    value          = data.text,\r\n  })\r\n\r\n  self.addContextMenuItem('Color: Object Tint', function(color)\r\n    applyMultiple(color, 'setColor')\r\n  end)\r\n  self.addContextMenuItem('Color: Player', function(color)\r\n    applyMultiple(color, 'setColor', {Color.fromString(color)})\r\n  end)\r\n  self.addContextMenuItem('Color: Black', function(color)\r\n    applyMultiple(color, 'setColor', {Color(0,0,0)})\r\n  end)\r\n  self.addContextMenuItem('Color: White', function(color)\r\n    applyMultiple(color, 'setColor', {Color(1,1,1)})\r\n  end)\r\n  self.addContextMenuItem('Size: Increase', function(color)\r\n    applyMultiple(color, 'changeSize', {50})\r\n  end, true)\r\n  self.addContextMenuItem('Size: Decrease', function(color)\r\n    applyMultiple(color, 'changeSize', {-50})\r\n  end, true)\r\nend\r\n\r\n-- When the input box disappears and displays the text.\r\nfunction staticMode(player)\r\n  self.clearContextMenu()\r\n  if data.autolock then\r\n    self.locked = true\r\n  end\r\n  if self.getInputs() and #self.getInputs() ~= 0 then\r\n    self.removeInput(0)\r\n  end\r\n\r\n  -- Clear from selecting player\r\n  if player then\r\n    self.removeFromPlayerSelection(player)\r\n  end\r\n\r\n  local displayText = data.text\r\n  if data.enter_to_finish then\r\n    displayText = displayText:gsub('%[n%]', '\\n')\r\n  end\r\n\r\n  self.createButton({\r\n    label=displayText,\r\n    click_function=\"none\",\r\n    function_owner=self,\r\n    position={0,data.hover_height,0}, rotation={0,180,0}, height=0, width=0,\r\n    font_color=data.color, font_size=data.size\r\n  })\r\n\r\n  self.addContextMenuItem('Edit Text', function(color)\r\n    self.removeFromPlayerSelection(color)\r\n    inputMode()\r\n  end)\r\n  self.addContextMenuItem('Clear', function(color)\r\n    applyMultiple(color, 'clear', _, true)\r\n  end)\r\n  self.addContextMenuItem('Color: Object Tint', function(color)\r\n    applyMultiple(color, 'setColor')\r\n  end)\r\n  self.addContextMenuItem('Color: Player', function(color)\r\n    applyMultiple(color, 'setColor', {Color.fromString(color)})\r\n  end)\r\n  self.addContextMenuItem('Color: Black', function(color)\r\n    applyMultiple(color, 'setColor', {Color(0,0,0)})\r\n  end)\r\n  self.addContextMenuItem('Color: White', function(color)\r\n    applyMultiple(color, 'setColor', {Color(1,1,1)})\r\n  end)\r\n  self.addContextMenuItem('Size: Increase', function(color)\r\n    applyMultiple(color, 'changeSize', {50})\r\n  end, true)\r\n  self.addContextMenuItem('Size: Decrease', function(color)\r\n    applyMultiple(color, 'changeSize', {-50})\r\n  end, true)\r\n  self.addContextMenuItem('Permanently Attach', attemptAttach)\r\n  self.addContextMenuItem('Permalock', function(color)\r\n    applyMultiple(color, 'permalock', _, true)\r\n  end)\r\nend\r\n\r\nfunction changeSize(params)\r\n  local delta = params[1]\r\n  local newSize = data.size + delta\r\n  if newSize > 800  or newSize < 50 then\r\n    return\r\n  end\r\n  data.size = newSize\r\n  updateState()\r\n  if self.getButtons() and #self.getButtons() ~= 0 then\r\n    self.editButton({font_size=data.size})\r\n  else\r\n    local size = getBox(data.text, true)\r\n    self.editInput({width=size.width, height=size.height, font_size=data.size})\r\n  end\r\nend\r\n\r\nfunction setColor(params)\r\n  if params and params[1] then\r\n    data.color = params[1]\r\n  else\r\n    data.color = self.getColorTint():setAt('a', 1) -- Take on color of object tint\r\n  end\r\n  updateState()\r\n  if self.getButtons() and #self.getButtons() ~= 0 then\r\n    self.editButton({font_color=data.color})\r\n  else\r\n    self.editInput({font_color=data.color, color=getBackground(data.color)})\r\n  end\r\nend\r\n\r\nfunction getBackground(color) --determines whether to use black or white depending on luminance\r\n  local r,g,b = Color(color):get()\r\n\r\n  local lum = 0.2126*r + 0.7152*g + 0.0722*b\r\n  if lum > 0.75 then\r\n    return {0.2,0.2,0.2, data.box_transparency}\r\n  else\r\n    return {1,1,1, data.box_transparency}\r\n  end\r\nend\r\n\r\nfunction clear()\r\n  data.text = ''\r\n  updateState()\r\n  inputMode()\r\nend\r\n\r\nfunction permalock()\r\n  self.interactable = false\r\n  data.interactable = false\r\n  updateState()\r\nend\r\n\r\nlocal target_script = [[\r\nfunction onLoad(script_state)\r\n  if script_state and script_state ~= '' then\r\n    local state = JSON.decode(script_state)\r\n    for _,entry in ipairs(state) do\r\n      self.createButton(entry)\r\n    end\r\n    self.addContextMenuItem('Clear All Text', function(color)\r\n      self.clearContextMenu()\r\n      self.clearButtons()\r\n      self.script_state = ''\r\n      self.script_code = ''\r\n    end)\r\n  end\r\nend\r\n]]\r\n\r\nfunction attemptAttach(player_color)\r\n  local objs = Player[player_color].getSelectedObjects()\r\n  local attachee\r\n  local attachers = {}\r\n  for _,obj in ipairs(objs) do\r\n    if obj.getVar('movableTextTool_cowgoesmoo33') then\r\n      if obj ~= self then\r\n        table.insert(attachers, obj)\r\n      end\r\n    else\r\n      if attachee then\r\n        broadcastToColor(\"More than one target selected.\", player_color)\r\n        return\r\n      else\r\n        attachee = obj\r\n      end\r\n    end\r\n  end\r\n  if attachee then\r\n    local code = attachee.script_code\r\n    if code and code ~= '' and code ~= target_script then\r\n      broadcastToColor(\"Warning: script on card has been overriden. Rewind time to undo.\", player_color)\r\n    end\r\n    for i,attacher in ipairs(attachers) do\r\n      attacher.call('attach', {target = attachee})\r\n    end\r\n    attach({target = attachee})\r\n    local type, flip = attachee.type, attachee.getRotation().z\r\n    if (type == 'Card' or type == 'Deck') and flip > 175 and flip < 185 then\r\n      broadcastToColor(\"Warning: text will not display if card or deck is facing down.\", player_color)\r\n    end\r\n  else\r\n    broadcastToColor(\"You must have a target object in your selection (using click-and-drag or Ctrl+Click) to use this option.\", player_color)\r\n  end\r\nend\r\n\r\nfunction attach(params)\r\n  local target = params.target\r\n  local displayText = data.text\r\n  if data.enter_to_finish then\r\n    displayText = displayText:gsub('%[n%]', '\\n')\r\n  end\r\n\r\n  local textRotation = self.getRotation():sub(target.getRotation())\r\n    :add(Vector(180, 0, 180))\r\n\r\n  local textPosition = target.positionToLocal(\r\n    self.getPosition():add(Vector(0, data.hover_height, 0))\r\n  )\r\n  textPosition.x = -textPosition.x\r\n\r\n  local textScale = {}\r\n  textScale.x = self.getScale().x / target.getScale().x\r\n  textScale.y = self.getScale().x / target.getScale().y\r\n  textScale.z = self.getScale().x / target.getScale().z\r\n\r\n  local details = {\r\n    label=displayText,\r\n    click_function=\"none\",\r\n    function_owner=nil,\r\n    position=textPosition,\r\n    rotation=textRotation,\r\n    scale=textScale,\r\n    height=0, width=0,\r\n    font_color=data.color, font_size=data.size\r\n  }\r\n\r\n  target.createButton(details)\r\n\r\n  local script_state = target.script_state\r\n  if script_state and script_state ~= '' then\r\n    local state = JSON.decode(script_state)\r\n    table.insert(state, details)\r\n    target.script_state = JSON.encode(state)\r\n  else\r\n    target.script_state = JSON.encode({[1]=details})\r\n  end\r\n\r\n  target.script_code = target_script\r\n\r\n  self.destruct()\r\nend\r\n\r\nfunction applyMultiple(player_color, func_string, params, static_only)\r\n  local objs = Player[player_color].getSelectedObjects()\r\n  for _,obj in ipairs(objs) do\r\n    if obj.getVar('movableTextTool_cowgoesmoo33') then\r\n      if not static_only or obj.call('isStatic') then\r\n        obj.call(func_string, params)\r\n      end\r\n    end\r\n  end\r\nend\r\n\r\nfunction isStatic()\r\n  local input = self.getInputs()\r\n  return not input or #input == 0\r\nend\r\n\r\nfunction getBox(input, force)\r\n  local maxLength, lineCount = EXPAND_INTERVAL, 1\r\n  local lineLength = 0\r\n  for i = 1, #input do\r\n    local c = input:sub(i,i)\r\n    if c == '\\n' then\r\n      lineCount = lineCount + 1\r\n      if lineLength > maxLength then maxLength = (math.floor(lineLength / EXPAND_INTERVAL) + 1) * EXPAND_INTERVAL end\r\n      lineLength = 0\r\n    else\r\n      lineLength = lineLength + 1\r\n    end\r\n  end\r\n  if lineLength > maxLength then maxLength = (math.floor(lineLength / EXPAND_INTERVAL) + 1) * EXPAND_INTERVAL end\r\n\r\n  newWidth = data.size * maxLength * 0.9\r\n  newHeight = data.size * lineCount + 23\r\n\r\n  if force or boxWidth ~= newWidth or boxHeight ~= newHeight then\r\n    boxWidth, boxHeight = newWidth, newHeight\r\n    return {width = boxWidth, height = boxHeight}\r\n  end\r\n  return nil\r\nend\r\n\r\ntemp_lift = nil\r\nfunction onPickUp(player_color)\r\n  if data.autolift then\r\n    local player = Player[player_color]\r\n    temp_lift = player.lift_height\r\n    player.lift_height = 0\r\n  end\r\nend\r\n\r\nfunction onDrop(player_color)\r\n  if data.autolift and temp_lift then\r\n    Player[player_color].lift_height = temp_lift\r\n  end\r\nend\r\n\r\n-- Should be called every time data is modified, allows info to be saved on copy/paste\r\nfunction updateState()\r\n  self.script_state = JSON.encode(data)\r\nend\r\n\r\nfunction onSave()\r\n  self.script_state = JSON.encode(data)\r\n  return self.script_state\r\nend","LuaScriptState":"{\"autolift\":false,\"autolock\":false,\"box_transparency\":1,\"color\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1},\"enter_to_finish\":false,\"hover_height\":0.05,\"interactable\":true,\"size\":550,\"text\":\"Hors jeu\"}","XmlUI":""},{"GUID":"6b2b52","Name":"Card","Transform":{"posX":22.32677,"posY":1.5139116,"posZ":-5.494842,"rotX":0.0108914375,"rotY":180.000336,"rotZ":0.00494829332,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Référence","Description":"Activité Extrascolaire","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":114300,"SidewaysCard":false,"CustomDeck":{"1143":{"FaceURL":"https://i.imgur.com/YYrN92e.jpg","BackURL":"https://i.imgur.com/QGyVZgX.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"7234af","Name":"Custom_Tile","Transform":{"posX":2.49999976,"posY":1.50543976,"posZ":12.5,"rotX":0.0108898515,"rotY":180.0205,"rotZ":0.004956567,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/vppt2my.png","ImageSecondaryURL":"https://i.imgur.com/vppt2my.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":"","States":{"2":{"GUID":"44b0c5","Name":"Custom_Tile","Transform":{"posX":-39.7933121,"posY":1.63758957,"posZ":2.038383,"rotX":359.9201,"rotY":269.9961,"rotZ":0.0168742146,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/HyfE8m8.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""},"3":{"GUID":"5b38c6","Name":"Custom_Tile","Transform":{"posX":-38.8217163,"posY":1.99356019,"posZ":0.4159239,"rotX":359.9201,"rotY":272.9828,"rotZ":0.01687373,"scaleX":0.8,"scaleY":1,"scaleZ":0.8},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/dHKBLoD.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""}}},{"GUID":"7705b1","Name":"Custom_Tile","Transform":{"posX":-3.00000143,"posY":1.50658023,"posZ":16,"rotX":0.00494768657,"rotY":89.99994,"rotZ":359.9891,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/vppt2my.png","ImageSecondaryURL":"https://i.imgur.com/vppt2my.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":"","States":{"2":{"GUID":"44b0c5","Name":"Custom_Tile","Transform":{"posX":-39.7933121,"posY":1.63758957,"posZ":2.038383,"rotX":359.9201,"rotY":269.9961,"rotZ":0.0168742146,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/HyfE8m8.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""},"3":{"GUID":"5b38c6","Name":"Custom_Tile","Transform":{"posX":-38.8217163,"posY":1.99356019,"posZ":0.4159239,"rotX":359.9201,"rotY":272.9828,"rotZ":0.01687373,"scaleX":0.8,"scaleY":1,"scaleZ":0.8},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/dHKBLoD.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""}}},{"GUID":"7c1c7f","Name":"Custom_Model_Bag","Transform":{"posX":-31.988308,"posY":1.83530128,"posZ":4.4837904,"rotX":-0.000004200043,"rotY":179.98497,"rotZ":-5.19513961e-8,"scaleX":0.7,"scaleY":0.7,"scaleZ":0.7},"Nickname":"Soutiens/faiblesses d'histoire","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":1,"g":1,"b":1},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"MaterialIndex":-1,"MeshIndex":-1,"CustomMesh":{"MeshURL":"https://pastebin.com/raw/ALrYhQGb","DiffuseURL":"http://cloud-3.steamusercontent.com/ugc/5077277234347423622/F89B4508C6E2782780C2B5593FB68379E0FB2DB6/","NormalURL":"","ColliderURL":"","Convex":true,"MaterialIndex":3,"TypeIndex":6,"CustomShader":{"SpecularColor":{"r":1,"g":1,"b":1},"SpecularIntensity":0,"SpecularSharpness":2,"FresnelStrength":0},"CastShadows":true},"Bag":{"Order":0},"LuaScript":"","LuaScriptState":"{\"ml\":[]}","XmlUI":"","ContainedObjects":[{"GUID":"a9ecc5","Name":"Card","Transform":{"posX":-31.5,"posY":1.93749261,"posZ":4.5,"rotX":0.00006738799,"rotY":180.015671,"rotZ":-0.00000142585532,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Professeur Warren Rice","Description":"Professeur de Langues","GMNotes":"{\n  \"class\": \"Neutral\",\n  \"cost\": 3,\n  \"cycle\": \"Standalone\",\n  \"health\": 2,\n  \"id\": \"02061\",\n  \"intellectIcons\": 1,\n  \"sanity\": 3,\n  \"traits\": \"Ally. Miskatonic.\",\n  \"type\": \"Asset\",\n  \"wildIcons\": 1\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":115114,"SidewaysCard":false,"CustomDeck":{"1151":{"FaceURL":"https://i.imgur.com/YYrN92e.jpg","BackURL":"https://i.imgur.com/QGyVZgX.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"3ebb99","Name":"Card","Transform":{"posX":-32,"posY":1.93749034,"posZ":4,"rotX":0.002953654,"rotY":180.000946,"rotZ":0.0008679912,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"class\": \"Neutral\",\n  \"cost\": 2,\n  \"cycle\": \"Standalone\",\n  \"health\": 2,\n  \"id\": \"02040\",\n  \"sanity\": 2,\n  \"traits\": \"Ally. Miskatonic.\",\n  \"type\": \"Asset\",\n  \"wildIcons\": 2\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":115015,"SidewaysCard":false,"CustomDeck":{"1150":{"FaceURL":"https://i.imgur.com/YYrN92e.jpg","BackURL":"https://i.imgur.com/QGyVZgX.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""}]},{"GUID":"7d1653","Name":"Card","Transform":{"posX":-29.000042,"posY":1.77890575,"posZ":8.499956,"rotX":-0.00000483667964,"rotY":179.991348,"rotZ":8.16432646e-8,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"L'Expérience","Description":"Quelque Chose a Mal Tourné","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"health\": 7,\n  \"id\": \"02058\",\n  \"traits\": \"Monster. Abomination. Elite.\",\n  \"type\": \"Enemy\",\n  \"victory\": 2\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":1134210,"SidewaysCard":false,"CustomDeck":{"11342":{"FaceURL":"https://i.imgur.com/YYrN92e.jpg","BackURL":"https://i.imgur.com/QGyVZgX.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"9265a4","Name":"Custom_Model","Transform":{"posX":-21.4269943,"posY":1.76629984,"posZ":20.1442051,"rotX":0.000004746671,"rotY":0.006328265,"rotZ":4.546061e-7,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Text Tool","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0,"g":0,"b":0,"a":0},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":false,"Snap":false,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":false,"Tooltip":false,"GridProjection":false,"HideWhenFaceDown":false,"Hands":true,"CustomMesh":{"MeshURL":"http://cloud-3.steamusercontent.com/ugc/1478820768302617365/27883B7913E0E69143C3AA03493B7E7C4E8C29C0/","DiffuseURL":"","NormalURL":"","ColliderURL":"","Convex":true,"MaterialIndex":1,"TypeIndex":0,"CastShadows":true},"LuaScript":"-- Code for bag to identify text tool objects\r\nmovableTextTool_cowgoesmoo33 = true\r\n\r\n-- Number of characters before the text box width expands.\r\nEXPAND_INTERVAL = 20\r\n\r\n-- This table controls what is passed between save/load\r\ndata = {}\r\n\r\nfunction onLoad(saved_data)\r\n  if saved_data ~= '' then\r\n    data = JSON.decode(saved_data)\r\n    if data.text ~= '' then\r\n      self.interactable = data.interactable\r\n      staticMode()\r\n      return\r\n    end\r\n  else\r\n    data = {size=200, color=Color(0,0,0), text='', interactable=true,\r\n        enter_to_finish=false, autolock=false, autolift=false,\r\n        hover_height=0.05, box_transparency=1}\r\n  end\r\n\r\n  inputMode()\r\nend\r\n\r\n-- True if in the middle of delay after pressing Enter (with enter_to_finish on)\r\nfinishing = false\r\nfunction input_func(obj, color, input, stillEditing)\r\n  local params = getBox(input)\r\n  if params then\r\n    params.value = input\r\n    self.editInput(params)\r\n  end\r\n\r\n  if not stillEditing then\r\n    data.text = input\r\n    updateState()\r\n    if input ~= '' then staticMode(color) end\r\n  elseif data.enter_to_finish then\r\n    -- If enter is pressed: remove last newline and force finish\r\n    if not finishing and input:sub(-1) == '\\n' then\r\n      finishing = true\r\n      -- Delay to avoid user's Enter keypress being detected (opens chat box)\r\n      Wait.frames(function()\r\n        input = input:sub(1, -2)\r\n        data.text = input\r\n        updateState()\r\n        if input ~= '' then staticMode(color) else inputMode() end\r\n        finishing = false\r\n      end, 10)\r\n    end\r\n  end\r\nend\r\n\r\n-- When the inpupt box appears and lets the player type in it.\r\nfunction inputMode()\r\n  self.clearContextMenu()\r\n  self.clearInputs()\r\n  self.clearButtons()\r\n\r\n  local size = getBox(data.text, true)\r\n\r\n  self.createInput({\r\n    input_function = \"input_func\",\r\n    function_owner = self,\r\n    label          = \"Type Here\",\r\n    alignment      = 3,\r\n    position       = {x=0, y=data.hover_height, z=0},\r\n    rotation       = {0, 180, 0},\r\n    width          = size.width,\r\n    height         = size.height,\r\n    color          = getBackground(data.color),\r\n    font_color     = data.color,\r\n    font_size      = data.size,\r\n    value          = data.text,\r\n  })\r\n\r\n  self.addContextMenuItem('Color: Object Tint', function(color)\r\n    applyMultiple(color, 'setColor')\r\n  end)\r\n  self.addContextMenuItem('Color: Player', function(color)\r\n    applyMultiple(color, 'setColor', {Color.fromString(color)})\r\n  end)\r\n  self.addContextMenuItem('Color: Black', function(color)\r\n    applyMultiple(color, 'setColor', {Color(0,0,0)})\r\n  end)\r\n  self.addContextMenuItem('Color: White', function(color)\r\n    applyMultiple(color, 'setColor', {Color(1,1,1)})\r\n  end)\r\n  self.addContextMenuItem('Size: Increase', function(color)\r\n    applyMultiple(color, 'changeSize', {50})\r\n  end, true)\r\n  self.addContextMenuItem('Size: Decrease', function(color)\r\n    applyMultiple(color, 'changeSize', {-50})\r\n  end, true)\r\nend\r\n\r\n-- When the input box disappears and displays the text.\r\nfunction staticMode(player)\r\n  self.clearContextMenu()\r\n  if data.autolock then\r\n    self.locked = true\r\n  end\r\n  if self.getInputs() and #self.getInputs() ~= 0 then\r\n    self.removeInput(0)\r\n  end\r\n\r\n  -- Clear from selecting player\r\n  if player then\r\n    self.removeFromPlayerSelection(player)\r\n  end\r\n\r\n  local displayText = data.text\r\n  if data.enter_to_finish then\r\n    displayText = displayText:gsub('%[n%]', '\\n')\r\n  end\r\n\r\n  self.createButton({\r\n    label=displayText,\r\n    click_function=\"none\",\r\n    function_owner=self,\r\n    position={0,data.hover_height,0}, rotation={0,180,0}, height=0, width=0,\r\n    font_color=data.color, font_size=data.size\r\n  })\r\n\r\n  self.addContextMenuItem('Edit Text', function(color)\r\n    self.removeFromPlayerSelection(color)\r\n    inputMode()\r\n  end)\r\n  self.addContextMenuItem('Clear', function(color)\r\n    applyMultiple(color, 'clear', _, true)\r\n  end)\r\n  self.addContextMenuItem('Color: Object Tint', function(color)\r\n    applyMultiple(color, 'setColor')\r\n  end)\r\n  self.addContextMenuItem('Color: Player', function(color)\r\n    applyMultiple(color, 'setColor', {Color.fromString(color)})\r\n  end)\r\n  self.addContextMenuItem('Color: Black', function(color)\r\n    applyMultiple(color, 'setColor', {Color(0,0,0)})\r\n  end)\r\n  self.addContextMenuItem('Color: White', function(color)\r\n    applyMultiple(color, 'setColor', {Color(1,1,1)})\r\n  end)\r\n  self.addContextMenuItem('Size: Increase', function(color)\r\n    applyMultiple(color, 'changeSize', {50})\r\n  end, true)\r\n  self.addContextMenuItem('Size: Decrease', function(color)\r\n    applyMultiple(color, 'changeSize', {-50})\r\n  end, true)\r\n  self.addContextMenuItem('Permanently Attach', attemptAttach)\r\n  self.addContextMenuItem('Permalock', function(color)\r\n    applyMultiple(color, 'permalock', _, true)\r\n  end)\r\nend\r\n\r\nfunction changeSize(params)\r\n  local delta = params[1]\r\n  local newSize = data.size + delta\r\n  if newSize > 800  or newSize < 50 then\r\n    return\r\n  end\r\n  data.size = newSize\r\n  updateState()\r\n  if self.getButtons() and #self.getButtons() ~= 0 then\r\n    self.editButton({font_size=data.size})\r\n  else\r\n    local size = getBox(data.text, true)\r\n    self.editInput({width=size.width, height=size.height, font_size=data.size})\r\n  end\r\nend\r\n\r\nfunction setColor(params)\r\n  if params and params[1] then\r\n    data.color = params[1]\r\n  else\r\n    data.color = self.getColorTint():setAt('a', 1) -- Take on color of object tint\r\n  end\r\n  updateState()\r\n  if self.getButtons() and #self.getButtons() ~= 0 then\r\n    self.editButton({font_color=data.color})\r\n  else\r\n    self.editInput({font_color=data.color, color=getBackground(data.color)})\r\n  end\r\nend\r\n\r\nfunction getBackground(color) --determines whether to use black or white depending on luminance\r\n  local r,g,b = Color(color):get()\r\n\r\n  local lum = 0.2126*r + 0.7152*g + 0.0722*b\r\n  if lum > 0.75 then\r\n    return {0.2,0.2,0.2, data.box_transparency}\r\n  else\r\n    return {1,1,1, data.box_transparency}\r\n  end\r\nend\r\n\r\nfunction clear()\r\n  data.text = ''\r\n  updateState()\r\n  inputMode()\r\nend\r\n\r\nfunction permalock()\r\n  self.interactable = false\r\n  data.interactable = false\r\n  updateState()\r\nend\r\n\r\nlocal target_script = [[\r\nfunction onLoad(script_state)\r\n  if script_state and script_state ~= '' then\r\n    local state = JSON.decode(script_state)\r\n    for _,entry in ipairs(state) do\r\n      self.createButton(entry)\r\n    end\r\n    self.addContextMenuItem('Clear All Text', function(color)\r\n      self.clearContextMenu()\r\n      self.clearButtons()\r\n      self.script_state = ''\r\n      self.script_code = ''\r\n    end)\r\n  end\r\nend\r\n]]\r\n\r\nfunction attemptAttach(player_color)\r\n  local objs = Player[player_color].getSelectedObjects()\r\n  local attachee\r\n  local attachers = {}\r\n  for _,obj in ipairs(objs) do\r\n    if obj.getVar('movableTextTool_cowgoesmoo33') then\r\n      if obj ~= self then\r\n        table.insert(attachers, obj)\r\n      end\r\n    else\r\n      if attachee then\r\n        broadcastToColor(\"More than one target selected.\", player_color)\r\n        return\r\n      else\r\n        attachee = obj\r\n      end\r\n    end\r\n  end\r\n  if attachee then\r\n    local code = attachee.script_code\r\n    if code and code ~= '' and code ~= target_script then\r\n      broadcastToColor(\"Warning: script on card has been overriden. Rewind time to undo.\", player_color)\r\n    end\r\n    for i,attacher in ipairs(attachers) do\r\n      attacher.call('attach', {target = attachee})\r\n    end\r\n    attach({target = attachee})\r\n    local type, flip = attachee.type, attachee.getRotation().z\r\n    if (type == 'Card' or type == 'Deck') and flip > 175 and flip < 185 then\r\n      broadcastToColor(\"Warning: text will not display if card or deck is facing down.\", player_color)\r\n    end\r\n  else\r\n    broadcastToColor(\"You must have a target object in your selection (using click-and-drag or Ctrl+Click) to use this option.\", player_color)\r\n  end\r\nend\r\n\r\nfunction attach(params)\r\n  local target = params.target\r\n  local displayText = data.text\r\n  if data.enter_to_finish then\r\n    displayText = displayText:gsub('%[n%]', '\\n')\r\n  end\r\n\r\n  local textRotation = self.getRotation():sub(target.getRotation())\r\n    :add(Vector(180, 0, 180))\r\n\r\n  local textPosition = target.positionToLocal(\r\n    self.getPosition():add(Vector(0, data.hover_height, 0))\r\n  )\r\n  textPosition.x = -textPosition.x\r\n\r\n  local textScale = {}\r\n  textScale.x = self.getScale().x / target.getScale().x\r\n  textScale.y = self.getScale().x / target.getScale().y\r\n  textScale.z = self.getScale().x / target.getScale().z\r\n\r\n  local details = {\r\n    label=displayText,\r\n    click_function=\"none\",\r\n    function_owner=nil,\r\n    position=textPosition,\r\n    rotation=textRotation,\r\n    scale=textScale,\r\n    height=0, width=0,\r\n    font_color=data.color, font_size=data.size\r\n  }\r\n\r\n  target.createButton(details)\r\n\r\n  local script_state = target.script_state\r\n  if script_state and script_state ~= '' then\r\n    local state = JSON.decode(script_state)\r\n    table.insert(state, details)\r\n    target.script_state = JSON.encode(state)\r\n  else\r\n    target.script_state = JSON.encode({[1]=details})\r\n  end\r\n\r\n  target.script_code = target_script\r\n\r\n  self.destruct()\r\nend\r\n\r\nfunction applyMultiple(player_color, func_string, params, static_only)\r\n  local objs = Player[player_color].getSelectedObjects()\r\n  for _,obj in ipairs(objs) do\r\n    if obj.getVar('movableTextTool_cowgoesmoo33') then\r\n      if not static_only or obj.call('isStatic') then\r\n        obj.call(func_string, params)\r\n      end\r\n    end\r\n  end\r\nend\r\n\r\nfunction isStatic()\r\n  local input = self.getInputs()\r\n  return not input or #input == 0\r\nend\r\n\r\nfunction getBox(input, force)\r\n  local maxLength, lineCount = EXPAND_INTERVAL, 1\r\n  local lineLength = 0\r\n  for i = 1, #input do\r\n    local c = input:sub(i,i)\r\n    if c == '\\n' then\r\n      lineCount = lineCount + 1\r\n      if lineLength > maxLength then maxLength = (math.floor(lineLength / EXPAND_INTERVAL) + 1) * EXPAND_INTERVAL end\r\n      lineLength = 0\r\n    else\r\n      lineLength = lineLength + 1\r\n    end\r\n  end\r\n  if lineLength > maxLength then maxLength = (math.floor(lineLength / EXPAND_INTERVAL) + 1) * EXPAND_INTERVAL end\r\n\r\n  newWidth = data.size * maxLength * 0.9\r\n  newHeight = data.size * lineCount + 23\r\n\r\n  if force or boxWidth ~= newWidth or boxHeight ~= newHeight then\r\n    boxWidth, boxHeight = newWidth, newHeight\r\n    return {width = boxWidth, height = boxHeight}\r\n  end\r\n  return nil\r\nend\r\n\r\ntemp_lift = nil\r\nfunction onPickUp(player_color)\r\n  if data.autolift then\r\n    local player = Player[player_color]\r\n    temp_lift = player.lift_height\r\n    player.lift_height = 0\r\n  end\r\nend\r\n\r\nfunction onDrop(player_color)\r\n  if data.autolift and temp_lift then\r\n    Player[player_color].lift_height = temp_lift\r\n  end\r\nend\r\n\r\n-- Should be called every time data is modified, allows info to be saved on copy/paste\r\nfunction updateState()\r\n  self.script_state = JSON.encode(data)\r\nend\r\n\r\nfunction onSave()\r\n  self.script_state = JSON.encode(data)\r\n  return self.script_state\r\nend","LuaScriptState":"{\"autolift\":false,\"autolock\":false,\"box_transparency\":1,\"color\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1},\"enter_to_finish\":false,\"hover_height\":0.05,\"interactable\":true,\"size\":200,\"text\":\"Blibliothèque ou observatoire\"}","XmlUI":""},{"GUID":"94d30e","Name":"CardCustom","Transform":{"posX":21,"posY":1.5181,"posZ":16,"rotX":0.0109,"rotY":180,"rotZ":0.0049,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":true,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":1131900,"SidewaysCard":false,"CustomDeck":{"11319":{"FaceURL":"http://cloud-3.steamusercontent.com/ugc/1874087573755659049/9AF2DF88904D62C086CAAA295BE046CBE8E65415/","BackURL":"http://cloud-3.steamusercontent.com/ugc/1874087573755659049/9AF2DF88904D62C086CAAA295BE046CBE8E65415/","NumWidth":1,"NumHeight":1,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"95e2ed","Name":"Custom_Tile","Transform":{"posX":8,"posY":1.50496483,"posZ":12.5,"rotX":0.009731233,"rotY":120.000008,"rotZ":359.993042,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/vppt2my.png","ImageSecondaryURL":"https://i.imgur.com/vppt2my.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":"","States":{"2":{"GUID":"44b0c5","Name":"Custom_Tile","Transform":{"posX":-39.7933121,"posY":1.63758957,"posZ":2.038383,"rotX":359.9201,"rotY":269.9961,"rotZ":0.0168742146,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/HyfE8m8.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""},"3":{"GUID":"5b38c6","Name":"Custom_Tile","Transform":{"posX":-38.8217163,"posY":1.99356019,"posZ":0.4159239,"rotX":359.9201,"rotY":272.9828,"rotZ":0.01687373,"scaleX":0.8,"scaleY":1,"scaleZ":0.8},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/dHKBLoD.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""}}},{"GUID":"98e04b","Name":"Deck","Transform":{"posX":17.5000019,"posY":1.53600025,"posZ":-5.99989939,"rotX":0.004949004,"rotY":90.00507,"rotZ":359.9891,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Deck Acte","Description":"Activité Extrascolaire","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":false,"SidewaysCard":true,"DeckIDs":[114505,114504,114503],"CustomDeck":{"1145":{"FaceURL":"https://i.imgur.com/gPqLiw9.jpg","BackURL":"https://i.imgur.com/6gw6nAo.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":"","ContainedObjects":[{"GUID":"59bc56","Name":"Card","Transform":{"posX":17.5000057,"posY":1.60671091,"posZ":-5.99989557,"rotX":0.004351167,"rotY":90.00475,"rotZ":359.988525,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"La Sécurité du Campus","Description":"Acte 3a","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02047\",\n  \"type\": \"Act\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":114505,"SidewaysCard":true,"CustomDeck":{"1145":{"FaceURL":"https://i.imgur.com/gPqLiw9.jpg","BackURL":"https://i.imgur.com/6gw6nAo.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"a9e994","Name":"Card","Transform":{"posX":17.5000057,"posY":1.645699,"posZ":-5.999895,"rotX":0.00495267,"rotY":90.00475,"rotZ":359.989,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Localiser Rice","Description":"Acte 2a","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02046\",\n  \"type\": \"Act\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":114504,"SidewaysCard":true,"CustomDeck":{"1145":{"FaceURL":"https://i.imgur.com/gPqLiw9.jpg","BackURL":"https://i.imgur.com/6gw6nAo.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"75b7c8","Name":"Card","Transform":{"posX":17.5000114,"posY":1.612646,"posZ":-5.999905,"rotX":0.007840258,"rotY":90.00475,"rotZ":359.985718,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Après des Heures","Description":"Acte 1a","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"clueThresholdPerInvestigator\": 3,\n  \"cycle\": \"Standalone\",\n  \"id\": \"02045\",\n  \"type\": \"Act\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":114503,"SidewaysCard":true,"CustomDeck":{"1145":{"FaceURL":"https://i.imgur.com/gPqLiw9.jpg","BackURL":"https://i.imgur.com/6gw6nAo.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""}]},{"GUID":"a34bbd","Name":"Custom_Model","Transform":{"posX":-32,"posY":1.76629984,"posZ":20,"rotX":0.000005050012,"rotY":-0.0002000675,"rotZ":7.66650956e-8,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Text Tool","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0,"g":0,"b":0,"a":0},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":false,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":false,"Tooltip":false,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomMesh":{"MeshURL":"http://cloud-3.steamusercontent.com/ugc/1478820768302617365/27883B7913E0E69143C3AA03493B7E7C4E8C29C0/","DiffuseURL":"","NormalURL":"","ColliderURL":"","Convex":true,"MaterialIndex":1,"TypeIndex":0,"CastShadows":true},"LuaScript":"-- Code for bag to identify text tool objects\r\nmovableTextTool_cowgoesmoo33 = true\r\n\r\n-- Number of characters before the text box width expands.\r\nEXPAND_INTERVAL = 20\r\n\r\n-- This table controls what is passed between save/load\r\ndata = {}\r\n\r\nfunction onLoad(saved_data)\r\n  if saved_data ~= '' then\r\n    data = JSON.decode(saved_data)\r\n    if data.text ~= '' then\r\n      self.interactable = data.interactable\r\n      staticMode()\r\n      return\r\n    end\r\n  else\r\n    data = {size=200, color=Color(0,0,0), text='', interactable=true,\r\n        enter_to_finish=false, autolock=false, autolift=false,\r\n        hover_height=0.05, box_transparency=1}\r\n  end\r\n\r\n  inputMode()\r\nend\r\n\r\n-- True if in the middle of delay after pressing Enter (with enter_to_finish on)\r\nfinishing = false\r\nfunction input_func(obj, color, input, stillEditing)\r\n  local params = getBox(input)\r\n  if params then\r\n    params.value = input\r\n    self.editInput(params)\r\n  end\r\n\r\n  if not stillEditing then\r\n    data.text = input\r\n    updateState()\r\n    if input ~= '' then staticMode(color) end\r\n  elseif data.enter_to_finish then\r\n    -- If enter is pressed: remove last newline and force finish\r\n    if not finishing and input:sub(-1) == '\\n' then\r\n      finishing = true\r\n      -- Delay to avoid user's Enter keypress being detected (opens chat box)\r\n      Wait.frames(function()\r\n        input = input:sub(1, -2)\r\n        data.text = input\r\n        updateState()\r\n        if input ~= '' then staticMode(color) else inputMode() end\r\n        finishing = false\r\n      end, 10)\r\n    end\r\n  end\r\nend\r\n\r\n-- When the inpupt box appears and lets the player type in it.\r\nfunction inputMode()\r\n  self.clearContextMenu()\r\n  self.clearInputs()\r\n  self.clearButtons()\r\n\r\n  local size = getBox(data.text, true)\r\n\r\n  self.createInput({\r\n    input_function = \"input_func\",\r\n    function_owner = self,\r\n    label          = \"Type Here\",\r\n    alignment      = 3,\r\n    position       = {x=0, y=data.hover_height, z=0},\r\n    rotation       = {0, 180, 0},\r\n    width          = size.width,\r\n    height         = size.height,\r\n    color          = getBackground(data.color),\r\n    font_color     = data.color,\r\n    font_size      = data.size,\r\n    value          = data.text,\r\n  })\r\n\r\n  self.addContextMenuItem('Color: Object Tint', function(color)\r\n    applyMultiple(color, 'setColor')\r\n  end)\r\n  self.addContextMenuItem('Color: Player', function(color)\r\n    applyMultiple(color, 'setColor', {Color.fromString(color)})\r\n  end)\r\n  self.addContextMenuItem('Color: Black', function(color)\r\n    applyMultiple(color, 'setColor', {Color(0,0,0)})\r\n  end)\r\n  self.addContextMenuItem('Color: White', function(color)\r\n    applyMultiple(color, 'setColor', {Color(1,1,1)})\r\n  end)\r\n  self.addContextMenuItem('Size: Increase', function(color)\r\n    applyMultiple(color, 'changeSize', {50})\r\n  end, true)\r\n  self.addContextMenuItem('Size: Decrease', function(color)\r\n    applyMultiple(color, 'changeSize', {-50})\r\n  end, true)\r\nend\r\n\r\n-- When the input box disappears and displays the text.\r\nfunction staticMode(player)\r\n  self.clearContextMenu()\r\n  if data.autolock then\r\n    self.locked = true\r\n  end\r\n  if self.getInputs() and #self.getInputs() ~= 0 then\r\n    self.removeInput(0)\r\n  end\r\n\r\n  -- Clear from selecting player\r\n  if player then\r\n    self.removeFromPlayerSelection(player)\r\n  end\r\n\r\n  local displayText = data.text\r\n  if data.enter_to_finish then\r\n    displayText = displayText:gsub('%[n%]', '\\n')\r\n  end\r\n\r\n  self.createButton({\r\n    label=displayText,\r\n    click_function=\"none\",\r\n    function_owner=self,\r\n    position={0,data.hover_height,0}, rotation={0,180,0}, height=0, width=0,\r\n    font_color=data.color, font_size=data.size\r\n  })\r\n\r\n  self.addContextMenuItem('Edit Text', function(color)\r\n    self.removeFromPlayerSelection(color)\r\n    inputMode()\r\n  end)\r\n  self.addContextMenuItem('Clear', function(color)\r\n    applyMultiple(color, 'clear', _, true)\r\n  end)\r\n  self.addContextMenuItem('Color: Object Tint', function(color)\r\n    applyMultiple(color, 'setColor')\r\n  end)\r\n  self.addContextMenuItem('Color: Player', function(color)\r\n    applyMultiple(color, 'setColor', {Color.fromString(color)})\r\n  end)\r\n  self.addContextMenuItem('Color: Black', function(color)\r\n    applyMultiple(color, 'setColor', {Color(0,0,0)})\r\n  end)\r\n  self.addContextMenuItem('Color: White', function(color)\r\n    applyMultiple(color, 'setColor', {Color(1,1,1)})\r\n  end)\r\n  self.addContextMenuItem('Size: Increase', function(color)\r\n    applyMultiple(color, 'changeSize', {50})\r\n  end, true)\r\n  self.addContextMenuItem('Size: Decrease', function(color)\r\n    applyMultiple(color, 'changeSize', {-50})\r\n  end, true)\r\n  self.addContextMenuItem('Permanently Attach', attemptAttach)\r\n  self.addContextMenuItem('Permalock', function(color)\r\n    applyMultiple(color, 'permalock', _, true)\r\n  end)\r\nend\r\n\r\nfunction changeSize(params)\r\n  local delta = params[1]\r\n  local newSize = data.size + delta\r\n  if newSize > 800  or newSize < 50 then\r\n    return\r\n  end\r\n  data.size = newSize\r\n  updateState()\r\n  if self.getButtons() and #self.getButtons() ~= 0 then\r\n    self.editButton({font_size=data.size})\r\n  else\r\n    local size = getBox(data.text, true)\r\n    self.editInput({width=size.width, height=size.height, font_size=data.size})\r\n  end\r\nend\r\n\r\nfunction setColor(params)\r\n  if params and params[1] then\r\n    data.color = params[1]\r\n  else\r\n    data.color = self.getColorTint():setAt('a', 1) -- Take on color of object tint\r\n  end\r\n  updateState()\r\n  if self.getButtons() and #self.getButtons() ~= 0 then\r\n    self.editButton({font_color=data.color})\r\n  else\r\n    self.editInput({font_color=data.color, color=getBackground(data.color)})\r\n  end\r\nend\r\n\r\nfunction getBackground(color) --determines whether to use black or white depending on luminance\r\n  local r,g,b = Color(color):get()\r\n\r\n  local lum = 0.2126*r + 0.7152*g + 0.0722*b\r\n  if lum > 0.75 then\r\n    return {0.2,0.2,0.2, data.box_transparency}\r\n  else\r\n    return {1,1,1, data.box_transparency}\r\n  end\r\nend\r\n\r\nfunction clear()\r\n  data.text = ''\r\n  updateState()\r\n  inputMode()\r\nend\r\n\r\nfunction permalock()\r\n  self.interactable = false\r\n  data.interactable = false\r\n  updateState()\r\nend\r\n\r\nlocal target_script = [[\r\nfunction onLoad(script_state)\r\n  if script_state and script_state ~= '' then\r\n    local state = JSON.decode(script_state)\r\n    for _,entry in ipairs(state) do\r\n      self.createButton(entry)\r\n    end\r\n    self.addContextMenuItem('Clear All Text', function(color)\r\n      self.clearContextMenu()\r\n      self.clearButtons()\r\n      self.script_state = ''\r\n      self.script_code = ''\r\n    end)\r\n  end\r\nend\r\n]]\r\n\r\nfunction attemptAttach(player_color)\r\n  local objs = Player[player_color].getSelectedObjects()\r\n  local attachee\r\n  local attachers = {}\r\n  for _,obj in ipairs(objs) do\r\n    if obj.getVar('movableTextTool_cowgoesmoo33') then\r\n      if obj ~= self then\r\n        table.insert(attachers, obj)\r\n      end\r\n    else\r\n      if attachee then\r\n        broadcastToColor(\"More than one target selected.\", player_color)\r\n        return\r\n      else\r\n        attachee = obj\r\n      end\r\n    end\r\n  end\r\n  if attachee then\r\n    local code = attachee.script_code\r\n    if code and code ~= '' and code ~= target_script then\r\n      broadcastToColor(\"Warning: script on card has been overriden. Rewind time to undo.\", player_color)\r\n    end\r\n    for i,attacher in ipairs(attachers) do\r\n      attacher.call('attach', {target = attachee})\r\n    end\r\n    attach({target = attachee})\r\n    local type, flip = attachee.type, attachee.getRotation().z\r\n    if (type == 'Card' or type == 'Deck') and flip > 175 and flip < 185 then\r\n      broadcastToColor(\"Warning: text will not display if card or deck is facing down.\", player_color)\r\n    end\r\n  else\r\n    broadcastToColor(\"You must have a target object in your selection (using click-and-drag or Ctrl+Click) to use this option.\", player_color)\r\n  end\r\nend\r\n\r\nfunction attach(params)\r\n  local target = params.target\r\n  local displayText = data.text\r\n  if data.enter_to_finish then\r\n    displayText = displayText:gsub('%[n%]', '\\n')\r\n  end\r\n\r\n  local textRotation = self.getRotation():sub(target.getRotation())\r\n    :add(Vector(180, 0, 180))\r\n\r\n  local textPosition = target.positionToLocal(\r\n    self.getPosition():add(Vector(0, data.hover_height, 0))\r\n  )\r\n  textPosition.x = -textPosition.x\r\n\r\n  local textScale = {}\r\n  textScale.x = self.getScale().x / target.getScale().x\r\n  textScale.y = self.getScale().x / target.getScale().y\r\n  textScale.z = self.getScale().x / target.getScale().z\r\n\r\n  local details = {\r\n    label=displayText,\r\n    click_function=\"none\",\r\n    function_owner=nil,\r\n    position=textPosition,\r\n    rotation=textRotation,\r\n    scale=textScale,\r\n    height=0, width=0,\r\n    font_color=data.color, font_size=data.size\r\n  }\r\n\r\n  target.createButton(details)\r\n\r\n  local script_state = target.script_state\r\n  if script_state and script_state ~= '' then\r\n    local state = JSON.decode(script_state)\r\n    table.insert(state, details)\r\n    target.script_state = JSON.encode(state)\r\n  else\r\n    target.script_state = JSON.encode({[1]=details})\r\n  end\r\n\r\n  target.script_code = target_script\r\n\r\n  self.destruct()\r\nend\r\n\r\nfunction applyMultiple(player_color, func_string, params, static_only)\r\n  local objs = Player[player_color].getSelectedObjects()\r\n  for _,obj in ipairs(objs) do\r\n    if obj.getVar('movableTextTool_cowgoesmoo33') then\r\n      if not static_only or obj.call('isStatic') then\r\n        obj.call(func_string, params)\r\n      end\r\n    end\r\n  end\r\nend\r\n\r\nfunction isStatic()\r\n  local input = self.getInputs()\r\n  return not input or #input == 0\r\nend\r\n\r\nfunction getBox(input, force)\r\n  local maxLength, lineCount = EXPAND_INTERVAL, 1\r\n  local lineLength = 0\r\n  for i = 1, #input do\r\n    local c = input:sub(i,i)\r\n    if c == '\\n' then\r\n      lineCount = lineCount + 1\r\n      if lineLength > maxLength then maxLength = (math.floor(lineLength / EXPAND_INTERVAL) + 1) * EXPAND_INTERVAL end\r\n      lineLength = 0\r\n    else\r\n      lineLength = lineLength + 1\r\n    end\r\n  end\r\n  if lineLength > maxLength then maxLength = (math.floor(lineLength / EXPAND_INTERVAL) + 1) * EXPAND_INTERVAL end\r\n\r\n  newWidth = data.size * maxLength * 0.9\r\n  newHeight = data.size * lineCount + 23\r\n\r\n  if force or boxWidth ~= newWidth or boxHeight ~= newHeight then\r\n    boxWidth, boxHeight = newWidth, newHeight\r\n    return {width = boxWidth, height = boxHeight}\r\n  end\r\n  return nil\r\nend\r\n\r\ntemp_lift = nil\r\nfunction onPickUp(player_color)\r\n  if data.autolift then\r\n    local player = Player[player_color]\r\n    temp_lift = player.lift_height\r\n    player.lift_height = 0\r\n  end\r\nend\r\n\r\nfunction onDrop(player_color)\r\n  if data.autolift and temp_lift then\r\n    Player[player_color].lift_height = temp_lift\r\n  end\r\nend\r\n\r\n-- Should be called every time data is modified, allows info to be saved on copy/paste\r\nfunction updateState()\r\n  self.script_state = JSON.encode(data)\r\nend\r\n\r\nfunction onSave()\r\n  self.script_state = JSON.encode(data)\r\n  return self.script_state\r\nend","LuaScriptState":"{\"autolift\":false,\"autolock\":false,\"box_transparency\":1,\"color\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1},\"enter_to_finish\":false,\"hover_height\":0.05,\"interactable\":true,\"size\":200,\"text\":\"Vous avez déjà jouer \\nla banque gagne toujours\"}","XmlUI":""},{"GUID":"a730db","Name":"Deck","Transform":{"posX":12.5000076,"posY":1.536432,"posZ":-5.99991941,"rotX":0.00494815968,"rotY":90.00064,"rotZ":359.9891,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Deck Intrigue","Description":"Activité Extrascolaire","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":false,"SidewaysCard":true,"DeckIDs":[114402,114401,114400],"CustomDeck":{"1144":{"FaceURL":"https://i.imgur.com/gPqLiw9.jpg","BackURL":"https://i.imgur.com/6gw6nAo.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":"","ContainedObjects":[{"GUID":"cc138e","Name":"Card","Transform":{"posX":12.4999962,"posY":1.60714281,"posZ":-5.999944,"rotX":0.00572255254,"rotY":90.0002,"rotZ":359.9884,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"La Bête Déchaînée","Description":"Intrigue 3a","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"doomThreshold\": 2,\n  \"id\": \"02044\",\n  \"type\": \"Agenda\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":114402,"SidewaysCard":true,"CustomDeck":{"1144":{"FaceURL":"https://i.imgur.com/gPqLiw9.jpg","BackURL":"https://i.imgur.com/6gw6nAo.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"1ae35b","Name":"Card","Transform":{"posX":12.4999962,"posY":1.64613056,"posZ":-5.99994373,"rotX":0.004977278,"rotY":90.0002,"rotZ":359.988861,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Au Cœur de la Nuit","Description":"Intrigue 2a","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"doomThreshold\": 3,\n  \"id\": \"02043\",\n  \"type\": \"Agenda\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":114401,"SidewaysCard":true,"CustomDeck":{"1144":{"FaceURL":"https://i.imgur.com/gPqLiw9.jpg","BackURL":"https://i.imgur.com/6gw6nAo.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"22da2d","Name":"Card","Transform":{"posX":12.5,"posY":1.61307788,"posZ":-5.99995375,"rotX":0.00261089159,"rotY":90.0002,"rotZ":359.9881,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Des Couloirs Silencieux","Description":"Intrigue 1a","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"doomThreshold\": 7,\n  \"id\": \"02042\",\n  \"type\": \"Agenda\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":114400,"SidewaysCard":true,"CustomDeck":{"1144":{"FaceURL":"https://i.imgur.com/gPqLiw9.jpg","BackURL":"https://i.imgur.com/6gw6nAo.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""}]},{"GUID":"b4cb94","Name":"Card","Transform":{"posX":2.50000143,"posY":1.51837921,"posZ":9,"rotX":0.0108915,"rotY":180.000183,"rotZ":0.00494829239,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Maison des Étudiants","Description":"Miskatonic.","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02051\",\n  \"locationBack\": {\n    \"connections\": \"Plus|SlantedEquals\",\n    \"icons\": \"Diamond\",\n    \"uses\": {\n      \"count\": 2,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    }\n  },\n  \"locationFront\": {\n    \"connections\": \"Plus|SlantedEquals\",\n    \"icons\": \"Diamond\"\n  },\n  \"traits\": \"Miskatonic.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":114604,"SidewaysCard":false,"CustomDeck":{"1146":{"FaceURL":"https://i.imgur.com/YYrN92e.jpg","BackURL":"https://i.imgur.com/QGyVZgX.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"bc5d18","Name":"Card","Transform":{"posX":24.9999962,"posY":1.51367974,"posZ":-5.500021,"rotX":0.0108915037,"rotY":180.000076,"rotZ":180.004959,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276100,"SidewaysCard":false,"CustomDeck":{"2761":{"FaceURL":"https://i.imgur.com/FVWxpyu.jpg","BackURL":"https://i.imgur.com/EmJxccn.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"c291f4","Name":"Custom_Model_Bag","Transform":{"posX":-27.0013,"posY":1.83530009,"posZ":18.5035,"rotX":-0.000004914004,"rotY":179.9859,"rotZ":1.18626446e-7,"scaleX":0.7,"scaleY":0.7,"scaleZ":0.7},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":1,"g":1,"b":1},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"MaterialIndex":-1,"MeshIndex":-1,"CustomMesh":{"MeshURL":"https://pastebin.com/raw/ALrYhQGb","DiffuseURL":"http://cloud-3.steamusercontent.com/ugc/2027219646973273686/5CAEBE67144BD9F4C11BD9D2BB27363D6E4091DB/","NormalURL":"","ColliderURL":"","Convex":true,"MaterialIndex":3,"TypeIndex":6,"CustomShader":{"SpecularColor":{"r":1,"g":1,"b":1},"SpecularIntensity":0,"SpecularSharpness":2,"FresnelStrength":0},"CastShadows":true},"Bag":{"Order":0},"LuaScript":"-- Utility memory bag by Directsun\r\n-- Version 2.7.0\r\n-- Fork of Memory Bag 2.0 by MrStump\r\n--\r\n-- Want to contribute? Create an issue or fork the code on GitHub and submit a pull request:\r\n-- https://github.com/sunflowermans/TTS-UtilityMemoryBag\r\n\r\n\r\nfunction updateSave()\r\n    local data_to_save = {[\"ml\"]=memoryList}\r\n    saved_data = JSON.encode(data_to_save)\r\n    self.script_state = saved_data\r\nend\r\n\r\nfunction combineMemoryFromBagsWithin()\r\n    local bagObjList = self.getObjects()\r\n    for _, bagObj in ipairs(bagObjList) do\r\n        local data = bagObj.lua_script_state\r\n        if data ~= nil then\r\n            local j = JSON.decode(data)\r\n            if j ~= nil and j.ml ~= nil then\r\n                for guid, entry in pairs(j.ml) do\r\n                    memoryList[guid] = entry\r\n                end\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\nfunction updateMemoryWithMoves()\r\n    memoryList = memoryListBackup\r\n    --get the first transposed object's coordinates\r\n    local obj = getObjectFromGUID(moveGuid)\r\n\r\n    -- p1 is where needs to go, p2 is where it was\r\n    local refObjPos = memoryList[moveGuid].pos\r\n    local deltaPos = findOffsetDistance(obj.getPosition(), refObjPos, nil)\r\n    local movedRotation = obj.getRotation()\r\n    for guid, entry in pairs(memoryList) do\r\n        memoryList[guid].pos.x = entry.pos.x - deltaPos.x\r\n        memoryList[guid].pos.y = entry.pos.y - deltaPos.y\r\n        memoryList[guid].pos.z = entry.pos.z - deltaPos.z\r\n        -- memoryList[guid].rot.x = movedRotation.x\r\n        -- memoryList[guid].rot.y = movedRotation.y\r\n        -- memoryList[guid].rot.z = movedRotation.z\r\n    end\r\n\r\n    --theList[obj.getGUID()] = {\r\n    --    pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n    --    rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n    --    lock=obj.getLock()\r\n    --}\r\n    moveList = {}\r\nend\r\n\r\nfunction onload(saved_data)\r\n\r\n    fresh = true\r\n    if saved_data ~= \"\" then\r\n        local loaded_data = JSON.decode(saved_data)\r\n        --Set up information off of loaded_data\r\n        memoryList = loaded_data.ml\r\n    else\r\n        --Set up information for if there is no saved saved data\r\n        memoryList = {}\r\n\r\n    end\r\n\r\n    moveList = {}\r\n    moveGuid = nil\r\n\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        fresh = false\r\n        createMemoryActionButtons()\r\n    end\r\nend\r\n\r\n\r\n--Beginning Setup\r\n\r\n\r\n--Make setup button\r\nfunction createSetupButton()\r\n    self.createButton({\r\n        label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n        position={0,0.3,2}, rotation={0,0,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\nend\r\n\r\n--Triggered by Transpose button\r\nfunction buttonClick_transpose()\r\n    moveGuid = nil\r\n    broadcastToAll(\"Select one object and move it- all objects will move relative to the new location\", {0.75, 0.75, 1})\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(true)\r\n    createSetupActionButtons(true)\r\nend\r\n\r\n--Triggered by setup button,\r\nfunction buttonClick_setup()\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(false)\r\n    createSetupActionButtons(false)\r\nend\r\n\r\nfunction getAllObjectsInMemory()\r\n    local objTable = {}\r\n    local curObj = {}\r\n\r\n    for guid in pairs(memoryListBackup) do\r\n        curObj = getObjectFromGUID(guid)\r\n        table.insert(objTable, curObj)\r\n    end\r\n\r\n    return objTable\r\n    -- return getAllObjects()\r\nend\r\n\r\n--Creates selection buttons on objects\r\nfunction createButtonsOnAllObjects(move)\r\n    buttonIndexMap = {}\r\n    local howManyButtons = 0\r\n\r\n    local objsToHaveButtons = {}\r\n    if move == true then\r\n        objsToHaveButtons = getAllObjectsInMemory()\r\n    else\r\n        objsToHaveButtons = getAllObjects()\r\n    end\r\n\r\n    for _, obj in ipairs(objsToHaveButtons) do\r\n        if obj ~= self then\r\n            --On a normal bag, the button positions aren't the same size as the bag.\r\n            globalScaleFactor = 1 * 1/self.getScale().x\r\n            --Super sweet math to set button positions\r\n            local selfPos = self.getPosition()\r\n            local objPos = obj.getPosition()\r\n            local deltaPos = findOffsetDistance(selfPos, objPos, obj)\r\n            local objPos = rotateLocalCoordinates(deltaPos, self)\r\n            objPos.x = -objPos.x * globalScaleFactor\r\n            objPos.y = objPos.y * globalScaleFactor +2\r\n            objPos.z = objPos.z * globalScaleFactor\r\n            --Workaround for custom PDFs\r\n            if obj.Book then\r\n                objPos.y = objPos.y + 0.5\r\n            end\r\n            --Offset rotation of bag\r\n            local rot = self.getRotation()\r\n            rot.y = -rot.y + 180\r\n            --Create function\r\n            local funcName = \"selectButton_\" .. howManyButtons\r\n            local func = function() buttonClick_selection(obj, move) end\r\n            local color = {0.75,0.25,0.25,0.6}\r\n            local colorMove = {0,0,1,0.6}\r\n            if move == true then\r\n                color = colorMove\r\n            end\r\n            self.setVar(funcName, func)\r\n            self.createButton({\r\n                click_function=funcName, function_owner=self,\r\n                position=objPos, rotation=rot, height=1000, width=1000,\r\n                color=color,\r\n            })\r\n            buttonIndexMap[obj.getGUID()] = howManyButtons\r\n            howManyButtons = howManyButtons + 1\r\n        end\r\n    end\r\nend\r\n\r\n--Creates submit and cancel buttons\r\nfunction createSetupActionButtons(move)\r\n    self.createButton({\r\n       label=\"Annuler\", click_function=\"buttonClick_cancel\", function_owner=self,\r\n       position={-1.15,0.3,2.1}, rotation={0,0,0}, height=350, width=1100,\r\n       font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n\r\n    self.createButton({\r\n      label=\"Valider\", click_function=\"buttonClick_submit\", function_owner=self,\r\n      position={-1.15,0.3,2.8}, rotation={0,0,0}, height=350, width=1100,\r\n      font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n\r\n    if move == false then\r\n      self.createButton({\r\n          label=\"Ajouter\", click_function=\"buttonClick_add\", function_owner=self,\r\n          position={1.15,0.3,2.1}, rotation={0,0,0}, height=350, width=1100,\r\n          font_size=250, color={0,0,0}, font_color={0.25,1,0.25}\r\n        })\r\n\r\n        self.createButton({\r\n            label=\"Sélection\", click_function=\"editDragSelection\", function_owner=self,\r\n            position={-1.15,0.3,3.5}, rotation={0,0,0}, height=350, width=1100,\r\n            font_size=250, color={0,0,0}, font_color={1,1,1}\r\n        })\r\n\r\n        if fresh == false then\r\n            self.createButton({\r\n                label=\"Mise à Jour\", click_function=\"buttonClick_setNew\", function_owner=self,\r\n                position={1.15,0.3,3.5}, rotation={0,0,0}, height=350, width=1100,\r\n                font_size=180, color={0,0,0}, font_color={0.75,0.75,1}\r\n            })\r\n            self.createButton({\r\n                label=\"Retirer\", click_function=\"buttonClick_remove\", function_owner=self,\r\n                position={1.15,0.3,2.8}, rotation={0,0,0}, height=350, width=1100,\r\n                font_size=250, color={0,0,0}, font_color={1,0.25,0.25}\r\n            })\r\n        end\r\n    end\r\n\r\n    self.createButton({\r\n        label=\"Reset\", click_function=\"buttonClick_reset\", function_owner=self,\r\n        position={0,0.3,-2}, rotation={0,0,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\nend\r\n\r\n\r\n--During Setup\r\n\r\n\r\n--Checks or unchecks buttons\r\nfunction buttonClick_selection(obj, move)\r\n    local index = buttonIndexMap[obj.getGUID()]\r\n    local colorMove = {0,0,1,0.6}\r\n    local color = {0,1,0,0.6}\r\n\r\n    previousGuid = selectedGuid\r\n    selectedGuid = obj.getGUID()\r\n\r\n    theList = memoryList\r\n    if move == true then\r\n        theList = moveList\r\n        if previousGuid ~= nil and previousGuid ~= selectedGuid then\r\n            local prevObj = getObjectFromGUID(previousGuid)\r\n            prevObj.highlightOff()\r\n            self.editButton({index=previousIndex, color=colorMove})\r\n            theList[previousGuid] = nil\r\n        end\r\n        previousIndex = index\r\n    end\r\n\r\n    if theList[selectedGuid] == nil then\r\n        self.editButton({index=index, color=color})\r\n        --Adding pos/rot to memory table\r\n        local pos, rot = obj.getPosition(), obj.getRotation()\r\n        --I need to add it like this or it won't save due to indexing issue\r\n        theList[obj.getGUID()] = {\r\n            pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n            rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n            lock=obj.getLock(),\r\n            tint=obj.getColorTint()\r\n        }\r\n        obj.highlightOn({0,1,0})\r\n    else\r\n        color = {0.75,0.25,0.25,0.6}\r\n        if move == true then\r\n            color = colorMove\r\n        end\r\n        self.editButton({index=index, color=color})\r\n        theList[obj.getGUID()] = nil\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\nfunction editDragSelection(bagObj, player, remove)\r\n    local selectedObjs = Player[player].getSelectedObjects()\r\n    if not remove then\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            --Ignore if already in the memory list, or does not have a button\r\n            if index and not memoryList[obj.getGUID()] then\r\n                self.editButton({index=index, color={0,1,0,0.6}})\r\n                --Adding pos/rot to memory table\r\n                local pos, rot = obj.getPosition(), obj.getRotation()\r\n                --I need to add it like this or it won't save due to indexing issue\r\n                memoryList[obj.getGUID()] = {\r\n                    pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n                    rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n                    lock=obj.getLock(),\r\n                    tint=obj.getColorTint()\r\n                }\r\n                obj.highlightOn({0,1,0})\r\n            end\r\n        end\r\n    else\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            if index and memoryList[obj.getGUID()] then\r\n                color = {0.75,0.25,0.25,0.6}\r\n                self.editButton({index=index, color=color})\r\n                memoryList[obj.getGUID()] = nil\r\n                obj.highlightOff()\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\n--Cancels selection process\r\nfunction buttonClick_cancel()\r\n    memoryList = memoryListBackup\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        createMemoryActionButtons()\r\n    end\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Sélection annulée\", {1,1,1})\r\n    moveGuid = nil\r\nend\r\n\r\n--Saves selections\r\nfunction buttonClick_submit()\r\n    fresh = false\r\n    if next(moveList) ~= nil then\r\n        for guid in pairs(moveList) do\r\n            moveGuid = guid\r\n        end\r\n        if memoryListBackup[moveGuid] == nil then\r\n            broadcastToAll(\"Item selected for moving is not already in memory\", {1, 0.25, 0.25})\r\n        else\r\n            broadcastToAll(\"Moving all items in memory relative to new objects position!\", {0.75, 0.75, 1})\r\n            self.clearButtons()\r\n            self.clearInputs()\r\n            createMemoryActionButtons()\r\n            local count = 0\r\n            for guid in pairs(moveList) do\r\n                moveGuid = guid\r\n                count = count + 1\r\n                local obj = getObjectFromGUID(guid)\r\n                if obj ~= nil then obj.highlightOff() end\r\n            end\r\n            updateMemoryWithMoves()\r\n            updateSave()\r\n            buttonClick_place()\r\n        end\r\n    elseif next(memoryList) == nil and moveGuid == nil then\r\n        memoryList = memoryListBackup\r\n        broadcastToAll(\"No selections made.\", {0.75, 0.25, 0.25})\r\n    end\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    updateSave()\r\n    moveGuid = nil\r\nend\r\n\r\nfunction combineTables(first_table, second_table)\r\n    for k,v in pairs(second_table) do first_table[k] = v end\r\nend\r\n\r\nfunction buttonClick_add()\r\n    fresh = false\r\n    combineTables(memoryList, memoryListBackup)\r\n    broadcastToAll(\"Adding internal bags and selections to existing memory\", {0.25, 0.75, 0.25})\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_remove()\r\n    broadcastToAll(\"Removing Selected Entries From Memory\", {1.0, 0.25, 0.25})\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        memoryListBackup[guid] = nil\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Removed\", {1,1,1})\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_setNew()\r\n    broadcastToAll(\"Setting new position relative to items in memory\", {0.75, 0.75, 1})\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        guid = obj.guid\r\n        if memoryListBackup[guid] ~= nil then\r\n            count = count + 1\r\n            memoryListBackup[guid].pos = obj.getPosition()\r\n            memoryListBackup[guid].rot = obj.getRotation()\r\n            memoryListBackup[guid].lock = obj.getLock()\r\n            memoryListBackup[guid].tint = obj.getColorTint()\r\n        end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\n--Resets bag to starting status\r\nfunction buttonClick_reset()\r\n    fresh = true\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createSetupButton()\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Tool Reset\", {1,1,1})\r\n    updateSave()\r\nend\r\n\r\n\r\n--After Setup\r\n\r\n\r\n--Creates recall and place buttons\r\nfunction createMemoryActionButtons()\r\n    self.createButton({\r\n        label=\"Placer\", click_function=\"buttonClick_place\", function_owner=self,\r\n        position={0,0.3,2}, rotation={0,0,0}, height=350, width=1000,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Ranger\", click_function=\"buttonClick_recall\", function_owner=self,\r\n        position={0,0.3,2.8}, rotation={0,0,0}, height=350, width=1000,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n        position={2,0.3,0}, rotation={0,90,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    ---    self.createButton({\r\n    ---      label=\"Bouger\", click_function=\"buttonClick_transpose\", function_owner=self,\r\n    ---      position={-2,0.3,0.8}, rotation={0,270,0}, height=350, width=800,\r\n    ---      font_size=250, color={0,0,0}, font_color={0.75,0.75,1}\r\n    ---  \r\nend\r\n\r\n--Sends objects from bag/table to their saved position/rotation\r\nfunction buttonClick_place()\r\n    local bagObjList = self.getObjects()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        --If obj is out on the table, move it to the saved pos/rot\r\n        if obj ~= nil then\r\n            obj.setPositionSmooth(entry.pos)\r\n            obj.setRotationSmooth(entry.rot)\r\n            obj.setLock(entry.lock)\r\n            obj.setColorTint(entry.tint)\r\n        else\r\n            --If obj is inside of the bag\r\n            for _, bagObj in ipairs(bagObjList) do\r\n                if bagObj.guid == guid then\r\n                    local item = self.takeObject({\r\n                        guid=guid, position=entry.pos, rotation=entry.rot, smooth=false\r\n                    })\r\n                    item.setLock(entry.lock)\r\n                    item.setColorTint(entry.tint)\r\n                    break\r\n                end\r\n            end\r\n        end\r\n    end\r\n    broadcastToAll(\"Objets placés\", {1,1,1})\r\nend\r\n\r\n--Recalls objects to bag from table\r\nfunction buttonClick_recall()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then self.putObject(obj) end\r\n    end\r\n    broadcastToAll(\"Objets rangés\", {1,1,1})\r\nend\r\n\r\n\r\n--Utility functions\r\n\r\n\r\n--Find delta (difference) between 2 x/y/z coordinates\r\nfunction findOffsetDistance(p1, p2, obj)\r\n    local yOffset = 0\r\n    if obj ~= nil then\r\n        local bounds = obj.getBounds()\r\n        yOffset = (bounds.size.y - bounds.offset.y)\r\n    end\r\n    local deltaPos = {}\r\n    deltaPos.x = (p2.x-p1.x)\r\n    deltaPos.y = (p2.y-p1.y) + yOffset\r\n    deltaPos.z = (p2.z-p1.z)\r\n    return deltaPos\r\nend\r\n\r\n--Used to rotate a set of coordinates by an angle\r\nfunction rotateLocalCoordinates(desiredPos, obj)\r\n    local objPos, objRot = obj.getPosition(), obj.getRotation()\r\n    local angle = math.rad(objRot.y)\r\n    local x = desiredPos.x * math.cos(angle) - desiredPos.z * math.sin(angle)\r\n    local z = desiredPos.x * math.sin(angle) + desiredPos.z * math.cos(angle)\r\n    --return {x=objPos.x+x, y=objPos.y+desiredPos.y, z=objPos.z+z}\r\n    return {x=x, y=desiredPos.y, z=z}\r\nend\r\n\r\nfunction rotateMyCoordinates(desiredPos, obj)\r\n    local angle = math.rad(obj.getRotation().y)\r\n    local x = desiredPos.x * math.sin(angle)\r\n    local z = desiredPos.z * math.cos(angle)\r\n    return {x=x, y=desiredPos.y, z=z}\r\nend\r\n\r\n--Coroutine delay, in seconds\r\nfunction wait(time)\r\n    local start = os.time()\r\n    repeat coroutine.yield(0) until os.time() > start + time\r\nend\r\n\r\n--Duplicates a table (needed to prevent it making reference to the same objects)\r\nfunction duplicateTable(oldTable)\r\n    local newTable = {}\r\n    for k, v in pairs(oldTable) do\r\n        newTable[k] = v\r\n    end\r\n    return newTable\r\nend\r\n\r\n--Moves scripted highlight from all objects\r\nfunction removeAllHighlights()\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\n--Round number (num) to the Nth decimal (dec)\r\nfunction round(num, dec)\r\n    local mult = 10^(dec or 0)\r\n    return math.floor(num * mult + 0.5) / mult\r\nend\r\n\r\n\r\n--[[\r\nThis object provides access to a variable stored on the \"Global script\".\r\nThe variable holds the GUIDs for every Utility Memory Bag in the scene.\r\nExample:\r\n{'805ebd', '35cc21', 'fc8886', 'f50264', '5f5f63'}\r\n--]]\r\nAllMemoryBagsInScene = {\r\n    NAME_OF_GLOBAL_VARIABLE = \"_UtilityMemoryBag_AllMemoryBagsInScene\"\r\n}\r\n\r\nfunction AllMemoryBagsInScene:add(guid)\r\n    local guids = Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\n    table.insert(guids, guid)\r\n    Global.setTable(self.NAME_OF_GLOBAL_VARIABLE, guids)\r\nend\r\n\r\nfunction AllMemoryBagsInScene:getGuidList()\r\n    return Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\nend","LuaScriptState":"{\"ml\":{\"4959fd\":{\"lock\":false,\"pos\":{\"x\":30.5,\"y\":2.3988,\"z\":-3},\"rot\":{\"x\":-0.0006,\"y\":180,\"z\":180.0011},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}}}}","XmlUI":"","ContainedObjects":[{"GUID":"4959fd","Name":"Card","Transform":{"posX":22.4999924,"posY":1.51541638,"posZ":2.500005,"rotX":0.0108916126,"rotY":180.000031,"rotZ":0.004948252,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"health\": 3,\n  \"id\": \"51014\",\n  \"traits\": \"Humanoid. Abomination.\",\n  \"type\": \"Enemy\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276049,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""}]},{"GUID":"c37089","Name":"Card","Transform":{"posX":-32.00018,"posY":1.77890575,"posZ":8.499829,"rotX":-0.000004985586,"rotY":180.0169,"rotZ":-2.1839794e-8,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"« Jazz » Mulligan","Description":"Le Concierge en Chef","GMNotes":"{\n  \"class\": \"Neutral\",\n  \"cost\": 0,\n  \"cycle\": \"Standalone\",\n  \"health\": 2,\n  \"id\": \"02060\",\n  \"sanity\": 2,\n  \"traits\": \"Ally. Miskatonic.\",\n  \"type\": \"Asset\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":114913,"SidewaysCard":false,"CustomDeck":{"1149":{"FaceURL":"https://i.imgur.com/YYrN92e.jpg","BackURL":"https://i.imgur.com/QGyVZgX.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"c51b95","Name":"Custom_Tile","Transform":{"posX":13.5,"posY":1.50315917,"posZ":5.49999857,"rotX":359.9891,"rotY":-0.000003378159,"rotZ":-0.004952635,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/vppt2my.png","ImageSecondaryURL":"https://i.imgur.com/vppt2my.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":"","States":{"2":{"GUID":"4d3553","Name":"Custom_Tile","Transform":{"posX":-17.11995,"posY":1.60650957,"posZ":3.85999179,"rotX":359.9831,"rotY":359.984558,"rotZ":359.920074,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/HyfE8m8.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""},"3":{"GUID":"5b38c6","Name":"Custom_Tile","Transform":{"posX":-17.1199474,"posY":1.60650969,"posZ":3.85999274,"rotX":359.983124,"rotY":359.984467,"rotZ":359.9201,"scaleX":0.8,"scaleY":1,"scaleZ":0.8},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/dHKBLoD.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""}}},{"GUID":"c6ab70","Name":"Card","Transform":{"posX":13.5,"posY":1.51875985,"posZ":16,"rotX":0.0108914236,"rotY":180.000275,"rotZ":0.0049482407,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Bâtiment des Sciences","Description":"Miskatonic.","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02056\",\n  \"locationBack\": {\n    \"connections\": \"Plus|Tilde\",\n    \"icons\": \"Hourglass\",\n    \"uses\": {\n      \"countPerInvestigator\": 1,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    }\n  },\n  \"locationFront\": {\n    \"connections\": \"Plus|Tilde\",\n    \"icons\": \"Hourglass\"\n  },\n  \"traits\": \"Miskatonic.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":114609,"SidewaysCard":false,"CustomDeck":{"1146":{"FaceURL":"https://i.imgur.com/YYrN92e.jpg","BackURL":"https://i.imgur.com/QGyVZgX.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"d2e6e8","Name":"Card","Transform":{"posX":-8.5,"posY":1.51932919,"posZ":9,"rotX":0.0108915027,"rotY":180.000122,"rotZ":0.004948256,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Bâtiment des Humanités","Description":"Miskatonic.","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02049\",\n  \"locationBack\": {\n    \"connections\": \"Plus|Triangle\",\n    \"icons\": \"Square\",\n    \"uses\": {\n      \"countPerInvestigator\": 2,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    }\n  },\n  \"locationFront\": {\n    \"connections\": \"Plus|Triangle\",\n    \"icons\": \"Square\"\n  },\n  \"traits\": \"Miskatonic.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":114606,"SidewaysCard":false,"CustomDeck":{"1146":{"FaceURL":"https://i.imgur.com/YYrN92e.jpg","BackURL":"https://i.imgur.com/QGyVZgX.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"f4527f","Name":"Custom_Tile","Transform":{"posX":2.49999976,"posY":1.50410914,"posZ":5.5,"rotX":359.9891,"rotY":0.0127895381,"rotZ":-0.00495534437,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/vppt2my.png","ImageSecondaryURL":"https://i.imgur.com/vppt2my.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":"","States":{"2":{"GUID":"4d3553","Name":"Custom_Tile","Transform":{"posX":-17.11995,"posY":1.60650957,"posZ":3.85999179,"rotX":359.9831,"rotY":359.984558,"rotZ":359.920074,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/HyfE8m8.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""},"3":{"GUID":"5b38c6","Name":"Custom_Tile","Transform":{"posX":-17.1199474,"posY":1.60650969,"posZ":3.85999274,"rotX":359.983124,"rotY":359.984467,"rotZ":359.9201,"scaleX":0.8,"scaleY":1,"scaleZ":0.8},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/dHKBLoD.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""}}},{"GUID":"fa26f3","Name":"Deck","Transform":{"posX":30.4999943,"posY":1.72431862,"posZ":-3.00000048,"rotX":-0.000590991753,"rotY":180,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Deck Rencontre","Description":"Activité Extrascolaire","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":false,"SidewaysCard":false,"DeckIDs":[276048,15509,15512,15508,15511,15514,15515,15928,15927,15931,15926,15930,15929,15418,15413,15417,15416,276024,15419,276023,276001,276000,276003,276002,276004,276005,276006,276007,276010,276009,276008,276011,276025],"CustomDeck":{"154":{"FaceURL":"https://i.imgur.com/7H57eeO.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0},"155":{"FaceURL":"https://i.imgur.com/7H57eeO.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0},"159":{"FaceURL":"https://i.imgur.com/7H57eeO.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0},"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":"","ContainedObjects":[{"GUID":"303aac","Name":"Card","Transform":{"posX":30.4998474,"posY":10.6422348,"posZ":-3.00018764,"rotX":-0.0005910301,"rotY":179.9969,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"health\": 3,\n  \"id\": \"51014\",\n  \"traits\": \"Humanoid. Abomination.\",\n  \"type\": \"Enemy\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276048,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"b52985","Name":"Card","Transform":{"posX":30.4998474,"posY":10.7797213,"posZ":-3.00018787,"rotX":-0.00059096585,"rotY":179.9969,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Au-Delà du Voile","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02084\",\n  \"traits\": \"Hex.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":15509,"SidewaysCard":false,"CustomDeck":{"155":{"FaceURL":"https://i.imgur.com/7H57eeO.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"ed11ad","Name":"Card","Transform":{"posX":30.4998474,"posY":10.5797215,"posZ":-3.00018787,"rotX":-0.00059096585,"rotY":179.9969,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Au-Delà du Voile","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02084\",\n  \"traits\": \"Hex.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":15512,"SidewaysCard":false,"CustomDeck":{"155":{"FaceURL":"https://i.imgur.com/7H57eeO.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"cc2af0","Name":"Card","Transform":{"posX":30.4998474,"posY":10.0422344,"posZ":-3.00018764,"rotX":-0.000590904441,"rotY":179.9969,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Au-Delà du Voile","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02084\",\n  \"traits\": \"Hex.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":15508,"SidewaysCard":false,"CustomDeck":{"155":{"FaceURL":"https://i.imgur.com/7H57eeO.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"3bd92a","Name":"Card","Transform":{"posX":30.4998474,"posY":10.1797218,"posZ":-3.00018787,"rotX":-0.00059096585,"rotY":179.9969,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Visions des Avenirs Passés","Description":"","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02083\",\n  \"traits\": \"Hex.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":15511,"SidewaysCard":false,"CustomDeck":{"155":{"FaceURL":"https://i.imgur.com/7H57eeO.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"92e0e2","Name":"Card","Transform":{"posX":30.4998474,"posY":9.979721,"posZ":-3.00018787,"rotX":-0.00059096585,"rotY":179.9969,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Visions des Avenirs Passés","Description":"","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02083\",\n  \"traits\": \"Hex.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":15514,"SidewaysCard":false,"CustomDeck":{"155":{"FaceURL":"https://i.imgur.com/7H57eeO.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"5b9c33","Name":"Card","Transform":{"posX":30.4998474,"posY":9.442235,"posZ":-3.00018764,"rotX":-0.0005910636,"rotY":179.9969,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Visions des Avenirs Passés","Description":"","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02083\",\n  \"traits\": \"Hex.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":15515,"SidewaysCard":false,"CustomDeck":{"155":{"FaceURL":"https://i.imgur.com/7H57eeO.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"5683cc","Name":"Card","Transform":{"posX":30.4998474,"posY":9.579721,"posZ":-3.00018787,"rotX":-0.00059096585,"rotY":179.9969,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Mage de Yog-Sothoth","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"health\": 3,\n  \"id\": \"02087\",\n  \"traits\": \"Humanoid. Sorcerer.\",\n  \"type\": \"Enemy\",\n  \"victory\": 1\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":15928,"SidewaysCard":false,"CustomDeck":{"159":{"FaceURL":"https://i.imgur.com/7H57eeO.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"16346c","Name":"Card","Transform":{"posX":30.4998474,"posY":9.379722,"posZ":-3.00018787,"rotX":-0.00059096585,"rotY":179.9969,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Thrall","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"health\": 2,\n  \"id\": \"02086\",\n  \"traits\": \"Humanoid. Monster. Abomination.\",\n  \"type\": \"Enemy\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":15927,"SidewaysCard":false,"CustomDeck":{"159":{"FaceURL":"https://i.imgur.com/7H57eeO.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"f618d3","Name":"Card","Transform":{"posX":30.4998474,"posY":8.842235,"posZ":-3.00018764,"rotX":-0.0005908233,"rotY":179.9969,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Thrall","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"health\": 2,\n  \"id\": \"02086\",\n  \"traits\": \"Humanoid. Monster. Abomination.\",\n  \"type\": \"Enemy\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":15931,"SidewaysCard":false,"CustomDeck":{"159":{"FaceURL":"https://i.imgur.com/7H57eeO.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"0090a4","Name":"Card","Transform":{"posX":30.4998474,"posY":8.979721,"posZ":-3.00018787,"rotX":-0.00059096585,"rotY":179.9969,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Thrall","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"health\": 2,\n  \"id\": \"02086\",\n  \"traits\": \"Humanoid. Monster. Abomination.\",\n  \"type\": \"Enemy\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":15926,"SidewaysCard":false,"CustomDeck":{"159":{"FaceURL":"https://i.imgur.com/7H57eeO.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"f31998","Name":"Card","Transform":{"posX":30.4998474,"posY":8.779721,"posZ":-3.00018787,"rotX":-0.00059096585,"rotY":179.9969,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Lumière d'Aforgomon","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02085\",\n  \"traits\": \"Pact. Power.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":15930,"SidewaysCard":false,"CustomDeck":{"159":{"FaceURL":"https://i.imgur.com/7H57eeO.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"bdf835","Name":"Card","Transform":{"posX":30.4998474,"posY":8.579721,"posZ":-3.00018787,"rotX":-0.00059096585,"rotY":179.9969,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Lumière d'Aforgomon","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02085\",\n  \"traits\": \"Pact. Power.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":15929,"SidewaysCard":false,"CustomDeck":{"159":{"FaceURL":"https://i.imgur.com/7H57eeO.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"ec81eb","Name":"Card","Transform":{"posX":30.4998474,"posY":8.379722,"posZ":-3.00018787,"rotX":-0.00059096585,"rotY":179.9969,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Avides de Mort","Description":"","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02091\",\n  \"traits\": \"Omen.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":15418,"SidewaysCard":false,"CustomDeck":{"154":{"FaceURL":"https://i.imgur.com/7H57eeO.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"74772f","Name":"Card","Transform":{"posX":30.4998474,"posY":7.84223461,"posZ":-3.00018764,"rotX":-0.000591038,"rotY":179.9969,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Avides de Mort","Description":"","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02091\",\n  \"traits\": \"Omen.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":15413,"SidewaysCard":false,"CustomDeck":{"154":{"FaceURL":"https://i.imgur.com/7H57eeO.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"34acc2","Name":"Card","Transform":{"posX":30.4998474,"posY":7.979721,"posZ":-3.00018787,"rotX":-0.00059096585,"rotY":179.9969,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Engoulevent","Description":"","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"health\": 1,\n  \"id\": \"02090\",\n  \"traits\": \"Creature.\",\n  \"type\": \"Enemy\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":15417,"SidewaysCard":false,"CustomDeck":{"154":{"FaceURL":"https://i.imgur.com/7H57eeO.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"c75f9e","Name":"Card","Transform":{"posX":30.4998474,"posY":7.779721,"posZ":-3.00018787,"rotX":-0.00059096585,"rotY":179.9969,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Engoulevent","Description":"","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"health\": 1,\n  \"id\": \"02090\",\n  \"traits\": \"Creature.\",\n  \"type\": \"Enemy\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":15416,"SidewaysCard":false,"CustomDeck":{"154":{"FaceURL":"https://i.imgur.com/7H57eeO.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"4126bc","Name":"Card","Transform":{"posX":30.4998474,"posY":5.730864,"posZ":-3.00018787,"rotX":-0.00059096585,"rotY":179.9969,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"51064\",\n  \"traits\": \"Omen.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276024,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"b248fe","Name":"Card","Transform":{"posX":30.4998474,"posY":7.579721,"posZ":-3.00018787,"rotX":-0.00059096585,"rotY":179.9969,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Engoulevent","Description":"","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"health\": 1,\n  \"id\": \"02090\",\n  \"traits\": \"Creature.\",\n  \"type\": \"Enemy\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":15419,"SidewaysCard":false,"CustomDeck":{"154":{"FaceURL":"https://i.imgur.com/7H57eeO.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"29c506","Name":"Card","Transform":{"posX":30.4998474,"posY":7.37972164,"posZ":-3.00018787,"rotX":-0.00059096585,"rotY":179.9969,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"51064\",\n  \"traits\": \"Omen.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276023,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"0236d6","Name":"Card","Transform":{"posX":30.4998474,"posY":6.84223557,"posZ":-3.00018764,"rotX":-0.0005910412,"rotY":179.9969,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"51063\",\n  \"traits\": \"Hex.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276001,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"612d05","Name":"Card","Transform":{"posX":30.4998474,"posY":6.97972155,"posZ":-3.00018787,"rotX":-0.00059096585,"rotY":179.9969,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"51063\",\n  \"traits\": \"Hex.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276000,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"d4d20c","Name":"Card","Transform":{"posX":30.4998474,"posY":6.779722,"posZ":-3.00018787,"rotX":-0.00059096585,"rotY":179.9969,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"51062\",\n  \"traits\": \"Hex.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276003,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"6fc7cc","Name":"Card","Transform":{"posX":30.4998474,"posY":6.242236,"posZ":-3.00018764,"rotX":-0.000591065036,"rotY":179.9969,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"51062\",\n  \"traits\": \"Hex.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276002,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"9ec870","Name":"Card","Transform":{"posX":30.4998474,"posY":6.3797226,"posZ":-3.00018787,"rotX":-0.00059096585,"rotY":179.9969,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"51061\",\n  \"traits\": \"Hex.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276004,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"5c7d44","Name":"Card","Transform":{"posX":30.4998474,"posY":6.17972231,"posZ":-3.00018787,"rotX":-0.00059096585,"rotY":179.9969,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"51061\",\n  \"traits\": \"Hex.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276005,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"3af5af","Name":"Card","Transform":{"posX":30.4998474,"posY":5.642236,"posZ":-3.00018764,"rotX":-0.00059106556,"rotY":179.9969,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"51065\",\n  \"traits\": \"Obstacle.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276006,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"cf2464","Name":"Card","Transform":{"posX":30.4998474,"posY":5.779722,"posZ":-3.00018787,"rotX":-0.00059096585,"rotY":179.9969,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"51065\",\n  \"traits\": \"Obstacle.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276007,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"67d7ad","Name":"Card","Transform":{"posX":30.4998474,"posY":5.5797224,"posZ":-3.00018787,"rotX":-0.00059096585,"rotY":179.9969,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"health\": 4,\n  \"id\": \"51071\",\n  \"traits\": \"Monster. Abomination.\",\n  \"type\": \"Enemy\",\n  \"victory\": 1\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276010,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"ccc937","Name":"Card","Transform":{"posX":30.4998474,"posY":5.04223633,"posZ":-3.00018764,"rotX":-0.0005910761,"rotY":179.9969,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"health\": 4,\n  \"id\": \"51071\",\n  \"traits\": \"Monster. Abomination.\",\n  \"type\": \"Enemy\",\n  \"victory\": 1\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276009,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"67dc67","Name":"Card","Transform":{"posX":30.4998474,"posY":5.17972231,"posZ":-3.00018787,"rotX":-0.00059096585,"rotY":179.9969,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"51072\",\n  \"traits\": \"Pact.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276008,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"85ac4d","Name":"Card","Transform":{"posX":30.4998474,"posY":4.9797225,"posZ":-3.00018787,"rotX":-0.00059096585,"rotY":179.9969,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"51072\",\n  \"traits\": \"Pact.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276011,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"cfa45a","Name":"Card","Transform":{"posX":30.4998474,"posY":1.64831018,"posZ":-3.0001874,"rotX":0.0005178128,"rotY":179.9969,"rotZ":180.00209,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"51064\",\n  \"traits\": \"Omen.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276025,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""}]},{"GUID":"fedcda","Name":"Card","Transform":{"posX":13.499958,"posY":1.51742923,"posZ":8.99998,"rotX":0.0108914524,"rotY":180.00061,"rotZ":0.00494849356,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Bâtiment de l'Administration","Description":"Miskatonic.","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02053\",\n  \"locationBack\": {\n    \"connections\": \"Plus|Tee\",\n    \"icons\": \"Circle\",\n    \"uses\": {\n      \"countPerInvestigator\": 1,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    }\n  },\n  \"locationFront\": {\n    \"connections\": \"Plus|Tee\",\n    \"icons\": \"Circle\"\n  },\n  \"traits\": \"Miskatonic.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":114601,"SidewaysCard":false,"CustomDeck":{"1146":{"FaceURL":"https://i.imgur.com/YYrN92e.jpg","BackURL":"https://i.imgur.com/QGyVZgX.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""}],"AttachedDecals":[{"Transform":{"posX":-0.0021877822,"posY":-0.08963572,"posZ":-0.00288731651,"rotX":270,"rotY":359.869568,"rotZ":0,"scaleX":2.00000215,"scaleY":2.00000238,"scaleZ":2.00000262},"CustomDecal":{"Name":"dunwich_back","ImageURL":"http://cloud-3.steamusercontent.com/ugc/959719855119695911/931B9829687A20F4DEADB36DA57B7E6D76792231/","Size":7.4}}]},{"GUID":"5338a5","Name":"Custom_Model_Bag","Transform":{"posX":7.999998,"posY":0.9799974,"posZ":45,"rotX":-0.000004957541,"rotY":180.0237,"rotZ":3.558192e-7,"scaleX":1.20052135,"scaleY":0.249882281,"scaleZ":1.3145982},"Nickname":"IV : Du Sang sur l'Autel","Description":"Renouveau : L'Héritage de Dunwich","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":1,"g":1,"b":1},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"MaterialIndex":-1,"MeshIndex":-1,"CustomMesh":{"MeshURL":"https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/advboxes/tuckbox_h_MSH.obj","DiffuseURL":"http://cloud-3.steamusercontent.com/ugc/829135118403755676/B4B5DEF8B5B23D09A19EFAD4AD41DA3E9F6B2BBC/","NormalURL":"","ColliderURL":"","Convex":true,"MaterialIndex":3,"TypeIndex":6,"CustomShader":{"SpecularColor":{"r":1,"g":1,"b":1},"SpecularIntensity":0,"SpecularSharpness":2,"FresnelStrength":0},"CastShadows":true},"Bag":{"Order":0},"LuaScript":"-- Utility memory bag by Directsun\r\n-- Version 2.7.0\r\n-- Fork of Memory Bag 2.0 by MrStump\r\n--\r\n-- Want to contribute? Create an issue or fork the code on GitHub and submit a pull request:\r\n-- https://github.com/sunflowermans/TTS-UtilityMemoryBag\r\n\r\n\r\nfunction updateSave()\r\n    local data_to_save = {[\"ml\"]=memoryList}\r\n    saved_data = JSON.encode(data_to_save)\r\n    self.script_state = saved_data\r\nend\r\n\r\nfunction combineMemoryFromBagsWithin()\r\n    local bagObjList = self.getObjects()\r\n    for _, bagObj in ipairs(bagObjList) do\r\n        local data = bagObj.lua_script_state\r\n        if data ~= nil then\r\n            local j = JSON.decode(data)\r\n            if j ~= nil and j.ml ~= nil then\r\n                for guid, entry in pairs(j.ml) do\r\n                    memoryList[guid] = entry\r\n                end\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\nfunction updateMemoryWithMoves()\r\n    memoryList = memoryListBackup\r\n    --get the first transposed object's coordinates\r\n    local obj = getObjectFromGUID(moveGuid)\r\n\r\n    -- p1 is where needs to go, p2 is where it was\r\n    local refObjPos = memoryList[moveGuid].pos\r\n    local deltaPos = findOffsetDistance(obj.getPosition(), refObjPos, nil)\r\n    local movedRotation = obj.getRotation()\r\n    for guid, entry in pairs(memoryList) do\r\n        memoryList[guid].pos.x = entry.pos.x - deltaPos.x\r\n        memoryList[guid].pos.y = entry.pos.y - deltaPos.y\r\n        memoryList[guid].pos.z = entry.pos.z - deltaPos.z\r\n        -- memoryList[guid].rot.x = movedRotation.x\r\n        -- memoryList[guid].rot.y = movedRotation.y\r\n        -- memoryList[guid].rot.z = movedRotation.z\r\n    end\r\n\r\n    --theList[obj.getGUID()] = {\r\n    --    pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n    --    rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n    --    lock=obj.getLock()\r\n    --}\r\n    moveList = {}\r\nend\r\n\r\nfunction onload(saved_data)\r\n\r\n    fresh = true\r\n    if saved_data ~= \"\" then\r\n        local loaded_data = JSON.decode(saved_data)\r\n        --Set up information off of loaded_data\r\n        memoryList = loaded_data.ml\r\n    else\r\n        --Set up information for if there is no saved saved data\r\n        memoryList = {}\r\n\r\n    end\r\n\r\n    moveList = {}\r\n    moveGuid = nil\r\n\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        fresh = false\r\n        createMemoryActionButtons()\r\n    end\r\nend\r\n\r\n\r\n--Beginning Setup\r\n\r\n\r\n--Make setup button\r\n function createSetupButton()\r\n    self.createButton({\r\n      label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n      position={0,0.1,-2.1}, rotation={0,0,0}, height=275, width=625,\r\n      font_size=150, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n end\r\n\r\n--Triggered by Transpose button\r\nfunction buttonClick_transpose()\r\n    moveGuid = nil\r\n    broadcastToAll(\"Select one object and move it- all objects will move relative to the new location\", {0.75, 0.75, 1})\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(true)\r\n    createSetupActionButtons(true)\r\nend\r\n\r\n--Triggered by setup button,\r\nfunction buttonClick_setup()\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(false)\r\n    createSetupActionButtons(false)\r\nend\r\n\r\nfunction getAllObjectsInMemory()\r\n    local objTable = {}\r\n    local curObj = {}\r\n\r\n    for guid in pairs(memoryListBackup) do\r\n        curObj = getObjectFromGUID(guid)\r\n        table.insert(objTable, curObj)\r\n    end\r\n\r\n    return objTable\r\n    -- return getAllObjects()\r\nend\r\n\r\n--Creates selection buttons on objects\r\nfunction createButtonsOnAllObjects(move)\r\n    buttonIndexMap = {}\r\n    local howManyButtons = 0\r\n\r\n    local objsToHaveButtons = {}\r\n    if move == true then\r\n        objsToHaveButtons = getAllObjectsInMemory()\r\n    else\r\n        objsToHaveButtons = getAllObjects()\r\n    end\r\n\r\n    for _, obj in ipairs(objsToHaveButtons) do\r\n        if obj ~= self then\r\n            --On a normal bag, the button positions aren't the same size as the bag.\r\n            globalScaleFactor = 1* 1/self.getScale().x\r\n            --Super sweet math to set button positions\r\n            local selfPos = self.getPosition()\r\n            local objPos = obj.getPosition()\r\n            local deltaPos = findOffsetDistance(selfPos, objPos, obj)\r\n            local objPos = rotateLocalCoordinates(deltaPos, self)\r\n            objPos.x = -objPos.x * globalScaleFactor\r\n            objPos.y = objPos.y * globalScaleFactor + 2\r\n            objPos.z = objPos.z * globalScaleFactor * 0.9\r\n            --Workaround for custom PDFs\r\n            if obj.Book then\r\n                objPos.y = objPos.y + 0.5\r\n            end\r\n            --Offset rotation of bag\r\n            local rot = self.getRotation()\r\n            rot.y = -rot.y + 180\r\n            --Create function\r\n            local funcName = \"selectButton_\" .. howManyButtons\r\n            local func = function() buttonClick_selection(obj, move) end\r\n            local color = {0.75,0.25,0.25,0.6}\r\n            local colorMove = {0,0,1,0.6}\r\n            if move == true then\r\n                color = colorMove\r\n            end\r\n            self.setVar(funcName, func)\r\n            self.createButton({\r\n                click_function=funcName, function_owner=self,\r\n                position=objPos, rotation=rot, height=500, width=500,\r\n                color=color,\r\n            })\r\n            buttonIndexMap[obj.getGUID()] = howManyButtons\r\n            howManyButtons = howManyButtons + 1\r\n        end\r\n    end\r\nend\r\n\r\n--Creates submit and cancel buttons\r\nfunction createSetupActionButtons(move)\r\n    self.createButton({\r\n        label=\"Annuler\", click_function=\"buttonClick_cancel\", function_owner=self,\r\n      position={-0.7,0.1,2.1}, rotation={0,0,0}, height=275, width=625,\r\n      font_size=145, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n\r\n    self.createButton({\r\n        label=\"Valider\", click_function=\"buttonClick_submit\", function_owner=self,\r\n        position={-0.7,0.3,2.6}, rotation={0,0,0}, height=275, width=625,\r\n        font_size=140, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n\r\n    if move == false then\r\n      self.createButton({\r\n          label=\"Ajouter\", click_function=\"buttonClick_add\", function_owner=self,\r\n          position={0.7,0.3,2.1}, rotation={0,0,0}, height=275, width=625,\r\n          font_size=140, color={0,0,0}, font_color={0.25,1,0.25}\r\n      })\r\n\r\n        self.createButton({\r\n            label=\"Sélection\", click_function=\"editDragSelection\", function_owner=self,\r\n            position={-0.7,0.3,3.1}, rotation={0,0,0}, height=275, width=625,\r\n            font_size=125, color={0,0,0}, font_color={1,1,1}\r\n        })\r\n\r\n        if fresh == false then\r\n                self.createButton({\r\n                    label=\"Mise à jour\", click_function=\"buttonClick_setNew\", function_owner=self,\r\n                    position={0.7,0.3,3.1}, rotation={0,0,0}, height=275, width=625,\r\n                    font_size=105, color={0,0,0}, font_color={0.75,0.75,1}\r\n                })\r\n                self.createButton({\r\n                    label=\"Retirer\", click_function=\"buttonClick_remove\", function_owner=self,\r\n                    position={0.7,0.3,2.6}, rotation={0,0,0}, height=275, width=625,\r\n                    font_size=140, color={0,0,0}, font_color={1,0.25,0.25}\r\n                })\r\n            end\r\n        end\r\n\r\n        self.createButton({\r\n            label=\"Reset\", click_function=\"buttonClick_reset\", function_owner=self,\r\n            position={0,0.3,-2.1}, rotation={0,0,0}, height=275, width=625,\r\n            font_size=165, color={0,0,0}, font_color={1,1,1}\r\n        })\r\n    end\r\n\r\n\r\n--During Setup\r\n\r\n\r\n--Checks or unchecks buttons\r\nfunction buttonClick_selection(obj, move)\r\n    local index = buttonIndexMap[obj.getGUID()]\r\n    local colorMove = {0,0,1,0.6}\r\n    local color = {0,1,0,0.6}\r\n\r\n    previousGuid = selectedGuid\r\n    selectedGuid = obj.getGUID()\r\n\r\n    theList = memoryList\r\n    if move == true then\r\n        theList = moveList\r\n        if previousGuid ~= nil and previousGuid ~= selectedGuid then\r\n            local prevObj = getObjectFromGUID(previousGuid)\r\n            prevObj.highlightOff()\r\n            self.editButton({index=previousIndex, color=colorMove})\r\n            theList[previousGuid] = nil\r\n        end\r\n        previousIndex = index\r\n    end\r\n\r\n    if theList[selectedGuid] == nil then\r\n        self.editButton({index=index, color=color})\r\n        --Adding pos/rot to memory table\r\n        local pos, rot = obj.getPosition(), obj.getRotation()\r\n        --I need to add it like this or it won't save due to indexing issue\r\n        theList[obj.getGUID()] = {\r\n            pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n            rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n            lock=obj.getLock(),\r\n            tint=obj.getColorTint()\r\n        }\r\n        obj.highlightOn({0,1,0})\r\n    else\r\n        color = {0.75,0.25,0.25,0.6}\r\n        if move == true then\r\n            color = colorMove\r\n        end\r\n        self.editButton({index=index, color=color})\r\n        theList[obj.getGUID()] = nil\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\nfunction editDragSelection(bagObj, player, remove)\r\n    local selectedObjs = Player[player].getSelectedObjects()\r\n    if not remove then\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            --Ignore if already in the memory list, or does not have a button\r\n            if index and not memoryList[obj.getGUID()] then\r\n                self.editButton({index=index, color={0,1,0,0.6}})\r\n                --Adding pos/rot to memory table\r\n                local pos, rot = obj.getPosition(), obj.getRotation()\r\n                --I need to add it like this or it won't save due to indexing issue\r\n                memoryList[obj.getGUID()] = {\r\n                    pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n                    rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n                    lock=obj.getLock(),\r\n                    tint=obj.getColorTint()\r\n                }\r\n                obj.highlightOn({0,1,0})\r\n            end\r\n        end\r\n    else\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            if index and memoryList[obj.getGUID()] then\r\n                color = {0.75,0.25,0.25,0.6}\r\n                self.editButton({index=index, color=color})\r\n                memoryList[obj.getGUID()] = nil\r\n                obj.highlightOff()\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\n--Cancels selection process\r\nfunction buttonClick_cancel()\r\n    memoryList = memoryListBackup\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        createMemoryActionButtons()\r\n    end\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Sélection annulée\", {1,1,1})\r\n    moveGuid = nil\r\nend\r\n\r\n--Saves selections\r\nfunction buttonClick_submit()\r\n    fresh = false\r\n    if next(moveList) ~= nil then\r\n        for guid in pairs(moveList) do\r\n            moveGuid = guid\r\n        end\r\n        if memoryListBackup[moveGuid] == nil then\r\n            broadcastToAll(\"Item selected for moving is not already in memory\", {1, 0.25, 0.25})\r\n        else\r\n            broadcastToAll(\"Moving all items in memory relative to new objects position!\", {0.75, 0.75, 1})\r\n            self.clearButtons()\r\n            self.clearInputs()\r\n            createMemoryActionButtons()\r\n            local count = 0\r\n            for guid in pairs(moveList) do\r\n                moveGuid = guid\r\n                count = count + 1\r\n                local obj = getObjectFromGUID(guid)\r\n                if obj ~= nil then obj.highlightOff() end\r\n            end\r\n            updateMemoryWithMoves()\r\n            updateSave()\r\n            buttonClick_place()\r\n        end\r\n    elseif next(memoryList) == nil and moveGuid == nil then\r\n        memoryList = memoryListBackup\r\n        broadcastToAll(\"No selections made.\", {0.75, 0.25, 0.25})\r\n    end\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    updateSave()\r\n    moveGuid = nil\r\nend\r\n\r\nfunction combineTables(first_table, second_table)\r\n    for k,v in pairs(second_table) do first_table[k] = v end\r\nend\r\n\r\nfunction buttonClick_add()\r\n    fresh = false\r\n    combineTables(memoryList, memoryListBackup)\r\n    broadcastToAll(\"Adding internal bags and selections to existing memory\", {0.25, 0.75, 0.25})\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_remove()\r\n    broadcastToAll(\"Removing Selected Entries From Memory\", {1.0, 0.25, 0.25})\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        memoryListBackup[guid] = nil\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Removed\", {1,1,1})\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_setNew()\r\n    broadcastToAll(\"Setting new position relative to items in memory\", {0.75, 0.75, 1})\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        guid = obj.guid\r\n        if memoryListBackup[guid] ~= nil then\r\n            count = count + 1\r\n            memoryListBackup[guid].pos = obj.getPosition()\r\n            memoryListBackup[guid].rot = obj.getRotation()\r\n            memoryListBackup[guid].lock = obj.getLock()\r\n            memoryListBackup[guid].tint = obj.getColorTint()\r\n        end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\n--Resets bag to starting status\r\nfunction buttonClick_reset()\r\n    fresh = true\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createSetupButton()\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Tool Reset\", {1,1,1})\r\n    updateSave()\r\nend\r\n\r\n\r\n--After Setup\r\n\r\n\r\n--Creates recall and place buttons\r\nfunction createMemoryActionButtons()\r\n    self.createButton({\r\n        label=\"Placer\", click_function=\"buttonClick_place\", function_owner=self,\r\n        position={0.7,0.1,2.2}, rotation={0,0,0}, height=275, width=625,\r\n        font_size=150, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Ranger\", click_function=\"buttonClick_recall\", function_owner=self,\r\n        position={-0.7,0.1,2.2}, rotation={0,0,0}, height=275, width=625,\r\n        font_size=150, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n        position={0,0.1,-2.2}, rotation={0,0,0}, height=275, width=625,\r\n        font_size=150, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    ---    self.createButton({\r\n    ---      label=\"Bouger\", click_function=\"buttonClick_transpose\", function_owner=self,\r\n    ---      position={-2,0.3,0.8}, rotation={0,270,0}, height=350, width=800,\r\n    ---      font_size=250, color={0,0,0}, font_color={0.75,0.75,1}\r\n    ---\r\nend\r\n\r\n--Sends objects from bag/table to their saved position/rotation\r\nfunction buttonClick_place()\r\n    local bagObjList = self.getObjects()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        --If obj is out on the table, move it to the saved pos/rot\r\n        if obj ~= nil then\r\n            obj.setPositionSmooth(entry.pos)\r\n            obj.setRotationSmooth(entry.rot)\r\n            obj.setLock(entry.lock)\r\n            obj.setColorTint(entry.tint)\r\n        else\r\n            --If obj is inside of the bag\r\n            for _, bagObj in ipairs(bagObjList) do\r\n                if bagObj.guid == guid then\r\n                    local item = self.takeObject({\r\n                        guid=guid, position=entry.pos, rotation=entry.rot, smooth=false\r\n                    })\r\n                    item.setLock(entry.lock)\r\n                    item.setColorTint(entry.tint)\r\n                    break\r\n                end\r\n            end\r\n        end\r\n    end\r\n    broadcastToAll(\"Objets placés\", {1,1,1})\r\nend\r\n\r\n--Recalls objects to bag from table\r\nfunction buttonClick_recall()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then self.putObject(obj) end\r\n    end\r\n    broadcastToAll(\"Objets rangés\", {1,1,1})\r\nend\r\n\r\n\r\n--Utility functions\r\n\r\n\r\n--Find delta (difference) between 2 x/y/z coordinates\r\nfunction findOffsetDistance(p1, p2, obj)\r\n    local yOffset = 0\r\n    if obj ~= nil then\r\n        local bounds = obj.getBounds()\r\n        yOffset = (bounds.size.y - bounds.offset.y)\r\n    end\r\n    local deltaPos = {}\r\n    deltaPos.x = (p2.x-p1.x)\r\n    deltaPos.y = (p2.y-p1.y) + yOffset\r\n    deltaPos.z = (p2.z-p1.z)\r\n    return deltaPos\r\nend\r\n\r\n--Used to rotate a set of coordinates by an angle\r\nfunction rotateLocalCoordinates(desiredPos, obj)\r\n    local objPos, objRot = obj.getPosition(), obj.getRotation()\r\n    local angle = math.rad(objRot.y)\r\n    local x = desiredPos.x * math.cos(angle) - desiredPos.z * math.sin(angle)\r\n    local z = desiredPos.x * math.sin(angle) + desiredPos.z * math.cos(angle)\r\n    --return {x=objPos.x+x, y=objPos.y+desiredPos.y, z=objPos.z+z}\r\n    return {x=x, y=desiredPos.y, z=z}\r\nend\r\n\r\nfunction rotateMyCoordinates(desiredPos, obj)\r\n    local angle = math.rad(obj.getRotation().y)\r\n    local x = desiredPos.x * math.sin(angle)\r\n    local z = desiredPos.z * math.cos(angle)\r\n    return {x=x, y=desiredPos.y, z=z}\r\nend\r\n\r\n--Coroutine delay, in seconds\r\nfunction wait(time)\r\n    local start = os.time()\r\n    repeat coroutine.yield(0) until os.time() > start + time\r\nend\r\n\r\n--Duplicates a table (needed to prevent it making reference to the same objects)\r\nfunction duplicateTable(oldTable)\r\n    local newTable = {}\r\n    for k, v in pairs(oldTable) do\r\n        newTable[k] = v\r\n    end\r\n    return newTable\r\nend\r\n\r\n--Moves scripted highlight from all objects\r\nfunction removeAllHighlights()\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\n--Round number (num) to the Nth decimal (dec)\r\nfunction round(num, dec)\r\n    local mult = 10^(dec or 0)\r\n    return math.floor(num * mult + 0.5) / mult\r\nend\r\n\r\n\r\n--[[\r\nThis object provides access to a variable stored on the \"Global script\".\r\nThe variable holds the GUIDs for every Utility Memory Bag in the scene.\r\nExample:\r\n{'805ebd', '35cc21', 'fc8886', 'f50264', '5f5f63'}\r\n--]]\r\nAllMemoryBagsInScene = {\r\n    NAME_OF_GLOBAL_VARIABLE = \"_UtilityMemoryBag_AllMemoryBagsInScene\"\r\n}\r\n\r\nfunction AllMemoryBagsInScene:add(guid)\r\n    local guids = Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\n    table.insert(guids, guid)\r\n    Global.setTable(self.NAME_OF_GLOBAL_VARIABLE, guids)\r\nend\r\n\r\nfunction AllMemoryBagsInScene:getGuidList()\r\n    return Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\nend\r\n","LuaScriptState":"{\"ml\":{\"0314fd\":{\"lock\":false,\"pos\":{\"x\":12.5000028610229,\"y\":1.53643202781677,\"z\":-5.99980401992798},\"rot\":{\"x\":0.00494962325319648,\"y\":90.0082397460938,\"z\":359.989105224609},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"03dd9b\":{\"lock\":false,\"pos\":{\"x\":-26.2245960235596,\"y\":1.76629912853241,\"z\":28.7263050079346},\"rot\":{\"x\":5.04278841617634E-06,\"y\":0.000445667858002707,\"z\":2.76174318969424E-07},\"tint\":{\"a\":0,\"b\":0,\"g\":0,\"r\":0}},\"09de37\":{\"lock\":false,\"pos\":{\"x\":35.0376014709473,\"y\":1.54540693759918,\"z\":0.200500026345253},\"rot\":{\"x\":0.000591209158301353,\"y\":0.00990195944905281,\"z\":-0.00107014644891024},\"tint\":{\"a\":0,\"b\":0,\"g\":0,\"r\":0}},\"0dd4f6\":{\"lock\":false,\"pos\":{\"x\":9,\"y\":1.50373792648315,\"z\":6.5},\"rot\":{\"x\":359.988800048828,\"y\":314.999908447266,\"z\":0.00420459778979421},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"0e5993\":{\"lock\":false,\"pos\":{\"x\":-26.9049,\"y\":1.8289,\"z\":26.0003},\"rot\":{\"x\":0,\"y\":179.9698,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"0f483c\":{\"lock\":false,\"pos\":{\"x\":-1,\"y\":1.5445,\"z\":1.5},\"rot\":{\"x\":0.0109,\"y\":180.2867,\"z\":0.005},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"1e79fd\":{\"lock\":true,\"pos\":{\"x\":-1,\"y\":1.52119994163513,\"z\":22.5},\"rot\":{\"x\":0.0109000001102686,\"y\":180.000106811523,\"z\":180.005004882813},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"1f3113\":{\"lock\":false,\"pos\":{\"x\":17,\"y\":1.50304710865021,\"z\":6.5},\"rot\":{\"x\":-0.0042029581964016,\"y\":45.0002098083496,\"z\":359.988800048828},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"27a3e1\":{\"lock\":false,\"pos\":{\"x\":-27.0002117156982,\"y\":1.81511604785919,\"z\":4.49978733062744},\"rot\":{\"x\":-5.16242062076344E-06,\"y\":180.000915527344,\"z\":2.34489277772809E-07},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"28f6a4\":{\"lock\":false,\"pos\":{\"x\":-22.9253,\"y\":1.8289,\"z\":25.9827},\"rot\":{\"x\":0,\"y\":180.2867,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"29f34e\":{\"lock\":false,\"pos\":{\"x\":-23.0003070831299,\"y\":1.77890610694885,\"z\":4.49969244003296},\"rot\":{\"x\":-5.01473141412134E-06,\"y\":180.000793457031,\"z\":-4.53547421841449E-08},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"35a7d5\":{\"lock\":false,\"pos\":{\"x\":-23.0556,\"y\":1.7789,\"z\":20.9542},\"rot\":{\"x\":0,\"y\":180.0159,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"3a93d1\":{\"lock\":true,\"pos\":{\"x\":-1,\"y\":1.51730000972748,\"z\":1.5},\"rot\":{\"x\":0.0109000001102686,\"y\":180,\"z\":180.005004882813},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"41928b\":{\"lock\":false,\"pos\":{\"x\":-18.9999008178711,\"y\":1.83530080318451,\"z\":9.99989986419678},\"rot\":{\"x\":-5.06781225340092E-06,\"y\":179.971893310547,\"z\":1.46247415955258E-07},\"tint\":{\"a\":1,\"b\":0,\"g\":0,\"r\":0.614982545375824}},\"44b0c5\":{\"lock\":false,\"pos\":{\"x\":12.9999990463257,\"y\":1.50443804264069,\"z\":12},\"rot\":{\"x\":-0.00494779506698251,\"y\":270,\"z\":0.0108982985839248},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"464e31\":{\"lock\":false,\"pos\":{\"x\":-26.9104,\"y\":1.8289,\"z\":20.9767},\"rot\":{\"x\":0,\"y\":180.1558,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"46de24\":{\"lock\":true,\"pos\":{\"x\":-8,\"y\":1.51989996433258,\"z\":12},\"rot\":{\"x\":0.0109000001102686,\"y\":179.999603271484,\"z\":180.005004882813},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"53ebe8\":{\"lock\":false,\"pos\":{\"x\":-22.5327987670898,\"y\":1.76629996299744,\"z\":18.5328025817871},\"rot\":{\"x\":4.91650871481397E-06,\"y\":359.988403320313,\"z\":-5.74010755372001E-07},\"tint\":{\"a\":0,\"b\":0,\"g\":0,\"r\":0}},\"56c7fc\":{\"lock\":false,\"pos\":{\"x\":-30.5,\"y\":1.8353,\"z\":4.5},\"rot\":{\"x\":0,\"y\":179.9848,\"z\":0},\"tint\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1}},\"5747c6\":{\"lock\":false,\"pos\":{\"x\":17,\"y\":1.50513803958893,\"z\":17.5},\"rot\":{\"x\":359.988800048828,\"y\":314.999603271484,\"z\":0.00420422852039337},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"577413\":{\"lock\":false,\"pos\":{\"x\":-1.0003,\"y\":1.5485,\"z\":22.5001},\"rot\":{\"x\":0.0108,\"y\":180.8935,\"z\":0.0051},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"5a71fc\":{\"lock\":false,\"pos\":{\"x\":3,\"y\":1.6016,\"z\":-6.5},\"rot\":{\"x\":0.0172,\"y\":180.0127,\"z\":0.0057},\"tint\":{\"a\":1,\"b\":0.701960802078247,\"g\":0.800000011920929,\"r\":0.874509811401367}},\"6f06f5\":{\"lock\":false,\"pos\":{\"x\":6,\"y\":1.50703847408295,\"z\":22.5},\"rot\":{\"x\":0.00494784535840154,\"y\":90.0002365112305,\"z\":359.989105224609},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"7312da\":{\"lock\":false,\"pos\":{\"x\":17.5000019073486,\"y\":1.53118622303009,\"z\":-5.99980020523071},\"rot\":{\"x\":0.00494892802089453,\"y\":90.0048141479492,\"z\":359.989105224609},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"78fbe5\":{\"lock\":false,\"pos\":{\"x\":-24.5,\"y\":1.83530056476593,\"z\":13.5},\"rot\":{\"x\":-4.9433024287282E-06,\"y\":179.971572875977,\"z\":1.12495051496353E-07},\"tint\":{\"a\":1,\"b\":0,\"g\":0,\"r\":0.614982545375824}},\"82a9d3\":{\"lock\":false,\"pos\":{\"x\":9,\"y\":1.50582897663116,\"z\":17.5},\"rot\":{\"x\":-0.00420304154977202,\"y\":45.0001983642578,\"z\":359.988800048828},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"837206\":{\"lock\":false,\"pos\":{\"x\":5.5,\"y\":1.50308978557587,\"z\":1.49999952316284},\"rot\":{\"x\":0.00494778528809547,\"y\":89.9998779296875,\"z\":359.989105224609},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"868ba5\":{\"lock\":true,\"pos\":{\"x\":20,\"y\":1.51740002632141,\"z\":12},\"rot\":{\"x\":0.0109000001102686,\"y\":179.995803833008,\"z\":180.005004882813},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"89f177\":{\"lock\":false,\"pos\":{\"x\":-22.5,\"y\":1.83530080318451,\"z\":9.99999904632568},\"rot\":{\"x\":-5.94220409766422E-06,\"y\":179.973663330078,\"z\":-7.87239116561977E-07},\"tint\":{\"a\":1,\"b\":0,\"g\":0,\"r\":0.614982545375824}},\"8aea31\":{\"lock\":false,\"pos\":{\"x\":-22.5015983581543,\"y\":1.83530032634735,\"z\":16.5025005340576},\"rot\":{\"x\":-7.88387842476368E-06,\"y\":179.998260498047,\"z\":-5.8114170542467E-07},\"tint\":{\"a\":1,\"b\":0,\"g\":0,\"r\":0.614982545375824}},\"8ce93b\":{\"lock\":false,\"pos\":{\"x\":24.9999961853027,\"y\":1.51367974281311,\"z\":-5.49999332427979},\"rot\":{\"x\":0.0108912866562605,\"y\":180,\"z\":0.00494868261739612},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"9474c4\":{\"lock\":false,\"pos\":{\"x\":22.3267402648926,\"y\":1.51391160488129,\"z\":-5.49481821060181},\"rot\":{\"x\":0.0108887739479542,\"y\":180.031661987305,\"z\":0.00495435763150454},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"97b1ca\":{\"lock\":false,\"pos\":{\"x\":-8,\"y\":1.5471,\"z\":12},\"rot\":{\"x\":0.0109,\"y\":180.0048,\"z\":0.005},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"9b1907\":{\"lock\":false,\"pos\":{\"x\":23.5001,\"y\":1.5308,\"z\":-5.5001},\"rot\":{\"x\":0.0109,\"y\":179.9967,\"z\":0.0049},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"a4f0dc\":{\"lock\":false,\"pos\":{\"x\":-34.0140190124512,\"y\":1.77890539169312,\"z\":8.07808303833008},\"rot\":{\"x\":-1.09007157789165E-06,\"y\":178.883743286133,\"z\":-2.61366021732101E-05},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"a56e72\":{\"lock\":false,\"pos\":{\"x\":-27.4858,\"y\":1.7789,\"z\":20.9905},\"rot\":{\"x\":0,\"y\":180.1558,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"a7c7d2\":{\"lock\":false,\"pos\":{\"x\":-33.5,\"y\":1.8352997303009,\"z\":24},\"rot\":{\"x\":-5.22098525834735E-06,\"y\":180.000289916992,\"z\":-2.68532318159487E-07},\"tint\":{\"a\":1,\"b\":0,\"g\":0,\"r\":0.614982545375824}},\"ae6a50\":{\"lock\":false,\"pos\":{\"x\":30.5,\"y\":1.70506250858307,\"z\":-3},\"rot\":{\"x\":-0.000591064163018018,\"y\":180.001693725586,\"z\":180.001068115234},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"b058a1\":{\"lock\":false,\"pos\":{\"x\":35,\"y\":1.5444,\"z\":3},\"rot\":{\"x\":-0.0006,\"y\":179.9793,\"z\":0.0011},\"tint\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1}},\"b302b7\":{\"lock\":false,\"pos\":{\"x\":-5.00000047683716,\"y\":1.50703799724579,\"z\":17.5},\"rot\":{\"x\":-0.0042028995230794,\"y\":45.000129699707,\"z\":359.988800048828},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"b3c682\":{\"lock\":false,\"pos\":{\"x\":-20.9999980926514,\"y\":1.83530056476593,\"z\":13.5},\"rot\":{\"x\":-6.42715303911245E-06,\"y\":179.972595214844,\"z\":-5.3490822438107E-07},\"tint\":{\"a\":1,\"b\":0,\"g\":0,\"r\":0.614982545375824}},\"b98f52\":{\"lock\":false,\"pos\":{\"x\":-23.5161,\"y\":1.7789,\"z\":25.9856},\"rot\":{\"x\":0,\"y\":180.0133,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"c06148\":{\"lock\":false,\"pos\":{\"x\":-19,\"y\":1.7789,\"z\":21},\"rot\":{\"x\":0,\"y\":180.0117,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"c078a5\":{\"lock\":false,\"pos\":{\"x\":-34.0009269714355,\"y\":1.77890610694885,\"z\":4.4991774559021},\"rot\":{\"x\":-4.86278122480144E-06,\"y\":179.999969482422,\"z\":-8.99573677770604E-08},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"c3fa4b\":{\"lock\":false,\"pos\":{\"x\":6.5,\"y\":1.51860404014587,\"z\":12},\"rot\":{\"x\":0.0108915595337749,\"y\":179.999786376953,\"z\":0.00494822999462485},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"c56db4\":{\"lock\":false,\"pos\":{\"x\":-1.00000035762787,\"y\":1.50564706325531,\"z\":12},\"rot\":{\"x\":0.00494796084240079,\"y\":90.0003128051758,\"z\":359.989105224609},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"d5594a\":{\"lock\":false,\"pos\":{\"x\":13,\"y\":1.5433,\"z\":1.5},\"rot\":{\"x\":0.0109,\"y\":180.0076,\"z\":0.005},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"db182f\":{\"lock\":false,\"pos\":{\"x\":-18.398,\"y\":1.8289,\"z\":20.9999},\"rot\":{\"x\":0,\"y\":180.0076,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"df5b1f\":{\"lock\":false,\"pos\":{\"x\":-26.0000019073486,\"y\":1.83530080318451,\"z\":9.99999713897705},\"rot\":{\"x\":-4.96592747367686E-06,\"y\":179.971450805664,\"z\":5.99128782141634E-07},\"tint\":{\"a\":1,\"b\":0,\"g\":0,\"r\":0.614982545375824}},\"e23149\":{\"lock\":true,\"pos\":{\"x\":13,\"y\":1.51999998092651,\"z\":22.5},\"rot\":{\"x\":0.0109000001102686,\"y\":179.999496459961,\"z\":180.005004882813},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"e2ee03\":{\"lock\":true,\"pos\":{\"x\":13,\"y\":1.51600003242493,\"z\":1.5},\"rot\":{\"x\":0.0109000001102686,\"y\":179.999496459961,\"z\":180.005004882813},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"e59274\":{\"lock\":false,\"pos\":{\"x\":-20.0002021789551,\"y\":1.77890610694885,\"z\":4.49969530105591},\"rot\":{\"x\":-4.95408130518626E-06,\"y\":180.000778198242,\"z\":1.40003805881861E-07},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"e690d0\":{\"lock\":false,\"pos\":{\"x\":-22.471,\"y\":1.8289,\"z\":20.9451},\"rot\":{\"x\":0,\"y\":180.8935,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"eaced4\":{\"lock\":false,\"pos\":{\"x\":-19.4999,\"y\":1.7789,\"z\":26.0001},\"rot\":{\"x\":0,\"y\":180.0096,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"ec5438\":{\"lock\":false,\"pos\":{\"x\":-33.432315826416,\"y\":1.82890462875366,\"z\":8.08948421478271},\"rot\":{\"x\":6.75764385960065E-06,\"y\":178.883758544922,\"z\":-1.37416918732924E-05},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"ee8603\":{\"lock\":false,\"pos\":{\"x\":20,\"y\":1.5446,\"z\":12},\"rot\":{\"x\":0.0109,\"y\":179.9697,\"z\":0.005},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"f6a205\":{\"lock\":false,\"pos\":{\"x\":-18.9049,\"y\":1.8289,\"z\":26},\"rot\":{\"x\":0,\"y\":180.0049,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"fb669f\":{\"lock\":false,\"pos\":{\"x\":13.015,\"y\":1.5472,\"z\":22.4883},\"rot\":{\"x\":0.0109,\"y\":180.0117,\"z\":0.005},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"fcc23e\":{\"lock\":false,\"pos\":{\"x\":-27.5,\"y\":1.7789,\"z\":26},\"rot\":{\"x\":0,\"y\":179.9697,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"fd97c4\":{\"lock\":false,\"pos\":{\"x\":-5.00000047683716,\"y\":1.50494694709778,\"z\":6.5},\"rot\":{\"x\":359.988800048828,\"y\":314.999877929688,\"z\":0.00420451257377863},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}}}}","XmlUI":"","ContainedObjects":[{"GUID":"0314fd","Name":"Deck","Transform":{"posX":12.500001,"posY":1.536432,"posZ":-5.999802,"rotX":0.004949435,"rotY":90.00824,"rotZ":359.9891,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Deck Intrigue","Description":"Du Sang sur l'Autel","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":false,"SidewaysCard":true,"DeckIDs":[21602,21601,21600],"CustomDeck":{"216":{"FaceURL":"https://i.imgur.com/mEtCc6a.jpg","BackURL":"https://i.imgur.com/YuNnl5Y.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":"","ContainedObjects":[{"GUID":"39ff10","Name":"Card","Transform":{"posX":12.4999762,"posY":4.601464,"posZ":-5.999818,"rotX":0.00494951941,"rotY":90.00819,"rotZ":359.9891,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Nourrir la Bête","Description":"Intrigue 3a","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"doomThreshold\": 7,\n  \"id\": \"02198\",\n  \"type\": \"Agenda\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":21602,"SidewaysCard":true,"CustomDeck":{"216":{"FaceURL":"https://i.imgur.com/mEtCc6a.jpg","BackURL":"https://i.imgur.com/YuNnl5Y.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"a6fccb","Name":"Card","Transform":{"posX":12.4999762,"posY":4.801464,"posZ":-5.999818,"rotX":0.00494951941,"rotY":90.00819,"rotZ":359.9891,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"La Faim des Anciens","Description":"Intrigue 2a","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"doomThreshold\": 6,\n  \"id\": \"02197\",\n  \"type\": \"Agenda\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":21601,"SidewaysCard":true,"CustomDeck":{"216":{"FaceURL":"https://i.imgur.com/mEtCc6a.jpg","BackURL":"https://i.imgur.com/YuNnl5Y.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"89b58e","Name":"Card","Transform":{"posX":12.4999838,"posY":1.63043129,"posZ":-5.99983454,"rotX":0.00346590835,"rotY":90.00819,"rotZ":359.987732,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Étranges Disparitions","Description":"Intrigue 1a","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"doomThreshold\": 6,\n  \"id\": \"02196\",\n  \"type\": \"Agenda\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":21600,"SidewaysCard":true,"CustomDeck":{"216":{"FaceURL":"https://i.imgur.com/mEtCc6a.jpg","BackURL":"https://i.imgur.com/YuNnl5Y.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""}]},{"GUID":"03dd9b","Name":"Custom_Model","Transform":{"posX":-26.2245941,"posY":1.76629913,"posZ":28.7263088,"rotX":0.000004783808,"rotY":0.000460724754,"rotZ":1.7754455e-7,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Text Tool","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0,"g":0,"b":0,"a":0},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":false,"Snap":false,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":false,"Tooltip":false,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomMesh":{"MeshURL":"http://cloud-3.steamusercontent.com/ugc/1478820768302617365/27883B7913E0E69143C3AA03493B7E7C4E8C29C0/","DiffuseURL":"","NormalURL":"","ColliderURL":"","Convex":true,"MaterialIndex":1,"TypeIndex":0,"CastShadows":true},"LuaScript":"-- Code for bag to identify text tool objects\r\nmovableTextTool_cowgoesmoo33 = true\r\n\r\n-- Number of characters before the text box width expands.\r\nEXPAND_INTERVAL = 20\r\n\r\n-- This table controls what is passed between save/load\r\ndata = {}\r\n\r\nfunction onLoad(saved_data)\r\n  if saved_data ~= '' then\r\n    data = JSON.decode(saved_data)\r\n    if data.text ~= '' then\r\n      self.interactable = data.interactable\r\n      staticMode()\r\n      return\r\n    end\r\n  else\r\n    data = {size=200, color=Color(0,0,0), text='', interactable=true,\r\n        enter_to_finish=false, autolock=false, autolift=false,\r\n        hover_height=0.05, box_transparency=1}\r\n  end\r\n\r\n  inputMode()\r\nend\r\n\r\n-- True if in the middle of delay after pressing Enter (with enter_to_finish on)\r\nfinishing = false\r\nfunction input_func(obj, color, input, stillEditing)\r\n  local params = getBox(input)\r\n  if params then\r\n    params.value = input\r\n    self.editInput(params)\r\n  end\r\n\r\n  if not stillEditing then\r\n    data.text = input\r\n    updateState()\r\n    if input ~= '' then staticMode(color) end\r\n  elseif data.enter_to_finish then\r\n    -- If enter is pressed: remove last newline and force finish\r\n    if not finishing and input:sub(-1) == '\\n' then\r\n      finishing = true\r\n      -- Delay to avoid user's Enter keypress being detected (opens chat box)\r\n      Wait.frames(function()\r\n        input = input:sub(1, -2)\r\n        data.text = input\r\n        updateState()\r\n        if input ~= '' then staticMode(color) else inputMode() end\r\n        finishing = false\r\n      end, 10)\r\n    end\r\n  end\r\nend\r\n\r\n-- When the inpupt box appears and lets the player type in it.\r\nfunction inputMode()\r\n  self.clearContextMenu()\r\n  self.clearInputs()\r\n  self.clearButtons()\r\n\r\n  local size = getBox(data.text, true)\r\n\r\n  self.createInput({\r\n    input_function = \"input_func\",\r\n    function_owner = self,\r\n    label          = \"Type Here\",\r\n    alignment      = 3,\r\n    position       = {x=0, y=data.hover_height, z=0},\r\n    rotation       = {0, 180, 0},\r\n    width          = size.width,\r\n    height         = size.height,\r\n    color          = getBackground(data.color),\r\n    font_color     = data.color,\r\n    font_size      = data.size,\r\n    value          = data.text,\r\n  })\r\n\r\n  self.addContextMenuItem('Color: Object Tint', function(color)\r\n    applyMultiple(color, 'setColor')\r\n  end)\r\n  self.addContextMenuItem('Color: Player', function(color)\r\n    applyMultiple(color, 'setColor', {Color.fromString(color)})\r\n  end)\r\n  self.addContextMenuItem('Color: Black', function(color)\r\n    applyMultiple(color, 'setColor', {Color(0,0,0)})\r\n  end)\r\n  self.addContextMenuItem('Color: White', function(color)\r\n    applyMultiple(color, 'setColor', {Color(1,1,1)})\r\n  end)\r\n  self.addContextMenuItem('Size: Increase', function(color)\r\n    applyMultiple(color, 'changeSize', {50})\r\n  end, true)\r\n  self.addContextMenuItem('Size: Decrease', function(color)\r\n    applyMultiple(color, 'changeSize', {-50})\r\n  end, true)\r\nend\r\n\r\n-- When the input box disappears and displays the text.\r\nfunction staticMode(player)\r\n  self.clearContextMenu()\r\n  if data.autolock then\r\n    self.locked = true\r\n  end\r\n  if self.getInputs() and #self.getInputs() ~= 0 then\r\n    self.removeInput(0)\r\n  end\r\n\r\n  -- Clear from selecting player\r\n  if player then\r\n    self.removeFromPlayerSelection(player)\r\n  end\r\n\r\n  local displayText = data.text\r\n  if data.enter_to_finish then\r\n    displayText = displayText:gsub('%[n%]', '\\n')\r\n  end\r\n\r\n  self.createButton({\r\n    label=displayText,\r\n    click_function=\"none\",\r\n    function_owner=self,\r\n    position={0,data.hover_height,0}, rotation={0,180,0}, height=0, width=0,\r\n    font_color=data.color, font_size=data.size\r\n  })\r\n\r\n  self.addContextMenuItem('Edit Text', function(color)\r\n    self.removeFromPlayerSelection(color)\r\n    inputMode()\r\n  end)\r\n  self.addContextMenuItem('Clear', function(color)\r\n    applyMultiple(color, 'clear', _, true)\r\n  end)\r\n  self.addContextMenuItem('Color: Object Tint', function(color)\r\n    applyMultiple(color, 'setColor')\r\n  end)\r\n  self.addContextMenuItem('Color: Player', function(color)\r\n    applyMultiple(color, 'setColor', {Color.fromString(color)})\r\n  end)\r\n  self.addContextMenuItem('Color: Black', function(color)\r\n    applyMultiple(color, 'setColor', {Color(0,0,0)})\r\n  end)\r\n  self.addContextMenuItem('Color: White', function(color)\r\n    applyMultiple(color, 'setColor', {Color(1,1,1)})\r\n  end)\r\n  self.addContextMenuItem('Size: Increase', function(color)\r\n    applyMultiple(color, 'changeSize', {50})\r\n  end, true)\r\n  self.addContextMenuItem('Size: Decrease', function(color)\r\n    applyMultiple(color, 'changeSize', {-50})\r\n  end, true)\r\n  self.addContextMenuItem('Permanently Attach', attemptAttach)\r\n  self.addContextMenuItem('Permalock', function(color)\r\n    applyMultiple(color, 'permalock', _, true)\r\n  end)\r\nend\r\n\r\nfunction changeSize(params)\r\n  local delta = params[1]\r\n  local newSize = data.size + delta\r\n  if newSize > 800  or newSize < 50 then\r\n    return\r\n  end\r\n  data.size = newSize\r\n  updateState()\r\n  if self.getButtons() and #self.getButtons() ~= 0 then\r\n    self.editButton({font_size=data.size})\r\n  else\r\n    local size = getBox(data.text, true)\r\n    self.editInput({width=size.width, height=size.height, font_size=data.size})\r\n  end\r\nend\r\n\r\nfunction setColor(params)\r\n  if params and params[1] then\r\n    data.color = params[1]\r\n  else\r\n    data.color = self.getColorTint():setAt('a', 1) -- Take on color of object tint\r\n  end\r\n  updateState()\r\n  if self.getButtons() and #self.getButtons() ~= 0 then\r\n    self.editButton({font_color=data.color})\r\n  else\r\n    self.editInput({font_color=data.color, color=getBackground(data.color)})\r\n  end\r\nend\r\n\r\nfunction getBackground(color) --determines whether to use black or white depending on luminance\r\n  local r,g,b = Color(color):get()\r\n\r\n  local lum = 0.2126*r + 0.7152*g + 0.0722*b\r\n  if lum > 0.75 then\r\n    return {0.2,0.2,0.2, data.box_transparency}\r\n  else\r\n    return {1,1,1, data.box_transparency}\r\n  end\r\nend\r\n\r\nfunction clear()\r\n  data.text = ''\r\n  updateState()\r\n  inputMode()\r\nend\r\n\r\nfunction permalock()\r\n  self.interactable = false\r\n  data.interactable = false\r\n  updateState()\r\nend\r\n\r\nlocal target_script = [[\r\nfunction onLoad(script_state)\r\n  if script_state and script_state ~= '' then\r\n    local state = JSON.decode(script_state)\r\n    for _,entry in ipairs(state) do\r\n      self.createButton(entry)\r\n    end\r\n    self.addContextMenuItem('Clear All Text', function(color)\r\n      self.clearContextMenu()\r\n      self.clearButtons()\r\n      self.script_state = ''\r\n      self.script_code = ''\r\n    end)\r\n  end\r\nend\r\n]]\r\n\r\nfunction attemptAttach(player_color)\r\n  local objs = Player[player_color].getSelectedObjects()\r\n  local attachee\r\n  local attachers = {}\r\n  for _,obj in ipairs(objs) do\r\n    if obj.getVar('movableTextTool_cowgoesmoo33') then\r\n      if obj ~= self then\r\n        table.insert(attachers, obj)\r\n      end\r\n    else\r\n      if attachee then\r\n        broadcastToColor(\"More than one target selected.\", player_color)\r\n        return\r\n      else\r\n        attachee = obj\r\n      end\r\n    end\r\n  end\r\n  if attachee then\r\n    local code = attachee.script_code\r\n    if code and code ~= '' and code ~= target_script then\r\n      broadcastToColor(\"Warning: script on card has been overriden. Rewind time to undo.\", player_color)\r\n    end\r\n    for i,attacher in ipairs(attachers) do\r\n      attacher.call('attach', {target = attachee})\r\n    end\r\n    attach({target = attachee})\r\n    local type, flip = attachee.type, attachee.getRotation().z\r\n    if (type == 'Card' or type == 'Deck') and flip > 175 and flip < 185 then\r\n      broadcastToColor(\"Warning: text will not display if card or deck is facing down.\", player_color)\r\n    end\r\n  else\r\n    broadcastToColor(\"You must have a target object in your selection (using click-and-drag or Ctrl+Click) to use this option.\", player_color)\r\n  end\r\nend\r\n\r\nfunction attach(params)\r\n  local target = params.target\r\n  local displayText = data.text\r\n  if data.enter_to_finish then\r\n    displayText = displayText:gsub('%[n%]', '\\n')\r\n  end\r\n\r\n  local textRotation = self.getRotation():sub(target.getRotation())\r\n    :add(Vector(180, 0, 180))\r\n\r\n  local textPosition = target.positionToLocal(\r\n    self.getPosition():add(Vector(0, data.hover_height, 0))\r\n  )\r\n  textPosition.x = -textPosition.x\r\n\r\n  local textScale = {}\r\n  textScale.x = self.getScale().x / target.getScale().x\r\n  textScale.y = self.getScale().x / target.getScale().y\r\n  textScale.z = self.getScale().x / target.getScale().z\r\n\r\n  local details = {\r\n    label=displayText,\r\n    click_function=\"none\",\r\n    function_owner=nil,\r\n    position=textPosition,\r\n    rotation=textRotation,\r\n    scale=textScale,\r\n    height=0, width=0,\r\n    font_color=data.color, font_size=data.size\r\n  }\r\n\r\n  target.createButton(details)\r\n\r\n  local script_state = target.script_state\r\n  if script_state and script_state ~= '' then\r\n    local state = JSON.decode(script_state)\r\n    table.insert(state, details)\r\n    target.script_state = JSON.encode(state)\r\n  else\r\n    target.script_state = JSON.encode({[1]=details})\r\n  end\r\n\r\n  target.script_code = target_script\r\n\r\n  self.destruct()\r\nend\r\n\r\nfunction applyMultiple(player_color, func_string, params, static_only)\r\n  local objs = Player[player_color].getSelectedObjects()\r\n  for _,obj in ipairs(objs) do\r\n    if obj.getVar('movableTextTool_cowgoesmoo33') then\r\n      if not static_only or obj.call('isStatic') then\r\n        obj.call(func_string, params)\r\n      end\r\n    end\r\n  end\r\nend\r\n\r\nfunction isStatic()\r\n  local input = self.getInputs()\r\n  return not input or #input == 0\r\nend\r\n\r\nfunction getBox(input, force)\r\n  local maxLength, lineCount = EXPAND_INTERVAL, 1\r\n  local lineLength = 0\r\n  for i = 1, #input do\r\n    local c = input:sub(i,i)\r\n    if c == '\\n' then\r\n      lineCount = lineCount + 1\r\n      if lineLength > maxLength then maxLength = (math.floor(lineLength / EXPAND_INTERVAL) + 1) * EXPAND_INTERVAL end\r\n      lineLength = 0\r\n    else\r\n      lineLength = lineLength + 1\r\n    end\r\n  end\r\n  if lineLength > maxLength then maxLength = (math.floor(lineLength / EXPAND_INTERVAL) + 1) * EXPAND_INTERVAL end\r\n\r\n  newWidth = data.size * maxLength * 0.9\r\n  newHeight = data.size * lineCount + 23\r\n\r\n  if force or boxWidth ~= newWidth or boxHeight ~= newHeight then\r\n    boxWidth, boxHeight = newWidth, newHeight\r\n    return {width = boxWidth, height = boxHeight}\r\n  end\r\n  return nil\r\nend\r\n\r\ntemp_lift = nil\r\nfunction onPickUp(player_color)\r\n  if data.autolift then\r\n    local player = Player[player_color]\r\n    temp_lift = player.lift_height\r\n    player.lift_height = 0\r\n  end\r\nend\r\n\r\nfunction onDrop(player_color)\r\n  if data.autolift and temp_lift then\r\n    Player[player_color].lift_height = temp_lift\r\n  end\r\nend\r\n\r\n-- Should be called every time data is modified, allows info to be saved on copy/paste\r\nfunction updateState()\r\n  self.script_state = JSON.encode(data)\r\nend\r\n\r\nfunction onSave()\r\n  self.script_state = JSON.encode(data)\r\n  return self.script_state\r\nend","LuaScriptState":"{\"autolift\":false,\"autolock\":false,\"box_transparency\":1,\"color\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1},\"enter_to_finish\":false,\"hover_height\":0.05,\"interactable\":true,\"size\":450,\"text\":\"Retiré de la partie\"}","XmlUI":""},{"GUID":"09de37","Name":"Custom_Model","Transform":{"posX":35.0376,"posY":1.54540694,"posZ":0.200500026,"rotX":0.0005913934,"rotY":0.009901779,"rotZ":-0.001070232,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Text Tool","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0,"g":0,"b":0,"a":0},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":false,"Snap":false,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":false,"Tooltip":false,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomMesh":{"MeshURL":"http://cloud-3.steamusercontent.com/ugc/1478820768302617365/27883B7913E0E69143C3AA03493B7E7C4E8C29C0/","DiffuseURL":"","NormalURL":"","ColliderURL":"","Convex":true,"MaterialIndex":1,"TypeIndex":0,"CastShadows":true},"LuaScript":"-- Code for bag to identify text tool objects\r\nmovableTextTool_cowgoesmoo33 = true\r\n\r\n-- Number of characters before the text box width expands.\r\nEXPAND_INTERVAL = 20\r\n\r\n-- This table controls what is passed between save/load\r\ndata = {}\r\n\r\nfunction onLoad(saved_data)\r\n  if saved_data ~= '' then\r\n    data = JSON.decode(saved_data)\r\n    if data.text ~= '' then\r\n      self.interactable = data.interactable\r\n      staticMode()\r\n      return\r\n    end\r\n  else\r\n    data = {size=200, color=Color(0,0,0), text='', interactable=true,\r\n        enter_to_finish=false, autolock=false, autolift=false,\r\n        hover_height=0.05, box_transparency=1}\r\n  end\r\n\r\n  inputMode()\r\nend\r\n\r\n-- True if in the middle of delay after pressing Enter (with enter_to_finish on)\r\nfinishing = false\r\nfunction input_func(obj, color, input, stillEditing)\r\n  local params = getBox(input)\r\n  if params then\r\n    params.value = input\r\n    self.editInput(params)\r\n  end\r\n\r\n  if not stillEditing then\r\n    data.text = input\r\n    updateState()\r\n    if input ~= '' then staticMode(color) end\r\n  elseif data.enter_to_finish then\r\n    -- If enter is pressed: remove last newline and force finish\r\n    if not finishing and input:sub(-1) == '\\n' then\r\n      finishing = true\r\n      -- Delay to avoid user's Enter keypress being detected (opens chat box)\r\n      Wait.frames(function()\r\n        input = input:sub(1, -2)\r\n        data.text = input\r\n        updateState()\r\n        if input ~= '' then staticMode(color) else inputMode() end\r\n        finishing = false\r\n      end, 10)\r\n    end\r\n  end\r\nend\r\n\r\n-- When the inpupt box appears and lets the player type in it.\r\nfunction inputMode()\r\n  self.clearContextMenu()\r\n  self.clearInputs()\r\n  self.clearButtons()\r\n\r\n  local size = getBox(data.text, true)\r\n\r\n  self.createInput({\r\n    input_function = \"input_func\",\r\n    function_owner = self,\r\n    label          = \"Type Here\",\r\n    alignment      = 3,\r\n    position       = {x=0, y=data.hover_height, z=0},\r\n    rotation       = {0, 180, 0},\r\n    width          = size.width,\r\n    height         = size.height,\r\n    color          = getBackground(data.color),\r\n    font_color     = data.color,\r\n    font_size      = data.size,\r\n    value          = data.text,\r\n  })\r\n\r\n  self.addContextMenuItem('Color: Object Tint', function(color)\r\n    applyMultiple(color, 'setColor')\r\n  end)\r\n  self.addContextMenuItem('Color: Player', function(color)\r\n    applyMultiple(color, 'setColor', {Color.fromString(color)})\r\n  end)\r\n  self.addContextMenuItem('Color: Black', function(color)\r\n    applyMultiple(color, 'setColor', {Color(0,0,0)})\r\n  end)\r\n  self.addContextMenuItem('Color: White', function(color)\r\n    applyMultiple(color, 'setColor', {Color(1,1,1)})\r\n  end)\r\n  self.addContextMenuItem('Size: Increase', function(color)\r\n    applyMultiple(color, 'changeSize', {50})\r\n  end, true)\r\n  self.addContextMenuItem('Size: Decrease', function(color)\r\n    applyMultiple(color, 'changeSize', {-50})\r\n  end, true)\r\nend\r\n\r\n-- When the input box disappears and displays the text.\r\nfunction staticMode(player)\r\n  self.clearContextMenu()\r\n  if data.autolock then\r\n    self.locked = true\r\n  end\r\n  if self.getInputs() and #self.getInputs() ~= 0 then\r\n    self.removeInput(0)\r\n  end\r\n\r\n  -- Clear from selecting player\r\n  if player then\r\n    self.removeFromPlayerSelection(player)\r\n  end\r\n\r\n  local displayText = data.text\r\n  if data.enter_to_finish then\r\n    displayText = displayText:gsub('%[n%]', '\\n')\r\n  end\r\n\r\n  self.createButton({\r\n    label=displayText,\r\n    click_function=\"none\",\r\n    function_owner=self,\r\n    position={0,data.hover_height,0}, rotation={0,180,0}, height=0, width=0,\r\n    font_color=data.color, font_size=data.size\r\n  })\r\n\r\n  self.addContextMenuItem('Edit Text', function(color)\r\n    self.removeFromPlayerSelection(color)\r\n    inputMode()\r\n  end)\r\n  self.addContextMenuItem('Clear', function(color)\r\n    applyMultiple(color, 'clear', _, true)\r\n  end)\r\n  self.addContextMenuItem('Color: Object Tint', function(color)\r\n    applyMultiple(color, 'setColor')\r\n  end)\r\n  self.addContextMenuItem('Color: Player', function(color)\r\n    applyMultiple(color, 'setColor', {Color.fromString(color)})\r\n  end)\r\n  self.addContextMenuItem('Color: Black', function(color)\r\n    applyMultiple(color, 'setColor', {Color(0,0,0)})\r\n  end)\r\n  self.addContextMenuItem('Color: White', function(color)\r\n    applyMultiple(color, 'setColor', {Color(1,1,1)})\r\n  end)\r\n  self.addContextMenuItem('Size: Increase', function(color)\r\n    applyMultiple(color, 'changeSize', {50})\r\n  end, true)\r\n  self.addContextMenuItem('Size: Decrease', function(color)\r\n    applyMultiple(color, 'changeSize', {-50})\r\n  end, true)\r\n  self.addContextMenuItem('Permanently Attach', attemptAttach)\r\n  self.addContextMenuItem('Permalock', function(color)\r\n    applyMultiple(color, 'permalock', _, true)\r\n  end)\r\nend\r\n\r\nfunction changeSize(params)\r\n  local delta = params[1]\r\n  local newSize = data.size + delta\r\n  if newSize > 800  or newSize < 50 then\r\n    return\r\n  end\r\n  data.size = newSize\r\n  updateState()\r\n  if self.getButtons() and #self.getButtons() ~= 0 then\r\n    self.editButton({font_size=data.size})\r\n  else\r\n    local size = getBox(data.text, true)\r\n    self.editInput({width=size.width, height=size.height, font_size=data.size})\r\n  end\r\nend\r\n\r\nfunction setColor(params)\r\n  if params and params[1] then\r\n    data.color = params[1]\r\n  else\r\n    data.color = self.getColorTint():setAt('a', 1) -- Take on color of object tint\r\n  end\r\n  updateState()\r\n  if self.getButtons() and #self.getButtons() ~= 0 then\r\n    self.editButton({font_color=data.color})\r\n  else\r\n    self.editInput({font_color=data.color, color=getBackground(data.color)})\r\n  end\r\nend\r\n\r\nfunction getBackground(color) --determines whether to use black or white depending on luminance\r\n  local r,g,b = Color(color):get()\r\n\r\n  local lum = 0.2126*r + 0.7152*g + 0.0722*b\r\n  if lum > 0.75 then\r\n    return {0.2,0.2,0.2, data.box_transparency}\r\n  else\r\n    return {1,1,1, data.box_transparency}\r\n  end\r\nend\r\n\r\nfunction clear()\r\n  data.text = ''\r\n  updateState()\r\n  inputMode()\r\nend\r\n\r\nfunction permalock()\r\n  self.interactable = false\r\n  data.interactable = false\r\n  updateState()\r\nend\r\n\r\nlocal target_script = [[\r\nfunction onLoad(script_state)\r\n  if script_state and script_state ~= '' then\r\n    local state = JSON.decode(script_state)\r\n    for _,entry in ipairs(state) do\r\n      self.createButton(entry)\r\n    end\r\n    self.addContextMenuItem('Clear All Text', function(color)\r\n      self.clearContextMenu()\r\n      self.clearButtons()\r\n      self.script_state = ''\r\n      self.script_code = ''\r\n    end)\r\n  end\r\nend\r\n]]\r\n\r\nfunction attemptAttach(player_color)\r\n  local objs = Player[player_color].getSelectedObjects()\r\n  local attachee\r\n  local attachers = {}\r\n  for _,obj in ipairs(objs) do\r\n    if obj.getVar('movableTextTool_cowgoesmoo33') then\r\n      if obj ~= self then\r\n        table.insert(attachers, obj)\r\n      end\r\n    else\r\n      if attachee then\r\n        broadcastToColor(\"More than one target selected.\", player_color)\r\n        return\r\n      else\r\n        attachee = obj\r\n      end\r\n    end\r\n  end\r\n  if attachee then\r\n    local code = attachee.script_code\r\n    if code and code ~= '' and code ~= target_script then\r\n      broadcastToColor(\"Warning: script on card has been overriden. Rewind time to undo.\", player_color)\r\n    end\r\n    for i,attacher in ipairs(attachers) do\r\n      attacher.call('attach', {target = attachee})\r\n    end\r\n    attach({target = attachee})\r\n    local type, flip = attachee.type, attachee.getRotation().z\r\n    if (type == 'Card' or type == 'Deck') and flip > 175 and flip < 185 then\r\n      broadcastToColor(\"Warning: text will not display if card or deck is facing down.\", player_color)\r\n    end\r\n  else\r\n    broadcastToColor(\"You must have a target object in your selection (using click-and-drag or Ctrl+Click) to use this option.\", player_color)\r\n  end\r\nend\r\n\r\nfunction attach(params)\r\n  local target = params.target\r\n  local displayText = data.text\r\n  if data.enter_to_finish then\r\n    displayText = displayText:gsub('%[n%]', '\\n')\r\n  end\r\n\r\n  local textRotation = self.getRotation():sub(target.getRotation())\r\n    :add(Vector(180, 0, 180))\r\n\r\n  local textPosition = target.positionToLocal(\r\n    self.getPosition():add(Vector(0, data.hover_height, 0))\r\n  )\r\n  textPosition.x = -textPosition.x\r\n\r\n  local textScale = {}\r\n  textScale.x = self.getScale().x / target.getScale().x\r\n  textScale.y = self.getScale().x / target.getScale().y\r\n  textScale.z = self.getScale().x / target.getScale().z\r\n\r\n  local details = {\r\n    label=displayText,\r\n    click_function=\"none\",\r\n    function_owner=nil,\r\n    position=textPosition,\r\n    rotation=textRotation,\r\n    scale=textScale,\r\n    height=0, width=0,\r\n    font_color=data.color, font_size=data.size\r\n  }\r\n\r\n  target.createButton(details)\r\n\r\n  local script_state = target.script_state\r\n  if script_state and script_state ~= '' then\r\n    local state = JSON.decode(script_state)\r\n    table.insert(state, details)\r\n    target.script_state = JSON.encode(state)\r\n  else\r\n    target.script_state = JSON.encode({[1]=details})\r\n  end\r\n\r\n  target.script_code = target_script\r\n\r\n  self.destruct()\r\nend\r\n\r\nfunction applyMultiple(player_color, func_string, params, static_only)\r\n  local objs = Player[player_color].getSelectedObjects()\r\n  for _,obj in ipairs(objs) do\r\n    if obj.getVar('movableTextTool_cowgoesmoo33') then\r\n      if not static_only or obj.call('isStatic') then\r\n        obj.call(func_string, params)\r\n      end\r\n    end\r\n  end\r\nend\r\n\r\nfunction isStatic()\r\n  local input = self.getInputs()\r\n  return not input or #input == 0\r\nend\r\n\r\nfunction getBox(input, force)\r\n  local maxLength, lineCount = EXPAND_INTERVAL, 1\r\n  local lineLength = 0\r\n  for i = 1, #input do\r\n    local c = input:sub(i,i)\r\n    if c == '\\n' then\r\n      lineCount = lineCount + 1\r\n      if lineLength > maxLength then maxLength = (math.floor(lineLength / EXPAND_INTERVAL) + 1) * EXPAND_INTERVAL end\r\n      lineLength = 0\r\n    else\r\n      lineLength = lineLength + 1\r\n    end\r\n  end\r\n  if lineLength > maxLength then maxLength = (math.floor(lineLength / EXPAND_INTERVAL) + 1) * EXPAND_INTERVAL end\r\n\r\n  newWidth = data.size * maxLength * 0.9\r\n  newHeight = data.size * lineCount + 23\r\n\r\n  if force or boxWidth ~= newWidth or boxHeight ~= newHeight then\r\n    boxWidth, boxHeight = newWidth, newHeight\r\n    return {width = boxWidth, height = boxHeight}\r\n  end\r\n  return nil\r\nend\r\n\r\ntemp_lift = nil\r\nfunction onPickUp(player_color)\r\n  if data.autolift then\r\n    local player = Player[player_color]\r\n    temp_lift = player.lift_height\r\n    player.lift_height = 0\r\n  end\r\nend\r\n\r\nfunction onDrop(player_color)\r\n  if data.autolift and temp_lift then\r\n    Player[player_color].lift_height = temp_lift\r\n  end\r\nend\r\n\r\n-- Should be called every time data is modified, allows info to be saved on copy/paste\r\nfunction updateState()\r\n  self.script_state = JSON.encode(data)\r\nend\r\n\r\nfunction onSave()\r\n  self.script_state = JSON.encode(data)\r\n  return self.script_state\r\nend","LuaScriptState":"{\"autolift\":false,\"autolock\":false,\"box_transparency\":1,\"color\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1},\"enter_to_finish\":false,\"hover_height\":0.05,\"interactable\":true,\"size\":300,\"text\":\"Sacrifices \\npotentiels\"}","XmlUI":""},{"GUID":"0dd4f6","Name":"Custom_Tile","Transform":{"posX":9,"posY":1.50373793,"posZ":6.5,"rotX":359.9888,"rotY":314.9999,"rotZ":0.004204357,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/vppt2my.png","ImageSecondaryURL":"https://i.imgur.com/vppt2my.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":"","States":{"2":{"GUID":"44b0c5","Name":"Custom_Tile","Transform":{"posX":-39.7933121,"posY":1.63758957,"posZ":2.038383,"rotX":359.9201,"rotY":269.9961,"rotZ":0.0168742146,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/HyfE8m8.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""},"3":{"GUID":"5b38c6","Name":"Custom_Tile","Transform":{"posX":-38.8217163,"posY":1.99356019,"posZ":0.4159239,"rotX":359.9201,"rotY":272.9828,"rotZ":0.01687373,"scaleX":0.8,"scaleY":1,"scaleZ":0.8},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/dHKBLoD.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""}}},{"GUID":"1e79fd","Name":"CardCustom","Transform":{"posX":-1,"posY":1.5212,"posZ":22.5,"rotX":0.0109,"rotY":180.0001,"rotZ":180.005,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":true,"Grid":true,"Snap":false,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":1108500,"SidewaysCard":false,"CustomDeck":{"11085":{"FaceURL":"http://cloud-3.steamusercontent.com/ugc/1874088192656181477/79874E6695B40674EB042AE509B14E016AC3DB57/","BackURL":"http://cloud-3.steamusercontent.com/ugc/1874088192656181477/79874E6695B40674EB042AE509B14E016AC3DB57/","NumWidth":1,"NumHeight":1,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"1f3113","Name":"Custom_Tile","Transform":{"posX":17,"posY":1.50304711,"posZ":6.5,"rotX":-0.00420296658,"rotY":45.00021,"rotZ":359.9888,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/vppt2my.png","ImageSecondaryURL":"https://i.imgur.com/vppt2my.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":"","States":{"2":{"GUID":"44b0c5","Name":"Custom_Tile","Transform":{"posX":-39.7933121,"posY":1.63758957,"posZ":2.038383,"rotX":359.9201,"rotY":269.9961,"rotZ":0.0168742146,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/HyfE8m8.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""},"3":{"GUID":"5b38c6","Name":"Custom_Tile","Transform":{"posX":-38.8217163,"posY":1.99356019,"posZ":0.4159239,"rotX":359.9201,"rotY":272.9828,"rotZ":0.01687373,"scaleX":0.8,"scaleY":1,"scaleZ":0.8},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/dHKBLoD.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""}}},{"GUID":"27a3e1","Name":"Deck","Transform":{"posX":-27.0002136,"posY":1.815116,"posZ":4.499784,"rotX":-0.000005121819,"rotY":180.000931,"rotZ":-2.48880276e-8,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"La Bande de Naomi","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":false,"SidewaysCard":false,"DeckIDs":[18207,18203,1108700,279700,1108800,1108800],"CustomDeck":{"182":{"FaceURL":"https://i.imgur.com/AdR3VIZ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0},"2797":{"FaceURL":"http://cloud-3.steamusercontent.com/ugc/1770458304229777503/55A13270F3B20A1B9C84A0678370228A453AC62C/","BackURL":"http://cloud-3.steamusercontent.com/ugc/1835784131957489171/6E3F1D1BAA5FBB7101D3F84B5E8502CD0F7E299E/","NumWidth":1,"NumHeight":1,"BackIsHidden":true,"UniqueBack":false,"Type":0},"11087":{"FaceURL":"http://cloud-3.steamusercontent.com/ugc/1770458304229777503/55A13270F3B20A1B9C84A0678370228A453AC62C/","BackURL":"http://cloud-3.steamusercontent.com/ugc/1835784131957489171/6E3F1D1BAA5FBB7101D3F84B5E8502CD0F7E299E/","NumWidth":1,"NumHeight":1,"BackIsHidden":true,"UniqueBack":false,"Type":0},"11088":{"FaceURL":"http://cloud-3.steamusercontent.com/ugc/1770458304229776378/80A298BDA6AAB46A2F6F6231EA6F663CE41B055B/","BackURL":"http://cloud-3.steamusercontent.com/ugc/1835784131957489171/6E3F1D1BAA5FBB7101D3F84B5E8502CD0F7E299E/","NumWidth":1,"NumHeight":1,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":"","ContainedObjects":[{"GUID":"fcf0e9","Name":"Card","Transform":{"posX":-26.99995,"posY":4.880148,"posZ":4.49982548,"rotX":-0.00000492910976,"rotY":180.000214,"rotZ":0.00000105404024,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Pourchassé","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02099\",\n  \"traits\": \"Tactic.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":18207,"SidewaysCard":false,"CustomDeck":{"182":{"FaceURL":"https://i.imgur.com/AdR3VIZ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"d5b82e","Name":"Card","Transform":{"posX":-26.99995,"posY":5.08014774,"posZ":4.49982548,"rotX":-0.00000492910976,"rotY":180.000214,"rotZ":0.00000105404024,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Pourchassé","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02099\",\n  \"traits\": \"Tactic.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":18203,"SidewaysCard":false,"CustomDeck":{"182":{"FaceURL":"https://i.imgur.com/AdR3VIZ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"612943","Name":"CardCustom","Transform":{"posX":-26.99996,"posY":5.152886,"posZ":4.49984074,"rotX":0.07178898,"rotY":180.000244,"rotZ":0.0398964733,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Malfrat","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"health\": 2,\n  \"id\": \"02098\",\n  \"traits\": \"Humanoid. Criminal. Syndicate.\",\n  \"type\": \"Enemy\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":1108700,"SidewaysCard":false,"CustomDeck":{"11087":{"FaceURL":"http://cloud-3.steamusercontent.com/ugc/1770458304229777503/55A13270F3B20A1B9C84A0678370228A453AC62C/","BackURL":"http://cloud-3.steamusercontent.com/ugc/1835784131957489171/6E3F1D1BAA5FBB7101D3F84B5E8502CD0F7E299E/","NumWidth":1,"NumHeight":1,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"6faab1","Name":"CardCustom","Transform":{"posX":-26.99995,"posY":5.480148,"posZ":4.49982548,"rotX":-0.00000492910976,"rotY":180.000214,"rotZ":0.00000105404024,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Malfrat","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"health\": 2,\n  \"id\": \"02098\",\n  \"traits\": \"Humanoid. Criminal. Syndicate.\",\n  \"type\": \"Enemy\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":279700,"SidewaysCard":false,"CustomDeck":{"2797":{"FaceURL":"http://cloud-3.steamusercontent.com/ugc/1770458304229777503/55A13270F3B20A1B9C84A0678370228A453AC62C/","BackURL":"http://cloud-3.steamusercontent.com/ugc/1835784131957489171/6E3F1D1BAA5FBB7101D3F84B5E8502CD0F7E299E/","NumWidth":1,"NumHeight":1,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"113ffe","Name":"CardCustom","Transform":{"posX":-26.99995,"posY":5.680148,"posZ":4.49982548,"rotX":-0.00000492910976,"rotY":180.000214,"rotZ":0.00000105404024,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Crapule d'O'Bannion","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"health\": 2,\n  \"id\": \"02097\",\n  \"traits\": \"Humanoid. Criminal. Syndicate.\",\n  \"type\": \"Enemy\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":1108800,"SidewaysCard":false,"CustomDeck":{"11088":{"FaceURL":"http://cloud-3.steamusercontent.com/ugc/1770458304229776378/80A298BDA6AAB46A2F6F6231EA6F663CE41B055B/","BackURL":"http://cloud-3.steamusercontent.com/ugc/1835784131957489171/6E3F1D1BAA5FBB7101D3F84B5E8502CD0F7E299E/","NumWidth":1,"NumHeight":1,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"858dcb","Name":"CardCustom","Transform":{"posX":-26.99995,"posY":1.92066777,"posZ":4.49982548,"rotX":-0.00152945891,"rotY":180.000214,"rotZ":-0.00139893813,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Crapule d'O'Bannion","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"health\": 2,\n  \"id\": \"02097\",\n  \"traits\": \"Humanoid. Criminal. Syndicate.\",\n  \"type\": \"Enemy\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":1108800,"SidewaysCard":false,"CustomDeck":{"11088":{"FaceURL":"http://cloud-3.steamusercontent.com/ugc/1770458304229776378/80A298BDA6AAB46A2F6F6231EA6F663CE41B055B/","BackURL":"http://cloud-3.steamusercontent.com/ugc/1835784131957489171/6E3F1D1BAA5FBB7101D3F84B5E8502CD0F7E299E/","NumWidth":1,"NumHeight":1,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""}]},{"GUID":"29f34e","Name":"Card","Transform":{"posX":-23.000309,"posY":1.77890611,"posZ":4.49969053,"rotX":-0.00000490905,"rotY":180.000809,"rotZ":5.46867938e-8,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"La Chambre Cachée","Description":"Prison de la Bête\nDunwich.","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02214\",\n  \"locationFront\": {\n    \"connections\": \"\",\n    \"icons\": \"\",\n    \"victory\": 2\n  },\n  \"traits\": \"Dunwich.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":false,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":21319,"SidewaysCard":false,"CustomDeck":{"213":{"FaceURL":"https://i.imgur.com/8fUptYt.jpg","BackURL":"https://i.imgur.com/s72Czne.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"3a93d1","Name":"CardCustom","Transform":{"posX":-1,"posY":1.5173,"posZ":1.5,"rotX":0.0109,"rotY":180,"rotZ":180.005,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":true,"Grid":true,"Snap":false,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":1108500,"SidewaysCard":false,"CustomDeck":{"11085":{"FaceURL":"http://cloud-3.steamusercontent.com/ugc/1874088192656181477/79874E6695B40674EB042AE509B14E016AC3DB57/","BackURL":"http://cloud-3.steamusercontent.com/ugc/1874088192656181477/79874E6695B40674EB042AE509B14E016AC3DB57/","NumWidth":1,"NumHeight":1,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"44b0c5","Name":"Custom_Tile","Transform":{"posX":12.999999,"posY":1.504438,"posZ":12,"rotX":-0.0049477974,"rotY":270,"rotZ":0.0108992374,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/HyfE8m8.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":"","States":{"1":{"GUID":"b5d320","Name":"Custom_Tile","Transform":{"posX":-30.2242451,"posY":1.62478256,"posZ":3.86000347,"rotX":359.983643,"rotY":0.3773988,"rotZ":359.919922,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/vppt2my.png","ImageSecondaryURL":"https://i.imgur.com/vppt2my.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""},"3":{"GUID":"5b38c6","Name":"Custom_Tile","Transform":{"posX":-38.8217163,"posY":1.99356019,"posZ":0.4159239,"rotX":359.9201,"rotY":272.9828,"rotZ":0.01687373,"scaleX":0.8,"scaleY":1,"scaleZ":0.8},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/dHKBLoD.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""}}},{"GUID":"46de24","Name":"CardCustom","Transform":{"posX":-8,"posY":1.5199,"posZ":12,"rotX":0.0109,"rotY":179.9996,"rotZ":180.005,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":true,"Grid":true,"Snap":false,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":1108500,"SidewaysCard":false,"CustomDeck":{"11085":{"FaceURL":"http://cloud-3.steamusercontent.com/ugc/1874088192656181477/79874E6695B40674EB042AE509B14E016AC3DB57/","BackURL":"http://cloud-3.steamusercontent.com/ugc/1874088192656181477/79874E6695B40674EB042AE509B14E016AC3DB57/","NumWidth":1,"NumHeight":1,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"53ebe8","Name":"Custom_Model","Transform":{"posX":-22.5327969,"posY":1.7663,"posZ":18.5328045,"rotX":0.000004850332,"rotY":359.9884,"rotZ":-3.761265e-7,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Text Tool","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0,"g":0,"b":0,"a":0},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":false,"Snap":false,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":false,"Tooltip":false,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomMesh":{"MeshURL":"http://cloud-3.steamusercontent.com/ugc/1478820768302617365/27883B7913E0E69143C3AA03493B7E7C4E8C29C0/","DiffuseURL":"","NormalURL":"","ColliderURL":"","Convex":true,"MaterialIndex":1,"TypeIndex":0,"CastShadows":true},"LuaScript":"-- Code for bag to identify text tool objects\r\nmovableTextTool_cowgoesmoo33 = true\r\n\r\n-- Number of characters before the text box width expands.\r\nEXPAND_INTERVAL = 20\r\n\r\n-- This table controls what is passed between save/load\r\ndata = {}\r\n\r\nfunction onLoad(saved_data)\r\n  if saved_data ~= '' then\r\n    data = JSON.decode(saved_data)\r\n    if data.text ~= '' then\r\n      self.interactable = data.interactable\r\n      staticMode()\r\n      return\r\n    end\r\n  else\r\n    data = {size=200, color=Color(0,0,0), text='', interactable=true,\r\n        enter_to_finish=false, autolock=false, autolift=false,\r\n        hover_height=0.05, box_transparency=1}\r\n  end\r\n\r\n  inputMode()\r\nend\r\n\r\n-- True if in the middle of delay after pressing Enter (with enter_to_finish on)\r\nfinishing = false\r\nfunction input_func(obj, color, input, stillEditing)\r\n  local params = getBox(input)\r\n  if params then\r\n    params.value = input\r\n    self.editInput(params)\r\n  end\r\n\r\n  if not stillEditing then\r\n    data.text = input\r\n    updateState()\r\n    if input ~= '' then staticMode(color) end\r\n  elseif data.enter_to_finish then\r\n    -- If enter is pressed: remove last newline and force finish\r\n    if not finishing and input:sub(-1) == '\\n' then\r\n      finishing = true\r\n      -- Delay to avoid user's Enter keypress being detected (opens chat box)\r\n      Wait.frames(function()\r\n        input = input:sub(1, -2)\r\n        data.text = input\r\n        updateState()\r\n        if input ~= '' then staticMode(color) else inputMode() end\r\n        finishing = false\r\n      end, 10)\r\n    end\r\n  end\r\nend\r\n\r\n-- When the inpupt box appears and lets the player type in it.\r\nfunction inputMode()\r\n  self.clearContextMenu()\r\n  self.clearInputs()\r\n  self.clearButtons()\r\n\r\n  local size = getBox(data.text, true)\r\n\r\n  self.createInput({\r\n    input_function = \"input_func\",\r\n    function_owner = self,\r\n    label          = \"Type Here\",\r\n    alignment      = 3,\r\n    position       = {x=0, y=data.hover_height, z=0},\r\n    rotation       = {0, 180, 0},\r\n    width          = size.width,\r\n    height         = size.height,\r\n    color          = getBackground(data.color),\r\n    font_color     = data.color,\r\n    font_size      = data.size,\r\n    value          = data.text,\r\n  })\r\n\r\n  self.addContextMenuItem('Color: Object Tint', function(color)\r\n    applyMultiple(color, 'setColor')\r\n  end)\r\n  self.addContextMenuItem('Color: Player', function(color)\r\n    applyMultiple(color, 'setColor', {Color.fromString(color)})\r\n  end)\r\n  self.addContextMenuItem('Color: Black', function(color)\r\n    applyMultiple(color, 'setColor', {Color(0,0,0)})\r\n  end)\r\n  self.addContextMenuItem('Color: White', function(color)\r\n    applyMultiple(color, 'setColor', {Color(1,1,1)})\r\n  end)\r\n  self.addContextMenuItem('Size: Increase', function(color)\r\n    applyMultiple(color, 'changeSize', {50})\r\n  end, true)\r\n  self.addContextMenuItem('Size: Decrease', function(color)\r\n    applyMultiple(color, 'changeSize', {-50})\r\n  end, true)\r\nend\r\n\r\n-- When the input box disappears and displays the text.\r\nfunction staticMode(player)\r\n  self.clearContextMenu()\r\n  if data.autolock then\r\n    self.locked = true\r\n  end\r\n  if self.getInputs() and #self.getInputs() ~= 0 then\r\n    self.removeInput(0)\r\n  end\r\n\r\n  -- Clear from selecting player\r\n  if player then\r\n    self.removeFromPlayerSelection(player)\r\n  end\r\n\r\n  local displayText = data.text\r\n  if data.enter_to_finish then\r\n    displayText = displayText:gsub('%[n%]', '\\n')\r\n  end\r\n\r\n  self.createButton({\r\n    label=displayText,\r\n    click_function=\"none\",\r\n    function_owner=self,\r\n    position={0,data.hover_height,0}, rotation={0,180,0}, height=0, width=0,\r\n    font_color=data.color, font_size=data.size\r\n  })\r\n\r\n  self.addContextMenuItem('Edit Text', function(color)\r\n    self.removeFromPlayerSelection(color)\r\n    inputMode()\r\n  end)\r\n  self.addContextMenuItem('Clear', function(color)\r\n    applyMultiple(color, 'clear', _, true)\r\n  end)\r\n  self.addContextMenuItem('Color: Object Tint', function(color)\r\n    applyMultiple(color, 'setColor')\r\n  end)\r\n  self.addContextMenuItem('Color: Player', function(color)\r\n    applyMultiple(color, 'setColor', {Color.fromString(color)})\r\n  end)\r\n  self.addContextMenuItem('Color: Black', function(color)\r\n    applyMultiple(color, 'setColor', {Color(0,0,0)})\r\n  end)\r\n  self.addContextMenuItem('Color: White', function(color)\r\n    applyMultiple(color, 'setColor', {Color(1,1,1)})\r\n  end)\r\n  self.addContextMenuItem('Size: Increase', function(color)\r\n    applyMultiple(color, 'changeSize', {50})\r\n  end, true)\r\n  self.addContextMenuItem('Size: Decrease', function(color)\r\n    applyMultiple(color, 'changeSize', {-50})\r\n  end, true)\r\n  self.addContextMenuItem('Permanently Attach', attemptAttach)\r\n  self.addContextMenuItem('Permalock', function(color)\r\n    applyMultiple(color, 'permalock', _, true)\r\n  end)\r\nend\r\n\r\nfunction changeSize(params)\r\n  local delta = params[1]\r\n  local newSize = data.size + delta\r\n  if newSize > 800  or newSize < 50 then\r\n    return\r\n  end\r\n  data.size = newSize\r\n  updateState()\r\n  if self.getButtons() and #self.getButtons() ~= 0 then\r\n    self.editButton({font_size=data.size})\r\n  else\r\n    local size = getBox(data.text, true)\r\n    self.editInput({width=size.width, height=size.height, font_size=data.size})\r\n  end\r\nend\r\n\r\nfunction setColor(params)\r\n  if params and params[1] then\r\n    data.color = params[1]\r\n  else\r\n    data.color = self.getColorTint():setAt('a', 1) -- Take on color of object tint\r\n  end\r\n  updateState()\r\n  if self.getButtons() and #self.getButtons() ~= 0 then\r\n    self.editButton({font_color=data.color})\r\n  else\r\n    self.editInput({font_color=data.color, color=getBackground(data.color)})\r\n  end\r\nend\r\n\r\nfunction getBackground(color) --determines whether to use black or white depending on luminance\r\n  local r,g,b = Color(color):get()\r\n\r\n  local lum = 0.2126*r + 0.7152*g + 0.0722*b\r\n  if lum > 0.75 then\r\n    return {0.2,0.2,0.2, data.box_transparency}\r\n  else\r\n    return {1,1,1, data.box_transparency}\r\n  end\r\nend\r\n\r\nfunction clear()\r\n  data.text = ''\r\n  updateState()\r\n  inputMode()\r\nend\r\n\r\nfunction permalock()\r\n  self.interactable = false\r\n  data.interactable = false\r\n  updateState()\r\nend\r\n\r\nlocal target_script = [[\r\nfunction onLoad(script_state)\r\n  if script_state and script_state ~= '' then\r\n    local state = JSON.decode(script_state)\r\n    for _,entry in ipairs(state) do\r\n      self.createButton(entry)\r\n    end\r\n    self.addContextMenuItem('Clear All Text', function(color)\r\n      self.clearContextMenu()\r\n      self.clearButtons()\r\n      self.script_state = ''\r\n      self.script_code = ''\r\n    end)\r\n  end\r\nend\r\n]]\r\n\r\nfunction attemptAttach(player_color)\r\n  local objs = Player[player_color].getSelectedObjects()\r\n  local attachee\r\n  local attachers = {}\r\n  for _,obj in ipairs(objs) do\r\n    if obj.getVar('movableTextTool_cowgoesmoo33') then\r\n      if obj ~= self then\r\n        table.insert(attachers, obj)\r\n      end\r\n    else\r\n      if attachee then\r\n        broadcastToColor(\"More than one target selected.\", player_color)\r\n        return\r\n      else\r\n        attachee = obj\r\n      end\r\n    end\r\n  end\r\n  if attachee then\r\n    local code = attachee.script_code\r\n    if code and code ~= '' and code ~= target_script then\r\n      broadcastToColor(\"Warning: script on card has been overriden. Rewind time to undo.\", player_color)\r\n    end\r\n    for i,attacher in ipairs(attachers) do\r\n      attacher.call('attach', {target = attachee})\r\n    end\r\n    attach({target = attachee})\r\n    local type, flip = attachee.type, attachee.getRotation().z\r\n    if (type == 'Card' or type == 'Deck') and flip > 175 and flip < 185 then\r\n      broadcastToColor(\"Warning: text will not display if card or deck is facing down.\", player_color)\r\n    end\r\n  else\r\n    broadcastToColor(\"You must have a target object in your selection (using click-and-drag or Ctrl+Click) to use this option.\", player_color)\r\n  end\r\nend\r\n\r\nfunction attach(params)\r\n  local target = params.target\r\n  local displayText = data.text\r\n  if data.enter_to_finish then\r\n    displayText = displayText:gsub('%[n%]', '\\n')\r\n  end\r\n\r\n  local textRotation = self.getRotation():sub(target.getRotation())\r\n    :add(Vector(180, 0, 180))\r\n\r\n  local textPosition = target.positionToLocal(\r\n    self.getPosition():add(Vector(0, data.hover_height, 0))\r\n  )\r\n  textPosition.x = -textPosition.x\r\n\r\n  local textScale = {}\r\n  textScale.x = self.getScale().x / target.getScale().x\r\n  textScale.y = self.getScale().x / target.getScale().y\r\n  textScale.z = self.getScale().x / target.getScale().z\r\n\r\n  local details = {\r\n    label=displayText,\r\n    click_function=\"none\",\r\n    function_owner=nil,\r\n    position=textPosition,\r\n    rotation=textRotation,\r\n    scale=textScale,\r\n    height=0, width=0,\r\n    font_color=data.color, font_size=data.size\r\n  }\r\n\r\n  target.createButton(details)\r\n\r\n  local script_state = target.script_state\r\n  if script_state and script_state ~= '' then\r\n    local state = JSON.decode(script_state)\r\n    table.insert(state, details)\r\n    target.script_state = JSON.encode(state)\r\n  else\r\n    target.script_state = JSON.encode({[1]=details})\r\n  end\r\n\r\n  target.script_code = target_script\r\n\r\n  self.destruct()\r\nend\r\n\r\nfunction applyMultiple(player_color, func_string, params, static_only)\r\n  local objs = Player[player_color].getSelectedObjects()\r\n  for _,obj in ipairs(objs) do\r\n    if obj.getVar('movableTextTool_cowgoesmoo33') then\r\n      if not static_only or obj.call('isStatic') then\r\n        obj.call(func_string, params)\r\n      end\r\n    end\r\n  end\r\nend\r\n\r\nfunction isStatic()\r\n  local input = self.getInputs()\r\n  return not input or #input == 0\r\nend\r\n\r\nfunction getBox(input, force)\r\n  local maxLength, lineCount = EXPAND_INTERVAL, 1\r\n  local lineLength = 0\r\n  for i = 1, #input do\r\n    local c = input:sub(i,i)\r\n    if c == '\\n' then\r\n      lineCount = lineCount + 1\r\n      if lineLength > maxLength then maxLength = (math.floor(lineLength / EXPAND_INTERVAL) + 1) * EXPAND_INTERVAL end\r\n      lineLength = 0\r\n    else\r\n      lineLength = lineLength + 1\r\n    end\r\n  end\r\n  if lineLength > maxLength then maxLength = (math.floor(lineLength / EXPAND_INTERVAL) + 1) * EXPAND_INTERVAL end\r\n\r\n  newWidth = data.size * maxLength * 0.9\r\n  newHeight = data.size * lineCount + 23\r\n\r\n  if force or boxWidth ~= newWidth or boxHeight ~= newHeight then\r\n    boxWidth, boxHeight = newWidth, newHeight\r\n    return {width = boxWidth, height = boxHeight}\r\n  end\r\n  return nil\r\nend\r\n\r\ntemp_lift = nil\r\nfunction onPickUp(player_color)\r\n  if data.autolift then\r\n    local player = Player[player_color]\r\n    temp_lift = player.lift_height\r\n    player.lift_height = 0\r\n  end\r\nend\r\n\r\nfunction onDrop(player_color)\r\n  if data.autolift and temp_lift then\r\n    Player[player_color].lift_height = temp_lift\r\n  end\r\nend\r\n\r\n-- Should be called every time data is modified, allows info to be saved on copy/paste\r\nfunction updateState()\r\n  self.script_state = JSON.encode(data)\r\nend\r\n\r\nfunction onSave()\r\n  self.script_state = JSON.encode(data)\r\n  return self.script_state\r\nend","LuaScriptState":"{\"autolift\":false,\"autolock\":false,\"box_transparency\":1,\"color\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1},\"enter_to_finish\":false,\"hover_height\":0.05,\"interactable\":true,\"size\":400,\"text\":\"Lieux aléatoires\"}","XmlUI":""},{"GUID":"56c7fc","Name":"Custom_Model_Bag","Transform":{"posX":-30.5000038,"posY":1.83530128,"posZ":4.49999571,"rotX":-0.000005086153,"rotY":179.984833,"rotZ":7.87058152e-9,"scaleX":0.7,"scaleY":0.7,"scaleZ":0.7},"Nickname":"Soutiens/faiblesses d'histoire","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":1,"g":1,"b":1},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"MaterialIndex":-1,"MeshIndex":-1,"CustomMesh":{"MeshURL":"https://pastebin.com/raw/ALrYhQGb","DiffuseURL":"http://cloud-3.steamusercontent.com/ugc/5077277234347423622/F89B4508C6E2782780C2B5593FB68379E0FB2DB6/","NormalURL":"","ColliderURL":"","Convex":true,"MaterialIndex":3,"TypeIndex":6,"CustomShader":{"SpecularColor":{"r":1,"g":1,"b":1},"SpecularIntensity":0,"SpecularSharpness":2,"FresnelStrength":0},"CastShadows":true},"Bag":{"Order":0},"LuaScript":"","LuaScriptState":"{\"ml\":[]}","XmlUI":"","ContainedObjects":[{"GUID":"77f580","Name":"Card","Transform":{"posX":-30.999773,"posY":1.94977856,"posZ":3.5185926,"rotX":6.37700844,"rotY":179.995041,"rotZ":0.006232391,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Poudre d'Ibn-Ghazi","Description":"Voir l'Invisible","GMNotes":"{\n  \"class\": \"Neutral\",\n  \"cost\": 0,\n  \"cycle\": \"The Dunwich Legacy\",\n  \"id\": \"02219\",\n  \"traits\": \"Item.\",\n  \"type\": \"Asset\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":21315,"SidewaysCard":false,"CustomDeck":{"213":{"FaceURL":"https://i.imgur.com/8fUptYt.jpg","BackURL":"https://i.imgur.com/s72Czne.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""}]},{"GUID":"5747c6","Name":"Custom_Tile","Transform":{"posX":17.0000019,"posY":1.505138,"posZ":17.5,"rotX":359.9888,"rotY":314.999542,"rotZ":0.00420517847,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/vppt2my.png","ImageSecondaryURL":"https://i.imgur.com/vppt2my.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":"","States":{"2":{"GUID":"44b0c5","Name":"Custom_Tile","Transform":{"posX":-39.7933121,"posY":1.63758957,"posZ":2.038383,"rotX":359.9201,"rotY":269.9961,"rotZ":0.0168742146,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/HyfE8m8.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""},"3":{"GUID":"5b38c6","Name":"Custom_Tile","Transform":{"posX":-38.8217163,"posY":1.99356019,"posZ":0.4159239,"rotX":359.9201,"rotY":272.9828,"rotZ":0.01687373,"scaleX":0.8,"scaleY":1,"scaleZ":0.8},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/dHKBLoD.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""}}},{"GUID":"5a71fc","Name":"Custom_Tile","Transform":{"posX":2.99999785,"posY":1.60163224,"posZ":-6.499996,"rotX":0.0171781927,"rotY":180.01268,"rotZ":0.005655238,"scaleX":1.6428808,"scaleY":1,"scaleZ":1.6428808},"Nickname":"Mise en place du Chaos Bag","Description":"IV : Du Sang sur l'Autel","GMNotes":"{\"data\":\"Blood on the Altar\",\"easy\":false,\"expert\":false,\"hard\":false,\"normal\":false,\"standalone\":true}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.8745098,"g":0.8,"b":0.7019608},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"http://cloud-3.steamusercontent.com/ugc/2011456161884106028/81BF2DAD34FE18B6788B56E21F16B81E6525AD99/","ImageSecondaryURL":"http://cloud-3.steamusercontent.com/ugc/2011456161884106028/81BF2DAD34FE18B6788B56E21F16B81E6525AD99/","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"\r\njacqueline_guid = '42cd6e'\r\n\r\nbuttonparams = {\r\n   ['easy'] = {label = \"Facile\", click_function = 'modeEasy', z_i = -0.2},\r\n   ['normal'] = {label = \"Standard\", click_function = 'modeNormal', z_i = 0.1},\r\n   ['hard'] = {label = \"Difficile\", click_function = 'modeHard', z_i = 0.4},\r\n   ['expert'] = {label = \"Expert\", click_function = 'modeExpert', z_i = 0.7},\r\n   ['standalone'] = {label = \"Indépendant\", click_function = 'modeStandalone', z_i = 0},\r\n}\r\n\r\nfunction onLoad()\r\n\r\n    metadata = JSON.decode(self.getGMNotes())\r\n    buttontable = {}\r\n    for key, value in pairs(buttonparams) do\r\n        if metadata[key] == true then\r\n            table.insert(buttontable,value)\r\n        end\r\n        \r\n    end\r\n\r\n    for _, button in pairs(buttontable) do\r\n        local data = {\r\n            click_function = button.click_function, \r\n            function_owner = self, \r\n            label = button.label, \r\n            position = {0, 0.1, button.z_i}, \r\n            scale = {0.3, 0.5, 0.3}, \r\n            width = 1500, \r\n            height = 400, \r\n            font_size = 250, \r\n            tooltip = \"Chaos bag du mode \"..button.label,\r\n            color = {0.5647, 0.4627, 0.2353, 1}, \r\n            font_color = {0.9041, 0.8313, 0.7356, 1},\r\n            hover_color = {99/255, 85/255, 48/255},\r\n            press_color = {192/255, 152/255, 94/255} }\r\n        self.createButton(data)\r\n        \r\n    end\r\n    jacqueline = getObjectFromGUID(jacqueline_guid)\r\n    chaosdata = jacqueline.getTable('chaosdata')\r\nend\r\n\r\nfunction modeEasy()\r\n    local  params ={}\r\n     params.mode = 'easy'\r\n     params.data = metadata.data\r\n     jacqueline.call('setChaosBag', params)\r\n  \r\nend\r\n\r\nfunction modeNormal()\r\n      local  params ={}\r\n       params.mode = 'normal'\r\n       params.data = metadata.data\r\n       jacqueline.call('setChaosBag', params)\r\n    \r\nend\r\n\r\nfunction modeHard()\r\n    local  params ={}\r\n     params.mode = 'hard'\r\n     params.data = metadata.data\r\n     jacqueline.call('setChaosBag', params)\r\n  \r\nend\r\n\r\nfunction modeExpert()\r\n    local  params ={}\r\n     params.mode = 'expert'\r\n     params.data = metadata.data\r\n     jacqueline.call('setChaosBag', params)\r\n  \r\nend\r\n\r\nfunction modeStandalone()\r\n    local  params ={}\r\n     params.mode = 'standalone'\r\n     params.data = metadata.data\r\n     jacqueline.call('setChaosBag', params)\r\n  \r\nend","LuaScriptState":"","XmlUI":""},{"GUID":"6f06f5","Name":"Custom_Tile","Transform":{"posX":6,"posY":1.50703859,"posZ":22.5,"rotX":0.00494738761,"rotY":90.0002747,"rotZ":359.9891,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/vppt2my.png","ImageSecondaryURL":"https://i.imgur.com/vppt2my.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":"","States":{"2":{"GUID":"44b0c5","Name":"Custom_Tile","Transform":{"posX":-39.7933121,"posY":1.63758957,"posZ":2.038383,"rotX":359.9201,"rotY":269.9961,"rotZ":0.0168742146,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/HyfE8m8.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""},"3":{"GUID":"5b38c6","Name":"Custom_Tile","Transform":{"posX":-38.8217163,"posY":1.99356019,"posZ":0.4159239,"rotX":359.9201,"rotY":272.9828,"rotZ":0.01687373,"scaleX":0.8,"scaleY":1,"scaleZ":0.8},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/dHKBLoD.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""}}},{"GUID":"7312da","Name":"Deck","Transform":{"posX":17.5000019,"posY":1.53118622,"posZ":-5.999796,"rotX":0.004948913,"rotY":90.0048141,"rotZ":359.9891,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Deck Acte","Description":"Du Sang sur l'Autel","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":false,"SidewaysCard":true,"DeckIDs":[21604,21603],"CustomDeck":{"216":{"FaceURL":"https://i.imgur.com/mEtCc6a.jpg","BackURL":"https://i.imgur.com/YuNnl5Y.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":"","ContainedObjects":[{"GUID":"b1593e","Name":"Card","Transform":{"posX":17.5000114,"posY":1.60767555,"posZ":-5.99979639,"rotX":0.004405646,"rotY":90.0046539,"rotZ":359.9886,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"La Chambre de la Bête","Description":"Acte 2a","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02200\",\n  \"type\": \"Act\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":21604,"SidewaysCard":true,"CustomDeck":{"216":{"FaceURL":"https://i.imgur.com/mEtCc6a.jpg","BackURL":"https://i.imgur.com/YuNnl5Y.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"c9e2c5","Name":"Card","Transform":{"posX":17.5000172,"posY":1.621335,"posZ":-5.99980736,"rotX":0.00348606124,"rotY":90.0046539,"rotZ":359.987732,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Chercher des Réponses","Description":"Acte 1a","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02199\",\n  \"type\": \"Act\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":21603,"SidewaysCard":true,"CustomDeck":{"216":{"FaceURL":"https://i.imgur.com/mEtCc6a.jpg","BackURL":"https://i.imgur.com/YuNnl5Y.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""}]},{"GUID":"82a9d3","Name":"Custom_Tile","Transform":{"posX":9,"posY":1.505829,"posZ":17.5,"rotX":-0.004202813,"rotY":45.0002,"rotZ":359.9888,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/vppt2my.png","ImageSecondaryURL":"https://i.imgur.com/vppt2my.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":"","States":{"2":{"GUID":"44b0c5","Name":"Custom_Tile","Transform":{"posX":-39.7933121,"posY":1.63758957,"posZ":2.038383,"rotX":359.9201,"rotY":269.9961,"rotZ":0.0168742146,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/HyfE8m8.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""},"3":{"GUID":"5b38c6","Name":"Custom_Tile","Transform":{"posX":-38.8217163,"posY":1.99356019,"posZ":0.4159239,"rotX":359.9201,"rotY":272.9828,"rotZ":0.01687373,"scaleX":0.8,"scaleY":1,"scaleZ":0.8},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/dHKBLoD.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""}}},{"GUID":"837206","Name":"Custom_Tile","Transform":{"posX":5.5,"posY":1.50308979,"posZ":1.49999869,"rotX":0.0049477946,"rotY":89.99987,"rotZ":359.9891,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/vppt2my.png","ImageSecondaryURL":"https://i.imgur.com/vppt2my.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":"","States":{"2":{"GUID":"44b0c5","Name":"Custom_Tile","Transform":{"posX":-39.7933121,"posY":1.63758957,"posZ":2.038383,"rotX":359.9201,"rotY":269.9961,"rotZ":0.0168742146,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/HyfE8m8.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""},"3":{"GUID":"5b38c6","Name":"Custom_Tile","Transform":{"posX":-38.8217163,"posY":1.99356019,"posZ":0.4159239,"rotX":359.9201,"rotY":272.9828,"rotZ":0.01687373,"scaleX":0.8,"scaleY":1,"scaleZ":0.8},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/dHKBLoD.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""}}},{"GUID":"868ba5","Name":"CardCustom","Transform":{"posX":20,"posY":1.5174,"posZ":12,"rotX":0.0109,"rotY":179.9958,"rotZ":180.005,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":true,"Grid":true,"Snap":false,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":1108500,"SidewaysCard":false,"CustomDeck":{"11085":{"FaceURL":"http://cloud-3.steamusercontent.com/ugc/1874088192656181477/79874E6695B40674EB042AE509B14E016AC3DB57/","BackURL":"http://cloud-3.steamusercontent.com/ugc/1874088192656181477/79874E6695B40674EB042AE509B14E016AC3DB57/","NumWidth":1,"NumHeight":1,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"8aea31","Name":"Custom_Model_Bag","Transform":{"posX":-22.5015965,"posY":1.83530033,"posZ":16.5025024,"rotX":-0.0000063867833,"rotY":179.998276,"rotZ":-6.59093757e-8,"scaleX":0.7,"scaleY":0.7,"scaleZ":0.7},"Nickname":"Choisir un lieu et le retirer de la partie","Description":"merci à Chr1Z pour le script","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.614982545,"g":0,"b":0},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"MaterialIndex":-1,"MeshIndex":-1,"CustomMesh":{"MeshURL":"https://pastebin.com/raw/ALrYhQGb","DiffuseURL":"http://cloud-3.steamusercontent.com/ugc/1932636167915972712/EC76A64317C7AA3976260C5B09D9C052E77C6901/","NormalURL":"","ColliderURL":"","Convex":true,"MaterialIndex":3,"TypeIndex":6,"CustomShader":{"SpecularColor":{"r":1,"g":1,"b":1},"SpecularIntensity":0,"SpecularSharpness":2,"FresnelStrength":0},"CastShadows":true},"Bag":{"Order":0},"LuaScript":"-- Random memory bag\r\n-- based on Utility memory bag by Directsun (Version 2.7.0)\r\n\r\nlocal CONFIG = {\r\n    MEMORY_GROUP = {\r\n        -- This determines how many frames to wait before actually placing objects onto the table when the \"Place\" button is clicked.\r\n        -- This gives the other bags time to recall their objects.\r\n        -- The delay ONLY occurs if other bags have objects out.\r\n        FRAME_DELAY_BEFORE_PLACING_OBJECTS = 30\r\n    }\r\n}\r\n\r\nmath.randomseed(os.time())\r\n\r\n--[[ Memory Bag Groups ]]\r\n--[[ Utility Memory Bags may be added to a named group, called a \"memory group\".\r\nYou can add a bag to a group through the bag's UI: \"Setup\" > \"Group Name\" (to the left of the bag).\r\nOnly one bag from a group may have it's contents placed on the table at a time.\r\nWhen \"Place\" is clicked on a bag, the other bags in it's memory group are recalled.\r\nBy default a memory bag is not in any group. It's memory group is \"nil\". --]]\r\n\r\nmemoryGroupName = { memoryBag = self }\r\nfunction memoryGroupName:get()\r\n    return self._name\r\nend\r\n\r\nfunction memoryGroupName:set(newName)\r\n    GlobalMemoryGroups:unregisterBagInGroup(self:get(), self.memoryBag.getGUID())\r\n    GlobalMemoryGroups:registerBagInGroup(newName, self.memoryBag.getGUID())\r\n\r\n    if newName == \"\" then\r\n        self._name = nil\r\n    else\r\n        self._name = newName\r\n    end\r\nend\r\n\r\n-- Click the \"Recall\" button on all other bags in my memory group.\r\nfunction recallOtherBagsInMyGroup()\r\n    for _, bag in ipairs(getOtherBagsInMyGroup()) do\r\n        bag.call('buttonClick_recall')\r\n    end\r\nend\r\n\r\n-- Return \"true\" if another bag in my memory group has any objects out on the table.\r\nfunction anyOtherBagsInMyGroupArePlaced()\r\n    for _, bag in ipairs(getOtherBagsInMyGroup()) do\r\n        local state = bag.call('areAnyOfMyObjectsPlaced')\r\n        if state then return true end\r\n    end\r\n\r\n    return false\r\nend\r\n\r\n-- Return \"true\" if at least one object from this memory bag is out on the table.\r\nfunction areAnyOfMyObjectsPlaced()\r\n    for guid, _ in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then\r\n            return true\r\n        end\r\n    end\r\n    return false\r\nend\r\n\r\nfunction getOtherBagsInMyGroup()\r\n    local bags = {}\r\n    for bagGuid, _ in pairs(GlobalMemoryGroups:getGroup(memoryGroupName:get())) do\r\n        if bagGuid ~= self.getGUID() then\r\n            bag = getObjectFromGUID(bagGuid)\r\n            -- \"bag\" is nill if it has been deleted since the last time onLoad() was called.\r\n            if bag ~= nil then\r\n                table.insert(bags, bag)\r\n            end\r\n        end\r\n    end\r\n    return bags\r\nend\r\n\r\n--[[\r\nThis object provides access to a variable stored on the \"Global script\".\r\nThe variable holds the names & guids of all memory bag groups.\r\nThe global variable is a table and holds data like this:\r\n{\r\n    'My First Group Name' = {\r\n        '805ebd' = {},\r\n        '35cc21' = {},\r\n        'fc8886' = {},\r\n    },\r\n    'My Second Group Name' = {\r\n        'f50264' = {},\r\n        '5f5f63' = {},\r\n    },\r\n}\r\n--]]\r\nGlobalMemoryGroups = { NAME_OF_GLOBAL_VARIABLE = '_GlobalUtilityMemoryBagGroups' }\r\n\r\n-- Call me inside this script's \"onLoad()\" method!\r\nfunction GlobalMemoryGroups:onLoad(myGuid)\r\n    -- Create and initialize the global variable if it doesn't already exist:\r\n    if self:_getGroups() == nil then\r\n        self:_setGroups({})\r\n    end\r\nend\r\n\r\n-- Return the GUIDs of all bags in the \"groupName\". The return value is a dictionary that maps [GUID -> empty table].\r\nfunction GlobalMemoryGroups:getGroup(groupName)\r\n    guids = self:_getGroups()[groupName] or {}\r\n    return guids\r\nend\r\n\r\n-- Registers a bag in a memory group. Creates a new group if one doesn't exist.\r\nfunction GlobalMemoryGroups:registerBagInGroup(groupName, bagGuid)\r\n    if groupName == nil or groupName == \"\" then\r\n        return\r\n    end\r\n\r\n    self:_tryCreateNewGroup(groupName)\r\n    local groups = self:_getGroups()\r\n    groups[groupName][bagGuid] = {}\r\n    self:_setGroups(groups)\r\nend\r\n\r\n-- Removes this bag from the memory group.\r\nfunction GlobalMemoryGroups:unregisterBagInGroup(groupName, bagGuid)\r\n    local groups = self:_getGroups()\r\n    local group = groups[groupName]\r\n    if group ~= nil then\r\n        group[bagGuid] = nil\r\n        self:_setGroups(groups)\r\n    end\r\nend\r\n\r\n-- Return the global variable, which is a table holding all memory group names & guids.\r\nfunction GlobalMemoryGroups:_getGroups()\r\n    return Global.getTable(self.NAME_OF_GLOBAL_VARIABLE)\r\nend\r\n\r\n-- Override the global variable (i.e. the entire table).\r\nfunction GlobalMemoryGroups:_setGroups(newTable)\r\n    Global.setTable(self.NAME_OF_GLOBAL_VARIABLE, newTable)\r\nend\r\n\r\n-- Add a new memory group named \"groupName\" to the global variable, if one doesn't already exist.\r\nfunction GlobalMemoryGroups:_tryCreateNewGroup(groupName)\r\n    local groups = self:_getGroups()\r\n    if groups[groupName] == nil then\r\n        groups[groupName] = {}\r\n        self:_setGroups(groups)\r\n    end\r\nend\r\n\r\n-- This object controls the \"Group Name\" input text field that is part of the bag's ingame UI.\r\ngroupNameInput = {\r\n    greyedOutText     = \"Group Name\",\r\n    widthPerCharacter = 100,\r\n    padding           = 4,\r\n    memoryBag         = self\r\n}\r\nfunction groupNameInput:create(optionalStartingValue)\r\n    local effectiveText = optionalStartingValue or self.greyedOutText\r\n    local width = self:computeWidth(effectiveText)\r\n\r\n    self.memoryBag.createInput({\r\n        label = self.greyedOutText,\r\n        value = optionalStartingValue or nil,\r\n        alignment = 3, -- Center aligned\r\n        input_function = \"groupNameInput_onCharacterTyped\", function_owner = self.memoryBag,\r\n        position = { 2.1, 0.3, 0 }, rotation = { 0, 270, 0 }, width = width, height = 350,\r\n        font_size = 250, color = { 0, 0, 0 }, font_color = { 1, 1, 1 },\r\n    })\r\nend\r\n\r\nfunction groupNameInput:computeWidth(text)\r\n    return (string.len(text) + self.padding) * self.widthPerCharacter\r\nend\r\n\r\nfunction groupNameInput:updatedWidth(text)\r\n    self.memoryBag.editInput({\r\n        index = 0,\r\n        width = self:computeWidth(text)\r\n    })\r\nend\r\n\r\nfunction groupNameInput:onCharacterTyped(text, stillEditing)\r\n    if stillEditing then\r\n        self:updatedWidth(text)\r\n    else\r\n        if text == \"\" then\r\n            self:updatedWidth(self.greyedOutText)\r\n        end\r\n    end\r\nend\r\n\r\nfunction groupNameInput_onCharacterTyped(memoryBag, playerColor, text, stillEditing)\r\n    groupNameInput:onCharacterTyped(text, stillEditing)\r\nend\r\n\r\nfunction groupNameInput:setGroupNameToInputField()\r\n    local inputFields = self.memoryBag.getInputs()\r\n    if inputFields ~= nil then\r\n        -- Get input field 0, which corresponds to the groupNameInput.\r\n        -- Unfortunately \"self.getInputs()\" doesn't return the inputs in a guaranteed order.\r\n        local nameField = nil\r\n        for _, field in ipairs(inputFields) do\r\n            if field.index == 0 then\r\n                nameField = field\r\n            end\r\n        end\r\n\r\n        memoryGroupName:set(nameField.value)\r\n    end\r\nend\r\n\r\nfunction updateSave()\r\n    local data_to_save = { [\"ml\"] = memoryList, [\"groupName\"] = memoryGroupName:get() }\r\n    saved_data = JSON.encode(data_to_save)\r\n    self.script_state = saved_data\r\nend\r\n\r\nfunction combineMemoryFromBagsWithin()\r\n    local bagObjList = self.getObjects()\r\n    for _, bagObj in ipairs(bagObjList) do\r\n        local data = bagObj.lua_script_state\r\n        if data ~= nil then\r\n            local j = JSON.decode(data)\r\n            if j ~= nil and j.ml ~= nil then\r\n                for guid, entry in pairs(j.ml) do\r\n                    memoryList[guid] = entry\r\n                end\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\nfunction updateMemoryWithMoves()\r\n    memoryList = memoryListBackup\r\n    --get the first transposed object's coordinates\r\n    local obj = getObjectFromGUID(moveGuid)\r\n\r\n    -- p1 is where needs to go, p2 is where it was\r\n    local refObjPos = memoryList[moveGuid].pos\r\n    local deltaPos = findOffsetDistance(obj.getPosition(), refObjPos, nil)\r\n    local movedRotation = obj.getRotation()\r\n    for guid, entry in pairs(memoryList) do\r\n        memoryList[guid].pos.x = entry.pos.x - deltaPos.x\r\n        memoryList[guid].pos.y = entry.pos.y - deltaPos.y\r\n        memoryList[guid].pos.z = entry.pos.z - deltaPos.z\r\n    end\r\n    moveList = {}\r\nend\r\n\r\nfunction onload(saved_data)\r\n    GlobalMemoryGroups:onLoad(self.getGUID())\r\n    AllMemoryBagsInScene:add(self.getGUID())\r\n\r\n    fresh = true\r\n    if saved_data ~= \"\" then\r\n        local loaded_data = JSON.decode(saved_data)\r\n        --Set up information off of loaded_data\r\n        memoryList = loaded_data.ml\r\n        memoryGroupName:set(loaded_data.groupName)\r\n    else\r\n        --Set up information for if there is no saved saved data\r\n        memoryList = {}\r\n        memoryGroupName:set(nil)\r\n    end\r\n\r\n    moveList = {}\r\n    moveGuid = nil\r\n\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        fresh = false\r\n        createMemoryActionButtons()\r\n    end\r\nend\r\n\r\n--Beginning Setup\r\n\r\n--Make setup button\r\nfunction createSetupButton()\r\n    self.createButton({\r\n      label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n      position={0,0.3,2}, rotation={0,0,0}, height=350, width=800,\r\n      font_size=250, color={0,0,0}, font_color={1,1,1}\r\n  })\r\nend\r\n\r\n--Triggered by Transpose button\r\nfunction buttonClick_transpose()\r\n    moveGuid = nil\r\n    broadcastToAll(\"Select one object and move it- all objects will move relative to the new location\", { 0.75, 0.75, 1 })\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(true)\r\n    createSetupActionButtons(true)\r\nend\r\n\r\n--Triggered by setup button,\r\nfunction buttonClick_setup()\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(false)\r\n    createSetupActionButtons(false)\r\nend\r\n\r\nfunction getAllObjectsInMemory()\r\n    local objTable = {}\r\n    local curObj = {}\r\n\r\n    for guid in pairs(memoryListBackup) do\r\n        curObj = getObjectFromGUID(guid)\r\n        table.insert(objTable, curObj)\r\n    end\r\n\r\n    return objTable\r\nend\r\n\r\n--Creates selection buttons on objects\r\nfunction createButtonsOnAllObjects(move)\r\n    buttonIndexMap = {}\r\n    local howManyButtons = 0\r\n\r\n    local objsToHaveButtons = {}\r\n    if move == true then\r\n        objsToHaveButtons = getAllObjectsInMemory()\r\n    else\r\n        objsToHaveButtons = getAllObjects()\r\n    end\r\n\r\n    for _, obj in ipairs(objsToHaveButtons) do\r\n        if obj ~= self then\r\n            --On a normal bag, the button positions aren't the same size as the bag.\r\n            globalScaleFactor = 1 * 1 / self.getScale().x\r\n            --Super sweet math to set button positions\r\n            local selfPos = self.getPosition()\r\n            local objPos = obj.getPosition()\r\n            local deltaPos = findOffsetDistance(selfPos, objPos, obj)\r\n            local objPos = rotateLocalCoordinates(deltaPos, self)\r\n            objPos.x = -objPos.x * globalScaleFactor\r\n            objPos.y = objPos.y * globalScaleFactor + 2\r\n            objPos.z = objPos.z * globalScaleFactor\r\n            --Workaround for custom PDFs\r\n            if obj.Book then\r\n                objPos.y = objPos.y + 0.5\r\n            end\r\n            --Offset rotation of bag\r\n            local rot = self.getRotation()\r\n            rot.y = -rot.y + 180\r\n            --Create function\r\n            local funcName = \"selectButton_\" .. howManyButtons\r\n            local func = function() buttonClick_selection(obj, move) end\r\n            local color = { 0.75, 0.25, 0.25, 0.6 }\r\n            local colorMove = { 0, 0, 1, 0.6 }\r\n            if move == true then\r\n                color = colorMove\r\n            end\r\n            self.setVar(funcName, func)\r\n            self.createButton({\r\n                click_function = funcName, function_owner = self,\r\n                position = objPos, rotation = rot, height = 1000, width = 1000,\r\n                color = color,\r\n            })\r\n            buttonIndexMap[obj.getGUID()] = howManyButtons\r\n            howManyButtons = howManyButtons + 1\r\n        end\r\n    end\r\nend\r\n\r\n  --Creates submit and cancel buttons\r\n  function createSetupActionButtons(move)\r\n      self.createButton({\r\n         label=\"Annuler\", click_function=\"buttonClick_cancel\", function_owner=self,\r\n         position={-1.15,0.3,2.1}, rotation={0,0,0}, height=350, width=1100,\r\n         font_size=250, color={0,0,0}, font_color={1,1,1}\r\n      })\r\n\r\n      self.createButton({\r\n        label=\"Valider\", click_function=\"buttonClick_submit\", function_owner=self,\r\n        position={-1.15,0.3,2.8}, rotation={0,0,0}, height=350, width=1100,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n      })\r\n\r\n      if move == false then\r\n        self.createButton({\r\n            label=\"Ajouter\", click_function=\"buttonClick_add\", function_owner=self,\r\n            position={1.15,0.3,2.1}, rotation={0,0,0}, height=350, width=1100,\r\n            font_size=250, color={0,0,0}, font_color={0.25,1,0.25}\r\n          })\r\n\r\n          self.createButton({\r\n              label=\"Sélection\", click_function=\"editDragSelection\", function_owner=self,\r\n              position={-1.15,0.3,3.5}, rotation={0,0,0}, height=350, width=1100,\r\n              font_size=250, color={0,0,0}, font_color={1,1,1}\r\n          })\r\n\r\n          if fresh == false then\r\n              self.createButton({\r\n                  label=\"Mise à Jour\", click_function=\"buttonClick_setNew\", function_owner=self,\r\n                  position={1.15,0.3,3.5}, rotation={0,0,0}, height=350, width=1100,\r\n                  font_size=180, color={0,0,0}, font_color={0.75,0.75,1}\r\n              })\r\n              self.createButton({\r\n                  label=\"Retirer\", click_function=\"buttonClick_remove\", function_owner=self,\r\n                  position={1.15,0.3,2.8}, rotation={0,0,0}, height=350, width=1100,\r\n                  font_size=250, color={0,0,0}, font_color={1,0.25,0.25}\r\n              })\r\n          end\r\n      end\r\n\r\n      self.createButton({\r\n          label=\"Reset\", click_function=\"buttonClick_reset\", function_owner=self,\r\n          position={0,0.3,-2}, rotation={0,0,0}, height=350, width=800,\r\n          font_size=250, color={0,0,0}, font_color={1,1,1}\r\n      })\r\n  end\r\n\r\n\r\n--During Setup\r\n\r\n--Checks or unchecks buttons\r\nfunction buttonClick_selection(obj, move)\r\n    local index = buttonIndexMap[obj.getGUID()]\r\n    local colorMove = { 0, 0, 1, 0.6 }\r\n    local color = { 0, 1, 0, 0.6 }\r\n\r\n    previousGuid = selectedGuid\r\n    selectedGuid = obj.getGUID()\r\n\r\n    theList = memoryList\r\n    if move == true then\r\n        theList = moveList\r\n        if previousGuid ~= nil and previousGuid ~= selectedGuid then\r\n            local prevObj = getObjectFromGUID(previousGuid)\r\n            prevObj.highlightOff()\r\n            self.editButton({ index = previousIndex, color = colorMove })\r\n            theList[previousGuid] = nil\r\n        end\r\n        previousIndex = index\r\n    end\r\n\r\n    if theList[selectedGuid] == nil then\r\n        self.editButton({ index = index, color = color })\r\n        --Adding pos/rot to memory table\r\n        local pos, rot = obj.getPosition(), obj.getRotation()\r\n        --I need to add it like this or it won't save due to indexing issue\r\n        theList[obj.getGUID()] = {\r\n            pos = { x = round(pos.x, 4), y = round(pos.y, 4), z = round(pos.z, 4) },\r\n            rot = { x = round(rot.x, 4), y = round(rot.y, 4), z = round(rot.z, 4) },\r\n            lock = obj.getLock(),\r\n            tint = obj.getColorTint()\r\n        }\r\n        obj.highlightOn({ 0, 1, 0 })\r\n    else\r\n        color = { 0.75, 0.25, 0.25, 0.6 }\r\n        if move == true then\r\n            color = colorMove\r\n        end\r\n        self.editButton({ index = index, color = color })\r\n        theList[obj.getGUID()] = nil\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\nfunction editDragSelection(bagObj, player, remove)\r\n    local selectedObjs = Player[player].getSelectedObjects()\r\n    if not remove then\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            --Ignore if already in the memory list, or does not have a button\r\n            if index and not memoryList[obj.getGUID()] then\r\n                self.editButton({ index = index, color = { 0, 1, 0, 0.6 } })\r\n                --Adding pos/rot to memory table\r\n                local pos, rot = obj.getPosition(), obj.getRotation()\r\n                --I need to add it like this or it won't save due to indexing issue\r\n                memoryList[obj.getGUID()] = {\r\n                    pos = { x = round(pos.x, 4), y = round(pos.y, 4), z = round(pos.z, 4) },\r\n                    rot = { x = round(rot.x, 4), y = round(rot.y, 4), z = round(rot.z, 4) },\r\n                    lock = obj.getLock(),\r\n                    tint = obj.getColorTint()\r\n                }\r\n                obj.highlightOn({ 0, 1, 0 })\r\n            end\r\n        end\r\n    else\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            if index and memoryList[obj.getGUID()] then\r\n                color = { 0.75, 0.25, 0.25, 0.6 }\r\n                self.editButton({ index = index, color = color })\r\n                memoryList[obj.getGUID()] = nil\r\n                obj.highlightOff()\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\n--Cancels selection process\r\nfunction buttonClick_cancel()\r\n    memoryList = memoryListBackup\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        createMemoryActionButtons()\r\n    end\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Sélection annulée\", { 1, 1, 1 })\r\n    moveGuid = nil\r\nend\r\n\r\n--Saves selections\r\nfunction buttonClick_submit()\r\n    fresh = false\r\n    if next(moveList) ~= nil then\r\n        for guid in pairs(moveList) do\r\n            moveGuid = guid\r\n        end\r\n        if memoryListBackup[moveGuid] == nil then\r\n            broadcastToAll(\"Item selected for moving is not already in memory\", { 1, 0.25, 0.25 })\r\n        else\r\n            broadcastToAll(\"Moving all items in memory relative to new objects position!\", { 0.75, 0.75, 1 })\r\n            self.clearButtons()\r\n            self.clearInputs()\r\n            createMemoryActionButtons()\r\n            local count = 0\r\n            for guid in pairs(moveList) do\r\n                moveGuid = guid\r\n                count = count + 1\r\n                local obj = getObjectFromGUID(guid)\r\n                if obj ~= nil then obj.highlightOff() end\r\n            end\r\n            updateMemoryWithMoves()\r\n            updateSave()\r\n            buttonClick_place()\r\n        end\r\n    elseif next(memoryList) == nil and moveGuid == nil then\r\n        memoryList = memoryListBackup\r\n        broadcastToAll(\"No selections made.\", { 0.75, 0.25, 0.25 })\r\n    end\r\n    combineMemoryFromBagsWithin()\r\n    groupNameInput:setGroupNameToInputField()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count .. \" Objects Saved\", { 1, 1, 1 })\r\n    updateSave()\r\n    moveGuid = nil\r\nend\r\n\r\nfunction combineTables(first_table, second_table)\r\n    for k, v in pairs(second_table) do first_table[k] = v end\r\nend\r\n\r\nfunction buttonClick_add()\r\n    fresh = false\r\n    combineTables(memoryList, memoryListBackup)\r\n    broadcastToAll(\"Adding internal bags and selections to existing memory\", { 0.25, 0.75, 0.25 })\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count .. \" Objects Saved\", { 1, 1, 1 })\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_remove()\r\n    broadcastToAll(\"Removing Selected Entries From Memory\", { 1.0, 0.25, 0.25 })\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        memoryListBackup[guid] = nil\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count .. \" Objects Removed\", { 1, 1, 1 })\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_setNew()\r\n    broadcastToAll(\"Setting new position relative to items in memory\", { 0.75, 0.75, 1 })\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        guid = obj.guid\r\n        if memoryListBackup[guid] ~= nil then\r\n            count = count + 1\r\n            memoryListBackup[guid].pos = obj.getPosition()\r\n            memoryListBackup[guid].rot = obj.getRotation()\r\n            memoryListBackup[guid].lock = obj.getLock()\r\n            memoryListBackup[guid].tint = obj.getColorTint()\r\n        end\r\n    end\r\n    broadcastToAll(count .. \" Objects Saved\", { 1, 1, 1 })\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\n--Resets bag to starting status\r\nfunction buttonClick_reset()\r\n    fresh = true\r\n    memoryList = {}\r\n    memoryGroupName:set(nil)\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createSetupButton()\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Tool Reset\", { 1, 1, 1 })\r\n    updateSave()\r\nend\r\n\r\n--After Setup\r\n\r\n--Creates recall and place buttons\r\nfunction createMemoryActionButtons()\r\n    self.createButton({\r\n        label=\"Placer au hasard\", click_function=\"buttonClick_place\", function_owner=self,\r\n        position={0,0.3,2}, rotation={0,0,0}, height=350, width=2000,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Ranger\", click_function=\"buttonClick_recall\", function_owner=self,\r\n        position={0,0.3,2.8}, rotation={0,0,0}, height=350, width=1000,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n        position={2,0.3,0}, rotation={0,90,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    ---    self.createButton({\r\n    ---      label=\"Bouger\", click_function=\"buttonClick_transpose\", function_owner=self,\r\n    ---      position={-2,0.3,0.8}, rotation={0,270,0}, height=350, width=800,\r\n    ---      font_size=250, color={0,0,0}, font_color={0.75,0.75,1}\r\n    ---\r\nend\r\n\r\n--Sends objects from bag/table to their saved position/rotation\r\nfunction buttonClick_place()\r\n    if anyOtherBagsInMyGroupArePlaced() then\r\n        recallOtherBagsInMyGroup()\r\n        Wait.frames(_placeObjects, CONFIG.MEMORY_GROUP.FRAME_DELAY_BEFORE_PLACING_OBJECTS)\r\n    else\r\n        _placeObjects()\r\n    end\r\nend\r\n\r\nfunction _placeObjects()\r\n    local bagObjList = self.getObjects()\r\n\r\n    -- randomize memorylist position\r\n    local positionList = {}\r\n    for guid, entry in pairs(memoryList) do\r\n        table.insert(positionList, memoryList[guid].pos)\r\n    end\r\n\r\n    for i = #positionList, 2, -1 do\r\n        local j = math.random(i)\r\n        positionList[i], positionList[j] = positionList[j], positionList[i]\r\n    end\r\n\r\n    local i = 1\r\n    for guid, entry in pairs(memoryList) do\r\n        memoryList[guid].pos = positionList[i]\r\n        i = i + 1\r\n    end\r\n\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        --If obj is out on the table, move it to the saved pos/rot\r\n        if obj ~= nil then\r\n            obj.setPositionSmooth(entry.pos)\r\n            obj.setRotationSmooth(entry.rot)\r\n            obj.setLock(entry.lock)\r\n            obj.setColorTint(entry.tint)\r\n        else\r\n            --If obj is inside of the bag\r\n            for _, bagObj in ipairs(bagObjList) do\r\n                if bagObj.guid == guid then\r\n                    local item = self.takeObject({\r\n                        guid = guid, position = entry.pos, rotation = entry.rot, smooth = false\r\n                    })\r\n                    item.setLock(entry.lock)\r\n                    item.setColorTint(entry.tint)\r\n                    break\r\n                end\r\n            end\r\n        end\r\n    end\r\n    broadcastToAll(\"Objets placés au hasard\", {1,1,1})\r\nend\r\n\r\n--Recalls objects to bag from table\r\nfunction buttonClick_recall()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then self.putObject(obj) end\r\n    end\r\n    broadcastToAll(\"Objets rangés\", {1,1,1})\r\nend\r\n\r\n--Utility functions\r\n\r\n--Find delta (difference) between 2 x/y/z coordinates\r\nfunction findOffsetDistance(p1, p2, obj)\r\n    local yOffset = 0\r\n    if obj ~= nil then\r\n        local bounds = obj.getBounds()\r\n        yOffset = (bounds.size.y - bounds.offset.y)\r\n    end\r\n    local deltaPos = {}\r\n    deltaPos.x = (p2.x - p1.x)\r\n    deltaPos.y = (p2.y - p1.y) + yOffset\r\n    deltaPos.z = (p2.z - p1.z)\r\n    return deltaPos\r\nend\r\n\r\n--Used to rotate a set of coordinates by an angle\r\nfunction rotateLocalCoordinates(desiredPos, obj)\r\n    local objPos, objRot = obj.getPosition(), obj.getRotation()\r\n    local angle = math.rad(objRot.y)\r\n    local x = desiredPos.x * math.cos(angle) - desiredPos.z * math.sin(angle)\r\n    local z = desiredPos.x * math.sin(angle) + desiredPos.z * math.cos(angle)\r\n    --return {x=objPos.x+x, y=objPos.y+desiredPos.y, z=objPos.z+z}\r\n    return { x = x, y = desiredPos.y, z = z }\r\nend\r\n\r\nfunction rotateMyCoordinates(desiredPos, obj)\r\n    local angle = math.rad(obj.getRotation().y)\r\n    local x = desiredPos.x * math.sin(angle)\r\n    local z = desiredPos.z * math.cos(angle)\r\n    return { x = x, y = desiredPos.y, z = z }\r\nend\r\n\r\n--Coroutine delay, in seconds\r\nfunction wait(time)\r\n    local start = os.time()\r\n    repeat coroutine.yield(0) until os.time() > start + time\r\nend\r\n\r\n--Duplicates a table (needed to prevent it making reference to the same objects)\r\nfunction duplicateTable(oldTable)\r\n    local newTable = {}\r\n    for k, v in pairs(oldTable) do\r\n        newTable[k] = v\r\n    end\r\n    return newTable\r\nend\r\n\r\n--Moves scripted highlight from all objects\r\nfunction removeAllHighlights()\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\n--Round number (num) to the Nth decimal (dec)\r\nfunction round(num, dec)\r\n    local mult = 10 ^ (dec or 0)\r\n    return math.floor(num * mult + 0.5) / mult\r\nend\r\n\r\n--[[ This object provides access to a variable stored on the \"Global script\".\r\nThe variable holds the GUIDs for every Utility Memory Bag in the scene.\r\nExample: {'805ebd', '35cc21', 'fc8886', 'f50264', '5f5f63'} --]]\r\nAllMemoryBagsInScene = {\r\n    NAME_OF_GLOBAL_VARIABLE = \"_UtilityMemoryBag_AllMemoryBagsInScene\"\r\n}\r\n\r\nfunction AllMemoryBagsInScene:add(guid)\r\n    local guids = Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\n    table.insert(guids, guid)\r\n    Global.setTable(self.NAME_OF_GLOBAL_VARIABLE, guids)\r\nend\r\n\r\nfunction AllMemoryBagsInScene:getGuidList()\r\n    return Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\nend\r\n","LuaScriptState":"{\"ml\":{\"41928b\":{\"lock\":false,\"pos\":{\"x\":-18.9999008178711,\"y\":1.83530080318451,\"z\":9.99989986419678},\"rot\":{\"x\":-5.06781225340092E-06,\"y\":179.971893310547,\"z\":1.46247415955258E-07},\"tint\":{\"a\":1,\"b\":0,\"g\":0,\"r\":0.614982545375824}},\"78fbe5\":{\"lock\":false,\"pos\":{\"x\":-24.5,\"y\":1.83530056476593,\"z\":13.5},\"rot\":{\"x\":-4.9433024287282E-06,\"y\":179.971572875977,\"z\":1.12495051496353E-07},\"tint\":{\"a\":1,\"b\":0,\"g\":0,\"r\":0.614982545375824}},\"89f177\":{\"lock\":false,\"pos\":{\"x\":-22.5,\"y\":1.83530080318451,\"z\":9.99999904632568},\"rot\":{\"x\":-5.94220409766422E-06,\"y\":179.973663330078,\"z\":-7.87239116561977E-07},\"tint\":{\"a\":1,\"b\":0,\"g\":0,\"r\":0.614982545375824}},\"a7c7d2\":{\"lock\":false,\"pos\":{\"x\":-33.5,\"y\":1.8352997303009,\"z\":24},\"rot\":{\"x\":-5.22098525834735E-06,\"y\":180.000289916992,\"z\":-2.68532318159487E-07},\"tint\":{\"a\":1,\"b\":0,\"g\":0,\"r\":0.614982545375824}},\"b3c682\":{\"lock\":false,\"pos\":{\"x\":-20.9999980926514,\"y\":1.83530056476593,\"z\":13.5},\"rot\":{\"x\":-6.42715303911245E-06,\"y\":179.972595214844,\"z\":-5.3490822438107E-07},\"tint\":{\"a\":1,\"b\":0,\"g\":0,\"r\":0.614982545375824}},\"df5b1f\":{\"lock\":false,\"pos\":{\"x\":-26.0000019073486,\"y\":1.83530080318451,\"z\":9.99999713897705},\"rot\":{\"x\":-4.96592747367686E-06,\"y\":179.971450805664,\"z\":5.99128782141634E-07},\"tint\":{\"a\":1,\"b\":0,\"g\":0,\"r\":0.614982545375824}}}}","XmlUI":"","ContainedObjects":[{"GUID":"41928b","Name":"Custom_Model_Bag","Transform":{"posX":-22.5,"posY":1.8353008,"posZ":9.999998,"rotX":-0.00000511591452,"rotY":179.971909,"rotZ":2.33713422e-7,"scaleX":0.7,"scaleY":0.7,"scaleZ":0.7},"Nickname":"Ruisseau des bishop","Description":"merci à Chr1Z pour le script","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.614982545,"g":0,"b":0},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"MaterialIndex":-1,"MeshIndex":-1,"CustomMesh":{"MeshURL":"https://pastebin.com/raw/ALrYhQGb","DiffuseURL":"http://cloud-3.steamusercontent.com/ugc/1936013662301987863/EC85795E33EC43FD82F9617B47C13D0CBE057FB6/","NormalURL":"","ColliderURL":"","Convex":true,"MaterialIndex":3,"TypeIndex":6,"CustomShader":{"SpecularColor":{"r":1,"g":1,"b":1},"SpecularIntensity":0,"SpecularSharpness":2,"FresnelStrength":0},"CastShadows":true},"Bag":{"Order":0},"LuaScript":"-- Random memory bag\r\n-- based on Utility memory bag by Directsun (Version 2.7.0)\r\n\r\nlocal CONFIG = {\r\n    MEMORY_GROUP = {\r\n        -- This determines how many frames to wait before actually placing objects onto the table when the \"Place\" button is clicked.\r\n        -- This gives the other bags time to recall their objects.\r\n        -- The delay ONLY occurs if other bags have objects out.\r\n        FRAME_DELAY_BEFORE_PLACING_OBJECTS = 30\r\n    }\r\n}\r\n\r\nmath.randomseed(os.time())\r\n\r\n--[[ Memory Bag Groups ]]\r\n--[[ Utility Memory Bags may be added to a named group, called a \"memory group\".\r\nYou can add a bag to a group through the bag's UI: \"Setup\" > \"Group Name\" (to the left of the bag).\r\nOnly one bag from a group may have it's contents placed on the table at a time.\r\nWhen \"Place\" is clicked on a bag, the other bags in it's memory group are recalled.\r\nBy default a memory bag is not in any group. It's memory group is \"nil\". --]]\r\n\r\nmemoryGroupName = { memoryBag = self }\r\nfunction memoryGroupName:get()\r\n    return self._name\r\nend\r\n\r\nfunction memoryGroupName:set(newName)\r\n    GlobalMemoryGroups:unregisterBagInGroup(self:get(), self.memoryBag.getGUID())\r\n    GlobalMemoryGroups:registerBagInGroup(newName, self.memoryBag.getGUID())\r\n\r\n    if newName == \"\" then\r\n        self._name = nil\r\n    else\r\n        self._name = newName\r\n    end\r\nend\r\n\r\n-- Click the \"Recall\" button on all other bags in my memory group.\r\nfunction recallOtherBagsInMyGroup()\r\n    for _, bag in ipairs(getOtherBagsInMyGroup()) do\r\n        bag.call('buttonClick_recall')\r\n    end\r\nend\r\n\r\n-- Return \"true\" if another bag in my memory group has any objects out on the table.\r\nfunction anyOtherBagsInMyGroupArePlaced()\r\n    for _, bag in ipairs(getOtherBagsInMyGroup()) do\r\n        local state = bag.call('areAnyOfMyObjectsPlaced')\r\n        if state then return true end\r\n    end\r\n\r\n    return false\r\nend\r\n\r\n-- Return \"true\" if at least one object from this memory bag is out on the table.\r\nfunction areAnyOfMyObjectsPlaced()\r\n    for guid, _ in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then\r\n            return true\r\n        end\r\n    end\r\n    return false\r\nend\r\n\r\nfunction getOtherBagsInMyGroup()\r\n    local bags = {}\r\n    for bagGuid, _ in pairs(GlobalMemoryGroups:getGroup(memoryGroupName:get())) do\r\n        if bagGuid ~= self.getGUID() then\r\n            bag = getObjectFromGUID(bagGuid)\r\n            -- \"bag\" is nill if it has been deleted since the last time onLoad() was called.\r\n            if bag ~= nil then\r\n                table.insert(bags, bag)\r\n            end\r\n        end\r\n    end\r\n    return bags\r\nend\r\n\r\n--[[\r\nThis object provides access to a variable stored on the \"Global script\".\r\nThe variable holds the names & guids of all memory bag groups.\r\nThe global variable is a table and holds data like this:\r\n{\r\n    'My First Group Name' = {\r\n        '805ebd' = {},\r\n        '35cc21' = {},\r\n        'fc8886' = {},\r\n    },\r\n    'My Second Group Name' = {\r\n        'f50264' = {},\r\n        '5f5f63' = {},\r\n    },\r\n}\r\n--]]\r\nGlobalMemoryGroups = { NAME_OF_GLOBAL_VARIABLE = '_GlobalUtilityMemoryBagGroups' }\r\n\r\n-- Call me inside this script's \"onLoad()\" method!\r\nfunction GlobalMemoryGroups:onLoad(myGuid)\r\n    -- Create and initialize the global variable if it doesn't already exist:\r\n    if self:_getGroups() == nil then\r\n        self:_setGroups({})\r\n    end\r\nend\r\n\r\n-- Return the GUIDs of all bags in the \"groupName\". The return value is a dictionary that maps [GUID -> empty table].\r\nfunction GlobalMemoryGroups:getGroup(groupName)\r\n    guids = self:_getGroups()[groupName] or {}\r\n    return guids\r\nend\r\n\r\n-- Registers a bag in a memory group. Creates a new group if one doesn't exist.\r\nfunction GlobalMemoryGroups:registerBagInGroup(groupName, bagGuid)\r\n    if groupName == nil or groupName == \"\" then\r\n        return\r\n    end\r\n\r\n    self:_tryCreateNewGroup(groupName)\r\n    local groups = self:_getGroups()\r\n    groups[groupName][bagGuid] = {}\r\n    self:_setGroups(groups)\r\nend\r\n\r\n-- Removes this bag from the memory group.\r\nfunction GlobalMemoryGroups:unregisterBagInGroup(groupName, bagGuid)\r\n    local groups = self:_getGroups()\r\n    local group = groups[groupName]\r\n    if group ~= nil then\r\n        group[bagGuid] = nil\r\n        self:_setGroups(groups)\r\n    end\r\nend\r\n\r\n-- Return the global variable, which is a table holding all memory group names & guids.\r\nfunction GlobalMemoryGroups:_getGroups()\r\n    return Global.getTable(self.NAME_OF_GLOBAL_VARIABLE)\r\nend\r\n\r\n-- Override the global variable (i.e. the entire table).\r\nfunction GlobalMemoryGroups:_setGroups(newTable)\r\n    Global.setTable(self.NAME_OF_GLOBAL_VARIABLE, newTable)\r\nend\r\n\r\n-- Add a new memory group named \"groupName\" to the global variable, if one doesn't already exist.\r\nfunction GlobalMemoryGroups:_tryCreateNewGroup(groupName)\r\n    local groups = self:_getGroups()\r\n    if groups[groupName] == nil then\r\n        groups[groupName] = {}\r\n        self:_setGroups(groups)\r\n    end\r\nend\r\n\r\n-- This object controls the \"Group Name\" input text field that is part of the bag's ingame UI.\r\ngroupNameInput = {\r\n    greyedOutText     = \"Group Name\",\r\n    widthPerCharacter = 100,\r\n    padding           = 4,\r\n    memoryBag         = self\r\n}\r\nfunction groupNameInput:create(optionalStartingValue)\r\n    local effectiveText = optionalStartingValue or self.greyedOutText\r\n    local width = self:computeWidth(effectiveText)\r\n\r\n    self.memoryBag.createInput({\r\n        label = self.greyedOutText,\r\n        value = optionalStartingValue or nil,\r\n        alignment = 3, -- Center aligned\r\n        input_function = \"groupNameInput_onCharacterTyped\", function_owner = self.memoryBag,\r\n        position = { 2.1, 0.3, 0 }, rotation = { 0, 270, 0 }, width = width, height = 350,\r\n        font_size = 250, color = { 0, 0, 0 }, font_color = { 1, 1, 1 },\r\n    })\r\nend\r\n\r\nfunction groupNameInput:computeWidth(text)\r\n    return (string.len(text) + self.padding) * self.widthPerCharacter\r\nend\r\n\r\nfunction groupNameInput:updatedWidth(text)\r\n    self.memoryBag.editInput({\r\n        index = 0,\r\n        width = self:computeWidth(text)\r\n    })\r\nend\r\n\r\nfunction groupNameInput:onCharacterTyped(text, stillEditing)\r\n    if stillEditing then\r\n        self:updatedWidth(text)\r\n    else\r\n        if text == \"\" then\r\n            self:updatedWidth(self.greyedOutText)\r\n        end\r\n    end\r\nend\r\n\r\nfunction groupNameInput_onCharacterTyped(memoryBag, playerColor, text, stillEditing)\r\n    groupNameInput:onCharacterTyped(text, stillEditing)\r\nend\r\n\r\nfunction groupNameInput:setGroupNameToInputField()\r\n    local inputFields = self.memoryBag.getInputs()\r\n    if inputFields ~= nil then\r\n        -- Get input field 0, which corresponds to the groupNameInput.\r\n        -- Unfortunately \"self.getInputs()\" doesn't return the inputs in a guaranteed order.\r\n        local nameField = nil\r\n        for _, field in ipairs(inputFields) do\r\n            if field.index == 0 then\r\n                nameField = field\r\n            end\r\n        end\r\n\r\n        memoryGroupName:set(nameField.value)\r\n    end\r\nend\r\n\r\nfunction updateSave()\r\n    local data_to_save = { [\"ml\"] = memoryList, [\"groupName\"] = memoryGroupName:get() }\r\n    saved_data = JSON.encode(data_to_save)\r\n    self.script_state = saved_data\r\nend\r\n\r\nfunction combineMemoryFromBagsWithin()\r\n    local bagObjList = self.getObjects()\r\n    for _, bagObj in ipairs(bagObjList) do\r\n        local data = bagObj.lua_script_state\r\n        if data ~= nil then\r\n            local j = JSON.decode(data)\r\n            if j ~= nil and j.ml ~= nil then\r\n                for guid, entry in pairs(j.ml) do\r\n                    memoryList[guid] = entry\r\n                end\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\nfunction updateMemoryWithMoves()\r\n    memoryList = memoryListBackup\r\n    --get the first transposed object's coordinates\r\n    local obj = getObjectFromGUID(moveGuid)\r\n\r\n    -- p1 is where needs to go, p2 is where it was\r\n    local refObjPos = memoryList[moveGuid].pos\r\n    local deltaPos = findOffsetDistance(obj.getPosition(), refObjPos, nil)\r\n    local movedRotation = obj.getRotation()\r\n    for guid, entry in pairs(memoryList) do\r\n        memoryList[guid].pos.x = entry.pos.x - deltaPos.x\r\n        memoryList[guid].pos.y = entry.pos.y - deltaPos.y\r\n        memoryList[guid].pos.z = entry.pos.z - deltaPos.z\r\n    end\r\n    moveList = {}\r\nend\r\n\r\nfunction onload(saved_data)\r\n    GlobalMemoryGroups:onLoad(self.getGUID())\r\n    AllMemoryBagsInScene:add(self.getGUID())\r\n\r\n    fresh = true\r\n    if saved_data ~= \"\" then\r\n        local loaded_data = JSON.decode(saved_data)\r\n        --Set up information off of loaded_data\r\n        memoryList = loaded_data.ml\r\n        memoryGroupName:set(loaded_data.groupName)\r\n    else\r\n        --Set up information for if there is no saved saved data\r\n        memoryList = {}\r\n        memoryGroupName:set(nil)\r\n    end\r\n\r\n    moveList = {}\r\n    moveGuid = nil\r\n\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        fresh = false\r\n        createMemoryActionButtons()\r\n    end\r\nend\r\n\r\n--Beginning Setup\r\n\r\n--Make setup button\r\nfunction createSetupButton()\r\n    self.createButton({\r\n      label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n      position={0,0.3,2}, rotation={0,0,0}, height=350, width=800,\r\n      font_size=250, color={0,0,0}, font_color={1,1,1}\r\n  })\r\nend\r\n\r\n--Triggered by Transpose button\r\nfunction buttonClick_transpose()\r\n    moveGuid = nil\r\n    broadcastToAll(\"Select one object and move it- all objects will move relative to the new location\", { 0.75, 0.75, 1 })\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(true)\r\n    createSetupActionButtons(true)\r\nend\r\n\r\n--Triggered by setup button,\r\nfunction buttonClick_setup()\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(false)\r\n    createSetupActionButtons(false)\r\nend\r\n\r\nfunction getAllObjectsInMemory()\r\n    local objTable = {}\r\n    local curObj = {}\r\n\r\n    for guid in pairs(memoryListBackup) do\r\n        curObj = getObjectFromGUID(guid)\r\n        table.insert(objTable, curObj)\r\n    end\r\n\r\n    return objTable\r\nend\r\n\r\n--Creates selection buttons on objects\r\nfunction createButtonsOnAllObjects(move)\r\n    buttonIndexMap = {}\r\n    local howManyButtons = 0\r\n\r\n    local objsToHaveButtons = {}\r\n    if move == true then\r\n        objsToHaveButtons = getAllObjectsInMemory()\r\n    else\r\n        objsToHaveButtons = getAllObjects()\r\n    end\r\n\r\n    for _, obj in ipairs(objsToHaveButtons) do\r\n        if obj ~= self then\r\n            --On a normal bag, the button positions aren't the same size as the bag.\r\n            globalScaleFactor = 1 * 1 / self.getScale().x\r\n            --Super sweet math to set button positions\r\n            local selfPos = self.getPosition()\r\n            local objPos = obj.getPosition()\r\n            local deltaPos = findOffsetDistance(selfPos, objPos, obj)\r\n            local objPos = rotateLocalCoordinates(deltaPos, self)\r\n            objPos.x = -objPos.x * globalScaleFactor\r\n            objPos.y = objPos.y * globalScaleFactor + 2\r\n            objPos.z = objPos.z * globalScaleFactor\r\n            --Workaround for custom PDFs\r\n            if obj.Book then\r\n                objPos.y = objPos.y + 0.5\r\n            end\r\n            --Offset rotation of bag\r\n            local rot = self.getRotation()\r\n            rot.y = -rot.y + 180\r\n            --Create function\r\n            local funcName = \"selectButton_\" .. howManyButtons\r\n            local func = function() buttonClick_selection(obj, move) end\r\n            local color = { 0.75, 0.25, 0.25, 0.6 }\r\n            local colorMove = { 0, 0, 1, 0.6 }\r\n            if move == true then\r\n                color = colorMove\r\n            end\r\n            self.setVar(funcName, func)\r\n            self.createButton({\r\n                click_function = funcName, function_owner = self,\r\n                position = objPos, rotation = rot, height = 1000, width = 1000,\r\n                color = color,\r\n            })\r\n            buttonIndexMap[obj.getGUID()] = howManyButtons\r\n            howManyButtons = howManyButtons + 1\r\n        end\r\n    end\r\nend\r\n\r\n  --Creates submit and cancel buttons\r\n  function createSetupActionButtons(move)\r\n      self.createButton({\r\n         label=\"Annuler\", click_function=\"buttonClick_cancel\", function_owner=self,\r\n         position={-1.15,0.3,2.1}, rotation={0,0,0}, height=350, width=1100,\r\n         font_size=250, color={0,0,0}, font_color={1,1,1}\r\n      })\r\n\r\n      self.createButton({\r\n        label=\"Valider\", click_function=\"buttonClick_submit\", function_owner=self,\r\n        position={-1.15,0.3,2.8}, rotation={0,0,0}, height=350, width=1100,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n      })\r\n\r\n      if move == false then\r\n        self.createButton({\r\n            label=\"Ajouter\", click_function=\"buttonClick_add\", function_owner=self,\r\n            position={1.15,0.3,2.1}, rotation={0,0,0}, height=350, width=1100,\r\n            font_size=250, color={0,0,0}, font_color={0.25,1,0.25}\r\n          })\r\n\r\n          self.createButton({\r\n              label=\"Sélection\", click_function=\"editDragSelection\", function_owner=self,\r\n              position={-1.15,0.3,3.5}, rotation={0,0,0}, height=350, width=1100,\r\n              font_size=250, color={0,0,0}, font_color={1,1,1}\r\n          })\r\n\r\n          if fresh == false then\r\n              self.createButton({\r\n                  label=\"Mise à Jour\", click_function=\"buttonClick_setNew\", function_owner=self,\r\n                  position={1.15,0.3,3.5}, rotation={0,0,0}, height=350, width=1100,\r\n                  font_size=180, color={0,0,0}, font_color={0.75,0.75,1}\r\n              })\r\n              self.createButton({\r\n                  label=\"Retirer\", click_function=\"buttonClick_remove\", function_owner=self,\r\n                  position={1.15,0.3,2.8}, rotation={0,0,0}, height=350, width=1100,\r\n                  font_size=250, color={0,0,0}, font_color={1,0.25,0.25}\r\n              })\r\n          end\r\n      end\r\n\r\n      self.createButton({\r\n          label=\"Reset\", click_function=\"buttonClick_reset\", function_owner=self,\r\n          position={0,0.3,-2}, rotation={0,0,0}, height=350, width=800,\r\n          font_size=250, color={0,0,0}, font_color={1,1,1}\r\n      })\r\n  end\r\n\r\n\r\n--During Setup\r\n\r\n--Checks or unchecks buttons\r\nfunction buttonClick_selection(obj, move)\r\n    local index = buttonIndexMap[obj.getGUID()]\r\n    local colorMove = { 0, 0, 1, 0.6 }\r\n    local color = { 0, 1, 0, 0.6 }\r\n\r\n    previousGuid = selectedGuid\r\n    selectedGuid = obj.getGUID()\r\n\r\n    theList = memoryList\r\n    if move == true then\r\n        theList = moveList\r\n        if previousGuid ~= nil and previousGuid ~= selectedGuid then\r\n            local prevObj = getObjectFromGUID(previousGuid)\r\n            prevObj.highlightOff()\r\n            self.editButton({ index = previousIndex, color = colorMove })\r\n            theList[previousGuid] = nil\r\n        end\r\n        previousIndex = index\r\n    end\r\n\r\n    if theList[selectedGuid] == nil then\r\n        self.editButton({ index = index, color = color })\r\n        --Adding pos/rot to memory table\r\n        local pos, rot = obj.getPosition(), obj.getRotation()\r\n        --I need to add it like this or it won't save due to indexing issue\r\n        theList[obj.getGUID()] = {\r\n            pos = { x = round(pos.x, 4), y = round(pos.y, 4), z = round(pos.z, 4) },\r\n            rot = { x = round(rot.x, 4), y = round(rot.y, 4), z = round(rot.z, 4) },\r\n            lock = obj.getLock(),\r\n            tint = obj.getColorTint()\r\n        }\r\n        obj.highlightOn({ 0, 1, 0 })\r\n    else\r\n        color = { 0.75, 0.25, 0.25, 0.6 }\r\n        if move == true then\r\n            color = colorMove\r\n        end\r\n        self.editButton({ index = index, color = color })\r\n        theList[obj.getGUID()] = nil\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\nfunction editDragSelection(bagObj, player, remove)\r\n    local selectedObjs = Player[player].getSelectedObjects()\r\n    if not remove then\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            --Ignore if already in the memory list, or does not have a button\r\n            if index and not memoryList[obj.getGUID()] then\r\n                self.editButton({ index = index, color = { 0, 1, 0, 0.6 } })\r\n                --Adding pos/rot to memory table\r\n                local pos, rot = obj.getPosition(), obj.getRotation()\r\n                --I need to add it like this or it won't save due to indexing issue\r\n                memoryList[obj.getGUID()] = {\r\n                    pos = { x = round(pos.x, 4), y = round(pos.y, 4), z = round(pos.z, 4) },\r\n                    rot = { x = round(rot.x, 4), y = round(rot.y, 4), z = round(rot.z, 4) },\r\n                    lock = obj.getLock(),\r\n                    tint = obj.getColorTint()\r\n                }\r\n                obj.highlightOn({ 0, 1, 0 })\r\n            end\r\n        end\r\n    else\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            if index and memoryList[obj.getGUID()] then\r\n                color = { 0.75, 0.25, 0.25, 0.6 }\r\n                self.editButton({ index = index, color = color })\r\n                memoryList[obj.getGUID()] = nil\r\n                obj.highlightOff()\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\n--Cancels selection process\r\nfunction buttonClick_cancel()\r\n    memoryList = memoryListBackup\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        createMemoryActionButtons()\r\n    end\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Sélection annulée\", { 1, 1, 1 })\r\n    moveGuid = nil\r\nend\r\n\r\n--Saves selections\r\nfunction buttonClick_submit()\r\n    fresh = false\r\n    if next(moveList) ~= nil then\r\n        for guid in pairs(moveList) do\r\n            moveGuid = guid\r\n        end\r\n        if memoryListBackup[moveGuid] == nil then\r\n            broadcastToAll(\"Item selected for moving is not already in memory\", { 1, 0.25, 0.25 })\r\n        else\r\n            broadcastToAll(\"Moving all items in memory relative to new objects position!\", { 0.75, 0.75, 1 })\r\n            self.clearButtons()\r\n            self.clearInputs()\r\n            createMemoryActionButtons()\r\n            local count = 0\r\n            for guid in pairs(moveList) do\r\n                moveGuid = guid\r\n                count = count + 1\r\n                local obj = getObjectFromGUID(guid)\r\n                if obj ~= nil then obj.highlightOff() end\r\n            end\r\n            updateMemoryWithMoves()\r\n            updateSave()\r\n            buttonClick_place()\r\n        end\r\n    elseif next(memoryList) == nil and moveGuid == nil then\r\n        memoryList = memoryListBackup\r\n        broadcastToAll(\"No selections made.\", { 0.75, 0.25, 0.25 })\r\n    end\r\n    combineMemoryFromBagsWithin()\r\n    groupNameInput:setGroupNameToInputField()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count .. \" Objects Saved\", { 1, 1, 1 })\r\n    updateSave()\r\n    moveGuid = nil\r\nend\r\n\r\nfunction combineTables(first_table, second_table)\r\n    for k, v in pairs(second_table) do first_table[k] = v end\r\nend\r\n\r\nfunction buttonClick_add()\r\n    fresh = false\r\n    combineTables(memoryList, memoryListBackup)\r\n    broadcastToAll(\"Adding internal bags and selections to existing memory\", { 0.25, 0.75, 0.25 })\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count .. \" Objects Saved\", { 1, 1, 1 })\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_remove()\r\n    broadcastToAll(\"Removing Selected Entries From Memory\", { 1.0, 0.25, 0.25 })\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        memoryListBackup[guid] = nil\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count .. \" Objects Removed\", { 1, 1, 1 })\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_setNew()\r\n    broadcastToAll(\"Setting new position relative to items in memory\", { 0.75, 0.75, 1 })\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        guid = obj.guid\r\n        if memoryListBackup[guid] ~= nil then\r\n            count = count + 1\r\n            memoryListBackup[guid].pos = obj.getPosition()\r\n            memoryListBackup[guid].rot = obj.getRotation()\r\n            memoryListBackup[guid].lock = obj.getLock()\r\n            memoryListBackup[guid].tint = obj.getColorTint()\r\n        end\r\n    end\r\n    broadcastToAll(count .. \" Objects Saved\", { 1, 1, 1 })\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\n--Resets bag to starting status\r\nfunction buttonClick_reset()\r\n    fresh = true\r\n    memoryList = {}\r\n    memoryGroupName:set(nil)\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createSetupButton()\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Tool Reset\", { 1, 1, 1 })\r\n    updateSave()\r\nend\r\n\r\n--After Setup\r\n\r\n--Creates recall and place buttons\r\nfunction createMemoryActionButtons()\r\n    self.createButton({\r\n        label=\"Placer au hasard\", click_function=\"buttonClick_place\", function_owner=self,\r\n        position={0,0.3,2}, rotation={0,0,0}, height=350, width=2000,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Ranger\", click_function=\"buttonClick_recall\", function_owner=self,\r\n        position={0,0.3,2.8}, rotation={0,0,0}, height=350, width=1000,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n        position={2,0.3,0}, rotation={0,90,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    ---    self.createButton({\r\n    ---      label=\"Bouger\", click_function=\"buttonClick_transpose\", function_owner=self,\r\n    ---      position={-2,0.3,0.8}, rotation={0,270,0}, height=350, width=800,\r\n    ---      font_size=250, color={0,0,0}, font_color={0.75,0.75,1}\r\n    ---\r\nend\r\n\r\n--Sends objects from bag/table to their saved position/rotation\r\nfunction buttonClick_place()\r\n    if anyOtherBagsInMyGroupArePlaced() then\r\n        recallOtherBagsInMyGroup()\r\n        Wait.frames(_placeObjects, CONFIG.MEMORY_GROUP.FRAME_DELAY_BEFORE_PLACING_OBJECTS)\r\n    else\r\n        _placeObjects()\r\n    end\r\nend\r\n\r\nfunction _placeObjects()\r\n    local bagObjList = self.getObjects()\r\n\r\n    -- randomize memorylist position\r\n    local positionList = {}\r\n    for guid, entry in pairs(memoryList) do\r\n        table.insert(positionList, memoryList[guid].pos)\r\n    end\r\n\r\n    for i = #positionList, 2, -1 do\r\n        local j = math.random(i)\r\n        positionList[i], positionList[j] = positionList[j], positionList[i]\r\n    end\r\n\r\n    local i = 1\r\n    for guid, entry in pairs(memoryList) do\r\n        memoryList[guid].pos = positionList[i]\r\n        i = i + 1\r\n    end\r\n\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        --If obj is out on the table, move it to the saved pos/rot\r\n        if obj ~= nil then\r\n            obj.setPositionSmooth(entry.pos)\r\n            obj.setRotationSmooth(entry.rot)\r\n            obj.setLock(entry.lock)\r\n            obj.setColorTint(entry.tint)\r\n        else\r\n            --If obj is inside of the bag\r\n            for _, bagObj in ipairs(bagObjList) do\r\n                if bagObj.guid == guid then\r\n                    local item = self.takeObject({\r\n                        guid = guid, position = entry.pos, rotation = entry.rot, smooth = false\r\n                    })\r\n                    item.setLock(entry.lock)\r\n                    item.setColorTint(entry.tint)\r\n                    break\r\n                end\r\n            end\r\n        end\r\n    end\r\n    broadcastToAll(\"Objets placés au hasard\", {1,1,1})\r\nend\r\n\r\n--Recalls objects to bag from table\r\nfunction buttonClick_recall()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then self.putObject(obj) end\r\n    end\r\n    broadcastToAll(\"Objets rangés\", {1,1,1})\r\nend\r\n\r\n--Utility functions\r\n\r\n--Find delta (difference) between 2 x/y/z coordinates\r\nfunction findOffsetDistance(p1, p2, obj)\r\n    local yOffset = 0\r\n    if obj ~= nil then\r\n        local bounds = obj.getBounds()\r\n        yOffset = (bounds.size.y - bounds.offset.y)\r\n    end\r\n    local deltaPos = {}\r\n    deltaPos.x = (p2.x - p1.x)\r\n    deltaPos.y = (p2.y - p1.y) + yOffset\r\n    deltaPos.z = (p2.z - p1.z)\r\n    return deltaPos\r\nend\r\n\r\n--Used to rotate a set of coordinates by an angle\r\nfunction rotateLocalCoordinates(desiredPos, obj)\r\n    local objPos, objRot = obj.getPosition(), obj.getRotation()\r\n    local angle = math.rad(objRot.y)\r\n    local x = desiredPos.x * math.cos(angle) - desiredPos.z * math.sin(angle)\r\n    local z = desiredPos.x * math.sin(angle) + desiredPos.z * math.cos(angle)\r\n    --return {x=objPos.x+x, y=objPos.y+desiredPos.y, z=objPos.z+z}\r\n    return { x = x, y = desiredPos.y, z = z }\r\nend\r\n\r\nfunction rotateMyCoordinates(desiredPos, obj)\r\n    local angle = math.rad(obj.getRotation().y)\r\n    local x = desiredPos.x * math.sin(angle)\r\n    local z = desiredPos.z * math.cos(angle)\r\n    return { x = x, y = desiredPos.y, z = z }\r\nend\r\n\r\n--Coroutine delay, in seconds\r\nfunction wait(time)\r\n    local start = os.time()\r\n    repeat coroutine.yield(0) until os.time() > start + time\r\nend\r\n\r\n--Duplicates a table (needed to prevent it making reference to the same objects)\r\nfunction duplicateTable(oldTable)\r\n    local newTable = {}\r\n    for k, v in pairs(oldTable) do\r\n        newTable[k] = v\r\n    end\r\n    return newTable\r\nend\r\n\r\n--Moves scripted highlight from all objects\r\nfunction removeAllHighlights()\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\n--Round number (num) to the Nth decimal (dec)\r\nfunction round(num, dec)\r\n    local mult = 10 ^ (dec or 0)\r\n    return math.floor(num * mult + 0.5) / mult\r\nend\r\n\r\n--[[ This object provides access to a variable stored on the \"Global script\".\r\nThe variable holds the GUIDs for every Utility Memory Bag in the scene.\r\nExample: {'805ebd', '35cc21', 'fc8886', 'f50264', '5f5f63'} --]]\r\nAllMemoryBagsInScene = {\r\n    NAME_OF_GLOBAL_VARIABLE = \"_UtilityMemoryBag_AllMemoryBagsInScene\"\r\n}\r\n\r\nfunction AllMemoryBagsInScene:add(guid)\r\n    local guids = Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\n    table.insert(guids, guid)\r\n    Global.setTable(self.NAME_OF_GLOBAL_VARIABLE, guids)\r\nend\r\n\r\nfunction AllMemoryBagsInScene:getGuidList()\r\n    return Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\nend\r\n","LuaScriptState":"{\"ml\":{\"c06148\":{\"lock\":false,\"pos\":{\"x\":13,\"y\":1.5433,\"z\":1.5},\"rot\":{\"x\":0.0109,\"y\":180.0116,\"z\":0.005},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"d5594a\":{\"lock\":false,\"pos\":{\"x\":-19,\"y\":1.7789,\"z\":21},\"rot\":{\"x\":0,\"y\":180.0076,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"db182f\":{\"lock\":false,\"pos\":{\"x\":-18.398,\"y\":1.8288,\"z\":20.9999},\"rot\":{\"x\":0,\"y\":180.0075,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}}}}","XmlUI":"","ContainedObjects":[{"GUID":"c06148","Name":"Card","Transform":{"posX":-18.999958,"posY":1.77890432,"posZ":21.0000477,"rotX":-0.00000102802449,"rotY":180.011765,"rotZ":-0.00002739927,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Ruisseau des Bishop","Description":"Dunwich.","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02203\",\n  \"locationBack\": {\n    \"connections\": \"Plus|Circle|Triangle\",\n    \"icons\": \"Square\",\n    \"uses\": {\n      \"count\": 2,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    }\n  },\n  \"locationFront\": {\n    \"connections\": \"Plus|Circle|Triangle\",\n    \"icons\": \"Square\"\n  },\n  \"traits\": \"Dunwich.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":21302,"SidewaysCard":false,"CustomDeck":{"213":{"FaceURL":"https://i.imgur.com/8fUptYt.jpg","BackURL":"https://i.imgur.com/s72Czne.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"d5594a","Name":"Card","Transform":{"posX":-18.39796,"posY":1.82890582,"posZ":20.99994,"rotX":0.000005986667,"rotY":180.007751,"rotZ":-0.00001270384,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"51034\",\n  \"locationBack\": {\n    \"connections\": \"Tilde|Heart\",\n    \"icons\": \"Star|ArkhamWoods\",\n    \"uses\": {\n      \"countPerInvestigator\": 1,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    }\n  },\n  \"locationFront\": {\n    \"connections\": \"Tilde\",\n    \"icons\": \"Square|ArkhamWoods\"\n  },\n  \"traits\": \"Dunwich.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276114,"SidewaysCard":false,"CustomDeck":{"2761":{"FaceURL":"https://i.imgur.com/FVWxpyu.jpg","BackURL":"https://i.imgur.com/EmJxccn.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"db182f","Name":"Card","Transform":{"posX":13.000001,"posY":1.54320979,"posZ":1.49999738,"rotX":0.010899269,"rotY":180.007492,"rotZ":0.00500635,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Ruisseau des Bishop","Description":"Dunwich.","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02202\",\n  \"locationBack\": {\n    \"connections\": \"Plus|Circle|Triangle\",\n    \"icons\": \"Square\",\n    \"uses\": {\n      \"count\": 2,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    }\n  },\n  \"locationFront\": {\n    \"connections\": \"Plus|Circle|Triangle\",\n    \"icons\": \"Square\"\n  },\n  \"traits\": \"Dunwich.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":21303,"SidewaysCard":false,"CustomDeck":{"213":{"FaceURL":"https://i.imgur.com/8fUptYt.jpg","BackURL":"https://i.imgur.com/s72Czne.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""}]},{"GUID":"78fbe5","Name":"Custom_Model_Bag","Transform":{"posX":-24.5,"posY":1.83530056,"posZ":13.5,"rotX":-0.00000470368241,"rotY":179.971634,"rotZ":1.83878441e-7,"scaleX":0.7,"scaleY":0.7,"scaleZ":0.7},"Nickname":"Magasin d'Osborne","Description":"merci à Chr1Z pour le script","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.614982545,"g":0,"b":0},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"MaterialIndex":-1,"MeshIndex":-1,"CustomMesh":{"MeshURL":"https://pastebin.com/raw/ALrYhQGb","DiffuseURL":"http://cloud-3.steamusercontent.com/ugc/1936013662302193698/48C5185AFDA1F41D2B89F9C0C875F42AA47FD440/","NormalURL":"","ColliderURL":"","Convex":true,"MaterialIndex":3,"TypeIndex":6,"CustomShader":{"SpecularColor":{"r":1,"g":1,"b":1},"SpecularIntensity":0,"SpecularSharpness":2,"FresnelStrength":0},"CastShadows":true},"Bag":{"Order":0},"LuaScript":"-- Random memory bag\r\n-- based on Utility memory bag by Directsun (Version 2.7.0)\r\n\r\nlocal CONFIG = {\r\n    MEMORY_GROUP = {\r\n        -- This determines how many frames to wait before actually placing objects onto the table when the \"Place\" button is clicked.\r\n        -- This gives the other bags time to recall their objects.\r\n        -- The delay ONLY occurs if other bags have objects out.\r\n        FRAME_DELAY_BEFORE_PLACING_OBJECTS = 30\r\n    }\r\n}\r\n\r\nmath.randomseed(os.time())\r\n\r\n--[[ Memory Bag Groups ]]\r\n--[[ Utility Memory Bags may be added to a named group, called a \"memory group\".\r\nYou can add a bag to a group through the bag's UI: \"Setup\" > \"Group Name\" (to the left of the bag).\r\nOnly one bag from a group may have it's contents placed on the table at a time.\r\nWhen \"Place\" is clicked on a bag, the other bags in it's memory group are recalled.\r\nBy default a memory bag is not in any group. It's memory group is \"nil\". --]]\r\n\r\nmemoryGroupName = { memoryBag = self }\r\nfunction memoryGroupName:get()\r\n    return self._name\r\nend\r\n\r\nfunction memoryGroupName:set(newName)\r\n    GlobalMemoryGroups:unregisterBagInGroup(self:get(), self.memoryBag.getGUID())\r\n    GlobalMemoryGroups:registerBagInGroup(newName, self.memoryBag.getGUID())\r\n\r\n    if newName == \"\" then\r\n        self._name = nil\r\n    else\r\n        self._name = newName\r\n    end\r\nend\r\n\r\n-- Click the \"Recall\" button on all other bags in my memory group.\r\nfunction recallOtherBagsInMyGroup()\r\n    for _, bag in ipairs(getOtherBagsInMyGroup()) do\r\n        bag.call('buttonClick_recall')\r\n    end\r\nend\r\n\r\n-- Return \"true\" if another bag in my memory group has any objects out on the table.\r\nfunction anyOtherBagsInMyGroupArePlaced()\r\n    for _, bag in ipairs(getOtherBagsInMyGroup()) do\r\n        local state = bag.call('areAnyOfMyObjectsPlaced')\r\n        if state then return true end\r\n    end\r\n\r\n    return false\r\nend\r\n\r\n-- Return \"true\" if at least one object from this memory bag is out on the table.\r\nfunction areAnyOfMyObjectsPlaced()\r\n    for guid, _ in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then\r\n            return true\r\n        end\r\n    end\r\n    return false\r\nend\r\n\r\nfunction getOtherBagsInMyGroup()\r\n    local bags = {}\r\n    for bagGuid, _ in pairs(GlobalMemoryGroups:getGroup(memoryGroupName:get())) do\r\n        if bagGuid ~= self.getGUID() then\r\n            bag = getObjectFromGUID(bagGuid)\r\n            -- \"bag\" is nill if it has been deleted since the last time onLoad() was called.\r\n            if bag ~= nil then\r\n                table.insert(bags, bag)\r\n            end\r\n        end\r\n    end\r\n    return bags\r\nend\r\n\r\n--[[\r\nThis object provides access to a variable stored on the \"Global script\".\r\nThe variable holds the names & guids of all memory bag groups.\r\nThe global variable is a table and holds data like this:\r\n{\r\n    'My First Group Name' = {\r\n        '805ebd' = {},\r\n        '35cc21' = {},\r\n        'fc8886' = {},\r\n    },\r\n    'My Second Group Name' = {\r\n        'f50264' = {},\r\n        '5f5f63' = {},\r\n    },\r\n}\r\n--]]\r\nGlobalMemoryGroups = { NAME_OF_GLOBAL_VARIABLE = '_GlobalUtilityMemoryBagGroups' }\r\n\r\n-- Call me inside this script's \"onLoad()\" method!\r\nfunction GlobalMemoryGroups:onLoad(myGuid)\r\n    -- Create and initialize the global variable if it doesn't already exist:\r\n    if self:_getGroups() == nil then\r\n        self:_setGroups({})\r\n    end\r\nend\r\n\r\n-- Return the GUIDs of all bags in the \"groupName\". The return value is a dictionary that maps [GUID -> empty table].\r\nfunction GlobalMemoryGroups:getGroup(groupName)\r\n    guids = self:_getGroups()[groupName] or {}\r\n    return guids\r\nend\r\n\r\n-- Registers a bag in a memory group. Creates a new group if one doesn't exist.\r\nfunction GlobalMemoryGroups:registerBagInGroup(groupName, bagGuid)\r\n    if groupName == nil or groupName == \"\" then\r\n        return\r\n    end\r\n\r\n    self:_tryCreateNewGroup(groupName)\r\n    local groups = self:_getGroups()\r\n    groups[groupName][bagGuid] = {}\r\n    self:_setGroups(groups)\r\nend\r\n\r\n-- Removes this bag from the memory group.\r\nfunction GlobalMemoryGroups:unregisterBagInGroup(groupName, bagGuid)\r\n    local groups = self:_getGroups()\r\n    local group = groups[groupName]\r\n    if group ~= nil then\r\n        group[bagGuid] = nil\r\n        self:_setGroups(groups)\r\n    end\r\nend\r\n\r\n-- Return the global variable, which is a table holding all memory group names & guids.\r\nfunction GlobalMemoryGroups:_getGroups()\r\n    return Global.getTable(self.NAME_OF_GLOBAL_VARIABLE)\r\nend\r\n\r\n-- Override the global variable (i.e. the entire table).\r\nfunction GlobalMemoryGroups:_setGroups(newTable)\r\n    Global.setTable(self.NAME_OF_GLOBAL_VARIABLE, newTable)\r\nend\r\n\r\n-- Add a new memory group named \"groupName\" to the global variable, if one doesn't already exist.\r\nfunction GlobalMemoryGroups:_tryCreateNewGroup(groupName)\r\n    local groups = self:_getGroups()\r\n    if groups[groupName] == nil then\r\n        groups[groupName] = {}\r\n        self:_setGroups(groups)\r\n    end\r\nend\r\n\r\n-- This object controls the \"Group Name\" input text field that is part of the bag's ingame UI.\r\ngroupNameInput = {\r\n    greyedOutText     = \"Group Name\",\r\n    widthPerCharacter = 100,\r\n    padding           = 4,\r\n    memoryBag         = self\r\n}\r\nfunction groupNameInput:create(optionalStartingValue)\r\n    local effectiveText = optionalStartingValue or self.greyedOutText\r\n    local width = self:computeWidth(effectiveText)\r\n\r\n    self.memoryBag.createInput({\r\n        label = self.greyedOutText,\r\n        value = optionalStartingValue or nil,\r\n        alignment = 3, -- Center aligned\r\n        input_function = \"groupNameInput_onCharacterTyped\", function_owner = self.memoryBag,\r\n        position = { 2.1, 0.3, 0 }, rotation = { 0, 270, 0 }, width = width, height = 350,\r\n        font_size = 250, color = { 0, 0, 0 }, font_color = { 1, 1, 1 },\r\n    })\r\nend\r\n\r\nfunction groupNameInput:computeWidth(text)\r\n    return (string.len(text) + self.padding) * self.widthPerCharacter\r\nend\r\n\r\nfunction groupNameInput:updatedWidth(text)\r\n    self.memoryBag.editInput({\r\n        index = 0,\r\n        width = self:computeWidth(text)\r\n    })\r\nend\r\n\r\nfunction groupNameInput:onCharacterTyped(text, stillEditing)\r\n    if stillEditing then\r\n        self:updatedWidth(text)\r\n    else\r\n        if text == \"\" then\r\n            self:updatedWidth(self.greyedOutText)\r\n        end\r\n    end\r\nend\r\n\r\nfunction groupNameInput_onCharacterTyped(memoryBag, playerColor, text, stillEditing)\r\n    groupNameInput:onCharacterTyped(text, stillEditing)\r\nend\r\n\r\nfunction groupNameInput:setGroupNameToInputField()\r\n    local inputFields = self.memoryBag.getInputs()\r\n    if inputFields ~= nil then\r\n        -- Get input field 0, which corresponds to the groupNameInput.\r\n        -- Unfortunately \"self.getInputs()\" doesn't return the inputs in a guaranteed order.\r\n        local nameField = nil\r\n        for _, field in ipairs(inputFields) do\r\n            if field.index == 0 then\r\n                nameField = field\r\n            end\r\n        end\r\n\r\n        memoryGroupName:set(nameField.value)\r\n    end\r\nend\r\n\r\nfunction updateSave()\r\n    local data_to_save = { [\"ml\"] = memoryList, [\"groupName\"] = memoryGroupName:get() }\r\n    saved_data = JSON.encode(data_to_save)\r\n    self.script_state = saved_data\r\nend\r\n\r\nfunction combineMemoryFromBagsWithin()\r\n    local bagObjList = self.getObjects()\r\n    for _, bagObj in ipairs(bagObjList) do\r\n        local data = bagObj.lua_script_state\r\n        if data ~= nil then\r\n            local j = JSON.decode(data)\r\n            if j ~= nil and j.ml ~= nil then\r\n                for guid, entry in pairs(j.ml) do\r\n                    memoryList[guid] = entry\r\n                end\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\nfunction updateMemoryWithMoves()\r\n    memoryList = memoryListBackup\r\n    --get the first transposed object's coordinates\r\n    local obj = getObjectFromGUID(moveGuid)\r\n\r\n    -- p1 is where needs to go, p2 is where it was\r\n    local refObjPos = memoryList[moveGuid].pos\r\n    local deltaPos = findOffsetDistance(obj.getPosition(), refObjPos, nil)\r\n    local movedRotation = obj.getRotation()\r\n    for guid, entry in pairs(memoryList) do\r\n        memoryList[guid].pos.x = entry.pos.x - deltaPos.x\r\n        memoryList[guid].pos.y = entry.pos.y - deltaPos.y\r\n        memoryList[guid].pos.z = entry.pos.z - deltaPos.z\r\n    end\r\n    moveList = {}\r\nend\r\n\r\nfunction onload(saved_data)\r\n    GlobalMemoryGroups:onLoad(self.getGUID())\r\n    AllMemoryBagsInScene:add(self.getGUID())\r\n\r\n    fresh = true\r\n    if saved_data ~= \"\" then\r\n        local loaded_data = JSON.decode(saved_data)\r\n        --Set up information off of loaded_data\r\n        memoryList = loaded_data.ml\r\n        memoryGroupName:set(loaded_data.groupName)\r\n    else\r\n        --Set up information for if there is no saved saved data\r\n        memoryList = {}\r\n        memoryGroupName:set(nil)\r\n    end\r\n\r\n    moveList = {}\r\n    moveGuid = nil\r\n\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        fresh = false\r\n        createMemoryActionButtons()\r\n    end\r\nend\r\n\r\n--Beginning Setup\r\n\r\n--Make setup button\r\nfunction createSetupButton()\r\n    self.createButton({\r\n      label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n      position={0,0.3,2}, rotation={0,0,0}, height=350, width=800,\r\n      font_size=250, color={0,0,0}, font_color={1,1,1}\r\n  })\r\nend\r\n\r\n--Triggered by Transpose button\r\nfunction buttonClick_transpose()\r\n    moveGuid = nil\r\n    broadcastToAll(\"Select one object and move it- all objects will move relative to the new location\", { 0.75, 0.75, 1 })\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(true)\r\n    createSetupActionButtons(true)\r\nend\r\n\r\n--Triggered by setup button,\r\nfunction buttonClick_setup()\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(false)\r\n    createSetupActionButtons(false)\r\nend\r\n\r\nfunction getAllObjectsInMemory()\r\n    local objTable = {}\r\n    local curObj = {}\r\n\r\n    for guid in pairs(memoryListBackup) do\r\n        curObj = getObjectFromGUID(guid)\r\n        table.insert(objTable, curObj)\r\n    end\r\n\r\n    return objTable\r\nend\r\n\r\n--Creates selection buttons on objects\r\nfunction createButtonsOnAllObjects(move)\r\n    buttonIndexMap = {}\r\n    local howManyButtons = 0\r\n\r\n    local objsToHaveButtons = {}\r\n    if move == true then\r\n        objsToHaveButtons = getAllObjectsInMemory()\r\n    else\r\n        objsToHaveButtons = getAllObjects()\r\n    end\r\n\r\n    for _, obj in ipairs(objsToHaveButtons) do\r\n        if obj ~= self then\r\n            --On a normal bag, the button positions aren't the same size as the bag.\r\n            globalScaleFactor = 1 * 1 / self.getScale().x\r\n            --Super sweet math to set button positions\r\n            local selfPos = self.getPosition()\r\n            local objPos = obj.getPosition()\r\n            local deltaPos = findOffsetDistance(selfPos, objPos, obj)\r\n            local objPos = rotateLocalCoordinates(deltaPos, self)\r\n            objPos.x = -objPos.x * globalScaleFactor\r\n            objPos.y = objPos.y * globalScaleFactor + 2\r\n            objPos.z = objPos.z * globalScaleFactor\r\n            --Workaround for custom PDFs\r\n            if obj.Book then\r\n                objPos.y = objPos.y + 0.5\r\n            end\r\n            --Offset rotation of bag\r\n            local rot = self.getRotation()\r\n            rot.y = -rot.y + 180\r\n            --Create function\r\n            local funcName = \"selectButton_\" .. howManyButtons\r\n            local func = function() buttonClick_selection(obj, move) end\r\n            local color = { 0.75, 0.25, 0.25, 0.6 }\r\n            local colorMove = { 0, 0, 1, 0.6 }\r\n            if move == true then\r\n                color = colorMove\r\n            end\r\n            self.setVar(funcName, func)\r\n            self.createButton({\r\n                click_function = funcName, function_owner = self,\r\n                position = objPos, rotation = rot, height = 1000, width = 1000,\r\n                color = color,\r\n            })\r\n            buttonIndexMap[obj.getGUID()] = howManyButtons\r\n            howManyButtons = howManyButtons + 1\r\n        end\r\n    end\r\nend\r\n\r\n  --Creates submit and cancel buttons\r\n  function createSetupActionButtons(move)\r\n      self.createButton({\r\n         label=\"Annuler\", click_function=\"buttonClick_cancel\", function_owner=self,\r\n         position={-1.15,0.3,2.1}, rotation={0,0,0}, height=350, width=1100,\r\n         font_size=250, color={0,0,0}, font_color={1,1,1}\r\n      })\r\n\r\n      self.createButton({\r\n        label=\"Valider\", click_function=\"buttonClick_submit\", function_owner=self,\r\n        position={-1.15,0.3,2.8}, rotation={0,0,0}, height=350, width=1100,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n      })\r\n\r\n      if move == false then\r\n        self.createButton({\r\n            label=\"Ajouter\", click_function=\"buttonClick_add\", function_owner=self,\r\n            position={1.15,0.3,2.1}, rotation={0,0,0}, height=350, width=1100,\r\n            font_size=250, color={0,0,0}, font_color={0.25,1,0.25}\r\n          })\r\n\r\n          self.createButton({\r\n              label=\"Sélection\", click_function=\"editDragSelection\", function_owner=self,\r\n              position={-1.15,0.3,3.5}, rotation={0,0,0}, height=350, width=1100,\r\n              font_size=250, color={0,0,0}, font_color={1,1,1}\r\n          })\r\n\r\n          if fresh == false then\r\n              self.createButton({\r\n                  label=\"Mise à Jour\", click_function=\"buttonClick_setNew\", function_owner=self,\r\n                  position={1.15,0.3,3.5}, rotation={0,0,0}, height=350, width=1100,\r\n                  font_size=180, color={0,0,0}, font_color={0.75,0.75,1}\r\n              })\r\n              self.createButton({\r\n                  label=\"Retirer\", click_function=\"buttonClick_remove\", function_owner=self,\r\n                  position={1.15,0.3,2.8}, rotation={0,0,0}, height=350, width=1100,\r\n                  font_size=250, color={0,0,0}, font_color={1,0.25,0.25}\r\n              })\r\n          end\r\n      end\r\n\r\n      self.createButton({\r\n          label=\"Reset\", click_function=\"buttonClick_reset\", function_owner=self,\r\n          position={0,0.3,-2}, rotation={0,0,0}, height=350, width=800,\r\n          font_size=250, color={0,0,0}, font_color={1,1,1}\r\n      })\r\n  end\r\n\r\n\r\n--During Setup\r\n\r\n--Checks or unchecks buttons\r\nfunction buttonClick_selection(obj, move)\r\n    local index = buttonIndexMap[obj.getGUID()]\r\n    local colorMove = { 0, 0, 1, 0.6 }\r\n    local color = { 0, 1, 0, 0.6 }\r\n\r\n    previousGuid = selectedGuid\r\n    selectedGuid = obj.getGUID()\r\n\r\n    theList = memoryList\r\n    if move == true then\r\n        theList = moveList\r\n        if previousGuid ~= nil and previousGuid ~= selectedGuid then\r\n            local prevObj = getObjectFromGUID(previousGuid)\r\n            prevObj.highlightOff()\r\n            self.editButton({ index = previousIndex, color = colorMove })\r\n            theList[previousGuid] = nil\r\n        end\r\n        previousIndex = index\r\n    end\r\n\r\n    if theList[selectedGuid] == nil then\r\n        self.editButton({ index = index, color = color })\r\n        --Adding pos/rot to memory table\r\n        local pos, rot = obj.getPosition(), obj.getRotation()\r\n        --I need to add it like this or it won't save due to indexing issue\r\n        theList[obj.getGUID()] = {\r\n            pos = { x = round(pos.x, 4), y = round(pos.y, 4), z = round(pos.z, 4) },\r\n            rot = { x = round(rot.x, 4), y = round(rot.y, 4), z = round(rot.z, 4) },\r\n            lock = obj.getLock(),\r\n            tint = obj.getColorTint()\r\n        }\r\n        obj.highlightOn({ 0, 1, 0 })\r\n    else\r\n        color = { 0.75, 0.25, 0.25, 0.6 }\r\n        if move == true then\r\n            color = colorMove\r\n        end\r\n        self.editButton({ index = index, color = color })\r\n        theList[obj.getGUID()] = nil\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\nfunction editDragSelection(bagObj, player, remove)\r\n    local selectedObjs = Player[player].getSelectedObjects()\r\n    if not remove then\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            --Ignore if already in the memory list, or does not have a button\r\n            if index and not memoryList[obj.getGUID()] then\r\n                self.editButton({ index = index, color = { 0, 1, 0, 0.6 } })\r\n                --Adding pos/rot to memory table\r\n                local pos, rot = obj.getPosition(), obj.getRotation()\r\n                --I need to add it like this or it won't save due to indexing issue\r\n                memoryList[obj.getGUID()] = {\r\n                    pos = { x = round(pos.x, 4), y = round(pos.y, 4), z = round(pos.z, 4) },\r\n                    rot = { x = round(rot.x, 4), y = round(rot.y, 4), z = round(rot.z, 4) },\r\n                    lock = obj.getLock(),\r\n                    tint = obj.getColorTint()\r\n                }\r\n                obj.highlightOn({ 0, 1, 0 })\r\n            end\r\n        end\r\n    else\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            if index and memoryList[obj.getGUID()] then\r\n                color = { 0.75, 0.25, 0.25, 0.6 }\r\n                self.editButton({ index = index, color = color })\r\n                memoryList[obj.getGUID()] = nil\r\n                obj.highlightOff()\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\n--Cancels selection process\r\nfunction buttonClick_cancel()\r\n    memoryList = memoryListBackup\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        createMemoryActionButtons()\r\n    end\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Sélection annulée\", { 1, 1, 1 })\r\n    moveGuid = nil\r\nend\r\n\r\n--Saves selections\r\nfunction buttonClick_submit()\r\n    fresh = false\r\n    if next(moveList) ~= nil then\r\n        for guid in pairs(moveList) do\r\n            moveGuid = guid\r\n        end\r\n        if memoryListBackup[moveGuid] == nil then\r\n            broadcastToAll(\"Item selected for moving is not already in memory\", { 1, 0.25, 0.25 })\r\n        else\r\n            broadcastToAll(\"Moving all items in memory relative to new objects position!\", { 0.75, 0.75, 1 })\r\n            self.clearButtons()\r\n            self.clearInputs()\r\n            createMemoryActionButtons()\r\n            local count = 0\r\n            for guid in pairs(moveList) do\r\n                moveGuid = guid\r\n                count = count + 1\r\n                local obj = getObjectFromGUID(guid)\r\n                if obj ~= nil then obj.highlightOff() end\r\n            end\r\n            updateMemoryWithMoves()\r\n            updateSave()\r\n            buttonClick_place()\r\n        end\r\n    elseif next(memoryList) == nil and moveGuid == nil then\r\n        memoryList = memoryListBackup\r\n        broadcastToAll(\"No selections made.\", { 0.75, 0.25, 0.25 })\r\n    end\r\n    combineMemoryFromBagsWithin()\r\n    groupNameInput:setGroupNameToInputField()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count .. \" Objects Saved\", { 1, 1, 1 })\r\n    updateSave()\r\n    moveGuid = nil\r\nend\r\n\r\nfunction combineTables(first_table, second_table)\r\n    for k, v in pairs(second_table) do first_table[k] = v end\r\nend\r\n\r\nfunction buttonClick_add()\r\n    fresh = false\r\n    combineTables(memoryList, memoryListBackup)\r\n    broadcastToAll(\"Adding internal bags and selections to existing memory\", { 0.25, 0.75, 0.25 })\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count .. \" Objects Saved\", { 1, 1, 1 })\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_remove()\r\n    broadcastToAll(\"Removing Selected Entries From Memory\", { 1.0, 0.25, 0.25 })\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        memoryListBackup[guid] = nil\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count .. \" Objects Removed\", { 1, 1, 1 })\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_setNew()\r\n    broadcastToAll(\"Setting new position relative to items in memory\", { 0.75, 0.75, 1 })\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        guid = obj.guid\r\n        if memoryListBackup[guid] ~= nil then\r\n            count = count + 1\r\n            memoryListBackup[guid].pos = obj.getPosition()\r\n            memoryListBackup[guid].rot = obj.getRotation()\r\n            memoryListBackup[guid].lock = obj.getLock()\r\n            memoryListBackup[guid].tint = obj.getColorTint()\r\n        end\r\n    end\r\n    broadcastToAll(count .. \" Objects Saved\", { 1, 1, 1 })\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\n--Resets bag to starting status\r\nfunction buttonClick_reset()\r\n    fresh = true\r\n    memoryList = {}\r\n    memoryGroupName:set(nil)\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createSetupButton()\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Tool Reset\", { 1, 1, 1 })\r\n    updateSave()\r\nend\r\n\r\n--After Setup\r\n\r\n--Creates recall and place buttons\r\nfunction createMemoryActionButtons()\r\n    self.createButton({\r\n        label=\"Placer au hasard\", click_function=\"buttonClick_place\", function_owner=self,\r\n        position={0,0.3,2}, rotation={0,0,0}, height=350, width=2000,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Ranger\", click_function=\"buttonClick_recall\", function_owner=self,\r\n        position={0,0.3,2.8}, rotation={0,0,0}, height=350, width=1000,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n        position={2,0.3,0}, rotation={0,90,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    ---    self.createButton({\r\n    ---      label=\"Bouger\", click_function=\"buttonClick_transpose\", function_owner=self,\r\n    ---      position={-2,0.3,0.8}, rotation={0,270,0}, height=350, width=800,\r\n    ---      font_size=250, color={0,0,0}, font_color={0.75,0.75,1}\r\n    ---\r\nend\r\n\r\n--Sends objects from bag/table to their saved position/rotation\r\nfunction buttonClick_place()\r\n    if anyOtherBagsInMyGroupArePlaced() then\r\n        recallOtherBagsInMyGroup()\r\n        Wait.frames(_placeObjects, CONFIG.MEMORY_GROUP.FRAME_DELAY_BEFORE_PLACING_OBJECTS)\r\n    else\r\n        _placeObjects()\r\n    end\r\nend\r\n\r\nfunction _placeObjects()\r\n    local bagObjList = self.getObjects()\r\n\r\n    -- randomize memorylist position\r\n    local positionList = {}\r\n    for guid, entry in pairs(memoryList) do\r\n        table.insert(positionList, memoryList[guid].pos)\r\n    end\r\n\r\n    for i = #positionList, 2, -1 do\r\n        local j = math.random(i)\r\n        positionList[i], positionList[j] = positionList[j], positionList[i]\r\n    end\r\n\r\n    local i = 1\r\n    for guid, entry in pairs(memoryList) do\r\n        memoryList[guid].pos = positionList[i]\r\n        i = i + 1\r\n    end\r\n\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        --If obj is out on the table, move it to the saved pos/rot\r\n        if obj ~= nil then\r\n            obj.setPositionSmooth(entry.pos)\r\n            obj.setRotationSmooth(entry.rot)\r\n            obj.setLock(entry.lock)\r\n            obj.setColorTint(entry.tint)\r\n        else\r\n            --If obj is inside of the bag\r\n            for _, bagObj in ipairs(bagObjList) do\r\n                if bagObj.guid == guid then\r\n                    local item = self.takeObject({\r\n                        guid = guid, position = entry.pos, rotation = entry.rot, smooth = false\r\n                    })\r\n                    item.setLock(entry.lock)\r\n                    item.setColorTint(entry.tint)\r\n                    break\r\n                end\r\n            end\r\n        end\r\n    end\r\n    broadcastToAll(\"Objets placés au hasard\", {1,1,1})\r\nend\r\n\r\n--Recalls objects to bag from table\r\nfunction buttonClick_recall()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then self.putObject(obj) end\r\n    end\r\n    broadcastToAll(\"Objets rangés\", {1,1,1})\r\nend\r\n\r\n--Utility functions\r\n\r\n--Find delta (difference) between 2 x/y/z coordinates\r\nfunction findOffsetDistance(p1, p2, obj)\r\n    local yOffset = 0\r\n    if obj ~= nil then\r\n        local bounds = obj.getBounds()\r\n        yOffset = (bounds.size.y - bounds.offset.y)\r\n    end\r\n    local deltaPos = {}\r\n    deltaPos.x = (p2.x - p1.x)\r\n    deltaPos.y = (p2.y - p1.y) + yOffset\r\n    deltaPos.z = (p2.z - p1.z)\r\n    return deltaPos\r\nend\r\n\r\n--Used to rotate a set of coordinates by an angle\r\nfunction rotateLocalCoordinates(desiredPos, obj)\r\n    local objPos, objRot = obj.getPosition(), obj.getRotation()\r\n    local angle = math.rad(objRot.y)\r\n    local x = desiredPos.x * math.cos(angle) - desiredPos.z * math.sin(angle)\r\n    local z = desiredPos.x * math.sin(angle) + desiredPos.z * math.cos(angle)\r\n    --return {x=objPos.x+x, y=objPos.y+desiredPos.y, z=objPos.z+z}\r\n    return { x = x, y = desiredPos.y, z = z }\r\nend\r\n\r\nfunction rotateMyCoordinates(desiredPos, obj)\r\n    local angle = math.rad(obj.getRotation().y)\r\n    local x = desiredPos.x * math.sin(angle)\r\n    local z = desiredPos.z * math.cos(angle)\r\n    return { x = x, y = desiredPos.y, z = z }\r\nend\r\n\r\n--Coroutine delay, in seconds\r\nfunction wait(time)\r\n    local start = os.time()\r\n    repeat coroutine.yield(0) until os.time() > start + time\r\nend\r\n\r\n--Duplicates a table (needed to prevent it making reference to the same objects)\r\nfunction duplicateTable(oldTable)\r\n    local newTable = {}\r\n    for k, v in pairs(oldTable) do\r\n        newTable[k] = v\r\n    end\r\n    return newTable\r\nend\r\n\r\n--Moves scripted highlight from all objects\r\nfunction removeAllHighlights()\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\n--Round number (num) to the Nth decimal (dec)\r\nfunction round(num, dec)\r\n    local mult = 10 ^ (dec or 0)\r\n    return math.floor(num * mult + 0.5) / mult\r\nend\r\n\r\n--[[ This object provides access to a variable stored on the \"Global script\".\r\nThe variable holds the GUIDs for every Utility Memory Bag in the scene.\r\nExample: {'805ebd', '35cc21', 'fc8886', 'f50264', '5f5f63'} --]]\r\nAllMemoryBagsInScene = {\r\n    NAME_OF_GLOBAL_VARIABLE = \"_UtilityMemoryBag_AllMemoryBagsInScene\"\r\n}\r\n\r\nfunction AllMemoryBagsInScene:add(guid)\r\n    local guids = Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\n    table.insert(guids, guid)\r\n    Global.setTable(self.NAME_OF_GLOBAL_VARIABLE, guids)\r\nend\r\n\r\nfunction AllMemoryBagsInScene:getGuidList()\r\n    return Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\nend\r\n","LuaScriptState":"{\"ml\":{\"0e5993\":{\"lock\":false,\"pos\":{\"x\":20,\"y\":1.5446,\"z\":12},\"rot\":{\"x\":0.0109,\"y\":179.9698,\"z\":0.005},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"ee8603\":{\"lock\":false,\"pos\":{\"x\":-26.9049,\"y\":1.8288,\"z\":26.0003},\"rot\":{\"x\":0,\"y\":179.9697,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"fcc23e\":{\"lock\":false,\"pos\":{\"x\":-27.5,\"y\":1.7789,\"z\":26},\"rot\":{\"x\":0,\"y\":179.9697,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}}}}","XmlUI":"","ContainedObjects":[{"GUID":"0e5993","Name":"Card","Transform":{"posX":-26.9048653,"posY":1.8289032,"posZ":26.0003357,"rotX":0.000006019679,"rotY":179.969879,"rotZ":-0.00001354776,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Magasin d'Osborn","Description":"Dunwich.","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02206\",\n  \"locationBack\": {\n    \"connections\": \"Crescent|Square\",\n    \"icons\": \"Circle\",\n    \"uses\": {\n      \"countPerInvestigator\": 1,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    }\n  },\n  \"locationFront\": {\n    \"connections\": \"Crescent|Square\",\n    \"icons\": \"Circle\"\n  },\n  \"traits\": \"Dunwich.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":21307,"SidewaysCard":false,"CustomDeck":{"213":{"FaceURL":"https://i.imgur.com/8fUptYt.jpg","BackURL":"https://i.imgur.com/s72Czne.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"ee8603","Name":"Card","Transform":{"posX":-27.4999638,"posY":1.77890384,"posZ":26.0000381,"rotX":-0.00000102165984,"rotY":179.969757,"rotZ":-0.0000275348848,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"51036\",\n  \"locationBack\": {\n    \"connections\": \"Tilde|Apostrophe\",\n    \"icons\": \"Circle|ArkhamWoods\",\n    \"uses\": {\n      \"countPerInvestigator\": 1,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    }\n  },\n  \"locationFront\": {\n    \"connections\": \"Tilde\",\n    \"icons\": \"Square|ArkhamWoods\"\n  },\n  \"traits\": \"Dunwich.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276116,"SidewaysCard":false,"CustomDeck":{"2761":{"FaceURL":"https://i.imgur.com/FVWxpyu.jpg","BackURL":"https://i.imgur.com/EmJxccn.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"fcc23e","Name":"Card","Transform":{"posX":20.0000019,"posY":1.54460979,"posZ":11.9999971,"rotX":0.010902266,"rotY":179.9697,"rotZ":0.004999842,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Magasin d'Osborn","Description":"Dunwich.","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02207\",\n  \"locationBack\": {\n    \"connections\": \"Crescent|Square\",\n    \"icons\": \"Circle\",\n    \"uses\": {\n      \"countPerInvestigator\": 1,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    }\n  },\n  \"locationFront\": {\n    \"connections\": \"Crescent|Square\",\n    \"icons\": \"Circle\"\n  },\n  \"traits\": \"Dunwich.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":21306,"SidewaysCard":false,"CustomDeck":{"213":{"FaceURL":"https://i.imgur.com/8fUptYt.jpg","BackURL":"https://i.imgur.com/s72Czne.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""}]},{"GUID":"89f177","Name":"Custom_Model_Bag","Transform":{"posX":-26.0000019,"posY":1.83530092,"posZ":9.999996,"rotX":-0.00000649421645,"rotY":179.973785,"rotZ":-8.890499e-8,"scaleX":0.7,"scaleY":0.7,"scaleZ":0.7},"Nickname":"Ecole","Description":"merci à Chr1Z pour le script","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.614982545,"g":0,"b":0},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"MaterialIndex":-1,"MeshIndex":-1,"CustomMesh":{"MeshURL":"https://pastebin.com/raw/ALrYhQGb","DiffuseURL":"http://cloud-3.steamusercontent.com/ugc/1936013662302190186/C47C06A96754B7EC1968D360C2C50AD1289C3363/","NormalURL":"","ColliderURL":"","Convex":true,"MaterialIndex":3,"TypeIndex":6,"CustomShader":{"SpecularColor":{"r":1,"g":1,"b":1},"SpecularIntensity":0,"SpecularSharpness":2,"FresnelStrength":0},"CastShadows":true},"Bag":{"Order":0},"LuaScript":"-- Random memory bag\r\n-- based on Utility memory bag by Directsun (Version 2.7.0)\r\n\r\nlocal CONFIG = {\r\n    MEMORY_GROUP = {\r\n        -- This determines how many frames to wait before actually placing objects onto the table when the \"Place\" button is clicked.\r\n        -- This gives the other bags time to recall their objects.\r\n        -- The delay ONLY occurs if other bags have objects out.\r\n        FRAME_DELAY_BEFORE_PLACING_OBJECTS = 30\r\n    }\r\n}\r\n\r\nmath.randomseed(os.time())\r\n\r\n--[[ Memory Bag Groups ]]\r\n--[[ Utility Memory Bags may be added to a named group, called a \"memory group\".\r\nYou can add a bag to a group through the bag's UI: \"Setup\" > \"Group Name\" (to the left of the bag).\r\nOnly one bag from a group may have it's contents placed on the table at a time.\r\nWhen \"Place\" is clicked on a bag, the other bags in it's memory group are recalled.\r\nBy default a memory bag is not in any group. It's memory group is \"nil\". --]]\r\n\r\nmemoryGroupName = { memoryBag = self }\r\nfunction memoryGroupName:get()\r\n    return self._name\r\nend\r\n\r\nfunction memoryGroupName:set(newName)\r\n    GlobalMemoryGroups:unregisterBagInGroup(self:get(), self.memoryBag.getGUID())\r\n    GlobalMemoryGroups:registerBagInGroup(newName, self.memoryBag.getGUID())\r\n\r\n    if newName == \"\" then\r\n        self._name = nil\r\n    else\r\n        self._name = newName\r\n    end\r\nend\r\n\r\n-- Click the \"Recall\" button on all other bags in my memory group.\r\nfunction recallOtherBagsInMyGroup()\r\n    for _, bag in ipairs(getOtherBagsInMyGroup()) do\r\n        bag.call('buttonClick_recall')\r\n    end\r\nend\r\n\r\n-- Return \"true\" if another bag in my memory group has any objects out on the table.\r\nfunction anyOtherBagsInMyGroupArePlaced()\r\n    for _, bag in ipairs(getOtherBagsInMyGroup()) do\r\n        local state = bag.call('areAnyOfMyObjectsPlaced')\r\n        if state then return true end\r\n    end\r\n\r\n    return false\r\nend\r\n\r\n-- Return \"true\" if at least one object from this memory bag is out on the table.\r\nfunction areAnyOfMyObjectsPlaced()\r\n    for guid, _ in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then\r\n            return true\r\n        end\r\n    end\r\n    return false\r\nend\r\n\r\nfunction getOtherBagsInMyGroup()\r\n    local bags = {}\r\n    for bagGuid, _ in pairs(GlobalMemoryGroups:getGroup(memoryGroupName:get())) do\r\n        if bagGuid ~= self.getGUID() then\r\n            bag = getObjectFromGUID(bagGuid)\r\n            -- \"bag\" is nill if it has been deleted since the last time onLoad() was called.\r\n            if bag ~= nil then\r\n                table.insert(bags, bag)\r\n            end\r\n        end\r\n    end\r\n    return bags\r\nend\r\n\r\n--[[\r\nThis object provides access to a variable stored on the \"Global script\".\r\nThe variable holds the names & guids of all memory bag groups.\r\nThe global variable is a table and holds data like this:\r\n{\r\n    'My First Group Name' = {\r\n        '805ebd' = {},\r\n        '35cc21' = {},\r\n        'fc8886' = {},\r\n    },\r\n    'My Second Group Name' = {\r\n        'f50264' = {},\r\n        '5f5f63' = {},\r\n    },\r\n}\r\n--]]\r\nGlobalMemoryGroups = { NAME_OF_GLOBAL_VARIABLE = '_GlobalUtilityMemoryBagGroups' }\r\n\r\n-- Call me inside this script's \"onLoad()\" method!\r\nfunction GlobalMemoryGroups:onLoad(myGuid)\r\n    -- Create and initialize the global variable if it doesn't already exist:\r\n    if self:_getGroups() == nil then\r\n        self:_setGroups({})\r\n    end\r\nend\r\n\r\n-- Return the GUIDs of all bags in the \"groupName\". The return value is a dictionary that maps [GUID -> empty table].\r\nfunction GlobalMemoryGroups:getGroup(groupName)\r\n    guids = self:_getGroups()[groupName] or {}\r\n    return guids\r\nend\r\n\r\n-- Registers a bag in a memory group. Creates a new group if one doesn't exist.\r\nfunction GlobalMemoryGroups:registerBagInGroup(groupName, bagGuid)\r\n    if groupName == nil or groupName == \"\" then\r\n        return\r\n    end\r\n\r\n    self:_tryCreateNewGroup(groupName)\r\n    local groups = self:_getGroups()\r\n    groups[groupName][bagGuid] = {}\r\n    self:_setGroups(groups)\r\nend\r\n\r\n-- Removes this bag from the memory group.\r\nfunction GlobalMemoryGroups:unregisterBagInGroup(groupName, bagGuid)\r\n    local groups = self:_getGroups()\r\n    local group = groups[groupName]\r\n    if group ~= nil then\r\n        group[bagGuid] = nil\r\n        self:_setGroups(groups)\r\n    end\r\nend\r\n\r\n-- Return the global variable, which is a table holding all memory group names & guids.\r\nfunction GlobalMemoryGroups:_getGroups()\r\n    return Global.getTable(self.NAME_OF_GLOBAL_VARIABLE)\r\nend\r\n\r\n-- Override the global variable (i.e. the entire table).\r\nfunction GlobalMemoryGroups:_setGroups(newTable)\r\n    Global.setTable(self.NAME_OF_GLOBAL_VARIABLE, newTable)\r\nend\r\n\r\n-- Add a new memory group named \"groupName\" to the global variable, if one doesn't already exist.\r\nfunction GlobalMemoryGroups:_tryCreateNewGroup(groupName)\r\n    local groups = self:_getGroups()\r\n    if groups[groupName] == nil then\r\n        groups[groupName] = {}\r\n        self:_setGroups(groups)\r\n    end\r\nend\r\n\r\n-- This object controls the \"Group Name\" input text field that is part of the bag's ingame UI.\r\ngroupNameInput = {\r\n    greyedOutText     = \"Group Name\",\r\n    widthPerCharacter = 100,\r\n    padding           = 4,\r\n    memoryBag         = self\r\n}\r\nfunction groupNameInput:create(optionalStartingValue)\r\n    local effectiveText = optionalStartingValue or self.greyedOutText\r\n    local width = self:computeWidth(effectiveText)\r\n\r\n    self.memoryBag.createInput({\r\n        label = self.greyedOutText,\r\n        value = optionalStartingValue or nil,\r\n        alignment = 3, -- Center aligned\r\n        input_function = \"groupNameInput_onCharacterTyped\", function_owner = self.memoryBag,\r\n        position = { 2.1, 0.3, 0 }, rotation = { 0, 270, 0 }, width = width, height = 350,\r\n        font_size = 250, color = { 0, 0, 0 }, font_color = { 1, 1, 1 },\r\n    })\r\nend\r\n\r\nfunction groupNameInput:computeWidth(text)\r\n    return (string.len(text) + self.padding) * self.widthPerCharacter\r\nend\r\n\r\nfunction groupNameInput:updatedWidth(text)\r\n    self.memoryBag.editInput({\r\n        index = 0,\r\n        width = self:computeWidth(text)\r\n    })\r\nend\r\n\r\nfunction groupNameInput:onCharacterTyped(text, stillEditing)\r\n    if stillEditing then\r\n        self:updatedWidth(text)\r\n    else\r\n        if text == \"\" then\r\n            self:updatedWidth(self.greyedOutText)\r\n        end\r\n    end\r\nend\r\n\r\nfunction groupNameInput_onCharacterTyped(memoryBag, playerColor, text, stillEditing)\r\n    groupNameInput:onCharacterTyped(text, stillEditing)\r\nend\r\n\r\nfunction groupNameInput:setGroupNameToInputField()\r\n    local inputFields = self.memoryBag.getInputs()\r\n    if inputFields ~= nil then\r\n        -- Get input field 0, which corresponds to the groupNameInput.\r\n        -- Unfortunately \"self.getInputs()\" doesn't return the inputs in a guaranteed order.\r\n        local nameField = nil\r\n        for _, field in ipairs(inputFields) do\r\n            if field.index == 0 then\r\n                nameField = field\r\n            end\r\n        end\r\n\r\n        memoryGroupName:set(nameField.value)\r\n    end\r\nend\r\n\r\nfunction updateSave()\r\n    local data_to_save = { [\"ml\"] = memoryList, [\"groupName\"] = memoryGroupName:get() }\r\n    saved_data = JSON.encode(data_to_save)\r\n    self.script_state = saved_data\r\nend\r\n\r\nfunction combineMemoryFromBagsWithin()\r\n    local bagObjList = self.getObjects()\r\n    for _, bagObj in ipairs(bagObjList) do\r\n        local data = bagObj.lua_script_state\r\n        if data ~= nil then\r\n            local j = JSON.decode(data)\r\n            if j ~= nil and j.ml ~= nil then\r\n                for guid, entry in pairs(j.ml) do\r\n                    memoryList[guid] = entry\r\n                end\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\nfunction updateMemoryWithMoves()\r\n    memoryList = memoryListBackup\r\n    --get the first transposed object's coordinates\r\n    local obj = getObjectFromGUID(moveGuid)\r\n\r\n    -- p1 is where needs to go, p2 is where it was\r\n    local refObjPos = memoryList[moveGuid].pos\r\n    local deltaPos = findOffsetDistance(obj.getPosition(), refObjPos, nil)\r\n    local movedRotation = obj.getRotation()\r\n    for guid, entry in pairs(memoryList) do\r\n        memoryList[guid].pos.x = entry.pos.x - deltaPos.x\r\n        memoryList[guid].pos.y = entry.pos.y - deltaPos.y\r\n        memoryList[guid].pos.z = entry.pos.z - deltaPos.z\r\n    end\r\n    moveList = {}\r\nend\r\n\r\nfunction onload(saved_data)\r\n    GlobalMemoryGroups:onLoad(self.getGUID())\r\n    AllMemoryBagsInScene:add(self.getGUID())\r\n\r\n    fresh = true\r\n    if saved_data ~= \"\" then\r\n        local loaded_data = JSON.decode(saved_data)\r\n        --Set up information off of loaded_data\r\n        memoryList = loaded_data.ml\r\n        memoryGroupName:set(loaded_data.groupName)\r\n    else\r\n        --Set up information for if there is no saved saved data\r\n        memoryList = {}\r\n        memoryGroupName:set(nil)\r\n    end\r\n\r\n    moveList = {}\r\n    moveGuid = nil\r\n\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        fresh = false\r\n        createMemoryActionButtons()\r\n    end\r\nend\r\n\r\n--Beginning Setup\r\n\r\n--Make setup button\r\nfunction createSetupButton()\r\n    self.createButton({\r\n      label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n      position={0,0.3,2}, rotation={0,0,0}, height=350, width=800,\r\n      font_size=250, color={0,0,0}, font_color={1,1,1}\r\n  })\r\nend\r\n\r\n--Triggered by Transpose button\r\nfunction buttonClick_transpose()\r\n    moveGuid = nil\r\n    broadcastToAll(\"Select one object and move it- all objects will move relative to the new location\", { 0.75, 0.75, 1 })\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(true)\r\n    createSetupActionButtons(true)\r\nend\r\n\r\n--Triggered by setup button,\r\nfunction buttonClick_setup()\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(false)\r\n    createSetupActionButtons(false)\r\nend\r\n\r\nfunction getAllObjectsInMemory()\r\n    local objTable = {}\r\n    local curObj = {}\r\n\r\n    for guid in pairs(memoryListBackup) do\r\n        curObj = getObjectFromGUID(guid)\r\n        table.insert(objTable, curObj)\r\n    end\r\n\r\n    return objTable\r\nend\r\n\r\n--Creates selection buttons on objects\r\nfunction createButtonsOnAllObjects(move)\r\n    buttonIndexMap = {}\r\n    local howManyButtons = 0\r\n\r\n    local objsToHaveButtons = {}\r\n    if move == true then\r\n        objsToHaveButtons = getAllObjectsInMemory()\r\n    else\r\n        objsToHaveButtons = getAllObjects()\r\n    end\r\n\r\n    for _, obj in ipairs(objsToHaveButtons) do\r\n        if obj ~= self then\r\n            --On a normal bag, the button positions aren't the same size as the bag.\r\n            globalScaleFactor = 1 * 1 / self.getScale().x\r\n            --Super sweet math to set button positions\r\n            local selfPos = self.getPosition()\r\n            local objPos = obj.getPosition()\r\n            local deltaPos = findOffsetDistance(selfPos, objPos, obj)\r\n            local objPos = rotateLocalCoordinates(deltaPos, self)\r\n            objPos.x = -objPos.x * globalScaleFactor\r\n            objPos.y = objPos.y * globalScaleFactor + 2\r\n            objPos.z = objPos.z * globalScaleFactor\r\n            --Workaround for custom PDFs\r\n            if obj.Book then\r\n                objPos.y = objPos.y + 0.5\r\n            end\r\n            --Offset rotation of bag\r\n            local rot = self.getRotation()\r\n            rot.y = -rot.y + 180\r\n            --Create function\r\n            local funcName = \"selectButton_\" .. howManyButtons\r\n            local func = function() buttonClick_selection(obj, move) end\r\n            local color = { 0.75, 0.25, 0.25, 0.6 }\r\n            local colorMove = { 0, 0, 1, 0.6 }\r\n            if move == true then\r\n                color = colorMove\r\n            end\r\n            self.setVar(funcName, func)\r\n            self.createButton({\r\n                click_function = funcName, function_owner = self,\r\n                position = objPos, rotation = rot, height = 1000, width = 1000,\r\n                color = color,\r\n            })\r\n            buttonIndexMap[obj.getGUID()] = howManyButtons\r\n            howManyButtons = howManyButtons + 1\r\n        end\r\n    end\r\nend\r\n\r\n  --Creates submit and cancel buttons\r\n  function createSetupActionButtons(move)\r\n      self.createButton({\r\n         label=\"Annuler\", click_function=\"buttonClick_cancel\", function_owner=self,\r\n         position={-1.15,0.3,2.1}, rotation={0,0,0}, height=350, width=1100,\r\n         font_size=250, color={0,0,0}, font_color={1,1,1}\r\n      })\r\n\r\n      self.createButton({\r\n        label=\"Valider\", click_function=\"buttonClick_submit\", function_owner=self,\r\n        position={-1.15,0.3,2.8}, rotation={0,0,0}, height=350, width=1100,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n      })\r\n\r\n      if move == false then\r\n        self.createButton({\r\n            label=\"Ajouter\", click_function=\"buttonClick_add\", function_owner=self,\r\n            position={1.15,0.3,2.1}, rotation={0,0,0}, height=350, width=1100,\r\n            font_size=250, color={0,0,0}, font_color={0.25,1,0.25}\r\n          })\r\n\r\n          self.createButton({\r\n              label=\"Sélection\", click_function=\"editDragSelection\", function_owner=self,\r\n              position={-1.15,0.3,3.5}, rotation={0,0,0}, height=350, width=1100,\r\n              font_size=250, color={0,0,0}, font_color={1,1,1}\r\n          })\r\n\r\n          if fresh == false then\r\n              self.createButton({\r\n                  label=\"Mise à Jour\", click_function=\"buttonClick_setNew\", function_owner=self,\r\n                  position={1.15,0.3,3.5}, rotation={0,0,0}, height=350, width=1100,\r\n                  font_size=180, color={0,0,0}, font_color={0.75,0.75,1}\r\n              })\r\n              self.createButton({\r\n                  label=\"Retirer\", click_function=\"buttonClick_remove\", function_owner=self,\r\n                  position={1.15,0.3,2.8}, rotation={0,0,0}, height=350, width=1100,\r\n                  font_size=250, color={0,0,0}, font_color={1,0.25,0.25}\r\n              })\r\n          end\r\n      end\r\n\r\n      self.createButton({\r\n          label=\"Reset\", click_function=\"buttonClick_reset\", function_owner=self,\r\n          position={0,0.3,-2}, rotation={0,0,0}, height=350, width=800,\r\n          font_size=250, color={0,0,0}, font_color={1,1,1}\r\n      })\r\n  end\r\n\r\n\r\n--During Setup\r\n\r\n--Checks or unchecks buttons\r\nfunction buttonClick_selection(obj, move)\r\n    local index = buttonIndexMap[obj.getGUID()]\r\n    local colorMove = { 0, 0, 1, 0.6 }\r\n    local color = { 0, 1, 0, 0.6 }\r\n\r\n    previousGuid = selectedGuid\r\n    selectedGuid = obj.getGUID()\r\n\r\n    theList = memoryList\r\n    if move == true then\r\n        theList = moveList\r\n        if previousGuid ~= nil and previousGuid ~= selectedGuid then\r\n            local prevObj = getObjectFromGUID(previousGuid)\r\n            prevObj.highlightOff()\r\n            self.editButton({ index = previousIndex, color = colorMove })\r\n            theList[previousGuid] = nil\r\n        end\r\n        previousIndex = index\r\n    end\r\n\r\n    if theList[selectedGuid] == nil then\r\n        self.editButton({ index = index, color = color })\r\n        --Adding pos/rot to memory table\r\n        local pos, rot = obj.getPosition(), obj.getRotation()\r\n        --I need to add it like this or it won't save due to indexing issue\r\n        theList[obj.getGUID()] = {\r\n            pos = { x = round(pos.x, 4), y = round(pos.y, 4), z = round(pos.z, 4) },\r\n            rot = { x = round(rot.x, 4), y = round(rot.y, 4), z = round(rot.z, 4) },\r\n            lock = obj.getLock(),\r\n            tint = obj.getColorTint()\r\n        }\r\n        obj.highlightOn({ 0, 1, 0 })\r\n    else\r\n        color = { 0.75, 0.25, 0.25, 0.6 }\r\n        if move == true then\r\n            color = colorMove\r\n        end\r\n        self.editButton({ index = index, color = color })\r\n        theList[obj.getGUID()] = nil\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\nfunction editDragSelection(bagObj, player, remove)\r\n    local selectedObjs = Player[player].getSelectedObjects()\r\n    if not remove then\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            --Ignore if already in the memory list, or does not have a button\r\n            if index and not memoryList[obj.getGUID()] then\r\n                self.editButton({ index = index, color = { 0, 1, 0, 0.6 } })\r\n                --Adding pos/rot to memory table\r\n                local pos, rot = obj.getPosition(), obj.getRotation()\r\n                --I need to add it like this or it won't save due to indexing issue\r\n                memoryList[obj.getGUID()] = {\r\n                    pos = { x = round(pos.x, 4), y = round(pos.y, 4), z = round(pos.z, 4) },\r\n                    rot = { x = round(rot.x, 4), y = round(rot.y, 4), z = round(rot.z, 4) },\r\n                    lock = obj.getLock(),\r\n                    tint = obj.getColorTint()\r\n                }\r\n                obj.highlightOn({ 0, 1, 0 })\r\n            end\r\n        end\r\n    else\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            if index and memoryList[obj.getGUID()] then\r\n                color = { 0.75, 0.25, 0.25, 0.6 }\r\n                self.editButton({ index = index, color = color })\r\n                memoryList[obj.getGUID()] = nil\r\n                obj.highlightOff()\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\n--Cancels selection process\r\nfunction buttonClick_cancel()\r\n    memoryList = memoryListBackup\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        createMemoryActionButtons()\r\n    end\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Sélection annulée\", { 1, 1, 1 })\r\n    moveGuid = nil\r\nend\r\n\r\n--Saves selections\r\nfunction buttonClick_submit()\r\n    fresh = false\r\n    if next(moveList) ~= nil then\r\n        for guid in pairs(moveList) do\r\n            moveGuid = guid\r\n        end\r\n        if memoryListBackup[moveGuid] == nil then\r\n            broadcastToAll(\"Item selected for moving is not already in memory\", { 1, 0.25, 0.25 })\r\n        else\r\n            broadcastToAll(\"Moving all items in memory relative to new objects position!\", { 0.75, 0.75, 1 })\r\n            self.clearButtons()\r\n            self.clearInputs()\r\n            createMemoryActionButtons()\r\n            local count = 0\r\n            for guid in pairs(moveList) do\r\n                moveGuid = guid\r\n                count = count + 1\r\n                local obj = getObjectFromGUID(guid)\r\n                if obj ~= nil then obj.highlightOff() end\r\n            end\r\n            updateMemoryWithMoves()\r\n            updateSave()\r\n            buttonClick_place()\r\n        end\r\n    elseif next(memoryList) == nil and moveGuid == nil then\r\n        memoryList = memoryListBackup\r\n        broadcastToAll(\"No selections made.\", { 0.75, 0.25, 0.25 })\r\n    end\r\n    combineMemoryFromBagsWithin()\r\n    groupNameInput:setGroupNameToInputField()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count .. \" Objects Saved\", { 1, 1, 1 })\r\n    updateSave()\r\n    moveGuid = nil\r\nend\r\n\r\nfunction combineTables(first_table, second_table)\r\n    for k, v in pairs(second_table) do first_table[k] = v end\r\nend\r\n\r\nfunction buttonClick_add()\r\n    fresh = false\r\n    combineTables(memoryList, memoryListBackup)\r\n    broadcastToAll(\"Adding internal bags and selections to existing memory\", { 0.25, 0.75, 0.25 })\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count .. \" Objects Saved\", { 1, 1, 1 })\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_remove()\r\n    broadcastToAll(\"Removing Selected Entries From Memory\", { 1.0, 0.25, 0.25 })\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        memoryListBackup[guid] = nil\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count .. \" Objects Removed\", { 1, 1, 1 })\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_setNew()\r\n    broadcastToAll(\"Setting new position relative to items in memory\", { 0.75, 0.75, 1 })\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        guid = obj.guid\r\n        if memoryListBackup[guid] ~= nil then\r\n            count = count + 1\r\n            memoryListBackup[guid].pos = obj.getPosition()\r\n            memoryListBackup[guid].rot = obj.getRotation()\r\n            memoryListBackup[guid].lock = obj.getLock()\r\n            memoryListBackup[guid].tint = obj.getColorTint()\r\n        end\r\n    end\r\n    broadcastToAll(count .. \" Objects Saved\", { 1, 1, 1 })\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\n--Resets bag to starting status\r\nfunction buttonClick_reset()\r\n    fresh = true\r\n    memoryList = {}\r\n    memoryGroupName:set(nil)\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createSetupButton()\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Tool Reset\", { 1, 1, 1 })\r\n    updateSave()\r\nend\r\n\r\n--After Setup\r\n\r\n--Creates recall and place buttons\r\nfunction createMemoryActionButtons()\r\n    self.createButton({\r\n        label=\"Placer au hasard\", click_function=\"buttonClick_place\", function_owner=self,\r\n        position={0,0.3,2}, rotation={0,0,0}, height=350, width=2000,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Ranger\", click_function=\"buttonClick_recall\", function_owner=self,\r\n        position={0,0.3,2.8}, rotation={0,0,0}, height=350, width=1000,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n        position={2,0.3,0}, rotation={0,90,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    ---    self.createButton({\r\n    ---      label=\"Bouger\", click_function=\"buttonClick_transpose\", function_owner=self,\r\n    ---      position={-2,0.3,0.8}, rotation={0,270,0}, height=350, width=800,\r\n    ---      font_size=250, color={0,0,0}, font_color={0.75,0.75,1}\r\n    ---\r\nend\r\n\r\n--Sends objects from bag/table to their saved position/rotation\r\nfunction buttonClick_place()\r\n    if anyOtherBagsInMyGroupArePlaced() then\r\n        recallOtherBagsInMyGroup()\r\n        Wait.frames(_placeObjects, CONFIG.MEMORY_GROUP.FRAME_DELAY_BEFORE_PLACING_OBJECTS)\r\n    else\r\n        _placeObjects()\r\n    end\r\nend\r\n\r\nfunction _placeObjects()\r\n    local bagObjList = self.getObjects()\r\n\r\n    -- randomize memorylist position\r\n    local positionList = {}\r\n    for guid, entry in pairs(memoryList) do\r\n        table.insert(positionList, memoryList[guid].pos)\r\n    end\r\n\r\n    for i = #positionList, 2, -1 do\r\n        local j = math.random(i)\r\n        positionList[i], positionList[j] = positionList[j], positionList[i]\r\n    end\r\n\r\n    local i = 1\r\n    for guid, entry in pairs(memoryList) do\r\n        memoryList[guid].pos = positionList[i]\r\n        i = i + 1\r\n    end\r\n\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        --If obj is out on the table, move it to the saved pos/rot\r\n        if obj ~= nil then\r\n            obj.setPositionSmooth(entry.pos)\r\n            obj.setRotationSmooth(entry.rot)\r\n            obj.setLock(entry.lock)\r\n            obj.setColorTint(entry.tint)\r\n        else\r\n            --If obj is inside of the bag\r\n            for _, bagObj in ipairs(bagObjList) do\r\n                if bagObj.guid == guid then\r\n                    local item = self.takeObject({\r\n                        guid = guid, position = entry.pos, rotation = entry.rot, smooth = false\r\n                    })\r\n                    item.setLock(entry.lock)\r\n                    item.setColorTint(entry.tint)\r\n                    break\r\n                end\r\n            end\r\n        end\r\n    end\r\n    broadcastToAll(\"Objets placés au hasard\", {1,1,1})\r\nend\r\n\r\n--Recalls objects to bag from table\r\nfunction buttonClick_recall()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then self.putObject(obj) end\r\n    end\r\n    broadcastToAll(\"Objets rangés\", {1,1,1})\r\nend\r\n\r\n--Utility functions\r\n\r\n--Find delta (difference) between 2 x/y/z coordinates\r\nfunction findOffsetDistance(p1, p2, obj)\r\n    local yOffset = 0\r\n    if obj ~= nil then\r\n        local bounds = obj.getBounds()\r\n        yOffset = (bounds.size.y - bounds.offset.y)\r\n    end\r\n    local deltaPos = {}\r\n    deltaPos.x = (p2.x - p1.x)\r\n    deltaPos.y = (p2.y - p1.y) + yOffset\r\n    deltaPos.z = (p2.z - p1.z)\r\n    return deltaPos\r\nend\r\n\r\n--Used to rotate a set of coordinates by an angle\r\nfunction rotateLocalCoordinates(desiredPos, obj)\r\n    local objPos, objRot = obj.getPosition(), obj.getRotation()\r\n    local angle = math.rad(objRot.y)\r\n    local x = desiredPos.x * math.cos(angle) - desiredPos.z * math.sin(angle)\r\n    local z = desiredPos.x * math.sin(angle) + desiredPos.z * math.cos(angle)\r\n    --return {x=objPos.x+x, y=objPos.y+desiredPos.y, z=objPos.z+z}\r\n    return { x = x, y = desiredPos.y, z = z }\r\nend\r\n\r\nfunction rotateMyCoordinates(desiredPos, obj)\r\n    local angle = math.rad(obj.getRotation().y)\r\n    local x = desiredPos.x * math.sin(angle)\r\n    local z = desiredPos.z * math.cos(angle)\r\n    return { x = x, y = desiredPos.y, z = z }\r\nend\r\n\r\n--Coroutine delay, in seconds\r\nfunction wait(time)\r\n    local start = os.time()\r\n    repeat coroutine.yield(0) until os.time() > start + time\r\nend\r\n\r\n--Duplicates a table (needed to prevent it making reference to the same objects)\r\nfunction duplicateTable(oldTable)\r\n    local newTable = {}\r\n    for k, v in pairs(oldTable) do\r\n        newTable[k] = v\r\n    end\r\n    return newTable\r\nend\r\n\r\n--Moves scripted highlight from all objects\r\nfunction removeAllHighlights()\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\n--Round number (num) to the Nth decimal (dec)\r\nfunction round(num, dec)\r\n    local mult = 10 ^ (dec or 0)\r\n    return math.floor(num * mult + 0.5) / mult\r\nend\r\n\r\n--[[ This object provides access to a variable stored on the \"Global script\".\r\nThe variable holds the GUIDs for every Utility Memory Bag in the scene.\r\nExample: {'805ebd', '35cc21', 'fc8886', 'f50264', '5f5f63'} --]]\r\nAllMemoryBagsInScene = {\r\n    NAME_OF_GLOBAL_VARIABLE = \"_UtilityMemoryBag_AllMemoryBagsInScene\"\r\n}\r\n\r\nfunction AllMemoryBagsInScene:add(guid)\r\n    local guids = Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\n    table.insert(guids, guid)\r\n    Global.setTable(self.NAME_OF_GLOBAL_VARIABLE, guids)\r\nend\r\n\r\nfunction AllMemoryBagsInScene:getGuidList()\r\n    return Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\nend\r\n","LuaScriptState":"{\"ml\":{\"464e31\":{\"lock\":false,\"pos\":{\"x\":-27.4858,\"y\":1.7789,\"z\":20.9905},\"rot\":{\"x\":0,\"y\":180.1557,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"a56e72\":{\"lock\":false,\"pos\":{\"x\":-26.9104,\"y\":1.8289,\"z\":20.9767},\"rot\":{\"x\":0,\"y\":180.1557,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"fb669f\":{\"lock\":false,\"pos\":{\"x\":13.015,\"y\":1.5472,\"z\":22.4883},\"rot\":{\"x\":0.0109,\"y\":180.0117,\"z\":0.005},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}}}}","XmlUI":"","ContainedObjects":[{"GUID":"464e31","Name":"Card","Transform":{"posX":-26.91038,"posY":1.82890594,"posZ":20.9767189,"rotX":0.00000604257366,"rotY":180.155975,"rotZ":-0.0000136489889,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"École","Description":"Dunwich.","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02212\",\n  \"locationBack\": {\n    \"connections\": \"Plus|Tilde|Circle\",\n    \"icons\": \"Crescent\",\n    \"uses\": {\n      \"count\": 1,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    }\n  },\n  \"locationFront\": {\n    \"connections\": \"Plus|Tilde|Circle\",\n    \"icons\": \"Crescent\"\n  },\n  \"traits\": \"Dunwich.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":21313,"SidewaysCard":false,"CustomDeck":{"213":{"FaceURL":"https://i.imgur.com/8fUptYt.jpg","BackURL":"https://i.imgur.com/s72Czne.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"a56e72","Name":"Card","Transform":{"posX":13.0150013,"posY":1.54720616,"posZ":22.4882984,"rotX":0.0108863106,"rotY":180.155624,"rotZ":0.00503458,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"51039\",\n  \"locationBack\": {\n    \"connections\": \"Plus|Tilde|Circle\",\n    \"icons\": \"Crescent\",\n    \"uses\": {\n      \"count\": 1,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    }\n  },\n  \"locationFront\": {\n    \"connections\": \"Plus|Tilde|Circle\",\n    \"icons\": \"Crescent\"\n  },\n  \"traits\": \"Dunwich.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276119,"SidewaysCard":false,"CustomDeck":{"2761":{"FaceURL":"https://i.imgur.com/FVWxpyu.jpg","BackURL":"https://i.imgur.com/EmJxccn.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"fb669f","Name":"Card","Transform":{"posX":-27.4857788,"posY":1.77890432,"posZ":20.9905243,"rotX":-0.0000016494331,"rotY":180.012,"rotZ":-0.0000236530941,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"École","Description":"Dunwich.","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02213\",\n  \"locationBack\": {\n    \"connections\": \"Plus|Tilde|Circle\",\n    \"icons\": \"Crescent\",\n    \"uses\": {\n      \"count\": 1,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    }\n  },\n  \"locationFront\": {\n    \"connections\": \"Plus|Tilde|Circle\",\n    \"icons\": \"Crescent\"\n  },\n  \"traits\": \"Dunwich.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":21312,"SidewaysCard":false,"CustomDeck":{"213":{"FaceURL":"https://i.imgur.com/8fUptYt.jpg","BackURL":"https://i.imgur.com/s72Czne.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""}]},{"GUID":"a7c7d2","Name":"Custom_Model_Bag","Transform":{"posX":-20.9999962,"posY":1.83530068,"posZ":13.500001,"rotX":-0.000006355048,"rotY":180.00032,"rotZ":1.0603793e-7,"scaleX":0.7,"scaleY":0.7,"scaleZ":0.7},"Nickname":"Maison aux roseaux","Description":"merci à Chr1Z pour le script","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.614982545,"g":0,"b":0},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"MaterialIndex":-1,"MeshIndex":-1,"CustomMesh":{"MeshURL":"https://pastebin.com/raw/ALrYhQGb","DiffuseURL":"http://cloud-3.steamusercontent.com/ugc/1936013662302188872/00C57A20AA4A861744C16650745F415D04349294/","NormalURL":"","ColliderURL":"","Convex":true,"MaterialIndex":3,"TypeIndex":6,"CustomShader":{"SpecularColor":{"r":1,"g":1,"b":1},"SpecularIntensity":0,"SpecularSharpness":2,"FresnelStrength":0},"CastShadows":true},"Bag":{"Order":0},"LuaScript":"-- Random memory bag\r\n-- based on Utility memory bag by Directsun (Version 2.7.0)\r\n\r\nlocal CONFIG = {\r\n    MEMORY_GROUP = {\r\n        -- This determines how many frames to wait before actually placing objects onto the table when the \"Place\" button is clicked.\r\n        -- This gives the other bags time to recall their objects.\r\n        -- The delay ONLY occurs if other bags have objects out.\r\n        FRAME_DELAY_BEFORE_PLACING_OBJECTS = 30\r\n    }\r\n}\r\n\r\nmath.randomseed(os.time())\r\n\r\n--[[ Memory Bag Groups ]]\r\n--[[ Utility Memory Bags may be added to a named group, called a \"memory group\".\r\nYou can add a bag to a group through the bag's UI: \"Setup\" > \"Group Name\" (to the left of the bag).\r\nOnly one bag from a group may have it's contents placed on the table at a time.\r\nWhen \"Place\" is clicked on a bag, the other bags in it's memory group are recalled.\r\nBy default a memory bag is not in any group. It's memory group is \"nil\". --]]\r\n\r\nmemoryGroupName = { memoryBag = self }\r\nfunction memoryGroupName:get()\r\n    return self._name\r\nend\r\n\r\nfunction memoryGroupName:set(newName)\r\n    GlobalMemoryGroups:unregisterBagInGroup(self:get(), self.memoryBag.getGUID())\r\n    GlobalMemoryGroups:registerBagInGroup(newName, self.memoryBag.getGUID())\r\n\r\n    if newName == \"\" then\r\n        self._name = nil\r\n    else\r\n        self._name = newName\r\n    end\r\nend\r\n\r\n-- Click the \"Recall\" button on all other bags in my memory group.\r\nfunction recallOtherBagsInMyGroup()\r\n    for _, bag in ipairs(getOtherBagsInMyGroup()) do\r\n        bag.call('buttonClick_recall')\r\n    end\r\nend\r\n\r\n-- Return \"true\" if another bag in my memory group has any objects out on the table.\r\nfunction anyOtherBagsInMyGroupArePlaced()\r\n    for _, bag in ipairs(getOtherBagsInMyGroup()) do\r\n        local state = bag.call('areAnyOfMyObjectsPlaced')\r\n        if state then return true end\r\n    end\r\n\r\n    return false\r\nend\r\n\r\n-- Return \"true\" if at least one object from this memory bag is out on the table.\r\nfunction areAnyOfMyObjectsPlaced()\r\n    for guid, _ in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then\r\n            return true\r\n        end\r\n    end\r\n    return false\r\nend\r\n\r\nfunction getOtherBagsInMyGroup()\r\n    local bags = {}\r\n    for bagGuid, _ in pairs(GlobalMemoryGroups:getGroup(memoryGroupName:get())) do\r\n        if bagGuid ~= self.getGUID() then\r\n            bag = getObjectFromGUID(bagGuid)\r\n            -- \"bag\" is nill if it has been deleted since the last time onLoad() was called.\r\n            if bag ~= nil then\r\n                table.insert(bags, bag)\r\n            end\r\n        end\r\n    end\r\n    return bags\r\nend\r\n\r\n--[[\r\nThis object provides access to a variable stored on the \"Global script\".\r\nThe variable holds the names & guids of all memory bag groups.\r\nThe global variable is a table and holds data like this:\r\n{\r\n    'My First Group Name' = {\r\n        '805ebd' = {},\r\n        '35cc21' = {},\r\n        'fc8886' = {},\r\n    },\r\n    'My Second Group Name' = {\r\n        'f50264' = {},\r\n        '5f5f63' = {},\r\n    },\r\n}\r\n--]]\r\nGlobalMemoryGroups = { NAME_OF_GLOBAL_VARIABLE = '_GlobalUtilityMemoryBagGroups' }\r\n\r\n-- Call me inside this script's \"onLoad()\" method!\r\nfunction GlobalMemoryGroups:onLoad(myGuid)\r\n    -- Create and initialize the global variable if it doesn't already exist:\r\n    if self:_getGroups() == nil then\r\n        self:_setGroups({})\r\n    end\r\nend\r\n\r\n-- Return the GUIDs of all bags in the \"groupName\". The return value is a dictionary that maps [GUID -> empty table].\r\nfunction GlobalMemoryGroups:getGroup(groupName)\r\n    guids = self:_getGroups()[groupName] or {}\r\n    return guids\r\nend\r\n\r\n-- Registers a bag in a memory group. Creates a new group if one doesn't exist.\r\nfunction GlobalMemoryGroups:registerBagInGroup(groupName, bagGuid)\r\n    if groupName == nil or groupName == \"\" then\r\n        return\r\n    end\r\n\r\n    self:_tryCreateNewGroup(groupName)\r\n    local groups = self:_getGroups()\r\n    groups[groupName][bagGuid] = {}\r\n    self:_setGroups(groups)\r\nend\r\n\r\n-- Removes this bag from the memory group.\r\nfunction GlobalMemoryGroups:unregisterBagInGroup(groupName, bagGuid)\r\n    local groups = self:_getGroups()\r\n    local group = groups[groupName]\r\n    if group ~= nil then\r\n        group[bagGuid] = nil\r\n        self:_setGroups(groups)\r\n    end\r\nend\r\n\r\n-- Return the global variable, which is a table holding all memory group names & guids.\r\nfunction GlobalMemoryGroups:_getGroups()\r\n    return Global.getTable(self.NAME_OF_GLOBAL_VARIABLE)\r\nend\r\n\r\n-- Override the global variable (i.e. the entire table).\r\nfunction GlobalMemoryGroups:_setGroups(newTable)\r\n    Global.setTable(self.NAME_OF_GLOBAL_VARIABLE, newTable)\r\nend\r\n\r\n-- Add a new memory group named \"groupName\" to the global variable, if one doesn't already exist.\r\nfunction GlobalMemoryGroups:_tryCreateNewGroup(groupName)\r\n    local groups = self:_getGroups()\r\n    if groups[groupName] == nil then\r\n        groups[groupName] = {}\r\n        self:_setGroups(groups)\r\n    end\r\nend\r\n\r\n-- This object controls the \"Group Name\" input text field that is part of the bag's ingame UI.\r\ngroupNameInput = {\r\n    greyedOutText     = \"Group Name\",\r\n    widthPerCharacter = 100,\r\n    padding           = 4,\r\n    memoryBag         = self\r\n}\r\nfunction groupNameInput:create(optionalStartingValue)\r\n    local effectiveText = optionalStartingValue or self.greyedOutText\r\n    local width = self:computeWidth(effectiveText)\r\n\r\n    self.memoryBag.createInput({\r\n        label = self.greyedOutText,\r\n        value = optionalStartingValue or nil,\r\n        alignment = 3, -- Center aligned\r\n        input_function = \"groupNameInput_onCharacterTyped\", function_owner = self.memoryBag,\r\n        position = { 2.1, 0.3, 0 }, rotation = { 0, 270, 0 }, width = width, height = 350,\r\n        font_size = 250, color = { 0, 0, 0 }, font_color = { 1, 1, 1 },\r\n    })\r\nend\r\n\r\nfunction groupNameInput:computeWidth(text)\r\n    return (string.len(text) + self.padding) * self.widthPerCharacter\r\nend\r\n\r\nfunction groupNameInput:updatedWidth(text)\r\n    self.memoryBag.editInput({\r\n        index = 0,\r\n        width = self:computeWidth(text)\r\n    })\r\nend\r\n\r\nfunction groupNameInput:onCharacterTyped(text, stillEditing)\r\n    if stillEditing then\r\n        self:updatedWidth(text)\r\n    else\r\n        if text == \"\" then\r\n            self:updatedWidth(self.greyedOutText)\r\n        end\r\n    end\r\nend\r\n\r\nfunction groupNameInput_onCharacterTyped(memoryBag, playerColor, text, stillEditing)\r\n    groupNameInput:onCharacterTyped(text, stillEditing)\r\nend\r\n\r\nfunction groupNameInput:setGroupNameToInputField()\r\n    local inputFields = self.memoryBag.getInputs()\r\n    if inputFields ~= nil then\r\n        -- Get input field 0, which corresponds to the groupNameInput.\r\n        -- Unfortunately \"self.getInputs()\" doesn't return the inputs in a guaranteed order.\r\n        local nameField = nil\r\n        for _, field in ipairs(inputFields) do\r\n            if field.index == 0 then\r\n                nameField = field\r\n            end\r\n        end\r\n\r\n        memoryGroupName:set(nameField.value)\r\n    end\r\nend\r\n\r\nfunction updateSave()\r\n    local data_to_save = { [\"ml\"] = memoryList, [\"groupName\"] = memoryGroupName:get() }\r\n    saved_data = JSON.encode(data_to_save)\r\n    self.script_state = saved_data\r\nend\r\n\r\nfunction combineMemoryFromBagsWithin()\r\n    local bagObjList = self.getObjects()\r\n    for _, bagObj in ipairs(bagObjList) do\r\n        local data = bagObj.lua_script_state\r\n        if data ~= nil then\r\n            local j = JSON.decode(data)\r\n            if j ~= nil and j.ml ~= nil then\r\n                for guid, entry in pairs(j.ml) do\r\n                    memoryList[guid] = entry\r\n                end\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\nfunction updateMemoryWithMoves()\r\n    memoryList = memoryListBackup\r\n    --get the first transposed object's coordinates\r\n    local obj = getObjectFromGUID(moveGuid)\r\n\r\n    -- p1 is where needs to go, p2 is where it was\r\n    local refObjPos = memoryList[moveGuid].pos\r\n    local deltaPos = findOffsetDistance(obj.getPosition(), refObjPos, nil)\r\n    local movedRotation = obj.getRotation()\r\n    for guid, entry in pairs(memoryList) do\r\n        memoryList[guid].pos.x = entry.pos.x - deltaPos.x\r\n        memoryList[guid].pos.y = entry.pos.y - deltaPos.y\r\n        memoryList[guid].pos.z = entry.pos.z - deltaPos.z\r\n    end\r\n    moveList = {}\r\nend\r\n\r\nfunction onload(saved_data)\r\n    GlobalMemoryGroups:onLoad(self.getGUID())\r\n    AllMemoryBagsInScene:add(self.getGUID())\r\n\r\n    fresh = true\r\n    if saved_data ~= \"\" then\r\n        local loaded_data = JSON.decode(saved_data)\r\n        --Set up information off of loaded_data\r\n        memoryList = loaded_data.ml\r\n        memoryGroupName:set(loaded_data.groupName)\r\n    else\r\n        --Set up information for if there is no saved saved data\r\n        memoryList = {}\r\n        memoryGroupName:set(nil)\r\n    end\r\n\r\n    moveList = {}\r\n    moveGuid = nil\r\n\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        fresh = false\r\n        createMemoryActionButtons()\r\n    end\r\nend\r\n\r\n--Beginning Setup\r\n\r\n--Make setup button\r\nfunction createSetupButton()\r\n    self.createButton({\r\n      label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n      position={0,0.3,2}, rotation={0,0,0}, height=350, width=800,\r\n      font_size=250, color={0,0,0}, font_color={1,1,1}\r\n  })\r\nend\r\n\r\n--Triggered by Transpose button\r\nfunction buttonClick_transpose()\r\n    moveGuid = nil\r\n    broadcastToAll(\"Select one object and move it- all objects will move relative to the new location\", { 0.75, 0.75, 1 })\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(true)\r\n    createSetupActionButtons(true)\r\nend\r\n\r\n--Triggered by setup button,\r\nfunction buttonClick_setup()\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(false)\r\n    createSetupActionButtons(false)\r\nend\r\n\r\nfunction getAllObjectsInMemory()\r\n    local objTable = {}\r\n    local curObj = {}\r\n\r\n    for guid in pairs(memoryListBackup) do\r\n        curObj = getObjectFromGUID(guid)\r\n        table.insert(objTable, curObj)\r\n    end\r\n\r\n    return objTable\r\nend\r\n\r\n--Creates selection buttons on objects\r\nfunction createButtonsOnAllObjects(move)\r\n    buttonIndexMap = {}\r\n    local howManyButtons = 0\r\n\r\n    local objsToHaveButtons = {}\r\n    if move == true then\r\n        objsToHaveButtons = getAllObjectsInMemory()\r\n    else\r\n        objsToHaveButtons = getAllObjects()\r\n    end\r\n\r\n    for _, obj in ipairs(objsToHaveButtons) do\r\n        if obj ~= self then\r\n            --On a normal bag, the button positions aren't the same size as the bag.\r\n            globalScaleFactor = 1 * 1 / self.getScale().x\r\n            --Super sweet math to set button positions\r\n            local selfPos = self.getPosition()\r\n            local objPos = obj.getPosition()\r\n            local deltaPos = findOffsetDistance(selfPos, objPos, obj)\r\n            local objPos = rotateLocalCoordinates(deltaPos, self)\r\n            objPos.x = -objPos.x * globalScaleFactor\r\n            objPos.y = objPos.y * globalScaleFactor + 2\r\n            objPos.z = objPos.z * globalScaleFactor\r\n            --Workaround for custom PDFs\r\n            if obj.Book then\r\n                objPos.y = objPos.y + 0.5\r\n            end\r\n            --Offset rotation of bag\r\n            local rot = self.getRotation()\r\n            rot.y = -rot.y + 180\r\n            --Create function\r\n            local funcName = \"selectButton_\" .. howManyButtons\r\n            local func = function() buttonClick_selection(obj, move) end\r\n            local color = { 0.75, 0.25, 0.25, 0.6 }\r\n            local colorMove = { 0, 0, 1, 0.6 }\r\n            if move == true then\r\n                color = colorMove\r\n            end\r\n            self.setVar(funcName, func)\r\n            self.createButton({\r\n                click_function = funcName, function_owner = self,\r\n                position = objPos, rotation = rot, height = 1000, width = 1000,\r\n                color = color,\r\n            })\r\n            buttonIndexMap[obj.getGUID()] = howManyButtons\r\n            howManyButtons = howManyButtons + 1\r\n        end\r\n    end\r\nend\r\n\r\n  --Creates submit and cancel buttons\r\n  function createSetupActionButtons(move)\r\n      self.createButton({\r\n         label=\"Annuler\", click_function=\"buttonClick_cancel\", function_owner=self,\r\n         position={-1.15,0.3,2.1}, rotation={0,0,0}, height=350, width=1100,\r\n         font_size=250, color={0,0,0}, font_color={1,1,1}\r\n      })\r\n\r\n      self.createButton({\r\n        label=\"Valider\", click_function=\"buttonClick_submit\", function_owner=self,\r\n        position={-1.15,0.3,2.8}, rotation={0,0,0}, height=350, width=1100,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n      })\r\n\r\n      if move == false then\r\n        self.createButton({\r\n            label=\"Ajouter\", click_function=\"buttonClick_add\", function_owner=self,\r\n            position={1.15,0.3,2.1}, rotation={0,0,0}, height=350, width=1100,\r\n            font_size=250, color={0,0,0}, font_color={0.25,1,0.25}\r\n          })\r\n\r\n          self.createButton({\r\n              label=\"Sélection\", click_function=\"editDragSelection\", function_owner=self,\r\n              position={-1.15,0.3,3.5}, rotation={0,0,0}, height=350, width=1100,\r\n              font_size=250, color={0,0,0}, font_color={1,1,1}\r\n          })\r\n\r\n          if fresh == false then\r\n              self.createButton({\r\n                  label=\"Mise à Jour\", click_function=\"buttonClick_setNew\", function_owner=self,\r\n                  position={1.15,0.3,3.5}, rotation={0,0,0}, height=350, width=1100,\r\n                  font_size=180, color={0,0,0}, font_color={0.75,0.75,1}\r\n              })\r\n              self.createButton({\r\n                  label=\"Retirer\", click_function=\"buttonClick_remove\", function_owner=self,\r\n                  position={1.15,0.3,2.8}, rotation={0,0,0}, height=350, width=1100,\r\n                  font_size=250, color={0,0,0}, font_color={1,0.25,0.25}\r\n              })\r\n          end\r\n      end\r\n\r\n      self.createButton({\r\n          label=\"Reset\", click_function=\"buttonClick_reset\", function_owner=self,\r\n          position={0,0.3,-2}, rotation={0,0,0}, height=350, width=800,\r\n          font_size=250, color={0,0,0}, font_color={1,1,1}\r\n      })\r\n  end\r\n\r\n\r\n--During Setup\r\n\r\n--Checks or unchecks buttons\r\nfunction buttonClick_selection(obj, move)\r\n    local index = buttonIndexMap[obj.getGUID()]\r\n    local colorMove = { 0, 0, 1, 0.6 }\r\n    local color = { 0, 1, 0, 0.6 }\r\n\r\n    previousGuid = selectedGuid\r\n    selectedGuid = obj.getGUID()\r\n\r\n    theList = memoryList\r\n    if move == true then\r\n        theList = moveList\r\n        if previousGuid ~= nil and previousGuid ~= selectedGuid then\r\n            local prevObj = getObjectFromGUID(previousGuid)\r\n            prevObj.highlightOff()\r\n            self.editButton({ index = previousIndex, color = colorMove })\r\n            theList[previousGuid] = nil\r\n        end\r\n        previousIndex = index\r\n    end\r\n\r\n    if theList[selectedGuid] == nil then\r\n        self.editButton({ index = index, color = color })\r\n        --Adding pos/rot to memory table\r\n        local pos, rot = obj.getPosition(), obj.getRotation()\r\n        --I need to add it like this or it won't save due to indexing issue\r\n        theList[obj.getGUID()] = {\r\n            pos = { x = round(pos.x, 4), y = round(pos.y, 4), z = round(pos.z, 4) },\r\n            rot = { x = round(rot.x, 4), y = round(rot.y, 4), z = round(rot.z, 4) },\r\n            lock = obj.getLock(),\r\n            tint = obj.getColorTint()\r\n        }\r\n        obj.highlightOn({ 0, 1, 0 })\r\n    else\r\n        color = { 0.75, 0.25, 0.25, 0.6 }\r\n        if move == true then\r\n            color = colorMove\r\n        end\r\n        self.editButton({ index = index, color = color })\r\n        theList[obj.getGUID()] = nil\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\nfunction editDragSelection(bagObj, player, remove)\r\n    local selectedObjs = Player[player].getSelectedObjects()\r\n    if not remove then\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            --Ignore if already in the memory list, or does not have a button\r\n            if index and not memoryList[obj.getGUID()] then\r\n                self.editButton({ index = index, color = { 0, 1, 0, 0.6 } })\r\n                --Adding pos/rot to memory table\r\n                local pos, rot = obj.getPosition(), obj.getRotation()\r\n                --I need to add it like this or it won't save due to indexing issue\r\n                memoryList[obj.getGUID()] = {\r\n                    pos = { x = round(pos.x, 4), y = round(pos.y, 4), z = round(pos.z, 4) },\r\n                    rot = { x = round(rot.x, 4), y = round(rot.y, 4), z = round(rot.z, 4) },\r\n                    lock = obj.getLock(),\r\n                    tint = obj.getColorTint()\r\n                }\r\n                obj.highlightOn({ 0, 1, 0 })\r\n            end\r\n        end\r\n    else\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            if index and memoryList[obj.getGUID()] then\r\n                color = { 0.75, 0.25, 0.25, 0.6 }\r\n                self.editButton({ index = index, color = color })\r\n                memoryList[obj.getGUID()] = nil\r\n                obj.highlightOff()\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\n--Cancels selection process\r\nfunction buttonClick_cancel()\r\n    memoryList = memoryListBackup\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        createMemoryActionButtons()\r\n    end\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Sélection annulée\", { 1, 1, 1 })\r\n    moveGuid = nil\r\nend\r\n\r\n--Saves selections\r\nfunction buttonClick_submit()\r\n    fresh = false\r\n    if next(moveList) ~= nil then\r\n        for guid in pairs(moveList) do\r\n            moveGuid = guid\r\n        end\r\n        if memoryListBackup[moveGuid] == nil then\r\n            broadcastToAll(\"Item selected for moving is not already in memory\", { 1, 0.25, 0.25 })\r\n        else\r\n            broadcastToAll(\"Moving all items in memory relative to new objects position!\", { 0.75, 0.75, 1 })\r\n            self.clearButtons()\r\n            self.clearInputs()\r\n            createMemoryActionButtons()\r\n            local count = 0\r\n            for guid in pairs(moveList) do\r\n                moveGuid = guid\r\n                count = count + 1\r\n                local obj = getObjectFromGUID(guid)\r\n                if obj ~= nil then obj.highlightOff() end\r\n            end\r\n            updateMemoryWithMoves()\r\n            updateSave()\r\n            buttonClick_place()\r\n        end\r\n    elseif next(memoryList) == nil and moveGuid == nil then\r\n        memoryList = memoryListBackup\r\n        broadcastToAll(\"No selections made.\", { 0.75, 0.25, 0.25 })\r\n    end\r\n    combineMemoryFromBagsWithin()\r\n    groupNameInput:setGroupNameToInputField()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count .. \" Objects Saved\", { 1, 1, 1 })\r\n    updateSave()\r\n    moveGuid = nil\r\nend\r\n\r\nfunction combineTables(first_table, second_table)\r\n    for k, v in pairs(second_table) do first_table[k] = v end\r\nend\r\n\r\nfunction buttonClick_add()\r\n    fresh = false\r\n    combineTables(memoryList, memoryListBackup)\r\n    broadcastToAll(\"Adding internal bags and selections to existing memory\", { 0.25, 0.75, 0.25 })\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count .. \" Objects Saved\", { 1, 1, 1 })\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_remove()\r\n    broadcastToAll(\"Removing Selected Entries From Memory\", { 1.0, 0.25, 0.25 })\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        memoryListBackup[guid] = nil\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count .. \" Objects Removed\", { 1, 1, 1 })\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_setNew()\r\n    broadcastToAll(\"Setting new position relative to items in memory\", { 0.75, 0.75, 1 })\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        guid = obj.guid\r\n        if memoryListBackup[guid] ~= nil then\r\n            count = count + 1\r\n            memoryListBackup[guid].pos = obj.getPosition()\r\n            memoryListBackup[guid].rot = obj.getRotation()\r\n            memoryListBackup[guid].lock = obj.getLock()\r\n            memoryListBackup[guid].tint = obj.getColorTint()\r\n        end\r\n    end\r\n    broadcastToAll(count .. \" Objects Saved\", { 1, 1, 1 })\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\n--Resets bag to starting status\r\nfunction buttonClick_reset()\r\n    fresh = true\r\n    memoryList = {}\r\n    memoryGroupName:set(nil)\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createSetupButton()\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Tool Reset\", { 1, 1, 1 })\r\n    updateSave()\r\nend\r\n\r\n--After Setup\r\n\r\n--Creates recall and place buttons\r\nfunction createMemoryActionButtons()\r\n    self.createButton({\r\n        label=\"Placer au hasard\", click_function=\"buttonClick_place\", function_owner=self,\r\n        position={0,0.3,2}, rotation={0,0,0}, height=350, width=2000,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Ranger\", click_function=\"buttonClick_recall\", function_owner=self,\r\n        position={0,0.3,2.8}, rotation={0,0,0}, height=350, width=1000,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n        position={2,0.3,0}, rotation={0,90,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    ---    self.createButton({\r\n    ---      label=\"Bouger\", click_function=\"buttonClick_transpose\", function_owner=self,\r\n    ---      position={-2,0.3,0.8}, rotation={0,270,0}, height=350, width=800,\r\n    ---      font_size=250, color={0,0,0}, font_color={0.75,0.75,1}\r\n    ---\r\nend\r\n\r\n--Sends objects from bag/table to their saved position/rotation\r\nfunction buttonClick_place()\r\n    if anyOtherBagsInMyGroupArePlaced() then\r\n        recallOtherBagsInMyGroup()\r\n        Wait.frames(_placeObjects, CONFIG.MEMORY_GROUP.FRAME_DELAY_BEFORE_PLACING_OBJECTS)\r\n    else\r\n        _placeObjects()\r\n    end\r\nend\r\n\r\nfunction _placeObjects()\r\n    local bagObjList = self.getObjects()\r\n\r\n    -- randomize memorylist position\r\n    local positionList = {}\r\n    for guid, entry in pairs(memoryList) do\r\n        table.insert(positionList, memoryList[guid].pos)\r\n    end\r\n\r\n    for i = #positionList, 2, -1 do\r\n        local j = math.random(i)\r\n        positionList[i], positionList[j] = positionList[j], positionList[i]\r\n    end\r\n\r\n    local i = 1\r\n    for guid, entry in pairs(memoryList) do\r\n        memoryList[guid].pos = positionList[i]\r\n        i = i + 1\r\n    end\r\n\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        --If obj is out on the table, move it to the saved pos/rot\r\n        if obj ~= nil then\r\n            obj.setPositionSmooth(entry.pos)\r\n            obj.setRotationSmooth(entry.rot)\r\n            obj.setLock(entry.lock)\r\n            obj.setColorTint(entry.tint)\r\n        else\r\n            --If obj is inside of the bag\r\n            for _, bagObj in ipairs(bagObjList) do\r\n                if bagObj.guid == guid then\r\n                    local item = self.takeObject({\r\n                        guid = guid, position = entry.pos, rotation = entry.rot, smooth = false\r\n                    })\r\n                    item.setLock(entry.lock)\r\n                    item.setColorTint(entry.tint)\r\n                    break\r\n                end\r\n            end\r\n        end\r\n    end\r\n    broadcastToAll(\"Objets placés au hasard\", {1,1,1})\r\nend\r\n\r\n--Recalls objects to bag from table\r\nfunction buttonClick_recall()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then self.putObject(obj) end\r\n    end\r\n    broadcastToAll(\"Objets rangés\", {1,1,1})\r\nend\r\n\r\n--Utility functions\r\n\r\n--Find delta (difference) between 2 x/y/z coordinates\r\nfunction findOffsetDistance(p1, p2, obj)\r\n    local yOffset = 0\r\n    if obj ~= nil then\r\n        local bounds = obj.getBounds()\r\n        yOffset = (bounds.size.y - bounds.offset.y)\r\n    end\r\n    local deltaPos = {}\r\n    deltaPos.x = (p2.x - p1.x)\r\n    deltaPos.y = (p2.y - p1.y) + yOffset\r\n    deltaPos.z = (p2.z - p1.z)\r\n    return deltaPos\r\nend\r\n\r\n--Used to rotate a set of coordinates by an angle\r\nfunction rotateLocalCoordinates(desiredPos, obj)\r\n    local objPos, objRot = obj.getPosition(), obj.getRotation()\r\n    local angle = math.rad(objRot.y)\r\n    local x = desiredPos.x * math.cos(angle) - desiredPos.z * math.sin(angle)\r\n    local z = desiredPos.x * math.sin(angle) + desiredPos.z * math.cos(angle)\r\n    --return {x=objPos.x+x, y=objPos.y+desiredPos.y, z=objPos.z+z}\r\n    return { x = x, y = desiredPos.y, z = z }\r\nend\r\n\r\nfunction rotateMyCoordinates(desiredPos, obj)\r\n    local angle = math.rad(obj.getRotation().y)\r\n    local x = desiredPos.x * math.sin(angle)\r\n    local z = desiredPos.z * math.cos(angle)\r\n    return { x = x, y = desiredPos.y, z = z }\r\nend\r\n\r\n--Coroutine delay, in seconds\r\nfunction wait(time)\r\n    local start = os.time()\r\n    repeat coroutine.yield(0) until os.time() > start + time\r\nend\r\n\r\n--Duplicates a table (needed to prevent it making reference to the same objects)\r\nfunction duplicateTable(oldTable)\r\n    local newTable = {}\r\n    for k, v in pairs(oldTable) do\r\n        newTable[k] = v\r\n    end\r\n    return newTable\r\nend\r\n\r\n--Moves scripted highlight from all objects\r\nfunction removeAllHighlights()\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\n--Round number (num) to the Nth decimal (dec)\r\nfunction round(num, dec)\r\n    local mult = 10 ^ (dec or 0)\r\n    return math.floor(num * mult + 0.5) / mult\r\nend\r\n\r\n--[[ This object provides access to a variable stored on the \"Global script\".\r\nThe variable holds the GUIDs for every Utility Memory Bag in the scene.\r\nExample: {'805ebd', '35cc21', 'fc8886', 'f50264', '5f5f63'} --]]\r\nAllMemoryBagsInScene = {\r\n    NAME_OF_GLOBAL_VARIABLE = \"_UtilityMemoryBag_AllMemoryBagsInScene\"\r\n}\r\n\r\nfunction AllMemoryBagsInScene:add(guid)\r\n    local guids = Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\n    table.insert(guids, guid)\r\n    Global.setTable(self.NAME_OF_GLOBAL_VARIABLE, guids)\r\nend\r\n\r\nfunction AllMemoryBagsInScene:getGuidList()\r\n    return Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\nend\r\n","LuaScriptState":"{\"ml\":{\"35a7d5\":{\"lock\":false,\"pos\":{\"x\":-1.0003,\"y\":1.5485,\"z\":22.5001},\"rot\":{\"x\":0.0109,\"y\":180.0159,\"z\":0.005},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"577413\":{\"lock\":false,\"pos\":{\"x\":-23.0556,\"y\":1.7789,\"z\":20.9542},\"rot\":{\"x\":0,\"y\":180.8935,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"e690d0\":{\"lock\":false,\"pos\":{\"x\":-22.471,\"y\":1.8289,\"z\":20.9451},\"rot\":{\"x\":0,\"y\":180.8934,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}}}}","XmlUI":"","ContainedObjects":[{"GUID":"35a7d5","Name":"Card","Transform":{"posX":-23.0555573,"posY":1.77890432,"posZ":20.954237,"rotX":-0.00000136634185,"rotY":180.016174,"rotZ":-0.0000245609917,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Maison aux Roseaux","Description":"Dunwich.","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02211\",\n  \"locationBack\": {\n    \"connections\": \"Diamond|Crescent\",\n    \"icons\": \"Tilde\",\n    \"uses\": {\n      \"countPerInvestigator\": 1,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    }\n  },\n  \"locationFront\": {\n    \"connections\": \"Diamond|Crescent\",\n    \"icons\": \"Tilde\"\n  },\n  \"traits\": \"Dunwich.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":21311,"SidewaysCard":false,"CustomDeck":{"213":{"FaceURL":"https://i.imgur.com/8fUptYt.jpg","BackURL":"https://i.imgur.com/s72Czne.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"577413","Name":"Card","Transform":{"posX":-22.47096,"posY":1.82890594,"posZ":20.9451275,"rotX":0.000009542031,"rotY":180.8938,"rotZ":-0.000019318948,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Maison aux Roseaux","Description":"Dunwich.","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02210\",\n  \"locationBack\": {\n    \"connections\": \"Diamond|Crescent\",\n    \"icons\": \"Tilde\",\n    \"uses\": {\n      \"countPerInvestigator\": 1,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    }\n  },\n  \"locationFront\": {\n    \"connections\": \"Diamond|Crescent\",\n    \"icons\": \"Tilde\"\n  },\n  \"traits\": \"Dunwich.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":21310,"SidewaysCard":false,"CustomDeck":{"213":{"FaceURL":"https://i.imgur.com/8fUptYt.jpg","BackURL":"https://i.imgur.com/s72Czne.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"e690d0","Name":"Card","Transform":{"posX":-1.0002991,"posY":1.54840982,"posZ":22.5000973,"rotX":0.0108206719,"rotY":180.8934,"rotZ":0.00517402031,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"51038\",\n  \"locationBack\": {\n    \"connections\": \"Diamond|Crescent\",\n    \"icons\": \"Tilde\",\n    \"uses\": {\n      \"countPerInvestigator\": 1,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    }\n  },\n  \"locationFront\": {\n    \"connections\": \"Diamond|Crescent\",\n    \"icons\": \"Tilde\"\n  },\n  \"traits\": \"Dunwich.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276118,"SidewaysCard":false,"CustomDeck":{"2761":{"FaceURL":"https://i.imgur.com/FVWxpyu.jpg","BackURL":"https://i.imgur.com/EmJxccn.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""}]},{"GUID":"b3c682","Name":"Custom_Model_Bag","Transform":{"posX":-33.5,"posY":1.83529961,"posZ":23.9999981,"rotX":-0.000006937669,"rotY":179.97258,"rotZ":-5.5732994e-7,"scaleX":0.7,"scaleY":0.7,"scaleZ":0.7},"Nickname":"Ruines calcinées","Description":"merci à Chr1Z pour le script","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.614982545,"g":0,"b":0},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"MaterialIndex":-1,"MeshIndex":-1,"CustomMesh":{"MeshURL":"https://pastebin.com/raw/ALrYhQGb","DiffuseURL":"http://cloud-3.steamusercontent.com/ugc/1936013662302001975/7B1C2164A753181108452C97908B20F2F40F3F11/","NormalURL":"","ColliderURL":"","Convex":true,"MaterialIndex":3,"TypeIndex":6,"CustomShader":{"SpecularColor":{"r":1,"g":1,"b":1},"SpecularIntensity":0,"SpecularSharpness":2,"FresnelStrength":0},"CastShadows":true},"Bag":{"Order":0},"LuaScript":"-- Random memory bag\r\n-- based on Utility memory bag by Directsun (Version 2.7.0)\r\n\r\nlocal CONFIG = {\r\n    MEMORY_GROUP = {\r\n        -- This determines how many frames to wait before actually placing objects onto the table when the \"Place\" button is clicked.\r\n        -- This gives the other bags time to recall their objects.\r\n        -- The delay ONLY occurs if other bags have objects out.\r\n        FRAME_DELAY_BEFORE_PLACING_OBJECTS = 30\r\n    }\r\n}\r\n\r\nmath.randomseed(os.time())\r\n\r\n--[[ Memory Bag Groups ]]\r\n--[[ Utility Memory Bags may be added to a named group, called a \"memory group\".\r\nYou can add a bag to a group through the bag's UI: \"Setup\" > \"Group Name\" (to the left of the bag).\r\nOnly one bag from a group may have it's contents placed on the table at a time.\r\nWhen \"Place\" is clicked on a bag, the other bags in it's memory group are recalled.\r\nBy default a memory bag is not in any group. It's memory group is \"nil\". --]]\r\n\r\nmemoryGroupName = { memoryBag = self }\r\nfunction memoryGroupName:get()\r\n    return self._name\r\nend\r\n\r\nfunction memoryGroupName:set(newName)\r\n    GlobalMemoryGroups:unregisterBagInGroup(self:get(), self.memoryBag.getGUID())\r\n    GlobalMemoryGroups:registerBagInGroup(newName, self.memoryBag.getGUID())\r\n\r\n    if newName == \"\" then\r\n        self._name = nil\r\n    else\r\n        self._name = newName\r\n    end\r\nend\r\n\r\n-- Click the \"Recall\" button on all other bags in my memory group.\r\nfunction recallOtherBagsInMyGroup()\r\n    for _, bag in ipairs(getOtherBagsInMyGroup()) do\r\n        bag.call('buttonClick_recall')\r\n    end\r\nend\r\n\r\n-- Return \"true\" if another bag in my memory group has any objects out on the table.\r\nfunction anyOtherBagsInMyGroupArePlaced()\r\n    for _, bag in ipairs(getOtherBagsInMyGroup()) do\r\n        local state = bag.call('areAnyOfMyObjectsPlaced')\r\n        if state then return true end\r\n    end\r\n\r\n    return false\r\nend\r\n\r\n-- Return \"true\" if at least one object from this memory bag is out on the table.\r\nfunction areAnyOfMyObjectsPlaced()\r\n    for guid, _ in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then\r\n            return true\r\n        end\r\n    end\r\n    return false\r\nend\r\n\r\nfunction getOtherBagsInMyGroup()\r\n    local bags = {}\r\n    for bagGuid, _ in pairs(GlobalMemoryGroups:getGroup(memoryGroupName:get())) do\r\n        if bagGuid ~= self.getGUID() then\r\n            bag = getObjectFromGUID(bagGuid)\r\n            -- \"bag\" is nill if it has been deleted since the last time onLoad() was called.\r\n            if bag ~= nil then\r\n                table.insert(bags, bag)\r\n            end\r\n        end\r\n    end\r\n    return bags\r\nend\r\n\r\n--[[\r\nThis object provides access to a variable stored on the \"Global script\".\r\nThe variable holds the names & guids of all memory bag groups.\r\nThe global variable is a table and holds data like this:\r\n{\r\n    'My First Group Name' = {\r\n        '805ebd' = {},\r\n        '35cc21' = {},\r\n        'fc8886' = {},\r\n    },\r\n    'My Second Group Name' = {\r\n        'f50264' = {},\r\n        '5f5f63' = {},\r\n    },\r\n}\r\n--]]\r\nGlobalMemoryGroups = { NAME_OF_GLOBAL_VARIABLE = '_GlobalUtilityMemoryBagGroups' }\r\n\r\n-- Call me inside this script's \"onLoad()\" method!\r\nfunction GlobalMemoryGroups:onLoad(myGuid)\r\n    -- Create and initialize the global variable if it doesn't already exist:\r\n    if self:_getGroups() == nil then\r\n        self:_setGroups({})\r\n    end\r\nend\r\n\r\n-- Return the GUIDs of all bags in the \"groupName\". The return value is a dictionary that maps [GUID -> empty table].\r\nfunction GlobalMemoryGroups:getGroup(groupName)\r\n    guids = self:_getGroups()[groupName] or {}\r\n    return guids\r\nend\r\n\r\n-- Registers a bag in a memory group. Creates a new group if one doesn't exist.\r\nfunction GlobalMemoryGroups:registerBagInGroup(groupName, bagGuid)\r\n    if groupName == nil or groupName == \"\" then\r\n        return\r\n    end\r\n\r\n    self:_tryCreateNewGroup(groupName)\r\n    local groups = self:_getGroups()\r\n    groups[groupName][bagGuid] = {}\r\n    self:_setGroups(groups)\r\nend\r\n\r\n-- Removes this bag from the memory group.\r\nfunction GlobalMemoryGroups:unregisterBagInGroup(groupName, bagGuid)\r\n    local groups = self:_getGroups()\r\n    local group = groups[groupName]\r\n    if group ~= nil then\r\n        group[bagGuid] = nil\r\n        self:_setGroups(groups)\r\n    end\r\nend\r\n\r\n-- Return the global variable, which is a table holding all memory group names & guids.\r\nfunction GlobalMemoryGroups:_getGroups()\r\n    return Global.getTable(self.NAME_OF_GLOBAL_VARIABLE)\r\nend\r\n\r\n-- Override the global variable (i.e. the entire table).\r\nfunction GlobalMemoryGroups:_setGroups(newTable)\r\n    Global.setTable(self.NAME_OF_GLOBAL_VARIABLE, newTable)\r\nend\r\n\r\n-- Add a new memory group named \"groupName\" to the global variable, if one doesn't already exist.\r\nfunction GlobalMemoryGroups:_tryCreateNewGroup(groupName)\r\n    local groups = self:_getGroups()\r\n    if groups[groupName] == nil then\r\n        groups[groupName] = {}\r\n        self:_setGroups(groups)\r\n    end\r\nend\r\n\r\n-- This object controls the \"Group Name\" input text field that is part of the bag's ingame UI.\r\ngroupNameInput = {\r\n    greyedOutText     = \"Group Name\",\r\n    widthPerCharacter = 100,\r\n    padding           = 4,\r\n    memoryBag         = self\r\n}\r\nfunction groupNameInput:create(optionalStartingValue)\r\n    local effectiveText = optionalStartingValue or self.greyedOutText\r\n    local width = self:computeWidth(effectiveText)\r\n\r\n    self.memoryBag.createInput({\r\n        label = self.greyedOutText,\r\n        value = optionalStartingValue or nil,\r\n        alignment = 3, -- Center aligned\r\n        input_function = \"groupNameInput_onCharacterTyped\", function_owner = self.memoryBag,\r\n        position = { 2.1, 0.3, 0 }, rotation = { 0, 270, 0 }, width = width, height = 350,\r\n        font_size = 250, color = { 0, 0, 0 }, font_color = { 1, 1, 1 },\r\n    })\r\nend\r\n\r\nfunction groupNameInput:computeWidth(text)\r\n    return (string.len(text) + self.padding) * self.widthPerCharacter\r\nend\r\n\r\nfunction groupNameInput:updatedWidth(text)\r\n    self.memoryBag.editInput({\r\n        index = 0,\r\n        width = self:computeWidth(text)\r\n    })\r\nend\r\n\r\nfunction groupNameInput:onCharacterTyped(text, stillEditing)\r\n    if stillEditing then\r\n        self:updatedWidth(text)\r\n    else\r\n        if text == \"\" then\r\n            self:updatedWidth(self.greyedOutText)\r\n        end\r\n    end\r\nend\r\n\r\nfunction groupNameInput_onCharacterTyped(memoryBag, playerColor, text, stillEditing)\r\n    groupNameInput:onCharacterTyped(text, stillEditing)\r\nend\r\n\r\nfunction groupNameInput:setGroupNameToInputField()\r\n    local inputFields = self.memoryBag.getInputs()\r\n    if inputFields ~= nil then\r\n        -- Get input field 0, which corresponds to the groupNameInput.\r\n        -- Unfortunately \"self.getInputs()\" doesn't return the inputs in a guaranteed order.\r\n        local nameField = nil\r\n        for _, field in ipairs(inputFields) do\r\n            if field.index == 0 then\r\n                nameField = field\r\n            end\r\n        end\r\n\r\n        memoryGroupName:set(nameField.value)\r\n    end\r\nend\r\n\r\nfunction updateSave()\r\n    local data_to_save = { [\"ml\"] = memoryList, [\"groupName\"] = memoryGroupName:get() }\r\n    saved_data = JSON.encode(data_to_save)\r\n    self.script_state = saved_data\r\nend\r\n\r\nfunction combineMemoryFromBagsWithin()\r\n    local bagObjList = self.getObjects()\r\n    for _, bagObj in ipairs(bagObjList) do\r\n        local data = bagObj.lua_script_state\r\n        if data ~= nil then\r\n            local j = JSON.decode(data)\r\n            if j ~= nil and j.ml ~= nil then\r\n                for guid, entry in pairs(j.ml) do\r\n                    memoryList[guid] = entry\r\n                end\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\nfunction updateMemoryWithMoves()\r\n    memoryList = memoryListBackup\r\n    --get the first transposed object's coordinates\r\n    local obj = getObjectFromGUID(moveGuid)\r\n\r\n    -- p1 is where needs to go, p2 is where it was\r\n    local refObjPos = memoryList[moveGuid].pos\r\n    local deltaPos = findOffsetDistance(obj.getPosition(), refObjPos, nil)\r\n    local movedRotation = obj.getRotation()\r\n    for guid, entry in pairs(memoryList) do\r\n        memoryList[guid].pos.x = entry.pos.x - deltaPos.x\r\n        memoryList[guid].pos.y = entry.pos.y - deltaPos.y\r\n        memoryList[guid].pos.z = entry.pos.z - deltaPos.z\r\n    end\r\n    moveList = {}\r\nend\r\n\r\nfunction onload(saved_data)\r\n    GlobalMemoryGroups:onLoad(self.getGUID())\r\n    AllMemoryBagsInScene:add(self.getGUID())\r\n\r\n    fresh = true\r\n    if saved_data ~= \"\" then\r\n        local loaded_data = JSON.decode(saved_data)\r\n        --Set up information off of loaded_data\r\n        memoryList = loaded_data.ml\r\n        memoryGroupName:set(loaded_data.groupName)\r\n    else\r\n        --Set up information for if there is no saved saved data\r\n        memoryList = {}\r\n        memoryGroupName:set(nil)\r\n    end\r\n\r\n    moveList = {}\r\n    moveGuid = nil\r\n\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        fresh = false\r\n        createMemoryActionButtons()\r\n    end\r\nend\r\n\r\n--Beginning Setup\r\n\r\n--Make setup button\r\nfunction createSetupButton()\r\n    self.createButton({\r\n      label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n      position={0,0.3,2}, rotation={0,0,0}, height=350, width=800,\r\n      font_size=250, color={0,0,0}, font_color={1,1,1}\r\n  })\r\nend\r\n\r\n--Triggered by Transpose button\r\nfunction buttonClick_transpose()\r\n    moveGuid = nil\r\n    broadcastToAll(\"Select one object and move it- all objects will move relative to the new location\", { 0.75, 0.75, 1 })\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(true)\r\n    createSetupActionButtons(true)\r\nend\r\n\r\n--Triggered by setup button,\r\nfunction buttonClick_setup()\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(false)\r\n    createSetupActionButtons(false)\r\nend\r\n\r\nfunction getAllObjectsInMemory()\r\n    local objTable = {}\r\n    local curObj = {}\r\n\r\n    for guid in pairs(memoryListBackup) do\r\n        curObj = getObjectFromGUID(guid)\r\n        table.insert(objTable, curObj)\r\n    end\r\n\r\n    return objTable\r\nend\r\n\r\n--Creates selection buttons on objects\r\nfunction createButtonsOnAllObjects(move)\r\n    buttonIndexMap = {}\r\n    local howManyButtons = 0\r\n\r\n    local objsToHaveButtons = {}\r\n    if move == true then\r\n        objsToHaveButtons = getAllObjectsInMemory()\r\n    else\r\n        objsToHaveButtons = getAllObjects()\r\n    end\r\n\r\n    for _, obj in ipairs(objsToHaveButtons) do\r\n        if obj ~= self then\r\n            --On a normal bag, the button positions aren't the same size as the bag.\r\n            globalScaleFactor = 1 * 1 / self.getScale().x\r\n            --Super sweet math to set button positions\r\n            local selfPos = self.getPosition()\r\n            local objPos = obj.getPosition()\r\n            local deltaPos = findOffsetDistance(selfPos, objPos, obj)\r\n            local objPos = rotateLocalCoordinates(deltaPos, self)\r\n            objPos.x = -objPos.x * globalScaleFactor\r\n            objPos.y = objPos.y * globalScaleFactor + 2\r\n            objPos.z = objPos.z * globalScaleFactor\r\n            --Workaround for custom PDFs\r\n            if obj.Book then\r\n                objPos.y = objPos.y + 0.5\r\n            end\r\n            --Offset rotation of bag\r\n            local rot = self.getRotation()\r\n            rot.y = -rot.y + 180\r\n            --Create function\r\n            local funcName = \"selectButton_\" .. howManyButtons\r\n            local func = function() buttonClick_selection(obj, move) end\r\n            local color = { 0.75, 0.25, 0.25, 0.6 }\r\n            local colorMove = { 0, 0, 1, 0.6 }\r\n            if move == true then\r\n                color = colorMove\r\n            end\r\n            self.setVar(funcName, func)\r\n            self.createButton({\r\n                click_function = funcName, function_owner = self,\r\n                position = objPos, rotation = rot, height = 1000, width = 1000,\r\n                color = color,\r\n            })\r\n            buttonIndexMap[obj.getGUID()] = howManyButtons\r\n            howManyButtons = howManyButtons + 1\r\n        end\r\n    end\r\nend\r\n\r\n  --Creates submit and cancel buttons\r\n  function createSetupActionButtons(move)\r\n      self.createButton({\r\n         label=\"Annuler\", click_function=\"buttonClick_cancel\", function_owner=self,\r\n         position={-1.15,0.3,2.1}, rotation={0,0,0}, height=350, width=1100,\r\n         font_size=250, color={0,0,0}, font_color={1,1,1}\r\n      })\r\n\r\n      self.createButton({\r\n        label=\"Valider\", click_function=\"buttonClick_submit\", function_owner=self,\r\n        position={-1.15,0.3,2.8}, rotation={0,0,0}, height=350, width=1100,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n      })\r\n\r\n      if move == false then\r\n        self.createButton({\r\n            label=\"Ajouter\", click_function=\"buttonClick_add\", function_owner=self,\r\n            position={1.15,0.3,2.1}, rotation={0,0,0}, height=350, width=1100,\r\n            font_size=250, color={0,0,0}, font_color={0.25,1,0.25}\r\n          })\r\n\r\n          self.createButton({\r\n              label=\"Sélection\", click_function=\"editDragSelection\", function_owner=self,\r\n              position={-1.15,0.3,3.5}, rotation={0,0,0}, height=350, width=1100,\r\n              font_size=250, color={0,0,0}, font_color={1,1,1}\r\n          })\r\n\r\n          if fresh == false then\r\n              self.createButton({\r\n                  label=\"Mise à Jour\", click_function=\"buttonClick_setNew\", function_owner=self,\r\n                  position={1.15,0.3,3.5}, rotation={0,0,0}, height=350, width=1100,\r\n                  font_size=180, color={0,0,0}, font_color={0.75,0.75,1}\r\n              })\r\n              self.createButton({\r\n                  label=\"Retirer\", click_function=\"buttonClick_remove\", function_owner=self,\r\n                  position={1.15,0.3,2.8}, rotation={0,0,0}, height=350, width=1100,\r\n                  font_size=250, color={0,0,0}, font_color={1,0.25,0.25}\r\n              })\r\n          end\r\n      end\r\n\r\n      self.createButton({\r\n          label=\"Reset\", click_function=\"buttonClick_reset\", function_owner=self,\r\n          position={0,0.3,-2}, rotation={0,0,0}, height=350, width=800,\r\n          font_size=250, color={0,0,0}, font_color={1,1,1}\r\n      })\r\n  end\r\n\r\n\r\n--During Setup\r\n\r\n--Checks or unchecks buttons\r\nfunction buttonClick_selection(obj, move)\r\n    local index = buttonIndexMap[obj.getGUID()]\r\n    local colorMove = { 0, 0, 1, 0.6 }\r\n    local color = { 0, 1, 0, 0.6 }\r\n\r\n    previousGuid = selectedGuid\r\n    selectedGuid = obj.getGUID()\r\n\r\n    theList = memoryList\r\n    if move == true then\r\n        theList = moveList\r\n        if previousGuid ~= nil and previousGuid ~= selectedGuid then\r\n            local prevObj = getObjectFromGUID(previousGuid)\r\n            prevObj.highlightOff()\r\n            self.editButton({ index = previousIndex, color = colorMove })\r\n            theList[previousGuid] = nil\r\n        end\r\n        previousIndex = index\r\n    end\r\n\r\n    if theList[selectedGuid] == nil then\r\n        self.editButton({ index = index, color = color })\r\n        --Adding pos/rot to memory table\r\n        local pos, rot = obj.getPosition(), obj.getRotation()\r\n        --I need to add it like this or it won't save due to indexing issue\r\n        theList[obj.getGUID()] = {\r\n            pos = { x = round(pos.x, 4), y = round(pos.y, 4), z = round(pos.z, 4) },\r\n            rot = { x = round(rot.x, 4), y = round(rot.y, 4), z = round(rot.z, 4) },\r\n            lock = obj.getLock(),\r\n            tint = obj.getColorTint()\r\n        }\r\n        obj.highlightOn({ 0, 1, 0 })\r\n    else\r\n        color = { 0.75, 0.25, 0.25, 0.6 }\r\n        if move == true then\r\n            color = colorMove\r\n        end\r\n        self.editButton({ index = index, color = color })\r\n        theList[obj.getGUID()] = nil\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\nfunction editDragSelection(bagObj, player, remove)\r\n    local selectedObjs = Player[player].getSelectedObjects()\r\n    if not remove then\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            --Ignore if already in the memory list, or does not have a button\r\n            if index and not memoryList[obj.getGUID()] then\r\n                self.editButton({ index = index, color = { 0, 1, 0, 0.6 } })\r\n                --Adding pos/rot to memory table\r\n                local pos, rot = obj.getPosition(), obj.getRotation()\r\n                --I need to add it like this or it won't save due to indexing issue\r\n                memoryList[obj.getGUID()] = {\r\n                    pos = { x = round(pos.x, 4), y = round(pos.y, 4), z = round(pos.z, 4) },\r\n                    rot = { x = round(rot.x, 4), y = round(rot.y, 4), z = round(rot.z, 4) },\r\n                    lock = obj.getLock(),\r\n                    tint = obj.getColorTint()\r\n                }\r\n                obj.highlightOn({ 0, 1, 0 })\r\n            end\r\n        end\r\n    else\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            if index and memoryList[obj.getGUID()] then\r\n                color = { 0.75, 0.25, 0.25, 0.6 }\r\n                self.editButton({ index = index, color = color })\r\n                memoryList[obj.getGUID()] = nil\r\n                obj.highlightOff()\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\n--Cancels selection process\r\nfunction buttonClick_cancel()\r\n    memoryList = memoryListBackup\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        createMemoryActionButtons()\r\n    end\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Sélection annulée\", { 1, 1, 1 })\r\n    moveGuid = nil\r\nend\r\n\r\n--Saves selections\r\nfunction buttonClick_submit()\r\n    fresh = false\r\n    if next(moveList) ~= nil then\r\n        for guid in pairs(moveList) do\r\n            moveGuid = guid\r\n        end\r\n        if memoryListBackup[moveGuid] == nil then\r\n            broadcastToAll(\"Item selected for moving is not already in memory\", { 1, 0.25, 0.25 })\r\n        else\r\n            broadcastToAll(\"Moving all items in memory relative to new objects position!\", { 0.75, 0.75, 1 })\r\n            self.clearButtons()\r\n            self.clearInputs()\r\n            createMemoryActionButtons()\r\n            local count = 0\r\n            for guid in pairs(moveList) do\r\n                moveGuid = guid\r\n                count = count + 1\r\n                local obj = getObjectFromGUID(guid)\r\n                if obj ~= nil then obj.highlightOff() end\r\n            end\r\n            updateMemoryWithMoves()\r\n            updateSave()\r\n            buttonClick_place()\r\n        end\r\n    elseif next(memoryList) == nil and moveGuid == nil then\r\n        memoryList = memoryListBackup\r\n        broadcastToAll(\"No selections made.\", { 0.75, 0.25, 0.25 })\r\n    end\r\n    combineMemoryFromBagsWithin()\r\n    groupNameInput:setGroupNameToInputField()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count .. \" Objects Saved\", { 1, 1, 1 })\r\n    updateSave()\r\n    moveGuid = nil\r\nend\r\n\r\nfunction combineTables(first_table, second_table)\r\n    for k, v in pairs(second_table) do first_table[k] = v end\r\nend\r\n\r\nfunction buttonClick_add()\r\n    fresh = false\r\n    combineTables(memoryList, memoryListBackup)\r\n    broadcastToAll(\"Adding internal bags and selections to existing memory\", { 0.25, 0.75, 0.25 })\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count .. \" Objects Saved\", { 1, 1, 1 })\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_remove()\r\n    broadcastToAll(\"Removing Selected Entries From Memory\", { 1.0, 0.25, 0.25 })\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        memoryListBackup[guid] = nil\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count .. \" Objects Removed\", { 1, 1, 1 })\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_setNew()\r\n    broadcastToAll(\"Setting new position relative to items in memory\", { 0.75, 0.75, 1 })\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        guid = obj.guid\r\n        if memoryListBackup[guid] ~= nil then\r\n            count = count + 1\r\n            memoryListBackup[guid].pos = obj.getPosition()\r\n            memoryListBackup[guid].rot = obj.getRotation()\r\n            memoryListBackup[guid].lock = obj.getLock()\r\n            memoryListBackup[guid].tint = obj.getColorTint()\r\n        end\r\n    end\r\n    broadcastToAll(count .. \" Objects Saved\", { 1, 1, 1 })\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\n--Resets bag to starting status\r\nfunction buttonClick_reset()\r\n    fresh = true\r\n    memoryList = {}\r\n    memoryGroupName:set(nil)\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createSetupButton()\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Tool Reset\", { 1, 1, 1 })\r\n    updateSave()\r\nend\r\n\r\n--After Setup\r\n\r\n--Creates recall and place buttons\r\nfunction createMemoryActionButtons()\r\n    self.createButton({\r\n        label=\"Placer au hasard\", click_function=\"buttonClick_place\", function_owner=self,\r\n        position={0,0.3,2}, rotation={0,0,0}, height=350, width=2000,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Ranger\", click_function=\"buttonClick_recall\", function_owner=self,\r\n        position={0,0.3,2.8}, rotation={0,0,0}, height=350, width=1000,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n        position={2,0.3,0}, rotation={0,90,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    ---    self.createButton({\r\n    ---      label=\"Bouger\", click_function=\"buttonClick_transpose\", function_owner=self,\r\n    ---      position={-2,0.3,0.8}, rotation={0,270,0}, height=350, width=800,\r\n    ---      font_size=250, color={0,0,0}, font_color={0.75,0.75,1}\r\n    ---\r\nend\r\n\r\n--Sends objects from bag/table to their saved position/rotation\r\nfunction buttonClick_place()\r\n    if anyOtherBagsInMyGroupArePlaced() then\r\n        recallOtherBagsInMyGroup()\r\n        Wait.frames(_placeObjects, CONFIG.MEMORY_GROUP.FRAME_DELAY_BEFORE_PLACING_OBJECTS)\r\n    else\r\n        _placeObjects()\r\n    end\r\nend\r\n\r\nfunction _placeObjects()\r\n    local bagObjList = self.getObjects()\r\n\r\n    -- randomize memorylist position\r\n    local positionList = {}\r\n    for guid, entry in pairs(memoryList) do\r\n        table.insert(positionList, memoryList[guid].pos)\r\n    end\r\n\r\n    for i = #positionList, 2, -1 do\r\n        local j = math.random(i)\r\n        positionList[i], positionList[j] = positionList[j], positionList[i]\r\n    end\r\n\r\n    local i = 1\r\n    for guid, entry in pairs(memoryList) do\r\n        memoryList[guid].pos = positionList[i]\r\n        i = i + 1\r\n    end\r\n\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        --If obj is out on the table, move it to the saved pos/rot\r\n        if obj ~= nil then\r\n            obj.setPositionSmooth(entry.pos)\r\n            obj.setRotationSmooth(entry.rot)\r\n            obj.setLock(entry.lock)\r\n            obj.setColorTint(entry.tint)\r\n        else\r\n            --If obj is inside of the bag\r\n            for _, bagObj in ipairs(bagObjList) do\r\n                if bagObj.guid == guid then\r\n                    local item = self.takeObject({\r\n                        guid = guid, position = entry.pos, rotation = entry.rot, smooth = false\r\n                    })\r\n                    item.setLock(entry.lock)\r\n                    item.setColorTint(entry.tint)\r\n                    break\r\n                end\r\n            end\r\n        end\r\n    end\r\n    broadcastToAll(\"Objets placés au hasard\", {1,1,1})\r\nend\r\n\r\n--Recalls objects to bag from table\r\nfunction buttonClick_recall()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then self.putObject(obj) end\r\n    end\r\n    broadcastToAll(\"Objets rangés\", {1,1,1})\r\nend\r\n\r\n--Utility functions\r\n\r\n--Find delta (difference) between 2 x/y/z coordinates\r\nfunction findOffsetDistance(p1, p2, obj)\r\n    local yOffset = 0\r\n    if obj ~= nil then\r\n        local bounds = obj.getBounds()\r\n        yOffset = (bounds.size.y - bounds.offset.y)\r\n    end\r\n    local deltaPos = {}\r\n    deltaPos.x = (p2.x - p1.x)\r\n    deltaPos.y = (p2.y - p1.y) + yOffset\r\n    deltaPos.z = (p2.z - p1.z)\r\n    return deltaPos\r\nend\r\n\r\n--Used to rotate a set of coordinates by an angle\r\nfunction rotateLocalCoordinates(desiredPos, obj)\r\n    local objPos, objRot = obj.getPosition(), obj.getRotation()\r\n    local angle = math.rad(objRot.y)\r\n    local x = desiredPos.x * math.cos(angle) - desiredPos.z * math.sin(angle)\r\n    local z = desiredPos.x * math.sin(angle) + desiredPos.z * math.cos(angle)\r\n    --return {x=objPos.x+x, y=objPos.y+desiredPos.y, z=objPos.z+z}\r\n    return { x = x, y = desiredPos.y, z = z }\r\nend\r\n\r\nfunction rotateMyCoordinates(desiredPos, obj)\r\n    local angle = math.rad(obj.getRotation().y)\r\n    local x = desiredPos.x * math.sin(angle)\r\n    local z = desiredPos.z * math.cos(angle)\r\n    return { x = x, y = desiredPos.y, z = z }\r\nend\r\n\r\n--Coroutine delay, in seconds\r\nfunction wait(time)\r\n    local start = os.time()\r\n    repeat coroutine.yield(0) until os.time() > start + time\r\nend\r\n\r\n--Duplicates a table (needed to prevent it making reference to the same objects)\r\nfunction duplicateTable(oldTable)\r\n    local newTable = {}\r\n    for k, v in pairs(oldTable) do\r\n        newTable[k] = v\r\n    end\r\n    return newTable\r\nend\r\n\r\n--Moves scripted highlight from all objects\r\nfunction removeAllHighlights()\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\n--Round number (num) to the Nth decimal (dec)\r\nfunction round(num, dec)\r\n    local mult = 10 ^ (dec or 0)\r\n    return math.floor(num * mult + 0.5) / mult\r\nend\r\n\r\n--[[ This object provides access to a variable stored on the \"Global script\".\r\nThe variable holds the GUIDs for every Utility Memory Bag in the scene.\r\nExample: {'805ebd', '35cc21', 'fc8886', 'f50264', '5f5f63'} --]]\r\nAllMemoryBagsInScene = {\r\n    NAME_OF_GLOBAL_VARIABLE = \"_UtilityMemoryBag_AllMemoryBagsInScene\"\r\n}\r\n\r\nfunction AllMemoryBagsInScene:add(guid)\r\n    local guids = Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\n    table.insert(guids, guid)\r\n    Global.setTable(self.NAME_OF_GLOBAL_VARIABLE, guids)\r\nend\r\n\r\nfunction AllMemoryBagsInScene:getGuidList()\r\n    return Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\nend\r\n","LuaScriptState":"{\"ml\":{\"0f483c\":{\"lock\":false,\"pos\":{\"x\":-23.5161,\"y\":1.7789,\"z\":25.9856},\"rot\":{\"x\":0,\"y\":180.2867,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"28f6a4\":{\"lock\":false,\"pos\":{\"x\":-22.9253,\"y\":1.8289,\"z\":25.9827},\"rot\":{\"x\":0,\"y\":180.2867,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"b98f52\":{\"lock\":false,\"pos\":{\"x\":-1,\"y\":1.5445,\"z\":1.5},\"rot\":{\"x\":0.0109,\"y\":180.0133,\"z\":0.005},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}}}}","XmlUI":"","ContainedObjects":[{"GUID":"0f483c","Name":"Card","Transform":{"posX":-22.9252586,"posY":1.82890534,"posZ":25.98274,"rotX":0.00000671713133,"rotY":180.286972,"rotZ":-0.0000155599828,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"51035\",\n  \"locationBack\": {\n    \"connections\": \"Tilde|Circle\",\n    \"icons\": \"Apostrophe|ArkhamWoods\",\n    \"uses\": {\n      \"countPerInvestigator\": 1,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    }\n  },\n  \"locationFront\": {\n    \"connections\": \"Tilde\",\n    \"icons\": \"Square|ArkhamWoods\"\n  },\n  \"traits\": \"Dunwich.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276115,"SidewaysCard":false,"CustomDeck":{"2761":{"FaceURL":"https://i.imgur.com/FVWxpyu.jpg","BackURL":"https://i.imgur.com/EmJxccn.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"28f6a4","Name":"Card","Transform":{"posX":-0.999998748,"posY":1.54450977,"posZ":1.49999714,"rotX":0.0108747585,"rotY":180.2867,"rotZ":0.00505937869,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Ruines Calcinées","Description":"Dunwich.","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02204\",\n  \"locationBack\": {\n    \"connections\": \"Square|Diamond\",\n    \"icons\": \"Triangle\",\n    \"uses\": {\n      \"count\": 3,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    }\n  },\n  \"locationFront\": {\n    \"connections\": \"Square|Diamond\",\n    \"icons\": \"Triangle\"\n  },\n  \"traits\": \"Dunwich.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":21305,"SidewaysCard":false,"CustomDeck":{"213":{"FaceURL":"https://i.imgur.com/8fUptYt.jpg","BackURL":"https://i.imgur.com/s72Czne.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"b98f52","Name":"CardCustom","Transform":{"posX":-23.5160561,"posY":1.77890384,"posZ":25.9856472,"rotX":-0.00000129986245,"rotY":180.01358,"rotZ":-0.00002717033,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Ruines Calcinées","Description":"Dunwich.","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02205\",\n  \"locationBack\": {\n    \"connections\": \"Square|Diamond\",\n    \"icons\": \"Triangle\",\n    \"uses\": {\n      \"count\": 3,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    }\n  },\n  \"locationFront\": {\n    \"connections\": \"Square|Diamond\",\n    \"icons\": \"Triangle\"\n  },\n  \"traits\": \"Dunwich.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":558100,"SidewaysCard":false,"CustomDeck":{"5581":{"FaceURL":"http://cloud-3.steamusercontent.com/ugc/1770458304230293001/4B9CE18BDDB0AE8786C15504800FE0877800E78C/","BackURL":"http://cloud-3.steamusercontent.com/ugc/1770458304230284465/962D5526DB9941CE04C8C9E01EE323CD5A703CE6/","NumWidth":1,"NumHeight":1,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""}]},{"GUID":"df5b1f","Name":"Custom_Model_Bag","Transform":{"posX":-18.9999,"posY":1.8353008,"posZ":9.9999,"rotX":-0.00000507486948,"rotY":179.971466,"rotZ":6.04661266e-10,"scaleX":0.7,"scaleY":0.7,"scaleZ":0.7},"Nickname":"Eglise","Description":"merci à Chr1Z pour le script","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.614982545,"g":0,"b":0},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"MaterialIndex":-1,"MeshIndex":-1,"CustomMesh":{"MeshURL":"https://pastebin.com/raw/ALrYhQGb","DiffuseURL":"http://cloud-3.steamusercontent.com/ugc/1936013662301512707/AACFC5A7E2B2828E449B2979907F1D94C4C5469C/","NormalURL":"","ColliderURL":"","Convex":true,"MaterialIndex":3,"TypeIndex":6,"CustomShader":{"SpecularColor":{"r":1,"g":1,"b":1},"SpecularIntensity":0,"SpecularSharpness":2,"FresnelStrength":0},"CastShadows":true},"Bag":{"Order":0},"LuaScript":"-- Random memory bag\r\n-- based on Utility memory bag by Directsun (Version 2.7.0)\r\n\r\nlocal CONFIG = {\r\n    MEMORY_GROUP = {\r\n        -- This determines how many frames to wait before actually placing objects onto the table when the \"Place\" button is clicked.\r\n        -- This gives the other bags time to recall their objects.\r\n        -- The delay ONLY occurs if other bags have objects out.\r\n        FRAME_DELAY_BEFORE_PLACING_OBJECTS = 30\r\n    }\r\n}\r\n\r\nmath.randomseed(os.time())\r\n\r\n--[[ Memory Bag Groups ]]\r\n--[[ Utility Memory Bags may be added to a named group, called a \"memory group\".\r\nYou can add a bag to a group through the bag's UI: \"Setup\" > \"Group Name\" (to the left of the bag).\r\nOnly one bag from a group may have it's contents placed on the table at a time.\r\nWhen \"Place\" is clicked on a bag, the other bags in it's memory group are recalled.\r\nBy default a memory bag is not in any group. It's memory group is \"nil\". --]]\r\n\r\nmemoryGroupName = { memoryBag = self }\r\nfunction memoryGroupName:get()\r\n    return self._name\r\nend\r\n\r\nfunction memoryGroupName:set(newName)\r\n    GlobalMemoryGroups:unregisterBagInGroup(self:get(), self.memoryBag.getGUID())\r\n    GlobalMemoryGroups:registerBagInGroup(newName, self.memoryBag.getGUID())\r\n\r\n    if newName == \"\" then\r\n        self._name = nil\r\n    else\r\n        self._name = newName\r\n    end\r\nend\r\n\r\n-- Click the \"Recall\" button on all other bags in my memory group.\r\nfunction recallOtherBagsInMyGroup()\r\n    for _, bag in ipairs(getOtherBagsInMyGroup()) do\r\n        bag.call('buttonClick_recall')\r\n    end\r\nend\r\n\r\n-- Return \"true\" if another bag in my memory group has any objects out on the table.\r\nfunction anyOtherBagsInMyGroupArePlaced()\r\n    for _, bag in ipairs(getOtherBagsInMyGroup()) do\r\n        local state = bag.call('areAnyOfMyObjectsPlaced')\r\n        if state then return true end\r\n    end\r\n\r\n    return false\r\nend\r\n\r\n-- Return \"true\" if at least one object from this memory bag is out on the table.\r\nfunction areAnyOfMyObjectsPlaced()\r\n    for guid, _ in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then\r\n            return true\r\n        end\r\n    end\r\n    return false\r\nend\r\n\r\nfunction getOtherBagsInMyGroup()\r\n    local bags = {}\r\n    for bagGuid, _ in pairs(GlobalMemoryGroups:getGroup(memoryGroupName:get())) do\r\n        if bagGuid ~= self.getGUID() then\r\n            bag = getObjectFromGUID(bagGuid)\r\n            -- \"bag\" is nill if it has been deleted since the last time onLoad() was called.\r\n            if bag ~= nil then\r\n                table.insert(bags, bag)\r\n            end\r\n        end\r\n    end\r\n    return bags\r\nend\r\n\r\n--[[\r\nThis object provides access to a variable stored on the \"Global script\".\r\nThe variable holds the names & guids of all memory bag groups.\r\nThe global variable is a table and holds data like this:\r\n{\r\n    'My First Group Name' = {\r\n        '805ebd' = {},\r\n        '35cc21' = {},\r\n        'fc8886' = {},\r\n    },\r\n    'My Second Group Name' = {\r\n        'f50264' = {},\r\n        '5f5f63' = {},\r\n    },\r\n}\r\n--]]\r\nGlobalMemoryGroups = { NAME_OF_GLOBAL_VARIABLE = '_GlobalUtilityMemoryBagGroups' }\r\n\r\n-- Call me inside this script's \"onLoad()\" method!\r\nfunction GlobalMemoryGroups:onLoad(myGuid)\r\n    -- Create and initialize the global variable if it doesn't already exist:\r\n    if self:_getGroups() == nil then\r\n        self:_setGroups({})\r\n    end\r\nend\r\n\r\n-- Return the GUIDs of all bags in the \"groupName\". The return value is a dictionary that maps [GUID -> empty table].\r\nfunction GlobalMemoryGroups:getGroup(groupName)\r\n    guids = self:_getGroups()[groupName] or {}\r\n    return guids\r\nend\r\n\r\n-- Registers a bag in a memory group. Creates a new group if one doesn't exist.\r\nfunction GlobalMemoryGroups:registerBagInGroup(groupName, bagGuid)\r\n    if groupName == nil or groupName == \"\" then\r\n        return\r\n    end\r\n\r\n    self:_tryCreateNewGroup(groupName)\r\n    local groups = self:_getGroups()\r\n    groups[groupName][bagGuid] = {}\r\n    self:_setGroups(groups)\r\nend\r\n\r\n-- Removes this bag from the memory group.\r\nfunction GlobalMemoryGroups:unregisterBagInGroup(groupName, bagGuid)\r\n    local groups = self:_getGroups()\r\n    local group = groups[groupName]\r\n    if group ~= nil then\r\n        group[bagGuid] = nil\r\n        self:_setGroups(groups)\r\n    end\r\nend\r\n\r\n-- Return the global variable, which is a table holding all memory group names & guids.\r\nfunction GlobalMemoryGroups:_getGroups()\r\n    return Global.getTable(self.NAME_OF_GLOBAL_VARIABLE)\r\nend\r\n\r\n-- Override the global variable (i.e. the entire table).\r\nfunction GlobalMemoryGroups:_setGroups(newTable)\r\n    Global.setTable(self.NAME_OF_GLOBAL_VARIABLE, newTable)\r\nend\r\n\r\n-- Add a new memory group named \"groupName\" to the global variable, if one doesn't already exist.\r\nfunction GlobalMemoryGroups:_tryCreateNewGroup(groupName)\r\n    local groups = self:_getGroups()\r\n    if groups[groupName] == nil then\r\n        groups[groupName] = {}\r\n        self:_setGroups(groups)\r\n    end\r\nend\r\n\r\n-- This object controls the \"Group Name\" input text field that is part of the bag's ingame UI.\r\ngroupNameInput = {\r\n    greyedOutText     = \"Group Name\",\r\n    widthPerCharacter = 100,\r\n    padding           = 4,\r\n    memoryBag         = self\r\n}\r\nfunction groupNameInput:create(optionalStartingValue)\r\n    local effectiveText = optionalStartingValue or self.greyedOutText\r\n    local width = self:computeWidth(effectiveText)\r\n\r\n    self.memoryBag.createInput({\r\n        label = self.greyedOutText,\r\n        value = optionalStartingValue or nil,\r\n        alignment = 3, -- Center aligned\r\n        input_function = \"groupNameInput_onCharacterTyped\", function_owner = self.memoryBag,\r\n        position = { 2.1, 0.3, 0 }, rotation = { 0, 270, 0 }, width = width, height = 350,\r\n        font_size = 250, color = { 0, 0, 0 }, font_color = { 1, 1, 1 },\r\n    })\r\nend\r\n\r\nfunction groupNameInput:computeWidth(text)\r\n    return (string.len(text) + self.padding) * self.widthPerCharacter\r\nend\r\n\r\nfunction groupNameInput:updatedWidth(text)\r\n    self.memoryBag.editInput({\r\n        index = 0,\r\n        width = self:computeWidth(text)\r\n    })\r\nend\r\n\r\nfunction groupNameInput:onCharacterTyped(text, stillEditing)\r\n    if stillEditing then\r\n        self:updatedWidth(text)\r\n    else\r\n        if text == \"\" then\r\n            self:updatedWidth(self.greyedOutText)\r\n        end\r\n    end\r\nend\r\n\r\nfunction groupNameInput_onCharacterTyped(memoryBag, playerColor, text, stillEditing)\r\n    groupNameInput:onCharacterTyped(text, stillEditing)\r\nend\r\n\r\nfunction groupNameInput:setGroupNameToInputField()\r\n    local inputFields = self.memoryBag.getInputs()\r\n    if inputFields ~= nil then\r\n        -- Get input field 0, which corresponds to the groupNameInput.\r\n        -- Unfortunately \"self.getInputs()\" doesn't return the inputs in a guaranteed order.\r\n        local nameField = nil\r\n        for _, field in ipairs(inputFields) do\r\n            if field.index == 0 then\r\n                nameField = field\r\n            end\r\n        end\r\n\r\n        memoryGroupName:set(nameField.value)\r\n    end\r\nend\r\n\r\nfunction updateSave()\r\n    local data_to_save = { [\"ml\"] = memoryList, [\"groupName\"] = memoryGroupName:get() }\r\n    saved_data = JSON.encode(data_to_save)\r\n    self.script_state = saved_data\r\nend\r\n\r\nfunction combineMemoryFromBagsWithin()\r\n    local bagObjList = self.getObjects()\r\n    for _, bagObj in ipairs(bagObjList) do\r\n        local data = bagObj.lua_script_state\r\n        if data ~= nil then\r\n            local j = JSON.decode(data)\r\n            if j ~= nil and j.ml ~= nil then\r\n                for guid, entry in pairs(j.ml) do\r\n                    memoryList[guid] = entry\r\n                end\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\nfunction updateMemoryWithMoves()\r\n    memoryList = memoryListBackup\r\n    --get the first transposed object's coordinates\r\n    local obj = getObjectFromGUID(moveGuid)\r\n\r\n    -- p1 is where needs to go, p2 is where it was\r\n    local refObjPos = memoryList[moveGuid].pos\r\n    local deltaPos = findOffsetDistance(obj.getPosition(), refObjPos, nil)\r\n    local movedRotation = obj.getRotation()\r\n    for guid, entry in pairs(memoryList) do\r\n        memoryList[guid].pos.x = entry.pos.x - deltaPos.x\r\n        memoryList[guid].pos.y = entry.pos.y - deltaPos.y\r\n        memoryList[guid].pos.z = entry.pos.z - deltaPos.z\r\n    end\r\n    moveList = {}\r\nend\r\n\r\nfunction onload(saved_data)\r\n    GlobalMemoryGroups:onLoad(self.getGUID())\r\n    AllMemoryBagsInScene:add(self.getGUID())\r\n\r\n    fresh = true\r\n    if saved_data ~= \"\" then\r\n        local loaded_data = JSON.decode(saved_data)\r\n        --Set up information off of loaded_data\r\n        memoryList = loaded_data.ml\r\n        memoryGroupName:set(loaded_data.groupName)\r\n    else\r\n        --Set up information for if there is no saved saved data\r\n        memoryList = {}\r\n        memoryGroupName:set(nil)\r\n    end\r\n\r\n    moveList = {}\r\n    moveGuid = nil\r\n\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        fresh = false\r\n        createMemoryActionButtons()\r\n    end\r\nend\r\n\r\n--Beginning Setup\r\n\r\n--Make setup button\r\nfunction createSetupButton()\r\n    self.createButton({\r\n      label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n      position={0,0.3,2}, rotation={0,0,0}, height=350, width=800,\r\n      font_size=250, color={0,0,0}, font_color={1,1,1}\r\n  })\r\nend\r\n\r\n--Triggered by Transpose button\r\nfunction buttonClick_transpose()\r\n    moveGuid = nil\r\n    broadcastToAll(\"Select one object and move it- all objects will move relative to the new location\", { 0.75, 0.75, 1 })\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(true)\r\n    createSetupActionButtons(true)\r\nend\r\n\r\n--Triggered by setup button,\r\nfunction buttonClick_setup()\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(false)\r\n    createSetupActionButtons(false)\r\nend\r\n\r\nfunction getAllObjectsInMemory()\r\n    local objTable = {}\r\n    local curObj = {}\r\n\r\n    for guid in pairs(memoryListBackup) do\r\n        curObj = getObjectFromGUID(guid)\r\n        table.insert(objTable, curObj)\r\n    end\r\n\r\n    return objTable\r\nend\r\n\r\n--Creates selection buttons on objects\r\nfunction createButtonsOnAllObjects(move)\r\n    buttonIndexMap = {}\r\n    local howManyButtons = 0\r\n\r\n    local objsToHaveButtons = {}\r\n    if move == true then\r\n        objsToHaveButtons = getAllObjectsInMemory()\r\n    else\r\n        objsToHaveButtons = getAllObjects()\r\n    end\r\n\r\n    for _, obj in ipairs(objsToHaveButtons) do\r\n        if obj ~= self then\r\n            --On a normal bag, the button positions aren't the same size as the bag.\r\n            globalScaleFactor = 1 * 1 / self.getScale().x\r\n            --Super sweet math to set button positions\r\n            local selfPos = self.getPosition()\r\n            local objPos = obj.getPosition()\r\n            local deltaPos = findOffsetDistance(selfPos, objPos, obj)\r\n            local objPos = rotateLocalCoordinates(deltaPos, self)\r\n            objPos.x = -objPos.x * globalScaleFactor\r\n            objPos.y = objPos.y * globalScaleFactor + 2\r\n            objPos.z = objPos.z * globalScaleFactor\r\n            --Workaround for custom PDFs\r\n            if obj.Book then\r\n                objPos.y = objPos.y + 0.5\r\n            end\r\n            --Offset rotation of bag\r\n            local rot = self.getRotation()\r\n            rot.y = -rot.y + 180\r\n            --Create function\r\n            local funcName = \"selectButton_\" .. howManyButtons\r\n            local func = function() buttonClick_selection(obj, move) end\r\n            local color = { 0.75, 0.25, 0.25, 0.6 }\r\n            local colorMove = { 0, 0, 1, 0.6 }\r\n            if move == true then\r\n                color = colorMove\r\n            end\r\n            self.setVar(funcName, func)\r\n            self.createButton({\r\n                click_function = funcName, function_owner = self,\r\n                position = objPos, rotation = rot, height = 1000, width = 1000,\r\n                color = color,\r\n            })\r\n            buttonIndexMap[obj.getGUID()] = howManyButtons\r\n            howManyButtons = howManyButtons + 1\r\n        end\r\n    end\r\nend\r\n\r\n  --Creates submit and cancel buttons\r\n  function createSetupActionButtons(move)\r\n      self.createButton({\r\n         label=\"Annuler\", click_function=\"buttonClick_cancel\", function_owner=self,\r\n         position={-1.15,0.3,2.1}, rotation={0,0,0}, height=350, width=1100,\r\n         font_size=250, color={0,0,0}, font_color={1,1,1}\r\n      })\r\n\r\n      self.createButton({\r\n        label=\"Valider\", click_function=\"buttonClick_submit\", function_owner=self,\r\n        position={-1.15,0.3,2.8}, rotation={0,0,0}, height=350, width=1100,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n      })\r\n\r\n      if move == false then\r\n        self.createButton({\r\n            label=\"Ajouter\", click_function=\"buttonClick_add\", function_owner=self,\r\n            position={1.15,0.3,2.1}, rotation={0,0,0}, height=350, width=1100,\r\n            font_size=250, color={0,0,0}, font_color={0.25,1,0.25}\r\n          })\r\n\r\n          self.createButton({\r\n              label=\"Sélection\", click_function=\"editDragSelection\", function_owner=self,\r\n              position={-1.15,0.3,3.5}, rotation={0,0,0}, height=350, width=1100,\r\n              font_size=250, color={0,0,0}, font_color={1,1,1}\r\n          })\r\n\r\n          if fresh == false then\r\n              self.createButton({\r\n                  label=\"Mise à Jour\", click_function=\"buttonClick_setNew\", function_owner=self,\r\n                  position={1.15,0.3,3.5}, rotation={0,0,0}, height=350, width=1100,\r\n                  font_size=180, color={0,0,0}, font_color={0.75,0.75,1}\r\n              })\r\n              self.createButton({\r\n                  label=\"Retirer\", click_function=\"buttonClick_remove\", function_owner=self,\r\n                  position={1.15,0.3,2.8}, rotation={0,0,0}, height=350, width=1100,\r\n                  font_size=250, color={0,0,0}, font_color={1,0.25,0.25}\r\n              })\r\n          end\r\n      end\r\n\r\n      self.createButton({\r\n          label=\"Reset\", click_function=\"buttonClick_reset\", function_owner=self,\r\n          position={0,0.3,-2}, rotation={0,0,0}, height=350, width=800,\r\n          font_size=250, color={0,0,0}, font_color={1,1,1}\r\n      })\r\n  end\r\n\r\n\r\n--During Setup\r\n\r\n--Checks or unchecks buttons\r\nfunction buttonClick_selection(obj, move)\r\n    local index = buttonIndexMap[obj.getGUID()]\r\n    local colorMove = { 0, 0, 1, 0.6 }\r\n    local color = { 0, 1, 0, 0.6 }\r\n\r\n    previousGuid = selectedGuid\r\n    selectedGuid = obj.getGUID()\r\n\r\n    theList = memoryList\r\n    if move == true then\r\n        theList = moveList\r\n        if previousGuid ~= nil and previousGuid ~= selectedGuid then\r\n            local prevObj = getObjectFromGUID(previousGuid)\r\n            prevObj.highlightOff()\r\n            self.editButton({ index = previousIndex, color = colorMove })\r\n            theList[previousGuid] = nil\r\n        end\r\n        previousIndex = index\r\n    end\r\n\r\n    if theList[selectedGuid] == nil then\r\n        self.editButton({ index = index, color = color })\r\n        --Adding pos/rot to memory table\r\n        local pos, rot = obj.getPosition(), obj.getRotation()\r\n        --I need to add it like this or it won't save due to indexing issue\r\n        theList[obj.getGUID()] = {\r\n            pos = { x = round(pos.x, 4), y = round(pos.y, 4), z = round(pos.z, 4) },\r\n            rot = { x = round(rot.x, 4), y = round(rot.y, 4), z = round(rot.z, 4) },\r\n            lock = obj.getLock(),\r\n            tint = obj.getColorTint()\r\n        }\r\n        obj.highlightOn({ 0, 1, 0 })\r\n    else\r\n        color = { 0.75, 0.25, 0.25, 0.6 }\r\n        if move == true then\r\n            color = colorMove\r\n        end\r\n        self.editButton({ index = index, color = color })\r\n        theList[obj.getGUID()] = nil\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\nfunction editDragSelection(bagObj, player, remove)\r\n    local selectedObjs = Player[player].getSelectedObjects()\r\n    if not remove then\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            --Ignore if already in the memory list, or does not have a button\r\n            if index and not memoryList[obj.getGUID()] then\r\n                self.editButton({ index = index, color = { 0, 1, 0, 0.6 } })\r\n                --Adding pos/rot to memory table\r\n                local pos, rot = obj.getPosition(), obj.getRotation()\r\n                --I need to add it like this or it won't save due to indexing issue\r\n                memoryList[obj.getGUID()] = {\r\n                    pos = { x = round(pos.x, 4), y = round(pos.y, 4), z = round(pos.z, 4) },\r\n                    rot = { x = round(rot.x, 4), y = round(rot.y, 4), z = round(rot.z, 4) },\r\n                    lock = obj.getLock(),\r\n                    tint = obj.getColorTint()\r\n                }\r\n                obj.highlightOn({ 0, 1, 0 })\r\n            end\r\n        end\r\n    else\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            if index and memoryList[obj.getGUID()] then\r\n                color = { 0.75, 0.25, 0.25, 0.6 }\r\n                self.editButton({ index = index, color = color })\r\n                memoryList[obj.getGUID()] = nil\r\n                obj.highlightOff()\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\n--Cancels selection process\r\nfunction buttonClick_cancel()\r\n    memoryList = memoryListBackup\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        createMemoryActionButtons()\r\n    end\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Sélection annulée\", { 1, 1, 1 })\r\n    moveGuid = nil\r\nend\r\n\r\n--Saves selections\r\nfunction buttonClick_submit()\r\n    fresh = false\r\n    if next(moveList) ~= nil then\r\n        for guid in pairs(moveList) do\r\n            moveGuid = guid\r\n        end\r\n        if memoryListBackup[moveGuid] == nil then\r\n            broadcastToAll(\"Item selected for moving is not already in memory\", { 1, 0.25, 0.25 })\r\n        else\r\n            broadcastToAll(\"Moving all items in memory relative to new objects position!\", { 0.75, 0.75, 1 })\r\n            self.clearButtons()\r\n            self.clearInputs()\r\n            createMemoryActionButtons()\r\n            local count = 0\r\n            for guid in pairs(moveList) do\r\n                moveGuid = guid\r\n                count = count + 1\r\n                local obj = getObjectFromGUID(guid)\r\n                if obj ~= nil then obj.highlightOff() end\r\n            end\r\n            updateMemoryWithMoves()\r\n            updateSave()\r\n            buttonClick_place()\r\n        end\r\n    elseif next(memoryList) == nil and moveGuid == nil then\r\n        memoryList = memoryListBackup\r\n        broadcastToAll(\"No selections made.\", { 0.75, 0.25, 0.25 })\r\n    end\r\n    combineMemoryFromBagsWithin()\r\n    groupNameInput:setGroupNameToInputField()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count .. \" Objects Saved\", { 1, 1, 1 })\r\n    updateSave()\r\n    moveGuid = nil\r\nend\r\n\r\nfunction combineTables(first_table, second_table)\r\n    for k, v in pairs(second_table) do first_table[k] = v end\r\nend\r\n\r\nfunction buttonClick_add()\r\n    fresh = false\r\n    combineTables(memoryList, memoryListBackup)\r\n    broadcastToAll(\"Adding internal bags and selections to existing memory\", { 0.25, 0.75, 0.25 })\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count .. \" Objects Saved\", { 1, 1, 1 })\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_remove()\r\n    broadcastToAll(\"Removing Selected Entries From Memory\", { 1.0, 0.25, 0.25 })\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        memoryListBackup[guid] = nil\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count .. \" Objects Removed\", { 1, 1, 1 })\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_setNew()\r\n    broadcastToAll(\"Setting new position relative to items in memory\", { 0.75, 0.75, 1 })\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        guid = obj.guid\r\n        if memoryListBackup[guid] ~= nil then\r\n            count = count + 1\r\n            memoryListBackup[guid].pos = obj.getPosition()\r\n            memoryListBackup[guid].rot = obj.getRotation()\r\n            memoryListBackup[guid].lock = obj.getLock()\r\n            memoryListBackup[guid].tint = obj.getColorTint()\r\n        end\r\n    end\r\n    broadcastToAll(count .. \" Objects Saved\", { 1, 1, 1 })\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\n--Resets bag to starting status\r\nfunction buttonClick_reset()\r\n    fresh = true\r\n    memoryList = {}\r\n    memoryGroupName:set(nil)\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createSetupButton()\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Tool Reset\", { 1, 1, 1 })\r\n    updateSave()\r\nend\r\n\r\n--After Setup\r\n\r\n--Creates recall and place buttons\r\nfunction createMemoryActionButtons()\r\n    self.createButton({\r\n        label=\"Placer au hasard\", click_function=\"buttonClick_place\", function_owner=self,\r\n        position={0,0.3,2}, rotation={0,0,0}, height=350, width=2000,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Ranger\", click_function=\"buttonClick_recall\", function_owner=self,\r\n        position={0,0.3,2.8}, rotation={0,0,0}, height=350, width=1000,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n        position={2,0.3,0}, rotation={0,90,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    ---    self.createButton({\r\n    ---      label=\"Bouger\", click_function=\"buttonClick_transpose\", function_owner=self,\r\n    ---      position={-2,0.3,0.8}, rotation={0,270,0}, height=350, width=800,\r\n    ---      font_size=250, color={0,0,0}, font_color={0.75,0.75,1}\r\n    ---\r\nend\r\n\r\n--Sends objects from bag/table to their saved position/rotation\r\nfunction buttonClick_place()\r\n    if anyOtherBagsInMyGroupArePlaced() then\r\n        recallOtherBagsInMyGroup()\r\n        Wait.frames(_placeObjects, CONFIG.MEMORY_GROUP.FRAME_DELAY_BEFORE_PLACING_OBJECTS)\r\n    else\r\n        _placeObjects()\r\n    end\r\nend\r\n\r\nfunction _placeObjects()\r\n    local bagObjList = self.getObjects()\r\n\r\n    -- randomize memorylist position\r\n    local positionList = {}\r\n    for guid, entry in pairs(memoryList) do\r\n        table.insert(positionList, memoryList[guid].pos)\r\n    end\r\n\r\n    for i = #positionList, 2, -1 do\r\n        local j = math.random(i)\r\n        positionList[i], positionList[j] = positionList[j], positionList[i]\r\n    end\r\n\r\n    local i = 1\r\n    for guid, entry in pairs(memoryList) do\r\n        memoryList[guid].pos = positionList[i]\r\n        i = i + 1\r\n    end\r\n\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        --If obj is out on the table, move it to the saved pos/rot\r\n        if obj ~= nil then\r\n            obj.setPositionSmooth(entry.pos)\r\n            obj.setRotationSmooth(entry.rot)\r\n            obj.setLock(entry.lock)\r\n            obj.setColorTint(entry.tint)\r\n        else\r\n            --If obj is inside of the bag\r\n            for _, bagObj in ipairs(bagObjList) do\r\n                if bagObj.guid == guid then\r\n                    local item = self.takeObject({\r\n                        guid = guid, position = entry.pos, rotation = entry.rot, smooth = false\r\n                    })\r\n                    item.setLock(entry.lock)\r\n                    item.setColorTint(entry.tint)\r\n                    break\r\n                end\r\n            end\r\n        end\r\n    end\r\n    broadcastToAll(\"Objets placés au hasard\", {1,1,1})\r\nend\r\n\r\n--Recalls objects to bag from table\r\nfunction buttonClick_recall()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then self.putObject(obj) end\r\n    end\r\n    broadcastToAll(\"Objets rangés\", {1,1,1})\r\nend\r\n\r\n--Utility functions\r\n\r\n--Find delta (difference) between 2 x/y/z coordinates\r\nfunction findOffsetDistance(p1, p2, obj)\r\n    local yOffset = 0\r\n    if obj ~= nil then\r\n        local bounds = obj.getBounds()\r\n        yOffset = (bounds.size.y - bounds.offset.y)\r\n    end\r\n    local deltaPos = {}\r\n    deltaPos.x = (p2.x - p1.x)\r\n    deltaPos.y = (p2.y - p1.y) + yOffset\r\n    deltaPos.z = (p2.z - p1.z)\r\n    return deltaPos\r\nend\r\n\r\n--Used to rotate a set of coordinates by an angle\r\nfunction rotateLocalCoordinates(desiredPos, obj)\r\n    local objPos, objRot = obj.getPosition(), obj.getRotation()\r\n    local angle = math.rad(objRot.y)\r\n    local x = desiredPos.x * math.cos(angle) - desiredPos.z * math.sin(angle)\r\n    local z = desiredPos.x * math.sin(angle) + desiredPos.z * math.cos(angle)\r\n    --return {x=objPos.x+x, y=objPos.y+desiredPos.y, z=objPos.z+z}\r\n    return { x = x, y = desiredPos.y, z = z }\r\nend\r\n\r\nfunction rotateMyCoordinates(desiredPos, obj)\r\n    local angle = math.rad(obj.getRotation().y)\r\n    local x = desiredPos.x * math.sin(angle)\r\n    local z = desiredPos.z * math.cos(angle)\r\n    return { x = x, y = desiredPos.y, z = z }\r\nend\r\n\r\n--Coroutine delay, in seconds\r\nfunction wait(time)\r\n    local start = os.time()\r\n    repeat coroutine.yield(0) until os.time() > start + time\r\nend\r\n\r\n--Duplicates a table (needed to prevent it making reference to the same objects)\r\nfunction duplicateTable(oldTable)\r\n    local newTable = {}\r\n    for k, v in pairs(oldTable) do\r\n        newTable[k] = v\r\n    end\r\n    return newTable\r\nend\r\n\r\n--Moves scripted highlight from all objects\r\nfunction removeAllHighlights()\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\n--Round number (num) to the Nth decimal (dec)\r\nfunction round(num, dec)\r\n    local mult = 10 ^ (dec or 0)\r\n    return math.floor(num * mult + 0.5) / mult\r\nend\r\n\r\n--[[ This object provides access to a variable stored on the \"Global script\".\r\nThe variable holds the GUIDs for every Utility Memory Bag in the scene.\r\nExample: {'805ebd', '35cc21', 'fc8886', 'f50264', '5f5f63'} --]]\r\nAllMemoryBagsInScene = {\r\n    NAME_OF_GLOBAL_VARIABLE = \"_UtilityMemoryBag_AllMemoryBagsInScene\"\r\n}\r\n\r\nfunction AllMemoryBagsInScene:add(guid)\r\n    local guids = Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\n    table.insert(guids, guid)\r\n    Global.setTable(self.NAME_OF_GLOBAL_VARIABLE, guids)\r\nend\r\n\r\nfunction AllMemoryBagsInScene:getGuidList()\r\n    return Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\nend\r\n","LuaScriptState":"{\"ml\":{\"97b1ca\":{\"lock\":false,\"pos\":{\"x\":-19.4999,\"y\":1.7789,\"z\":26.0001},\"rot\":{\"x\":0,\"y\":180.0048,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"eaced4\":{\"lock\":false,\"pos\":{\"x\":-8,\"y\":1.5471,\"z\":12},\"rot\":{\"x\":0.0109,\"y\":180.0096,\"z\":0.005},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"f6a205\":{\"lock\":false,\"pos\":{\"x\":-18.9049,\"y\":1.8289,\"z\":26},\"rot\":{\"x\":0,\"y\":180.0048,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}}}}","XmlUI":"","ContainedObjects":[{"GUID":"97b1ca","Name":"Card","Transform":{"posX":-7.99999857,"posY":1.54710972,"posZ":11.9999971,"rotX":0.0108995568,"rotY":180.0048,"rotZ":0.005005796,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Église Congrégationaliste","Description":"Dunwich.","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02209\",\n  \"locationBack\": {\n    \"connections\": \"Plus|Triangle|Tilde\",\n    \"icons\": \"Diamond\",\n    \"uses\": {\n      \"countPerInvestigator\": 1,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    }\n  },\n  \"locationFront\": {\n    \"connections\": \"Plus|Triangle|Tilde\",\n    \"icons\": \"Diamond\"\n  },\n  \"traits\": \"Dunwich.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":21308,"SidewaysCard":false,"CustomDeck":{"213":{"FaceURL":"https://i.imgur.com/8fUptYt.jpg","BackURL":"https://i.imgur.com/s72Czne.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"eaced4","Name":"Card","Transform":{"posX":-18.9048443,"posY":1.8289032,"posZ":26.0000572,"rotX":0.00000561449542,"rotY":180.009644,"rotZ":-0.0000132022024,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Église Congrégationaliste","Description":"Dunwich.","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02208\",\n  \"locationBack\": {\n    \"connections\": \"Plus|Triangle|Tilde\",\n    \"icons\": \"Diamond\",\n    \"uses\": {\n      \"countPerInvestigator\": 1,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    }\n  },\n  \"locationFront\": {\n    \"connections\": \"Plus|Triangle|Tilde\",\n    \"icons\": \"Diamond\"\n  },\n  \"traits\": \"Dunwich.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":21309,"SidewaysCard":false,"CustomDeck":{"213":{"FaceURL":"https://i.imgur.com/8fUptYt.jpg","BackURL":"https://i.imgur.com/s72Czne.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"f6a205","Name":"Card","Transform":{"posX":-19.49984,"posY":1.77890384,"posZ":26.0001621,"rotX":-0.00000137170071,"rotY":180.004868,"rotZ":-0.00002736805,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"51037\",\n  \"locationBack\": {\n    \"connections\": \"Plus|Triangle|Tilde\",\n    \"icons\": \"Diamond\",\n    \"uses\": {\n      \"countPerInvestigator\": 1,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    }\n  },\n  \"locationFront\": {\n    \"connections\": \"Plus|Triangle|Tilde\",\n    \"icons\": \"Diamond\"\n  },\n  \"traits\": \"Dunwich.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276117,"SidewaysCard":false,"CustomDeck":{"2761":{"FaceURL":"https://i.imgur.com/FVWxpyu.jpg","BackURL":"https://i.imgur.com/EmJxccn.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""}]}]},{"GUID":"8ce93b","Name":"Card","Transform":{"posX":24.9999962,"posY":1.51367974,"posZ":-5.499993,"rotX":0.0108915623,"rotY":180.000015,"rotZ":0.004948267,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276112,"SidewaysCard":false,"CustomDeck":{"2761":{"FaceURL":"https://i.imgur.com/FVWxpyu.jpg","BackURL":"https://i.imgur.com/EmJxccn.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"9474c4","Name":"Card","Transform":{"posX":22.3267422,"posY":1.5139116,"posZ":-5.49481773,"rotX":0.0108887767,"rotY":180.031677,"rotZ":0.004954251,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Référence","Description":"Du Sang sur l'Autel","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":21300,"SidewaysCard":false,"CustomDeck":{"213":{"FaceURL":"https://i.imgur.com/8fUptYt.jpg","BackURL":"https://i.imgur.com/s72Czne.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"a4f0dc","Name":"Card","Transform":{"posX":-34.0140266,"posY":1.77890539,"posZ":8.078076,"rotX":-0.000001197391,"rotY":178.883789,"rotZ":-0.00002565336,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"health\": 4,\n  \"id\": \"51040\",\n  \"traits\": \"Humanoid. Criminal. Syndicate.\",\n  \"type\": \"Enemy\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276037,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"ae6a50","Name":"Deck","Transform":{"posX":30.5,"posY":1.70506251,"posZ":-3,"rotX":-0.0005912664,"rotY":180.0017,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Deck Rencontre","Description":"Du Sang sur l'Autel","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":false,"SidewaysCard":false,"DeckIDs":[17506,16608,17818,17821,17823,17828,17825,17829,15413,15417,15418,15419,17827,17826,16606,276023,17822,17510,15416,16610,17824,17820,17819,17512,16607,17508,17831,276025,276024],"CustomDeck":{"154":{"FaceURL":"https://i.imgur.com/7H57eeO.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0},"166":{"FaceURL":"https://i.imgur.com/nB9kjFF.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0},"175":{"FaceURL":"https://i.imgur.com/AdR3VIZ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0},"178":{"FaceURL":"https://i.imgur.com/AdR3VIZ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0},"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":"","ContainedObjects":[{"GUID":"938e70","Name":"Card","Transform":{"posX":30.5003014,"posY":10.5700932,"posZ":-3.00008821,"rotX":-0.0005908065,"rotY":180.000137,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Contrée Impie","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02088\",\n  \"traits\": \"Terror.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":17506,"SidewaysCard":false,"CustomDeck":{"175":{"FaceURL":"https://i.imgur.com/AdR3VIZ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"5c7a4c","Name":"Card","Transform":{"posX":30.5003014,"posY":10.3700933,"posZ":-3.00008821,"rotX":-0.0005908065,"rotY":180.000137,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Maigre Bête de la Nuit Chasseresse","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"health\": 4,\n  \"id\": \"01172\",\n  \"traits\": \"Monster. Nightgaunt.\",\n  \"type\": \"Enemy\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":16608,"SidewaysCard":false,"CustomDeck":{"166":{"FaceURL":"https://i.imgur.com/nB9kjFF.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"8041a2","Name":"Card","Transform":{"posX":30.5003014,"posY":10.1700935,"posZ":-3.00008821,"rotX":-0.0005908065,"rotY":180.000137,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Kidnappé !","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02220\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":17818,"SidewaysCard":false,"CustomDeck":{"178":{"FaceURL":"https://i.imgur.com/AdR3VIZ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"bd01ea","Name":"Card","Transform":{"posX":30.5003014,"posY":9.970094,"posZ":-3.00008821,"rotX":-0.0005908065,"rotY":180.000137,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Kidnappé !","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02220\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":17821,"SidewaysCard":false,"CustomDeck":{"178":{"FaceURL":"https://i.imgur.com/AdR3VIZ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"9e231a","Name":"Card","Transform":{"posX":30.5003014,"posY":9.432607,"posZ":-3.000088,"rotX":-0.0005907098,"rotY":180.000137,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Signes Étranges","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02222\",\n  \"traits\": \"Omen.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":17823,"SidewaysCard":false,"CustomDeck":{"178":{"FaceURL":"https://i.imgur.com/AdR3VIZ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"a78c0d","Name":"Card","Transform":{"posX":30.5003014,"posY":9.570093,"posZ":-3.00008821,"rotX":-0.0005908065,"rotY":180.000137,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Restes Pourrissants","Description":"","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"01163\",\n  \"traits\": \"Terror.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":17828,"SidewaysCard":false,"CustomDeck":{"178":{"FaceURL":"https://i.imgur.com/AdR3VIZ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"7fcdf0","Name":"Card","Transform":{"posX":30.5003014,"posY":9.370093,"posZ":-3.00008821,"rotX":-0.0005908065,"rotY":180.000137,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Restes Pourrissants","Description":"","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"01163\",\n  \"traits\": \"Terror.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":17825,"SidewaysCard":false,"CustomDeck":{"178":{"FaceURL":"https://i.imgur.com/AdR3VIZ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"5a9cf0","Name":"Card","Transform":{"posX":30.5003014,"posY":8.832606,"posZ":-3.000088,"rotX":-0.000590831332,"rotY":180.000137,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Serviteur de Nombreuses Bouches","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"health\": 2,\n  \"id\": \"02224\",\n  \"traits\": \"Humanoid.\",\n  \"type\": \"Enemy\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":17829,"SidewaysCard":false,"CustomDeck":{"178":{"FaceURL":"https://i.imgur.com/AdR3VIZ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"74772f","Name":"Card","Transform":{"posX":30.5003014,"posY":8.970094,"posZ":-3.00008821,"rotX":-0.0005908065,"rotY":180.000137,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Avides de Mort","Description":"","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02091\",\n  \"traits\": \"Omen.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":15413,"SidewaysCard":false,"CustomDeck":{"154":{"FaceURL":"https://i.imgur.com/7H57eeO.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"34acc2","Name":"Card","Transform":{"posX":30.5003014,"posY":8.770093,"posZ":-3.00008821,"rotX":-0.0005908065,"rotY":180.000137,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Engoulevent","Description":"","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"health\": 1,\n  \"id\": \"02090\",\n  \"traits\": \"Creature.\",\n  \"type\": \"Enemy\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":15417,"SidewaysCard":false,"CustomDeck":{"154":{"FaceURL":"https://i.imgur.com/7H57eeO.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"ec81eb","Name":"Card","Transform":{"posX":30.5003014,"posY":8.232607,"posZ":-3.000088,"rotX":-0.000590886164,"rotY":180.000137,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Avides de Mort","Description":"","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02091\",\n  \"traits\": \"Omen.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":15418,"SidewaysCard":false,"CustomDeck":{"154":{"FaceURL":"https://i.imgur.com/7H57eeO.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"b248fe","Name":"Card","Transform":{"posX":30.5003014,"posY":8.370093,"posZ":-3.00008821,"rotX":-0.0005908065,"rotY":180.000137,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Engoulevent","Description":"","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"health\": 1,\n  \"id\": \"02090\",\n  \"traits\": \"Creature.\",\n  \"type\": \"Enemy\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":15419,"SidewaysCard":false,"CustomDeck":{"154":{"FaceURL":"https://i.imgur.com/7H57eeO.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"63f6c2","Name":"Card","Transform":{"posX":30.5003014,"posY":8.170094,"posZ":-3.00008821,"rotX":-0.0005908065,"rotY":180.000137,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Serviteur de Nombreuses Bouches","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"health\": 2,\n  \"id\": \"02224\",\n  \"traits\": \"Humanoid.\",\n  \"type\": \"Enemy\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":17827,"SidewaysCard":false,"CustomDeck":{"178":{"FaceURL":"https://i.imgur.com/AdR3VIZ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"0c5fef","Name":"Card","Transform":{"posX":30.5003014,"posY":7.632607,"posZ":-3.000088,"rotX":-0.000590823067,"rotY":180.000137,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Restes Pourrissants","Description":"","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"01163\",\n  \"traits\": \"Terror.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":17826,"SidewaysCard":false,"CustomDeck":{"178":{"FaceURL":"https://i.imgur.com/AdR3VIZ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"714f71","Name":"Card","Transform":{"posX":30.5003014,"posY":7.77009249,"posZ":-3.00008821,"rotX":-0.0005908065,"rotY":180.000137,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Sur les Ailes des Ténèbres","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"01173\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":16606,"SidewaysCard":false,"CustomDeck":{"166":{"FaceURL":"https://i.imgur.com/nB9kjFF.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"29c506","Name":"Card","Transform":{"posX":30.5003014,"posY":7.57009268,"posZ":-3.00008821,"rotX":-0.0005908065,"rotY":180.000137,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"51064\",\n  \"traits\": \"Omen.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276023,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"550840","Name":"Card","Transform":{"posX":30.5003014,"posY":7.37009335,"posZ":-3.00008821,"rotX":-0.0005908065,"rotY":180.000137,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Chant Psychopompe","Description":"","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02221\",\n  \"traits\": \"Omen.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":17822,"SidewaysCard":false,"CustomDeck":{"178":{"FaceURL":"https://i.imgur.com/AdR3VIZ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"f9d854","Name":"Card","Transform":{"posX":30.5003014,"posY":7.17009354,"posZ":-3.00008821,"rotX":-0.0005908065,"rotY":180.000137,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Sordide et Silencieux","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02089\",\n  \"traits\": \"Terror.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":17510,"SidewaysCard":false,"CustomDeck":{"175":{"FaceURL":"https://i.imgur.com/AdR3VIZ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"c75f9e","Name":"Card","Transform":{"posX":30.5003014,"posY":6.970094,"posZ":-3.00008821,"rotX":-0.0005908065,"rotY":180.000137,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Engoulevent","Description":"","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"health\": 1,\n  \"id\": \"02090\",\n  \"traits\": \"Creature.\",\n  \"type\": \"Enemy\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":15416,"SidewaysCard":false,"CustomDeck":{"154":{"FaceURL":"https://i.imgur.com/7H57eeO.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"4f0667","Name":"Card","Transform":{"posX":30.5003014,"posY":6.77009439,"posZ":-3.00008821,"rotX":-0.0005908065,"rotY":180.000137,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Maigre Bête de la Nuit Chasseresse","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"health\": 4,\n  \"id\": \"01172\",\n  \"traits\": \"Monster. Nightgaunt.\",\n  \"type\": \"Enemy\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":16610,"SidewaysCard":false,"CustomDeck":{"166":{"FaceURL":"https://i.imgur.com/nB9kjFF.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"68e64e","Name":"Card","Transform":{"posX":30.5003014,"posY":6.570094,"posZ":-3.00008821,"rotX":-0.0005908065,"rotY":180.000137,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Signes Étranges","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02222\",\n  \"traits\": \"Omen.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":17824,"SidewaysCard":false,"CustomDeck":{"178":{"FaceURL":"https://i.imgur.com/AdR3VIZ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"a01124","Name":"Card","Transform":{"posX":30.5003014,"posY":6.3700943,"posZ":-3.00008821,"rotX":-0.0005908065,"rotY":180.000137,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Kidnappé !","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02220\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":17820,"SidewaysCard":false,"CustomDeck":{"178":{"FaceURL":"https://i.imgur.com/AdR3VIZ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"e6f94c","Name":"Card","Transform":{"posX":30.5003014,"posY":5.83260775,"posZ":-3.000088,"rotX":-0.000590806536,"rotY":180.000137,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Chant Psychopompe","Description":"","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02221\",\n  \"traits\": \"Omen.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":17819,"SidewaysCard":false,"CustomDeck":{"178":{"FaceURL":"https://i.imgur.com/AdR3VIZ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"493b56","Name":"Card","Transform":{"posX":30.5003014,"posY":5.970094,"posZ":-3.00008821,"rotX":-0.0005908065,"rotY":180.000137,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Sordide et Silencieux","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02089\",\n  \"traits\": \"Terror.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":17512,"SidewaysCard":false,"CustomDeck":{"175":{"FaceURL":"https://i.imgur.com/AdR3VIZ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"92e5d2","Name":"Card","Transform":{"posX":30.5003014,"posY":5.77009439,"posZ":-3.00008821,"rotX":-0.0005908065,"rotY":180.000137,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Sur les Ailes des Ténèbres","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"01173\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":16607,"SidewaysCard":false,"CustomDeck":{"166":{"FaceURL":"https://i.imgur.com/nB9kjFF.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"aea6f8","Name":"Card","Transform":{"posX":30.5003014,"posY":5.570094,"posZ":-3.00008821,"rotX":-0.0005908065,"rotY":180.000137,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Contrée Impie","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02088\",\n  \"traits\": \"Terror.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":17508,"SidewaysCard":false,"CustomDeck":{"175":{"FaceURL":"https://i.imgur.com/AdR3VIZ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"f61fb1","Name":"Card","Transform":{"posX":30.5003014,"posY":5.3700943,"posZ":-3.00008821,"rotX":-0.0005908065,"rotY":180.000137,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Serviteur de Nombreuses Bouches","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"health\": 2,\n  \"id\": \"02224\",\n  \"traits\": \"Humanoid.\",\n  \"type\": \"Enemy\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":17831,"SidewaysCard":false,"CustomDeck":{"178":{"FaceURL":"https://i.imgur.com/AdR3VIZ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"cfa45a","Name":"Card","Transform":{"posX":30.5003014,"posY":4.832608,"posZ":-3.000088,"rotX":-0.0005908196,"rotY":180.000137,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"51064\",\n  \"traits\": \"Omen.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276025,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"4126bc","Name":"Card","Transform":{"posX":30.5003014,"posY":4.970094,"posZ":-3.00008821,"rotX":-0.0005908065,"rotY":180.000137,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"51064\",\n  \"traits\": \"Omen.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276024,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""}]},{"GUID":"b058a1","Name":"Custom_Model_Bag","Transform":{"posX":35,"posY":1.54437888,"posZ":2.99999976,"rotX":-0.000590832846,"rotY":179.9793,"rotZ":0.00107084215,"scaleX":0.8829061,"scaleY":0.496230334,"scaleZ":0.8829061},"Nickname":"Sacrifices potentiels","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":1,"g":1,"b":1},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"MaterialIndex":-1,"MeshIndex":-1,"CustomMesh":{"MeshURL":"https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/advboxes/tuckbox_h_MSH.obj","DiffuseURL":"http://cloud-3.steamusercontent.com/ugc/1983303656990210870/D2994AC54A968C74968E19B4F03195BC3664AEE5/","NormalURL":"","ColliderURL":"","Convex":true,"MaterialIndex":3,"TypeIndex":6,"CustomShader":{"SpecularColor":{"r":1,"g":1,"b":1},"SpecularIntensity":0,"SpecularSharpness":2,"FresnelStrength":0},"CastShadows":true},"Bag":{"Order":2},"LuaScript":"","LuaScriptState":"","XmlUI":"","ContainedObjects":[{"GUID":"a9ecc5","Name":"Card","Transform":{"posX":33.91215,"posY":2.07198763,"posZ":2.897242,"rotX":0.0299221445,"rotY":181.397751,"rotZ":359.994141,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Professeur Warren Rice","Description":"Professeur de Langues","GMNotes":"{\n  \"class\": \"Neutral\",\n  \"cost\": 3,\n  \"cycle\": \"Standalone\",\n  \"health\": 2,\n  \"id\": \"02061\",\n  \"intellectIcons\": 1,\n  \"sanity\": 3,\n  \"traits\": \"Ally. Miskatonic.\",\n  \"type\": \"Asset\",\n  \"wildIcons\": 1\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":false,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":293914,"SidewaysCard":false,"CustomDeck":{"2939":{"FaceURL":"https://i.imgur.com/YYrN92e.jpg","BackURL":"https://i.imgur.com/QGyVZgX.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"e8cde0","Name":"Card","Transform":{"posX":34.50283,"posY":2.12160516,"posZ":2.88282275,"rotX":0.0572619,"rotY":181.397934,"rotZ":0.004907193,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Dr Francis Morgan","Description":"Professeur d'Archéologie","GMNotes":"{\n  \"class\": \"Neutral\",\n  \"combatIcons\": 1,\n  \"cost\": 3,\n  \"cycle\": \"Standalone\",\n  \"health\": 4,\n  \"id\": \"02080\",\n  \"sanity\": 1,\n  \"traits\": \"Ally. Miskatonic.\",\n  \"type\": \"Asset\",\n  \"wildIcons\": 1\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":false,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":117211,"SidewaysCard":false,"CustomDeck":{"1172":{"FaceURL":"https://i.imgur.com/iZag7R1.jpg","BackURL":"https://i.imgur.com/ArR45VU.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"97fd5f","Name":"Card","Transform":{"posX":35.0934525,"posY":2.17152977,"posZ":2.86844277,"rotX":0.0572620668,"rotY":181.3965,"rotZ":0.004905677,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"class\": \"Neutral\",\n  \"cost\": 2,\n  \"cycle\": \"Standalone\",\n  \"health\": 2,\n  \"id\": \"02040\",\n  \"sanity\": 2,\n  \"traits\": \"Ally. Miskatonic.\",\n  \"type\": \"Asset\",\n  \"wildIcons\": 2\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":false,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":115015,"SidewaysCard":false,"CustomDeck":{"1150":{"FaceURL":"https://i.imgur.com/YYrN92e.jpg","BackURL":"https://i.imgur.com/QGyVZgX.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"9c5776","Name":"Card","Transform":{"posX":35.68419,"posY":2.22142553,"posZ":2.8542912,"rotX":0.08349912,"rotY":181.39032,"rotZ":359.983337,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Zebulon Whateley","Description":"Mémoire des Choses Anciennes","GMNotes":"{\n  \"class\": \"Neutral\",\n  \"cost\": 3,\n  \"cycle\": \"Standalone\",\n  \"health\": 1,\n  \"id\": \"02217\",\n  \"sanity\": 4,\n  \"traits\": \"Ally. Dunwich.\",\n  \"type\": \"Asset\",\n  \"wildIcons\": 1,\n  \"willpowerIcons\": 1\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":false,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":21316,"SidewaysCard":false,"CustomDeck":{"213":{"FaceURL":"https://i.imgur.com/8fUptYt.jpg","BackURL":"https://i.imgur.com/s72Czne.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"755625","Name":"Card","Transform":{"posX":36.3254662,"posY":2.27158427,"posZ":2.8386755,"rotX":0.08349954,"rotY":181.391968,"rotZ":359.983337,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Earl Sawyer","Description":"Plus Malin qu'il n'en a l'Air","GMNotes":"{\n  \"agilityIcons\": 1,\n  \"class\": \"Neutral\",\n  \"cost\": 3,\n  \"cycle\": \"Standalone\",\n  \"health\": 3,\n  \"id\": \"02218\",\n  \"sanity\": 2,\n  \"traits\": \"Ally. Dunwich.\",\n  \"type\": \"Asset\",\n  \"wildIcons\": 1\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":false,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":21314,"SidewaysCard":false,"CustomDeck":{"213":{"FaceURL":"https://i.imgur.com/8fUptYt.jpg","BackURL":"https://i.imgur.com/s72Czne.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""}]},{"GUID":"b302b7","Name":"Custom_Tile","Transform":{"posX":-5.00000048,"posY":1.507038,"posZ":17.5,"rotX":-0.0042030206,"rotY":45.0000954,"rotZ":359.9888,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/vppt2my.png","ImageSecondaryURL":"https://i.imgur.com/vppt2my.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":"","States":{"2":{"GUID":"44b0c5","Name":"Custom_Tile","Transform":{"posX":-39.7933121,"posY":1.63758957,"posZ":2.038383,"rotX":359.9201,"rotY":269.9961,"rotZ":0.0168742146,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/HyfE8m8.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""},"3":{"GUID":"5b38c6","Name":"Custom_Tile","Transform":{"posX":-38.8217163,"posY":1.99356019,"posZ":0.4159239,"rotX":359.9201,"rotY":272.9828,"rotZ":0.01687373,"scaleX":0.8,"scaleY":1,"scaleZ":0.8},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/dHKBLoD.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""}}},{"GUID":"c078a5","Name":"Card","Transform":{"posX":-34.00093,"posY":1.77890611,"posZ":4.49917269,"rotX":-0.00000496725261,"rotY":179.999924,"rotZ":-6.2755916e-8,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Silas Bishop","Description":"Imprégné par le Mal","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"health\": 6,\n  \"healthPerInv\": \"true\",\n  \"id\": \"02216\",\n  \"traits\": \"Monster. Abomination. Elite.\",\n  \"type\": \"Enemy\",\n  \"victory\": 2\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":21317,"SidewaysCard":false,"CustomDeck":{"213":{"FaceURL":"https://i.imgur.com/8fUptYt.jpg","BackURL":"https://i.imgur.com/s72Czne.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"c3fa4b","Name":"Card","Transform":{"posX":6.5,"posY":1.518604,"posZ":12,"rotX":0.0108915055,"rotY":179.999771,"rotZ":0.00494814571,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"51033\",\n  \"locationBack\": {\n    \"connections\": \"Tilde|Star\",\n    \"icons\": \"Heart|ArkhamWoods\",\n    \"uses\": {\n      \"countPerInvestigator\": 1,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    }\n  },\n  \"locationFront\": {\n    \"connections\": \"Tilde\",\n    \"icons\": \"Square|ArkhamWoods\"\n  },\n  \"traits\": \"Dunwich. Central.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276113,"SidewaysCard":false,"CustomDeck":{"2761":{"FaceURL":"https://i.imgur.com/FVWxpyu.jpg","BackURL":"https://i.imgur.com/EmJxccn.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"c56db4","Name":"Custom_Tile","Transform":{"posX":-1.00000048,"posY":1.50564706,"posZ":12,"rotX":0.0049479804,"rotY":90.0003357,"rotZ":359.9891,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/vppt2my.png","ImageSecondaryURL":"https://i.imgur.com/vppt2my.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":"","States":{"2":{"GUID":"44b0c5","Name":"Custom_Tile","Transform":{"posX":-39.7933121,"posY":1.63758957,"posZ":2.038383,"rotX":359.9201,"rotY":269.9961,"rotZ":0.0168742146,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/HyfE8m8.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""},"3":{"GUID":"5b38c6","Name":"Custom_Tile","Transform":{"posX":-38.8217163,"posY":1.99356019,"posZ":0.4159239,"rotX":359.9201,"rotY":272.9828,"rotZ":0.01687373,"scaleX":0.8,"scaleY":1,"scaleZ":0.8},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/dHKBLoD.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""}}},{"GUID":"e23149","Name":"CardCustom","Transform":{"posX":13,"posY":1.52,"posZ":22.5,"rotX":0.0109,"rotY":179.9995,"rotZ":180.005,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":true,"Grid":true,"Snap":false,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":1108500,"SidewaysCard":false,"CustomDeck":{"11085":{"FaceURL":"http://cloud-3.steamusercontent.com/ugc/1874088192656181477/79874E6695B40674EB042AE509B14E016AC3DB57/","BackURL":"http://cloud-3.steamusercontent.com/ugc/1874088192656181477/79874E6695B40674EB042AE509B14E016AC3DB57/","NumWidth":1,"NumHeight":1,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"e2ee03","Name":"CardCustom","Transform":{"posX":13,"posY":1.516,"posZ":1.5,"rotX":0.0109,"rotY":179.9995,"rotZ":180.005,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":true,"Grid":true,"Snap":false,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":1108500,"SidewaysCard":false,"CustomDeck":{"11085":{"FaceURL":"http://cloud-3.steamusercontent.com/ugc/1874088192656181477/79874E6695B40674EB042AE509B14E016AC3DB57/","BackURL":"http://cloud-3.steamusercontent.com/ugc/1874088192656181477/79874E6695B40674EB042AE509B14E016AC3DB57/","NumWidth":1,"NumHeight":1,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"e59274","Name":"Card","Transform":{"posX":-20.0002022,"posY":1.77890611,"posZ":4.49969339,"rotX":-0.00000502951,"rotY":180.0008,"rotZ":1.897653e-7,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Clé de la Chambre","Description":"","GMNotes":"{\n  \"class\": \"Neutral\",\n  \"cost\": 0,\n  \"cycle\": \"Standalone\",\n  \"id\": \"02215\",\n  \"traits\": \"Item. Key.\",\n  \"type\": \"Asset\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":false,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":21318,"SidewaysCard":false,"CustomDeck":{"213":{"FaceURL":"https://i.imgur.com/8fUptYt.jpg","BackURL":"https://i.imgur.com/s72Czne.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"ec5438","Name":"Card","Transform":{"posX":-33.43232,"posY":1.82890487,"posZ":8.08948,"rotX":0.00000673375234,"rotY":178.883789,"rotZ":-0.0000115736948,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"health\": 4,\n  \"id\": \"51040\",\n  \"traits\": \"Humanoid. Criminal. Syndicate.\",\n  \"type\": \"Enemy\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276038,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"fd97c4","Name":"Custom_Tile","Transform":{"posX":-5.000001,"posY":1.504947,"posZ":6.5,"rotX":359.9888,"rotY":314.999847,"rotZ":0.004204264,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/vppt2my.png","ImageSecondaryURL":"https://i.imgur.com/vppt2my.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":"","States":{"2":{"GUID":"44b0c5","Name":"Custom_Tile","Transform":{"posX":-39.7933121,"posY":1.63758957,"posZ":2.038383,"rotX":359.9201,"rotY":269.9961,"rotZ":0.0168742146,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/HyfE8m8.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""},"3":{"GUID":"5b38c6","Name":"Custom_Tile","Transform":{"posX":-38.8217163,"posY":1.99356019,"posZ":0.4159239,"rotX":359.9201,"rotY":272.9828,"rotZ":0.01687373,"scaleX":0.8,"scaleY":1,"scaleZ":0.8},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/dHKBLoD.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""}}}],"AttachedDecals":[{"Transform":{"posX":-0.0021877822,"posY":-0.08963572,"posZ":-0.00288731651,"rotX":270,"rotY":359.869568,"rotZ":0,"scaleX":2.00000215,"scaleY":2.00000238,"scaleZ":2.00000262},"CustomDecal":{"Name":"dunwich_back","ImageURL":"http://cloud-3.steamusercontent.com/ugc/959719855119695911/931B9829687A20F4DEADB36DA57B7E6D76792231/","Size":7.4}}]},{"GUID":"687683","Name":"Custom_Tile","Transform":{"posX":33.2985,"posY":1.47985983,"posZ":11.9968,"rotX":5.18679926e-8,"rotY":180.0012,"rotZ":1.57533972e-10,"scaleX":5.944177,"scaleY":1,"scaleZ":5.944177},"Nickname":"Carnet de Campagne","Description":"L'Héritage de Dunwich","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":1,"g":1,"b":1},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":false,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"http://cloud-3.steamusercontent.com/ugc/1831283363809270962/71EC83E58BD10F195B9B46B472D71199B9B9126A/","ImageSecondaryURL":"http://cloud-3.steamusercontent.com/ugc/959719855118672935/146C19B01EA067D56DF32B9F9B23D0C15C69C323/","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":0,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"--[[    Character Sheet Template    by: MrStump\r\n\r\nYou can set up your own character sheet if you follow these steps.\r\n\r\nStep 1) Change the character sheet image\r\n    -Right click on the character sheet, click Custom\r\n    -Replace the image URL with one for your character sheet\r\n    -Click import, make sure your sheet loads\r\n    -SAVE THE GAME (the table setup)\r\n    -LOAD FROM THAT SAVE YOU JUST MADE\r\n\r\nStep 2) Edit script to fit your character sheet\r\n    -Below you will see some general options, and then the big data table\r\n    -The data table is what determines how many of which buttons are made\r\n        -Checkboxes\r\n        -Counters\r\n        -Textboxes\r\n    -By default, there are 3 of each. You can add more or remove entries\r\n    -If you intend to add/remove, be sure only to add/remove ENTRIES\r\n        -This is what an entry looks like:\r\n            {\r\n                pos   = {-0.977,0.1,-0.589},\r\n                size  = 800,\r\n                state = false\r\n            },\r\n        -Deleting the whole thing would remove that specific item on the sheet\r\n        -Copy and pasting it after another entry would create another\r\n    -Each entry type has unique data points (pos, size, state, etc)\r\n        -Do not try to add in your own data points or remove them individually\r\n        -There is a summary of what each point does at the top of its category\r\n\r\nStep 3) Save and check script changes\r\n    -Hit Save & Apply in the script window to save your code\r\n    -You can edit your code as needed and Save+Apply as often as needed\r\n    -When you are finished, make disableSave = false below then Save+apply\r\n        -This enables saving, so your sheet will remember whats on it.\r\n\r\nBonus) Finding/Editing Positions for elements\r\n    I have included a tool to get positions for buttons in {x,y,z} form\r\n    Place it where you want the center of your element to be\r\n    Then copy the table from the notes (lower right of screen)\r\n        You can highlight it and CTRL+C\r\n    Paste it into the data table where needed (pos=)\r\n    If you want to manually tweek the values:\r\n        {0,0,0} is the center of the character sheet\r\n        {1,0,0} is right, {-1,0,0} is left\r\n        {0,0,-1} is up, {0,0,1} is down\r\n        0.1 for Y is the height off of the page.\r\n            If it was 0, it would be down inside the model of the sheet\r\n\r\nBegin editing below:    ]]\r\n\r\n--Set this to true while editing and false when you have finished\r\ndisableSave = false\r\n--Remember to set this to false once you are done making changes\r\n--Then, after you save & apply it, save your game too\r\n\r\n--Color information for button text (r,g,b, values of 0-1)\r\nbuttonFontColor = {0,0,0}\r\n--Color information for button background\r\nbuttonColor = {1,1,1}\r\n--Change scale of button (Avoid changing if possible)\r\nbuttonScale = {0.1,0.1,0.1}\r\n\r\n--This is the button placement information\r\ndefaultButtonData = {\r\n    --Add checkboxes\r\n    checkbox = {\r\n        --[[\r\n        pos   = the position (pasted from the helper tool)\r\n        size  = height/width/font_size for checkbox\r\n        state = default starting value for checkbox (true=checked, false=not)\r\n        ]]\r\n        --First checkbox\r\n--        {\r\n--            pos   = {-0.62,0.1,0.056},\r\n--            size  = 400,\r\n--            state = false\r\n--        },\r\n        --Second checkbox\r\n--        {\r\n--            pos   = {-0.629,0.1,0.199},\r\n--            size  = 400,\r\n--            state = false\r\n--        },\r\n        --Third checkbox\r\n--        {\r\n--            pos   = {-0.594,0.1,0.355},\r\n--            size  = 400,\r\n--            state = false\r\n--        },\r\n        --End of checkboxes\r\n    },\r\n    --Add counters that have a + and - button\r\n    counter = {\r\n        --[[\r\n        pos    = the position (pasted from the helper tool)\r\n        size   = height/width/font_size for counter\r\n        value  = default starting value for counter\r\n        hideBG = if background of counter is hidden (true=hidden, false=not)\r\n        ]]\r\n        --Slot one counter 1\r\n        {\r\n            pos    = {-0.7,0.1,-0.45},\r\n            size   = 400,\r\n            value  = 0,\r\n            hideBG = true\r\n        },\r\n        --Slot one counter 2\r\n        {\r\n            pos    = {-0.52,0.1,-0.45},\r\n            size   = 400,\r\n            value  = 0,\r\n            hideBG = true\r\n        },\r\n        --Slot one xp 1\r\n        {\r\n            pos    = {-0.517,0.1,-0.55},\r\n            size   = 300,\r\n            value  = 0,\r\n            hideBG = true\r\n        },\r\n        --Slot two counter 1\r\n        {\r\n            pos    = {-0.274,0.1,-0.445},\r\n            size   = 400,\r\n            value  = 0,\r\n            hideBG = true\r\n        },\r\n        --Slot two counter 2\r\n        {\r\n            pos    = {-0.074,0.1,-0.445},\r\n            size   = 400,\r\n            value  = 0,\r\n            hideBG = true\r\n        },\r\n        --Slot two xp 1\r\n        {\r\n            pos    = {-0.061,0.1,-0.54},\r\n            size   = 300,\r\n            value  = 0,\r\n            hideBG = true\r\n        },\r\n        --Slot three counter 1\r\n        {\r\n            pos    = {0.153,0.1,-0.44},\r\n            size   = 400,\r\n            value  = 0,\r\n            hideBG = true\r\n        },\r\n        --Slot three counter 2\r\n        {\r\n            pos    = {0.379,0.1,-0.44},\r\n            size   = 400,\r\n            value  = 0,\r\n            hideBG = true\r\n        },\r\n        --Slot three xp 1\r\n        {\r\n            pos    = {0.38,0.1,-0.54},\r\n            size   = 300,\r\n            value  = 0,\r\n            hideBG = true\r\n        },\r\n        --Slot four counter 1\r\n        {\r\n            pos    = {0.614,0.1,-0.44},\r\n            size   = 400,\r\n            value  = 0,\r\n            hideBG = true\r\n        },\r\n        --Slot four counter 2\r\n        {\r\n            pos    = {0.82,0.1,-0.44},\r\n            size   = 400,\r\n            value  = 0,\r\n            hideBG = true\r\n        },\r\n        --Slot four xp 1\r\n        {\r\n            pos    = {0.827,0.1,-0.54},\r\n            size   = 300,\r\n            value  = 0,\r\n            hideBG = true\r\n        },\r\n        --End of counters\r\n    },\r\n    --Add editable text boxes\r\n    textbox = {\r\n        --[[\r\n        pos       = the position (pasted from the helper tool)\r\n        rows      = how many lines of text you want for this box\r\n        width     = how wide the text box is\r\n        font_size = size of text. This and \"rows\" effect overall height\r\n        label     = what is shown when there is no text. \"\" = nothing\r\n        value     = text entered into box. \"\" = nothing\r\n        alignment = Number to indicate how you want text aligned\r\n                    (1=Automatic, 2=Left, 3=Center, 4=Right, 5=Justified)\r\n        ]]\r\n        --Slot one player\r\n        {\r\n            pos       = {-0.637,0.1,-0.70},\r\n            rows      = 1,\r\n            width     = 2000,\r\n            font_size = 150,\r\n            label     = \"Click to type\",\r\n            value     = \"\",\r\n            alignment = 2\r\n        },\r\n        --Slot one investigator\r\n        {\r\n            pos       = {-0.637,0.1,-0.625},\r\n            rows      = 1,\r\n            width     = 2000,\r\n            font_size = 150,\r\n            label     = \"Click to type\",\r\n            value     = \"\",\r\n            alignment = 2\r\n        },\r\n        --Slot one story\r\n        {\r\n            pos       = {-0.637,0.1,-0.25},\r\n            rows      = 7,\r\n            width     = 2000,\r\n            font_size = 150,\r\n            label     = \"Click to type\",\r\n            value     = \"\",\r\n            alignment = 2\r\n        },\r\n        --Slot two player\r\n        {\r\n            pos       = {-0.2,0.1,-0.70},\r\n            rows      = 1,\r\n            width     = 2000,\r\n            font_size = 150,\r\n            label     = \"Click to type\",\r\n            value     = \"\",\r\n            alignment = 2\r\n        },\r\n        --Slot two investigator\r\n        {\r\n            pos       = {-0.2,0.1,-0.625},\r\n            rows      = 1,\r\n            width     = 2000,\r\n            font_size = 150,\r\n            label     = \"Click to type\",\r\n            value     = \"\",\r\n            alignment = 2\r\n        },\r\n        --Slot two story\r\n        {\r\n            pos       = {-0.2,0.1,-0.25},\r\n            rows      = 7,\r\n            width     = 2000,\r\n            font_size = 150,\r\n            label     = \"Click to type\",\r\n            value     = \"\",\r\n            alignment = 2\r\n        },\r\n        --Slot three player\r\n        {\r\n            pos       = {0.241,0.1,-0.70},\r\n            rows      = 1,\r\n            width     = 2000,\r\n            font_size = 150,\r\n            label     = \"Click to type\",\r\n            value     = \"\",\r\n            alignment = 2\r\n        },\r\n        --Slot three investigator\r\n        {\r\n            pos       = {0.237,0.1,-0.625},\r\n            rows      = 1,\r\n            width     = 2000,\r\n            font_size = 150,\r\n            label     = \"Click to type\",\r\n            value     = \"\",\r\n            alignment = 2\r\n        },\r\n        --Slot three story\r\n        {\r\n            pos       = {0.24,0.1,-0.25},\r\n            rows      = 7,\r\n            width     = 2000,\r\n            font_size = 150,\r\n            label     = \"Click to type\",\r\n            value     = \"\",\r\n            alignment = 2\r\n        },\r\n        --Slot four player\r\n        {\r\n            pos       = {0.671,0.1,-0.70},\r\n            rows      = 1,\r\n            width     = 2000,\r\n            font_size = 150,\r\n            label     = \"Click to type\",\r\n            value     = \"\",\r\n            alignment = 2\r\n        },\r\n        --Slot four investigator\r\n        {\r\n            pos       = {0.671,0.1,-0.625},\r\n            rows      = 1,\r\n            width     = 2000,\r\n            font_size = 150,\r\n            label     = \"Click to type\",\r\n            value     = \"\",\r\n            alignment = 2\r\n        },\r\n        --Slot four story\r\n        {\r\n            pos       = {0.671,0.1,-0.25},\r\n            rows      = 7,\r\n            width     = 2000,\r\n            font_size = 150,\r\n            label     = \"Click to type\",\r\n            value     = \"\",\r\n            alignment = 2\r\n        },\r\n        --Campaign Notes\r\n        {\r\n            pos       = {-0.45,0.1,0.55},\r\n            rows      =18,\r\n            width     = 3500,\r\n            font_size = 200,\r\n            label     = \"Click to type\",\r\n            value     = \"\",\r\n            alignment = 2\r\n        },\r\n        --Campaign Notes 2\r\n        {\r\n            pos       = {0.384,0.1,0.228},\r\n            rows      = 8,\r\n            width     = 3500,\r\n            font_size = 200,\r\n            label     = \"Click to type\",\r\n            value     = \"\",\r\n            alignment = 2\r\n        },\r\n        --Cultists interrogated\r\n        {\r\n            pos       = {0.384,0.1,0.69},\r\n            rows      = 8,\r\n            width     = 3500,\r\n            font_size = 200,\r\n            label     = \"Click to type\",\r\n            value     = \"\",\r\n            alignment = 2\r\n        },\r\n        --End of textboxes\r\n    }\r\n}\r\n\r\n\r\n\r\n--Lua beyond this point, I recommend doing something more fun with your life\r\n\r\n\r\n\r\n--Save function\r\nfunction updateSave()\r\n    saved_data = JSON.encode(ref_buttonData)\r\n    if disableSave==true then saved_data=\"\" end\r\n    self.script_state = saved_data\r\nend\r\n\r\n--Startup procedure\r\nfunction onload(saved_data)\r\n    if disableSave==true then saved_data=\"\" end\r\n    if saved_data ~= \"\" then\r\n        local loaded_data = JSON.decode(saved_data)\r\n        ref_buttonData = loaded_data\r\n    else\r\n        ref_buttonData = defaultButtonData\r\n    end\r\n\r\n    spawnedButtonCount = 0\r\n    createCheckbox()\r\n    createCounter()\r\n    createTextbox()\r\nend\r\n\r\n\r\n\r\n--Click functions for buttons\r\n\r\n\r\n\r\n--Checks or unchecks the given box\r\nfunction click_checkbox(tableIndex, buttonIndex)\r\n    if ref_buttonData.checkbox[tableIndex].state == true then\r\n        ref_buttonData.checkbox[tableIndex].state = false\r\n        self.editButton({index=buttonIndex, label=\"\"})\r\n    else\r\n        ref_buttonData.checkbox[tableIndex].state = true\r\n        self.editButton({index=buttonIndex, label=string.char(10008)})\r\n    end\r\n    updateSave()\r\nend\r\n\r\n--Applies value to given counter display\r\nfunction click_counter(tableIndex, buttonIndex, amount)\r\n    ref_buttonData.counter[tableIndex].value = ref_buttonData.counter[tableIndex].value + amount\r\n    self.editButton({index=buttonIndex, label=ref_buttonData.counter[tableIndex].value})\r\n    updateSave()\r\nend\r\n\r\n--Updates saved value for given text box\r\nfunction click_textbox(i, value, selected)\r\n    if selected == false then\r\n        ref_buttonData.textbox[i].value = value\r\n        updateSave()\r\n    end\r\nend\r\n\r\n--Dud function for if you have a background on a counter\r\nfunction click_none() end\r\n\r\n\r\n\r\n--Button creation\r\n\r\n\r\n\r\n--Makes checkboxes\r\nfunction createCheckbox()\r\n    for i, data in ipairs(ref_buttonData.checkbox) do\r\n        --Sets up reference function\r\n        local buttonNumber = spawnedButtonCount\r\n        local funcName = \"checkbox\"..i\r\n        local func = function() click_checkbox(i, buttonNumber) end\r\n        self.setVar(funcName, func)\r\n        --Sets up label\r\n        local label = \"\"\r\n        if data.state==true then label=string.char(10008) end\r\n        --Creates button and counts it\r\n        self.createButton({\r\n            label=label, click_function=funcName, function_owner=self,\r\n            position=data.pos, height=data.size, width=data.size,\r\n            font_size=data.size, scale=buttonScale,\r\n            color=buttonColor, font_color=buttonFontColor\r\n        })\r\n        spawnedButtonCount = spawnedButtonCount + 1\r\n    end\r\nend\r\n\r\n--Makes counters\r\nfunction createCounter()\r\n    for i, data in ipairs(ref_buttonData.counter) do\r\n        --Sets up display\r\n        local displayNumber = spawnedButtonCount\r\n        --Sets up label\r\n        local label = data.value\r\n        --Sets height/width for display\r\n        local size = data.size\r\n        if data.hideBG == true then size = 0 end\r\n        --Creates button and counts it\r\n        self.createButton({\r\n            label=label, click_function=\"click_none\", function_owner=self,\r\n            position=data.pos, height=size, width=size,\r\n            font_size=data.size, scale=buttonScale,\r\n            color=buttonColor, font_color=buttonFontColor\r\n        })\r\n        spawnedButtonCount = spawnedButtonCount + 1\r\n\r\n        --Sets up add 1\r\n        local funcName = \"counterAdd\"..i\r\n        local func = function() click_counter(i, displayNumber, 1) end\r\n        self.setVar(funcName, func)\r\n        --Sets up label\r\n        local label = \"+\"\r\n        --Sets up position\r\n        local offsetDistance = (data.size/2 + data.size/4) * (buttonScale[1] * 0.002)\r\n        local pos = {data.pos[1] + offsetDistance, data.pos[2], data.pos[3]}\r\n        --Sets up size\r\n        local size = data.size / 2\r\n        --Creates button and counts it\r\n        self.createButton({\r\n            label=label, click_function=funcName, function_owner=self,\r\n            position=pos, height=size, width=size,\r\n            font_size=size, scale=buttonScale,\r\n            color=buttonColor, font_color=buttonFontColor\r\n        })\r\n        spawnedButtonCount = spawnedButtonCount + 1\r\n\r\n        --Sets up subtract 1\r\n        local funcName = \"counterSub\"..i\r\n        local func = function() click_counter(i, displayNumber, -1) end\r\n        self.setVar(funcName, func)\r\n        --Sets up label\r\n        local label = \"-\"\r\n        --Set up position\r\n        local pos = {data.pos[1] - offsetDistance, data.pos[2], data.pos[3]}\r\n        --Creates button and counts it\r\n        self.createButton({\r\n            label=label, click_function=funcName, function_owner=self,\r\n            position=pos, height=size, width=size,\r\n            font_size=size, scale=buttonScale,\r\n            color=buttonColor, font_color=buttonFontColor\r\n        })\r\n        spawnedButtonCount = spawnedButtonCount + 1\r\n    end\r\nend\r\n\r\nfunction createTextbox()\r\n    for i, data in ipairs(ref_buttonData.textbox) do\r\n        --Sets up reference function\r\n        local funcName = \"textbox\"..i\r\n        local func = function(_,_,val,sel) click_textbox(i,val,sel) end\r\n        self.setVar(funcName, func)\r\n\r\n        self.createInput({\r\n            input_function = funcName,\r\n            function_owner = self,\r\n            label          = data.label,\r\n            alignment      = data.alignment,\r\n            position       = data.pos,\r\n            scale          = buttonScale,\r\n            width          = data.width,\r\n            height         = (data.font_size*data.rows)+24,\r\n            font_size      = data.font_size,\r\n            color          = buttonColor,\r\n            font_color     = buttonFontColor,\r\n            value          = data.value,\r\n        })\r\n    end\r\nend\r\n","LuaScriptState":"{\"checkbox\":[],\"counter\":[{\"hideBG\":true,\"pos\":[-0.7,0.1,-0.45],\"size\":400,\"value\":0},{\"hideBG\":true,\"pos\":[-0.52,0.1,-0.45],\"size\":400,\"value\":0},{\"hideBG\":true,\"pos\":[-0.517,0.1,-0.55],\"size\":300,\"value\":0},{\"hideBG\":true,\"pos\":[-0.274,0.1,-0.445],\"size\":400,\"value\":0},{\"hideBG\":true,\"pos\":[-0.074,0.1,-0.445],\"size\":400,\"value\":0},{\"hideBG\":true,\"pos\":[-0.061,0.1,-0.54],\"size\":300,\"value\":0},{\"hideBG\":true,\"pos\":[0.153,0.1,-0.44],\"size\":400,\"value\":0},{\"hideBG\":true,\"pos\":[0.379,0.1,-0.44],\"size\":400,\"value\":0},{\"hideBG\":true,\"pos\":[0.38,0.1,-0.54],\"size\":300,\"value\":0},{\"hideBG\":true,\"pos\":[0.614,0.1,-0.44],\"size\":400,\"value\":0},{\"hideBG\":true,\"pos\":[0.82,0.1,-0.44],\"size\":400,\"value\":0},{\"hideBG\":true,\"pos\":[0.827,0.1,-0.54],\"size\":300,\"value\":0}],\"textbox\":[{\"alignment\":2,\"font_size\":150,\"label\":\"Click to type\",\"pos\":[-0.637,0.1,-0.7],\"rows\":1,\"value\":\"\",\"width\":2000},{\"alignment\":2,\"font_size\":150,\"label\":\"Click to type\",\"pos\":[-0.637,0.1,-0.625],\"rows\":1,\"value\":\"\",\"width\":2000},{\"alignment\":2,\"font_size\":150,\"label\":\"Click to type\",\"pos\":[-0.637,0.1,-0.25],\"rows\":7,\"value\":\"\",\"width\":2000},{\"alignment\":2,\"font_size\":150,\"label\":\"Click to type\",\"pos\":[-0.2,0.1,-0.7],\"rows\":1,\"value\":\"\",\"width\":2000},{\"alignment\":2,\"font_size\":150,\"label\":\"Click to type\",\"pos\":[-0.2,0.1,-0.625],\"rows\":1,\"value\":\"\",\"width\":2000},{\"alignment\":2,\"font_size\":150,\"label\":\"Click to type\",\"pos\":[-0.2,0.1,-0.25],\"rows\":7,\"value\":\"\",\"width\":2000},{\"alignment\":2,\"font_size\":150,\"label\":\"Click to type\",\"pos\":[0.241,0.1,-0.7],\"rows\":1,\"value\":\"\",\"width\":2000},{\"alignment\":2,\"font_size\":150,\"label\":\"Click to type\",\"pos\":[0.237,0.1,-0.625],\"rows\":1,\"value\":\"\",\"width\":2000},{\"alignment\":2,\"font_size\":150,\"label\":\"Click to type\",\"pos\":[0.24,0.1,-0.25],\"rows\":7,\"value\":\"\",\"width\":2000},{\"alignment\":2,\"font_size\":150,\"label\":\"Click to type\",\"pos\":[0.671,0.1,-0.7],\"rows\":1,\"value\":\"\",\"width\":2000},{\"alignment\":2,\"font_size\":150,\"label\":\"Click to type\",\"pos\":[0.671,0.1,-0.625],\"rows\":1,\"value\":\"\",\"width\":2000},{\"alignment\":2,\"font_size\":150,\"label\":\"Click to type\",\"pos\":[0.671,0.1,-0.25],\"rows\":7,\"value\":\"\",\"width\":2000},{\"alignment\":2,\"font_size\":200,\"label\":\"Click to type\",\"pos\":[-0.45,0.1,0.55],\"rows\":18,\"value\":\"\",\"width\":3500},{\"alignment\":2,\"font_size\":200,\"label\":\"Click to type\",\"pos\":[0.384,0.1,0.228],\"rows\":8,\"value\":\"\",\"width\":3500},{\"alignment\":2,\"font_size\":200,\"label\":\"Click to type\",\"pos\":[0.384,0.1,0.69],\"rows\":8,\"value\":\"\",\"width\":3500}]}","XmlUI":"","States":{"2":{"GUID":"72c448","Name":"Custom_Tile","Transform":{"posX":-33.50007,"posY":1.63848913,"posZ":6.99955463,"rotX":1.51156092,"rotY":180.000565,"rotZ":0.000011984318,"scaleX":5.944177,"scaleY":1,"scaleZ":5.944177},"Nickname":"Carnet de Campagne","Description":"L'Héritage de Dunwich","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":1,"g":1,"b":1},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"http://cloud-3.steamusercontent.com/ugc/1831283363809271468/A5575782E29FA6562CA87D6A0D5EEF26E837FC9D/","ImageSecondaryURL":"http://cloud-3.steamusercontent.com/ugc/959719855118672935/146C19B01EA067D56DF32B9F9B23D0C15C69C323/","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":0,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"--[[    Character Sheet Template    by: MrStump\r\n\r\nYou can set up your own character sheet if you follow these steps.\r\n\r\nStep 1) Change the character sheet image\r\n    -Right click on the character sheet, click Custom\r\n    -Replace the image URL with one for your character sheet\r\n    -Click import, make sure your sheet loads\r\n    -SAVE THE GAME (the table setup)\r\n    -LOAD FROM THAT SAVE YOU JUST MADE\r\n\r\nStep 2) Edit script to fit your character sheet\r\n    -Below you will see some general options, and then the big data table\r\n    -The data table is what determines how many of which buttons are made\r\n        -Checkboxes\r\n        -Counters\r\n        -Textboxes\r\n    -By default, there are 3 of each. You can add more or remove entries\r\n    -If you intend to add/remove, be sure only to add/remove ENTRIES\r\n        -This is what an entry looks like:\r\n            {\r\n                pos   = {-0.977,0.1,-0.589},\r\n                size  = 800,\r\n                state = false\r\n            },\r\n        -Deleting the whole thing would remove that specific item on the sheet\r\n        -Copy and pasting it after another entry would create another\r\n    -Each entry type has unique data points (pos, size, state, etc)\r\n        -Do not try to add in your own data points or remove them individually\r\n        -There is a summary of what each point does at the top of its category\r\n\r\nStep 3) Save and check script changes\r\n    -Hit Save & Apply in the script window to save your code\r\n    -You can edit your code as needed and Save+Apply as often as needed\r\n    -When you are finished, make disableSave = false below then Save+apply\r\n        -This enables saving, so your sheet will remember whats on it.\r\n\r\nBonus) Finding/Editing Positions for elements\r\n    I have included a tool to get positions for buttons in {x,y,z} form\r\n    Place it where you want the center of your element to be\r\n    Then copy the table from the notes (lower right of screen)\r\n        You can highlight it and CTRL+C\r\n    Paste it into the data table where needed (pos=)\r\n    If you want to manually tweek the values:\r\n        {0,0,0} is the center of the character sheet\r\n        {1,0,0} is right, {-1,0,0} is left\r\n        {0,0,-1} is up, {0,0,1} is down\r\n        0.1 for Y is the height off of the page.\r\n            If it was 0, it would be down inside the model of the sheet\r\n\r\nBegin editing below:    ]]\r\n\r\n--Set this to true while editing and false when you have finished\r\ndisableSave = false\r\n--Remember to set this to false once you are done making changes\r\n--Then, after you save & apply it, save your game too\r\n\r\n--Color information for button text (r,g,b, values of 0-1)\r\nbuttonFontColor = {0,0,0}\r\n--Color information for button background\r\nbuttonColor = {1,1,1}\r\n--Change scale of button (Avoid changing if possible)\r\nbuttonScale = {0.1,0.1,0.1}\r\n\r\n--This is the button placement information\r\ndefaultButtonData = {\r\n    --Add checkboxes\r\n    checkbox = {\r\n        --[[\r\n        pos   = the position (pasted from the helper tool)\r\n        size  = height/width/font_size for checkbox\r\n        state = default starting value for checkbox (true=checked, false=not)\r\n        ]]\r\n        --1 checkbox\r\n        {\r\n            pos   = {-0.847,0.1,-0.649},\r\n            size  = 250,\r\n            state = false\r\n        },\r\n        --2 checkbox\r\n        {\r\n            pos   = {-0.514,0.1,-0.733},\r\n            size  = 250,\r\n            state = false\r\n        },\r\n        --3 checkbox\r\n        {\r\n            pos   = {-0.512,0.1,-0.612},\r\n            size  = 250,\r\n            state = false\r\n        },\r\n        --4 checkbox\r\n        {\r\n            pos   = {0.175,0.1,-0.708},\r\n            size  = 250,\r\n            state = false\r\n        },\r\n        --5 checkbox\r\n        {\r\n            pos   = {0.174,0.1,-0.574},\r\n            size  = 250,\r\n            state = false\r\n        },\r\n        --6 checkbox\r\n        {\r\n            pos   = {-0.035,0.1,-0.408},\r\n            size  = 250,\r\n            state = false\r\n        },\r\n        --7 checkbox\r\n        {\r\n            pos   = {-0.818,0.1,-0.373},\r\n            size  = 250,\r\n            state = false\r\n        },\r\n        --8 checkbox\r\n        {\r\n            pos   = {-0.361,0.1,-0.235},\r\n            size  = 250,\r\n            state = false\r\n        },\r\n        --9 checkbox\r\n        {\r\n            pos   = {0.323,0.1,-0.091},\r\n            size  = 250,\r\n            state = false\r\n        },\r\n        --10 checkbox\r\n        {\r\n            pos   = {-0.099,0.1,0.027},\r\n            size  = 250,\r\n            state = false\r\n        },\r\n        --11 checkbox\r\n        {\r\n            pos   = {-0.778,0.1,0.126},\r\n            size  = 250,\r\n            state = false\r\n        },\r\n        --12 checkbox\r\n        {\r\n            pos   = {-0.256,0.1,0.296},\r\n            size  = 250,\r\n            state = false\r\n        },\r\n        --13 checkbox\r\n        {\r\n            pos   = {0.179,0.1,0.461},\r\n            size  = 250,\r\n            state = false\r\n        },\r\n        --14 checkbox\r\n        {\r\n            pos   = {0.289,0.1,0.726},\r\n            size  = 250,\r\n            state = false\r\n        },\r\n        --End of checkboxes\r\n    },\r\n    --Add counters that have a + and - button\r\n    counter = {\r\n        --[[\r\n        pos    = the position (pasted from the helper tool)\r\n        size   = height/width/font_size for counter\r\n        value  = default starting value for counter\r\n        hideBG = if background of counter is hidden (true=hidden, false=not)\r\n        ]]\r\n        --Slot one counter 1\r\n\r\n        --End of counters\r\n    },\r\n    --Add editable text boxes\r\n    textbox = {\r\n        --[[\r\n        pos       = the position (pasted from the helper tool)\r\n        rows      = how many lines of text you want for this box\r\n        width     = how wide the text box is\r\n        font_size = size of text. This and \"rows\" effect overall height\r\n        label     = what is shown when there is no text. \"\" = nothing\r\n        value     = text entered into box. \"\" = nothing\r\n        alignment = Number to indicate how you want text aligned\r\n                    (1=Automatic, 2=Left, 3=Center, 4=Right, 5=Justified)\r\n        ]]\r\n\r\n        --Campaign Notes\r\n        {\r\n            pos       = {-0.4,0.1,0.652},\r\n            rows      =6,\r\n            width     = 3500,\r\n            font_size = 200,\r\n            label     = \"Click to type\",\r\n            value     = \"\",\r\n            alignment = 2\r\n        },\r\n        --End of textboxes\r\n    }\r\n}\r\n\r\n\r\n\r\n--Lua beyond this point, I recommend doing something more fun with your life\r\n\r\n\r\n\r\n--Save function\r\nfunction updateSave()\r\n    saved_data = JSON.encode(ref_buttonData)\r\n    if disableSave==true then saved_data=\"\" end\r\n    self.script_state = saved_data\r\nend\r\n\r\n--Startup procedure\r\nfunction onload(saved_data)\r\n    if disableSave==true then saved_data=\"\" end\r\n    if saved_data ~= \"\" then\r\n        local loaded_data = JSON.decode(saved_data)\r\n        ref_buttonData = loaded_data\r\n    else\r\n        ref_buttonData = defaultButtonData\r\n    end\r\n\r\n    spawnedButtonCount = 0\r\n    createCheckbox()\r\n    createCounter()\r\n    createTextbox()\r\nend\r\n\r\n\r\n\r\n--Click functions for buttons\r\n\r\n\r\n\r\n--Checks or unchecks the given box\r\nfunction click_checkbox(tableIndex, buttonIndex)\r\n    if ref_buttonData.checkbox[tableIndex].state == true then\r\n        ref_buttonData.checkbox[tableIndex].state = false\r\n        self.editButton({index=buttonIndex, label=\"\"})\r\n    else\r\n        ref_buttonData.checkbox[tableIndex].state = true\r\n        self.editButton({index=buttonIndex, label=string.char(10008)})\r\n    end\r\n    updateSave()\r\nend\r\n\r\n--Applies value to given counter display\r\nfunction click_counter(tableIndex, buttonIndex, amount)\r\n    ref_buttonData.counter[tableIndex].value = ref_buttonData.counter[tableIndex].value + amount\r\n    self.editButton({index=buttonIndex, label=ref_buttonData.counter[tableIndex].value})\r\n    updateSave()\r\nend\r\n\r\n--Updates saved value for given text box\r\nfunction click_textbox(i, value, selected)\r\n    if selected == false then\r\n        ref_buttonData.textbox[i].value = value\r\n        updateSave()\r\n    end\r\nend\r\n\r\n--Dud function for if you have a background on a counter\r\nfunction click_none() end\r\n\r\n\r\n\r\n--Button creation\r\n\r\n\r\n\r\n--Makes checkboxes\r\nfunction createCheckbox()\r\n    for i, data in ipairs(ref_buttonData.checkbox) do\r\n        --Sets up reference function\r\n        local buttonNumber = spawnedButtonCount\r\n        local funcName = \"checkbox\"..i\r\n        local func = function() click_checkbox(i, buttonNumber) end\r\n        self.setVar(funcName, func)\r\n        --Sets up label\r\n        local label = \"\"\r\n        if data.state==true then label=string.char(10008) end\r\n        --Creates button and counts it\r\n        self.createButton({\r\n            label=label, click_function=funcName, function_owner=self,\r\n            position=data.pos, height=data.size, width=data.size,\r\n            font_size=data.size, scale=buttonScale,\r\n            color=buttonColor, font_color=buttonFontColor\r\n        })\r\n        spawnedButtonCount = spawnedButtonCount + 1\r\n    end\r\nend\r\n\r\n--Makes counters\r\nfunction createCounter()\r\n    for i, data in ipairs(ref_buttonData.counter) do\r\n        --Sets up display\r\n        local displayNumber = spawnedButtonCount\r\n        --Sets up label\r\n        local label = data.value\r\n        --Sets height/width for display\r\n        local size = data.size\r\n        if data.hideBG == true then size = 0 end\r\n        --Creates button and counts it\r\n        self.createButton({\r\n            label=label, click_function=\"click_none\", function_owner=self,\r\n            position=data.pos, height=size, width=size,\r\n            font_size=data.size, scale=buttonScale,\r\n            color=buttonColor, font_color=buttonFontColor\r\n        })\r\n        spawnedButtonCount = spawnedButtonCount + 1\r\n\r\n        --Sets up add 1\r\n        local funcName = \"counterAdd\"..i\r\n        local func = function() click_counter(i, displayNumber, 1) end\r\n        self.setVar(funcName, func)\r\n        --Sets up label\r\n        local label = \"+\"\r\n        --Sets up position\r\n        local offsetDistance = (data.size/2 + data.size/4) * (buttonScale[1] * 0.002)\r\n        local pos = {data.pos[1] + offsetDistance, data.pos[2], data.pos[3]}\r\n        --Sets up size\r\n        local size = data.size / 2\r\n        --Creates button and counts it\r\n        self.createButton({\r\n            label=label, click_function=funcName, function_owner=self,\r\n            position=pos, height=size, width=size,\r\n            font_size=size, scale=buttonScale,\r\n            color=buttonColor, font_color=buttonFontColor\r\n        })\r\n        spawnedButtonCount = spawnedButtonCount + 1\r\n\r\n        --Sets up subtract 1\r\n        local funcName = \"counterSub\"..i\r\n        local func = function() click_counter(i, displayNumber, -1) end\r\n        self.setVar(funcName, func)\r\n        --Sets up label\r\n        local label = \"-\"\r\n        --Set up position\r\n        local pos = {data.pos[1] - offsetDistance, data.pos[2], data.pos[3]}\r\n        --Creates button and counts it\r\n        self.createButton({\r\n            label=label, click_function=funcName, function_owner=self,\r\n            position=pos, height=size, width=size,\r\n            font_size=size, scale=buttonScale,\r\n            color=buttonColor, font_color=buttonFontColor\r\n        })\r\n        spawnedButtonCount = spawnedButtonCount + 1\r\n    end\r\nend\r\n\r\nfunction createTextbox()\r\n    for i, data in ipairs(ref_buttonData.textbox) do\r\n        --Sets up reference function\r\n        local funcName = \"textbox\"..i\r\n        local func = function(_,_,val,sel) click_textbox(i,val,sel) end\r\n        self.setVar(funcName, func)\r\n\r\n        self.createInput({\r\n            input_function = funcName,\r\n            function_owner = self,\r\n            label          = data.label,\r\n            alignment      = data.alignment,\r\n            position       = data.pos,\r\n            scale          = buttonScale,\r\n            width          = data.width,\r\n            height         = (data.font_size*data.rows)+24,\r\n            font_size      = data.font_size,\r\n            color          = buttonColor,\r\n            font_color     = buttonFontColor,\r\n            value          = data.value,\r\n        })\r\n    end\r\nend\r\n","LuaScriptState":"{\"checkbox\":[{\"pos\":[-0.847,0.1,-0.649],\"size\":250,\"state\":false},{\"pos\":[-0.514,0.1,-0.733],\"size\":250,\"state\":false},{\"pos\":[-0.512,0.1,-0.612],\"size\":250,\"state\":false},{\"pos\":[0.175,0.1,-0.708],\"size\":250,\"state\":false},{\"pos\":[0.174,0.1,-0.574],\"size\":250,\"state\":false},{\"pos\":[-0.035,0.1,-0.408],\"size\":250,\"state\":false},{\"pos\":[-0.818,0.1,-0.373],\"size\":250,\"state\":false},{\"pos\":[-0.361,0.1,-0.235],\"size\":250,\"state\":false},{\"pos\":[0.323,0.1,-0.091],\"size\":250,\"state\":false},{\"pos\":[-0.099,0.1,0.027],\"size\":250,\"state\":false},{\"pos\":[-0.778,0.1,0.126],\"size\":250,\"state\":false},{\"pos\":[-0.256,0.1,0.296],\"size\":250,\"state\":false},{\"pos\":[0.179,0.1,0.461],\"size\":250,\"state\":false},{\"pos\":[0.289,0.1,0.726],\"size\":250,\"state\":false}],\"counter\":[],\"textbox\":[{\"alignment\":2,\"font_size\":200,\"label\":\"Click to type\",\"pos\":[-0.4,0.1,0.652],\"rows\":6,\"value\":\"\",\"width\":3500}]}","XmlUI":""}}},{"GUID":"70e81a","Name":"Custom_Model_Bag","Transform":{"posX":17.0000019,"posY":0.9799973,"posZ":45,"rotX":-0.000004858279,"rotY":180.023132,"rotZ":-2.80623624e-7,"scaleX":1.20052135,"scaleY":0.249882281,"scaleZ":1.3145982},"Nickname":"VI : Là où le Destin Attend","Description":"Renouveau : L'Héritage de Dunwich","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":1,"g":1,"b":1},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"MaterialIndex":-1,"MeshIndex":-1,"CustomMesh":{"MeshURL":"https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/advboxes/tuckbox_h_MSH.obj","DiffuseURL":"http://cloud-3.steamusercontent.com/ugc/829135118403757711/409D144AFA76534B28160AECCE67B4AC7F519469/","NormalURL":"","ColliderURL":"","Convex":true,"MaterialIndex":3,"TypeIndex":6,"CustomShader":{"SpecularColor":{"r":1,"g":1,"b":1},"SpecularIntensity":0,"SpecularSharpness":2,"FresnelStrength":0},"CastShadows":true},"Bag":{"Order":0},"LuaScript":"-- Utility memory bag by Directsun\r\n-- Version 2.7.0\r\n-- Fork of Memory Bag 2.0 by MrStump\r\n--\r\n-- Want to contribute? Create an issue or fork the code on GitHub and submit a pull request:\r\n-- https://github.com/sunflowermans/TTS-UtilityMemoryBag\r\n\r\n\r\nfunction updateSave()\r\n    local data_to_save = {[\"ml\"]=memoryList}\r\n    saved_data = JSON.encode(data_to_save)\r\n    self.script_state = saved_data\r\nend\r\n\r\nfunction combineMemoryFromBagsWithin()\r\n    local bagObjList = self.getObjects()\r\n    for _, bagObj in ipairs(bagObjList) do\r\n        local data = bagObj.lua_script_state\r\n        if data ~= nil then\r\n            local j = JSON.decode(data)\r\n            if j ~= nil and j.ml ~= nil then\r\n                for guid, entry in pairs(j.ml) do\r\n                    memoryList[guid] = entry\r\n                end\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\nfunction updateMemoryWithMoves()\r\n    memoryList = memoryListBackup\r\n    --get the first transposed object's coordinates\r\n    local obj = getObjectFromGUID(moveGuid)\r\n\r\n    -- p1 is where needs to go, p2 is where it was\r\n    local refObjPos = memoryList[moveGuid].pos\r\n    local deltaPos = findOffsetDistance(obj.getPosition(), refObjPos, nil)\r\n    local movedRotation = obj.getRotation()\r\n    for guid, entry in pairs(memoryList) do\r\n        memoryList[guid].pos.x = entry.pos.x - deltaPos.x\r\n        memoryList[guid].pos.y = entry.pos.y - deltaPos.y\r\n        memoryList[guid].pos.z = entry.pos.z - deltaPos.z\r\n        -- memoryList[guid].rot.x = movedRotation.x\r\n        -- memoryList[guid].rot.y = movedRotation.y\r\n        -- memoryList[guid].rot.z = movedRotation.z\r\n    end\r\n\r\n    --theList[obj.getGUID()] = {\r\n    --    pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n    --    rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n    --    lock=obj.getLock()\r\n    --}\r\n    moveList = {}\r\nend\r\n\r\nfunction onload(saved_data)\r\n\r\n    fresh = true\r\n    if saved_data ~= \"\" then\r\n        local loaded_data = JSON.decode(saved_data)\r\n        --Set up information off of loaded_data\r\n        memoryList = loaded_data.ml\r\n    else\r\n        --Set up information for if there is no saved saved data\r\n        memoryList = {}\r\n\r\n    end\r\n\r\n    moveList = {}\r\n    moveGuid = nil\r\n\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        fresh = false\r\n        createMemoryActionButtons()\r\n    end\r\nend\r\n\r\n\r\n--Beginning Setup\r\n\r\n\r\n--Make setup button\r\n function createSetupButton()\r\n    self.createButton({\r\n      label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n      position={0,0.1,-2.1}, rotation={0,0,0}, height=275, width=625,\r\n      font_size=150, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n end\r\n\r\n--Triggered by Transpose button\r\nfunction buttonClick_transpose()\r\n    moveGuid = nil\r\n    broadcastToAll(\"Select one object and move it- all objects will move relative to the new location\", {0.75, 0.75, 1})\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(true)\r\n    createSetupActionButtons(true)\r\nend\r\n\r\n--Triggered by setup button,\r\nfunction buttonClick_setup()\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(false)\r\n    createSetupActionButtons(false)\r\nend\r\n\r\nfunction getAllObjectsInMemory()\r\n    local objTable = {}\r\n    local curObj = {}\r\n\r\n    for guid in pairs(memoryListBackup) do\r\n        curObj = getObjectFromGUID(guid)\r\n        table.insert(objTable, curObj)\r\n    end\r\n\r\n    return objTable\r\n    -- return getAllObjects()\r\nend\r\n\r\n--Creates selection buttons on objects\r\nfunction createButtonsOnAllObjects(move)\r\n    buttonIndexMap = {}\r\n    local howManyButtons = 0\r\n\r\n    local objsToHaveButtons = {}\r\n    if move == true then\r\n        objsToHaveButtons = getAllObjectsInMemory()\r\n    else\r\n        objsToHaveButtons = getAllObjects()\r\n    end\r\n\r\n    for _, obj in ipairs(objsToHaveButtons) do\r\n        if obj ~= self then\r\n            --On a normal bag, the button positions aren't the same size as the bag.\r\n            globalScaleFactor = 1* 1/self.getScale().x\r\n            --Super sweet math to set button positions\r\n            local selfPos = self.getPosition()\r\n            local objPos = obj.getPosition()\r\n            local deltaPos = findOffsetDistance(selfPos, objPos, obj)\r\n            local objPos = rotateLocalCoordinates(deltaPos, self)\r\n            objPos.x = -objPos.x * globalScaleFactor\r\n            objPos.y = objPos.y * globalScaleFactor + 2\r\n            objPos.z = objPos.z * globalScaleFactor * 0.9\r\n            --Workaround for custom PDFs\r\n            if obj.Book then\r\n                objPos.y = objPos.y + 0.5\r\n            end\r\n            --Offset rotation of bag\r\n            local rot = self.getRotation()\r\n            rot.y = -rot.y + 180\r\n            --Create function\r\n            local funcName = \"selectButton_\" .. howManyButtons\r\n            local func = function() buttonClick_selection(obj, move) end\r\n            local color = {0.75,0.25,0.25,0.6}\r\n            local colorMove = {0,0,1,0.6}\r\n            if move == true then\r\n                color = colorMove\r\n            end\r\n            self.setVar(funcName, func)\r\n            self.createButton({\r\n                click_function=funcName, function_owner=self,\r\n                position=objPos, rotation=rot, height=500, width=500,\r\n                color=color,\r\n            })\r\n            buttonIndexMap[obj.getGUID()] = howManyButtons\r\n            howManyButtons = howManyButtons + 1\r\n        end\r\n    end\r\nend\r\n\r\n--Creates submit and cancel buttons\r\nfunction createSetupActionButtons(move)\r\n    self.createButton({\r\n        label=\"Annuler\", click_function=\"buttonClick_cancel\", function_owner=self,\r\n      position={-0.7,0.1,2.1}, rotation={0,0,0}, height=275, width=625,\r\n      font_size=145, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n\r\n    self.createButton({\r\n        label=\"Valider\", click_function=\"buttonClick_submit\", function_owner=self,\r\n        position={-0.7,0.3,2.6}, rotation={0,0,0}, height=275, width=625,\r\n        font_size=140, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n\r\n    if move == false then\r\n      self.createButton({\r\n          label=\"Ajouter\", click_function=\"buttonClick_add\", function_owner=self,\r\n          position={0.7,0.3,2.1}, rotation={0,0,0}, height=275, width=625,\r\n          font_size=140, color={0,0,0}, font_color={0.25,1,0.25}\r\n      })\r\n\r\n        self.createButton({\r\n            label=\"Sélection\", click_function=\"editDragSelection\", function_owner=self,\r\n            position={-0.7,0.3,3.1}, rotation={0,0,0}, height=275, width=625,\r\n            font_size=125, color={0,0,0}, font_color={1,1,1}\r\n        })\r\n\r\n        if fresh == false then\r\n                self.createButton({\r\n                    label=\"Mise à jour\", click_function=\"buttonClick_setNew\", function_owner=self,\r\n                    position={0.7,0.3,3.1}, rotation={0,0,0}, height=275, width=625,\r\n                    font_size=105, color={0,0,0}, font_color={0.75,0.75,1}\r\n                })\r\n                self.createButton({\r\n                    label=\"Retirer\", click_function=\"buttonClick_remove\", function_owner=self,\r\n                    position={0.7,0.3,2.6}, rotation={0,0,0}, height=275, width=625,\r\n                    font_size=140, color={0,0,0}, font_color={1,0.25,0.25}\r\n                })\r\n            end\r\n        end\r\n\r\n        self.createButton({\r\n            label=\"Reset\", click_function=\"buttonClick_reset\", function_owner=self,\r\n            position={0,0.3,-2.1}, rotation={0,0,0}, height=275, width=625,\r\n            font_size=165, color={0,0,0}, font_color={1,1,1}\r\n        })\r\n    end\r\n\r\n\r\n--During Setup\r\n\r\n\r\n--Checks or unchecks buttons\r\nfunction buttonClick_selection(obj, move)\r\n    local index = buttonIndexMap[obj.getGUID()]\r\n    local colorMove = {0,0,1,0.6}\r\n    local color = {0,1,0,0.6}\r\n\r\n    previousGuid = selectedGuid\r\n    selectedGuid = obj.getGUID()\r\n\r\n    theList = memoryList\r\n    if move == true then\r\n        theList = moveList\r\n        if previousGuid ~= nil and previousGuid ~= selectedGuid then\r\n            local prevObj = getObjectFromGUID(previousGuid)\r\n            prevObj.highlightOff()\r\n            self.editButton({index=previousIndex, color=colorMove})\r\n            theList[previousGuid] = nil\r\n        end\r\n        previousIndex = index\r\n    end\r\n\r\n    if theList[selectedGuid] == nil then\r\n        self.editButton({index=index, color=color})\r\n        --Adding pos/rot to memory table\r\n        local pos, rot = obj.getPosition(), obj.getRotation()\r\n        --I need to add it like this or it won't save due to indexing issue\r\n        theList[obj.getGUID()] = {\r\n            pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n            rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n            lock=obj.getLock(),\r\n            tint=obj.getColorTint()\r\n        }\r\n        obj.highlightOn({0,1,0})\r\n    else\r\n        color = {0.75,0.25,0.25,0.6}\r\n        if move == true then\r\n            color = colorMove\r\n        end\r\n        self.editButton({index=index, color=color})\r\n        theList[obj.getGUID()] = nil\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\nfunction editDragSelection(bagObj, player, remove)\r\n    local selectedObjs = Player[player].getSelectedObjects()\r\n    if not remove then\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            --Ignore if already in the memory list, or does not have a button\r\n            if index and not memoryList[obj.getGUID()] then\r\n                self.editButton({index=index, color={0,1,0,0.6}})\r\n                --Adding pos/rot to memory table\r\n                local pos, rot = obj.getPosition(), obj.getRotation()\r\n                --I need to add it like this or it won't save due to indexing issue\r\n                memoryList[obj.getGUID()] = {\r\n                    pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n                    rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n                    lock=obj.getLock(),\r\n                    tint=obj.getColorTint()\r\n                }\r\n                obj.highlightOn({0,1,0})\r\n            end\r\n        end\r\n    else\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            if index and memoryList[obj.getGUID()] then\r\n                color = {0.75,0.25,0.25,0.6}\r\n                self.editButton({index=index, color=color})\r\n                memoryList[obj.getGUID()] = nil\r\n                obj.highlightOff()\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\n--Cancels selection process\r\nfunction buttonClick_cancel()\r\n    memoryList = memoryListBackup\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        createMemoryActionButtons()\r\n    end\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Sélection annulée\", {1,1,1})\r\n    moveGuid = nil\r\nend\r\n\r\n--Saves selections\r\nfunction buttonClick_submit()\r\n    fresh = false\r\n    if next(moveList) ~= nil then\r\n        for guid in pairs(moveList) do\r\n            moveGuid = guid\r\n        end\r\n        if memoryListBackup[moveGuid] == nil then\r\n            broadcastToAll(\"Item selected for moving is not already in memory\", {1, 0.25, 0.25})\r\n        else\r\n            broadcastToAll(\"Moving all items in memory relative to new objects position!\", {0.75, 0.75, 1})\r\n            self.clearButtons()\r\n            self.clearInputs()\r\n            createMemoryActionButtons()\r\n            local count = 0\r\n            for guid in pairs(moveList) do\r\n                moveGuid = guid\r\n                count = count + 1\r\n                local obj = getObjectFromGUID(guid)\r\n                if obj ~= nil then obj.highlightOff() end\r\n            end\r\n            updateMemoryWithMoves()\r\n            updateSave()\r\n            buttonClick_place()\r\n        end\r\n    elseif next(memoryList) == nil and moveGuid == nil then\r\n        memoryList = memoryListBackup\r\n        broadcastToAll(\"No selections made.\", {0.75, 0.25, 0.25})\r\n    end\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    updateSave()\r\n    moveGuid = nil\r\nend\r\n\r\nfunction combineTables(first_table, second_table)\r\n    for k,v in pairs(second_table) do first_table[k] = v end\r\nend\r\n\r\nfunction buttonClick_add()\r\n    fresh = false\r\n    combineTables(memoryList, memoryListBackup)\r\n    broadcastToAll(\"Adding internal bags and selections to existing memory\", {0.25, 0.75, 0.25})\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_remove()\r\n    broadcastToAll(\"Removing Selected Entries From Memory\", {1.0, 0.25, 0.25})\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        memoryListBackup[guid] = nil\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Removed\", {1,1,1})\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_setNew()\r\n    broadcastToAll(\"Setting new position relative to items in memory\", {0.75, 0.75, 1})\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        guid = obj.guid\r\n        if memoryListBackup[guid] ~= nil then\r\n            count = count + 1\r\n            memoryListBackup[guid].pos = obj.getPosition()\r\n            memoryListBackup[guid].rot = obj.getRotation()\r\n            memoryListBackup[guid].lock = obj.getLock()\r\n            memoryListBackup[guid].tint = obj.getColorTint()\r\n        end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\n--Resets bag to starting status\r\nfunction buttonClick_reset()\r\n    fresh = true\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createSetupButton()\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Tool Reset\", {1,1,1})\r\n    updateSave()\r\nend\r\n\r\n\r\n--After Setup\r\n\r\n\r\n--Creates recall and place buttons\r\nfunction createMemoryActionButtons()\r\n    self.createButton({\r\n        label=\"Placer\", click_function=\"buttonClick_place\", function_owner=self,\r\n        position={0.7,0.1,2.2}, rotation={0,0,0}, height=275, width=625,\r\n        font_size=150, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Ranger\", click_function=\"buttonClick_recall\", function_owner=self,\r\n        position={-0.7,0.1,2.2}, rotation={0,0,0}, height=275, width=625,\r\n        font_size=150, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n        position={0,0.1,-2.2}, rotation={0,0,0}, height=275, width=625,\r\n        font_size=150, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    ---    self.createButton({\r\n    ---      label=\"Bouger\", click_function=\"buttonClick_transpose\", function_owner=self,\r\n    ---      position={-2,0.3,0.8}, rotation={0,270,0}, height=350, width=800,\r\n    ---      font_size=250, color={0,0,0}, font_color={0.75,0.75,1}\r\n    ---\r\nend\r\n\r\n--Sends objects from bag/table to their saved position/rotation\r\nfunction buttonClick_place()\r\n    local bagObjList = self.getObjects()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        --If obj is out on the table, move it to the saved pos/rot\r\n        if obj ~= nil then\r\n            obj.setPositionSmooth(entry.pos)\r\n            obj.setRotationSmooth(entry.rot)\r\n            obj.setLock(entry.lock)\r\n            obj.setColorTint(entry.tint)\r\n        else\r\n            --If obj is inside of the bag\r\n            for _, bagObj in ipairs(bagObjList) do\r\n                if bagObj.guid == guid then\r\n                    local item = self.takeObject({\r\n                        guid=guid, position=entry.pos, rotation=entry.rot, smooth=false\r\n                    })\r\n                    item.setLock(entry.lock)\r\n                    item.setColorTint(entry.tint)\r\n                    break\r\n                end\r\n            end\r\n        end\r\n    end\r\n    broadcastToAll(\"Objets placés\", {1,1,1})\r\nend\r\n\r\n--Recalls objects to bag from table\r\nfunction buttonClick_recall()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then self.putObject(obj) end\r\n    end\r\n    broadcastToAll(\"Objets rangés\", {1,1,1})\r\nend\r\n\r\n\r\n--Utility functions\r\n\r\n\r\n--Find delta (difference) between 2 x/y/z coordinates\r\nfunction findOffsetDistance(p1, p2, obj)\r\n    local yOffset = 0\r\n    if obj ~= nil then\r\n        local bounds = obj.getBounds()\r\n        yOffset = (bounds.size.y - bounds.offset.y)\r\n    end\r\n    local deltaPos = {}\r\n    deltaPos.x = (p2.x-p1.x)\r\n    deltaPos.y = (p2.y-p1.y) + yOffset\r\n    deltaPos.z = (p2.z-p1.z)\r\n    return deltaPos\r\nend\r\n\r\n--Used to rotate a set of coordinates by an angle\r\nfunction rotateLocalCoordinates(desiredPos, obj)\r\n    local objPos, objRot = obj.getPosition(), obj.getRotation()\r\n    local angle = math.rad(objRot.y)\r\n    local x = desiredPos.x * math.cos(angle) - desiredPos.z * math.sin(angle)\r\n    local z = desiredPos.x * math.sin(angle) + desiredPos.z * math.cos(angle)\r\n    --return {x=objPos.x+x, y=objPos.y+desiredPos.y, z=objPos.z+z}\r\n    return {x=x, y=desiredPos.y, z=z}\r\nend\r\n\r\nfunction rotateMyCoordinates(desiredPos, obj)\r\n    local angle = math.rad(obj.getRotation().y)\r\n    local x = desiredPos.x * math.sin(angle)\r\n    local z = desiredPos.z * math.cos(angle)\r\n    return {x=x, y=desiredPos.y, z=z}\r\nend\r\n\r\n--Coroutine delay, in seconds\r\nfunction wait(time)\r\n    local start = os.time()\r\n    repeat coroutine.yield(0) until os.time() > start + time\r\nend\r\n\r\n--Duplicates a table (needed to prevent it making reference to the same objects)\r\nfunction duplicateTable(oldTable)\r\n    local newTable = {}\r\n    for k, v in pairs(oldTable) do\r\n        newTable[k] = v\r\n    end\r\n    return newTable\r\nend\r\n\r\n--Moves scripted highlight from all objects\r\nfunction removeAllHighlights()\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\n--Round number (num) to the Nth decimal (dec)\r\nfunction round(num, dec)\r\n    local mult = 10^(dec or 0)\r\n    return math.floor(num * mult + 0.5) / mult\r\nend\r\n\r\n\r\n--[[\r\nThis object provides access to a variable stored on the \"Global script\".\r\nThe variable holds the GUIDs for every Utility Memory Bag in the scene.\r\nExample:\r\n{'805ebd', '35cc21', 'fc8886', 'f50264', '5f5f63'}\r\n--]]\r\nAllMemoryBagsInScene = {\r\n    NAME_OF_GLOBAL_VARIABLE = \"_UtilityMemoryBag_AllMemoryBagsInScene\"\r\n}\r\n\r\nfunction AllMemoryBagsInScene:add(guid)\r\n    local guids = Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\n    table.insert(guids, guid)\r\n    Global.setTable(self.NAME_OF_GLOBAL_VARIABLE, guids)\r\nend\r\n\r\nfunction AllMemoryBagsInScene:getGuidList()\r\n    return Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\nend\r\n","LuaScriptState":"{\"ml\":{\"018503\":{\"lock\":true,\"pos\":{\"x\":-2.00000023841858,\"y\":1.5212390422821,\"z\":22},\"rot\":{\"x\":0.0108911646530032,\"y\":180.004104614258,\"z\":0.00494906445965171},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"026422\":{\"lock\":false,\"pos\":{\"x\":-25.5,\"y\":1.8103,\"z\":14.5},\"rot\":{\"x\":0,\"y\":180.0005,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"02ae6a\":{\"lock\":false,\"pos\":{\"x\":11.5,\"y\":1.50361704826355,\"z\":7},\"rot\":{\"x\":-0.00494689028710127,\"y\":269.994964599609,\"z\":0.0108989579603076},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"186784\":{\"lock\":false,\"pos\":{\"x\":-2.00010013580322,\"y\":1.50706398487091,\"z\":18.9997005462646},\"rot\":{\"x\":359.989105224609,\"y\":-0.00553695019334555,\"z\":-0.00495276413857937},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"1a633b\":{\"lock\":false,\"pos\":{\"x\":-25.5,\"y\":1.8103,\"z\":14.5},\"rot\":{\"x\":0,\"y\":180,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"20b764\":{\"lock\":false,\"pos\":{\"x\":-29.500358581543,\"y\":1.80067420005798,\"z\":2.49964332580566},\"rot\":{\"x\":-4.08625453474087E-08,\"y\":89.9990386962891,\"z\":4.74453599963454E-06},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"2da9ab\":{\"lock\":false,\"pos\":{\"x\":7,\"y\":1.5048611164093,\"z\":11.5},\"rot\":{\"x\":359.989105224609,\"y\":359.989624023438,\"z\":-0.00494987005367875},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"2efca1\":{\"lock\":true,\"pos\":{\"x\":16,\"y\":1.51854383945465,\"z\":15.9993000030518},\"rot\":{\"x\":0.0109434621408582,\"y\":179.391189575195,\"z\":0.00483223656192422},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"43be5c\":{\"lock\":false,\"pos\":{\"x\":3.49999976158142,\"y\":1.50278723239899,\"z\":-1.00000095367432},\"rot\":{\"x\":0.00495261605829,\"y\":90.0256271362305,\"z\":359.989105224609},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"483a34\":{\"lock\":false,\"pos\":{\"x\":10.4999990463257,\"y\":1.50218272209167,\"z\":-1.0000011920929},\"rot\":{\"x\":0.00494768423959613,\"y\":90.0001602172852,\"z\":359.989105224609},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"5d5269\":{\"lock\":false,\"pos\":{\"x\":-34.500659942627,\"y\":1.77890622615814,\"z\":2.99943542480469},\"rot\":{\"x\":-5.01305657962803E-06,\"y\":180.000061035156,\"z\":1.70149458966762E-08},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"5e20af\":{\"lock\":false,\"pos\":{\"x\":2.5,\"y\":1.50677049160004,\"z\":19.5},\"rot\":{\"x\":359.988800048828,\"y\":315.009674072266,\"z\":0.00420216424390674},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"61f6d6\":{\"lock\":true,\"pos\":{\"x\":-2.00000023841858,\"y\":1.52009844779968,\"z\":16},\"rot\":{\"x\":0.0108914086595178,\"y\":180.001083374023,\"z\":0.00494837993755937},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"6d7ffc\":{\"lock\":false,\"pos\":{\"x\":-20.9999,\"y\":1.8103,\"z\":14.5},\"rot\":{\"x\":0,\"y\":180.0008,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"7234af\":{\"lock\":false,\"pos\":{\"x\":7,\"y\":1.50324535369873,\"z\":3},\"rot\":{\"x\":359.989105224609,\"y\":359.989624023438,\"z\":-0.00494975876063108},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"78362e\":{\"lock\":false,\"pos\":{\"x\":7,\"y\":1.50666701793671,\"z\":21},\"rot\":{\"x\":359.989105224609,\"y\":359.989624023438,\"z\":-0.00495007121935487},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"78ec4f\":{\"lock\":false,\"pos\":{\"x\":-25.5,\"y\":1.7789,\"z\":14.5},\"rot\":{\"x\":0,\"y\":180.0006,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"79f8de\":{\"lock\":false,\"pos\":{\"x\":3,\"y\":1.6016,\"z\":-6.5},\"rot\":{\"x\":0.0172,\"y\":180.011,\"z\":0.0057},\"tint\":{\"a\":1,\"b\":0.701960802078247,\"g\":0.800000011920929,\"r\":0.874509811401367}},\"7da4bb\":{\"lock\":false,\"pos\":{\"x\":7,\"y\":1.51761031150818,\"z\":7},\"rot\":{\"x\":0.010891524143517,\"y\":179.999801635742,\"z\":0.00494821090251207},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"83e5f3\":{\"lock\":false,\"pos\":{\"x\":-20.9998,\"y\":1.8296,\"z\":14.5},\"rot\":{\"x\":0,\"y\":180.0002,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"87c21f\":{\"lock\":false,\"pos\":{\"x\":11.5,\"y\":1.50532793998718,\"z\":15.9999990463257},\"rot\":{\"x\":-0.00494702626019716,\"y\":269.994812011719,\"z\":0.0108960000798106},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"888c37\":{\"lock\":false,\"pos\":{\"x\":-2.00010013580322,\"y\":1.50592350959778,\"z\":12.9996995925903},\"rot\":{\"x\":359.989105224609,\"y\":359.979217529297,\"z\":-0.00494803069159389},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"94d30e\":{\"lock\":true,\"pos\":{\"x\":15.5000009536743,\"y\":1.51687633991241,\"z\":6.99999952316284},\"rot\":{\"x\":0.0108915064483881,\"y\":180.000289916992,\"z\":0.00494827469810843},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"9554e4\":{\"lock\":false,\"pos\":{\"x\":30.4999008178711,\"y\":1.7772730588913,\"z\":-3.00009989738464},\"rot\":{\"x\":-0.000591193151194602,\"y\":180.001586914063,\"z\":180.001068115234},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"9eee13\":{\"lock\":true,\"pos\":{\"x\":13.5,\"y\":1.51552832126617,\"z\":-1.00000071525574},\"rot\":{\"x\":0.0108915511518717,\"y\":179.999588012695,\"z\":0.00494825886562467},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"aaf560\":{\"lock\":false,\"pos\":{\"x\":7,\"y\":1.52103197574615,\"z\":25},\"rot\":{\"x\":0.010891149751842,\"y\":180.00553894043,\"z\":0.00494936155155301},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"b80c83\":{\"lock\":false,\"pos\":{\"x\":12.5000038146973,\"y\":1.53161799907684,\"z\":-5.99991178512573},\"rot\":{\"x\":0.00494865886867046,\"y\":90.0030899047852,\"z\":359.989105224609},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"cbdef8\":{\"lock\":false,\"pos\":{\"x\":2.5,\"y\":1.50543987751007,\"z\":12.5},\"rot\":{\"x\":-0.00420288322493434,\"y\":44.9994926452637,\"z\":359.988800048828},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"d21349\":{\"lock\":false,\"pos\":{\"x\":-22.5003280639648,\"y\":1.80067420005798,\"z\":2.49976754188538},\"rot\":{\"x\":-1.49769007862233E-07,\"y\":89.9979782104492,\"z\":4.71433122584131E-06},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"d45a71\":{\"lock\":false,\"pos\":{\"x\":2.99999952316284,\"y\":1.50368583202362,\"z\":3.49999856948853},\"rot\":{\"x\":-0.00420210929587483,\"y\":45.0046615600586,\"z\":359.988800048828},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"d9bd42\":{\"lock\":false,\"pos\":{\"x\":-26.0003452301025,\"y\":1.80067420005798,\"z\":2.49965405464172},\"rot\":{\"x\":-4.57026878564193E-08,\"y\":90.0072326660156,\"z\":5.07956292494782E-06},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"e339e5\":{\"lock\":false,\"pos\":{\"x\":7,\"y\":1.51932120323181,\"z\":16},\"rot\":{\"x\":0.0108915325254202,\"y\":180.000015258789,\"z\":0.00494823046028614},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"e47391\":{\"lock\":false,\"pos\":{\"x\":-29.5,\"y\":1.8353,\"z\":7.5},\"rot\":{\"x\":0,\"y\":179.9848,\"z\":0},\"tint\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1}},\"e7750b\":{\"lock\":false,\"pos\":{\"x\":15.5000009536743,\"y\":1.50412702560425,\"z\":11.5},\"rot\":{\"x\":359.989105224609,\"y\":359.989562988281,\"z\":-0.00495501095429063},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"ebdf49\":{\"lock\":false,\"pos\":{\"x\":-34.4996452331543,\"y\":1.80067372322083,\"z\":7.50004911422729},\"rot\":{\"x\":-5.07742561239866E-06,\"y\":179.98811340332,\"z\":-1.40754380595354E-07},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"ed0d92\":{\"lock\":false,\"pos\":{\"x\":23.5000991821289,\"y\":1.51380920410156,\"z\":-5.50000810623169},\"rot\":{\"x\":0.0108918426558375,\"y\":179.995819091797,\"z\":0.00494753662496805},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"f81b6d\":{\"lock\":false,\"pos\":{\"x\":2.5,\"y\":1.50610518455505,\"z\":16},\"rot\":{\"x\":-0.00494663137942553,\"y\":269.995086669922,\"z\":0.0108988527208567},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"fa4366\":{\"lock\":false,\"pos\":{\"x\":11,\"y\":1.50299489498138,\"z\":3.5},\"rot\":{\"x\":359.988800048828,\"y\":314.990203857422,\"z\":0.0042062564752996},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"fccb36\":{\"lock\":true,\"pos\":{\"x\":-6.09273484997175E-08,\"y\":1.51669418811798,\"z\":-1.00000047683716},\"rot\":{\"x\":0.0108914328739047,\"y\":180.000610351563,\"z\":0.0049484702758491},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"fdfeeb\":{\"lock\":true,\"pos\":{\"x\":-2.00000023841858,\"y\":1.51895797252655,\"z\":10},\"rot\":{\"x\":0.0108911823481321,\"y\":180.004180908203,\"z\":0.0049490169622004},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"fe4064\":{\"lock\":false,\"pos\":{\"x\":-26,\"y\":1.49346446990967,\"z\":-5.5},\"rot\":{\"x\":-8.01430246610835E-08,\"y\":180,\"z\":-3.25192992534085E-08},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"ff2fa7\":{\"lock\":true,\"pos\":{\"x\":7,\"y\":1.51608967781067,\"z\":-1.00000047683716},\"rot\":{\"x\":0.0108921425417066,\"y\":179.992004394531,\"z\":0.00494667468592525},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}}}}","XmlUI":"","ContainedObjects":[{"GUID":"018503","Name":"CardCustom","Transform":{"posX":-2.00000024,"posY":1.521239,"posZ":22,"rotX":0.0108911656,"rotY":180.0041,"rotZ":0.00494906446,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":true,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":1106400,"SidewaysCard":false,"CustomDeck":{"11064":{"FaceURL":"http://cloud-3.steamusercontent.com/ugc/1874087573755616213/4BA2D77C786D6072A7ECBD7B99A0A7C3C2048E41/","BackURL":"http://cloud-3.steamusercontent.com/ugc/1874087573755616213/4BA2D77C786D6072A7ECBD7B99A0A7C3C2048E41/","NumWidth":1,"NumHeight":1,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"02ae6a","Name":"Custom_Tile","Transform":{"posX":11.5,"posY":1.503617,"posZ":7,"rotX":-0.00494693173,"rotY":269.994965,"rotZ":0.0108989859,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/vppt2my.png","ImageSecondaryURL":"https://i.imgur.com/vppt2my.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":"","States":{"2":{"GUID":"4d3553","Name":"Custom_Tile","Transform":{"posX":-17.11995,"posY":1.60650957,"posZ":3.85999179,"rotX":359.9831,"rotY":359.984558,"rotZ":359.920074,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/HyfE8m8.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""},"3":{"GUID":"5b38c6","Name":"Custom_Tile","Transform":{"posX":-17.1199474,"posY":1.60650969,"posZ":3.85999274,"rotX":359.983124,"rotY":359.984467,"rotZ":359.9201,"scaleX":0.8,"scaleY":1,"scaleZ":0.8},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/dHKBLoD.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""}}},{"GUID":"186784","Name":"Custom_Tile","Transform":{"posX":-2.00010061,"posY":1.507064,"posZ":18.9997,"rotX":359.9891,"rotY":-0.005505508,"rotZ":-0.00495094,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/vppt2my.png","ImageSecondaryURL":"https://i.imgur.com/vppt2my.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":"","States":{"2":{"GUID":"4d3553","Name":"Custom_Tile","Transform":{"posX":-17.11995,"posY":1.60650957,"posZ":3.85999179,"rotX":359.9831,"rotY":359.984558,"rotZ":359.920074,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/HyfE8m8.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""},"3":{"GUID":"5b38c6","Name":"Custom_Tile","Transform":{"posX":-17.1199474,"posY":1.60650969,"posZ":3.85999274,"rotX":359.983124,"rotY":359.984467,"rotZ":359.9201,"scaleX":0.8,"scaleY":1,"scaleZ":0.8},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/dHKBLoD.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""}}},{"GUID":"1a633b","Name":"Deck","Transform":{"posX":-25.5,"posY":1.81030118,"posZ":14.499999,"rotX":-0.000005266571,"rotY":180,"rotZ":3.01672173e-7,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Chemin Divergeant","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":false,"SidewaysCard":false,"DeckIDs":[119106,276125,119104,119105,119107],"CustomDeck":{"1191":{"FaceURL":"https://i.imgur.com/VuuFOhX.jpg","BackURL":"https://i.imgur.com/Mpk9C04.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0},"2761":{"FaceURL":"https://i.imgur.com/FVWxpyu.jpg","BackURL":"https://i.imgur.com/EmJxccn.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":"","ContainedObjects":[{"GUID":"1bc6ac","Name":"Card","Transform":{"posX":-25.5,"posY":4.865705,"posZ":14.4999971,"rotX":-0.00000520180947,"rotY":180.000092,"rotZ":3.580023e-7,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Chemin Divergent","Description":"Dunwich. Bois.\r","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02288\",\n  \"locationBack\": {\n    \"connections\": \"Triangle|Hourglass\",\n    \"icons\": \"Plus|DivergingPath\",\n    \"uses\": {\n      \"countPerInvestigator\": 1,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    }\n  },\n  \"locationFront\": {\n    \"connections\": \"\",\n    \"icons\": \"DivergingPath\"\n  },\n  \"traits\": \"Dunwich. Woods.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":119106,"SidewaysCard":false,"CustomDeck":{"1191":{"FaceURL":"https://i.imgur.com/VuuFOhX.jpg","BackURL":"https://i.imgur.com/Mpk9C04.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"68aad5","Name":"Card","Transform":{"posX":-25.5,"posY":5.065705,"posZ":14.4999971,"rotX":-0.00000520180947,"rotY":180.000092,"rotZ":3.580023e-7,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Chemin Divergent","Description":"","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"51050\",\n  \"locationBack\": {\n    \"connections\": \"Triangle|Clover\",\n    \"icons\": \"Apostrophe\",\n    \"uses\": {\n      \"countPerInvestigator\": 1,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    }\n  },\n  \"traits\": \"Dunwich. Woods.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276125,"SidewaysCard":false,"CustomDeck":{"2761":{"FaceURL":"https://i.imgur.com/FVWxpyu.jpg","BackURL":"https://i.imgur.com/EmJxccn.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"8a2a4c","Name":"Card","Transform":{"posX":-25.5,"posY":5.26570463,"posZ":14.4999971,"rotX":-0.00000520180947,"rotY":180.000092,"rotZ":3.580023e-7,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Chemin Divergent","Description":"Dunwich. Bois.\r","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02287\",\n  \"locationBack\": {\n    \"connections\": \"Triangle|SlantedEquals\",\n    \"icons\": \"Tilde|DivergingPath\"\n  },\n  \"locationFront\": {\n    \"connections\": \"\",\n    \"icons\": \"DivergingPath\"\n  },\n  \"traits\": \"Dunwich. Woods.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":119104,"SidewaysCard":false,"CustomDeck":{"1191":{"FaceURL":"https://i.imgur.com/VuuFOhX.jpg","BackURL":"https://i.imgur.com/Mpk9C04.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"78ec4f","Name":"Card","Transform":{"posX":-25.5,"posY":5.465705,"posZ":14.4999971,"rotX":-0.00000520180947,"rotY":180.000092,"rotZ":3.580023e-7,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Chemin Divergent","Description":"Dunwich. Bois.\r","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02285\",\n  \"locationBack\": {\n    \"connections\": \"Triangle|Hourglass\",\n    \"icons\": \"Plus|DivergingPath\",\n    \"uses\": {\n      \"countPerInvestigator\": 1,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    }\n  },\n  \"locationFront\": {\n    \"connections\": \"\",\n    \"icons\": \"DivergingPath\"\n  },\n  \"traits\": \"Dunwich. Woods.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":119105,"SidewaysCard":false,"CustomDeck":{"1191":{"FaceURL":"https://i.imgur.com/VuuFOhX.jpg","BackURL":"https://i.imgur.com/Mpk9C04.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"37cde1","Name":"Card","Transform":{"posX":-25.5,"posY":1.89464664,"posZ":14.4999971,"rotX":0.0029842176,"rotY":180.000092,"rotZ":-0.00353765488,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Chemin Divergent","Description":"Dunwich. Bois.\r","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02286\",\n  \"locationBack\": {\n    \"connections\": \"Triangle|Plus\",\n    \"icons\": \"Hourglass|DivergingPath\",\n    \"uses\": {\n      \"countPerInvestigator\": 1,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    }\n  },\n  \"locationFront\": {\n    \"connections\": \"\",\n    \"icons\": \"DivergingPath\"\n  },\n  \"traits\": \"Dunwich. Woods.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":119107,"SidewaysCard":false,"CustomDeck":{"1191":{"FaceURL":"https://i.imgur.com/VuuFOhX.jpg","BackURL":"https://i.imgur.com/Mpk9C04.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""}]},{"GUID":"20b764","Name":"Deck","Transform":{"posX":-29.5003681,"posY":1.80067408,"posZ":2.499635,"rotX":-7.460981e-8,"rotY":89.9990158,"rotZ":0.000005019626,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Deck Acte v. I","Description":"Là où le Destin Attend","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":false,"SidewaysCard":true,"DeckIDs":[119206,119203,559600],"CustomDeck":{"1192":{"FaceURL":"https://i.imgur.com/gByrFzz.jpg","BackURL":"https://i.imgur.com/Ta6eG4n.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0},"5596":{"FaceURL":"http://cloud-3.steamusercontent.com/ugc/1770458304230390163/86745DFEBB91452AFFC6E625602BB716D5690406/","BackURL":"http://cloud-3.steamusercontent.com/ugc/1770458304230389073/6BDD166DCE2126F67E1F627756B17A6B02E5061D/","NumWidth":1,"NumHeight":1,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":"","ContainedObjects":[{"GUID":"3d9507","Name":"Card","Transform":{"posX":-29.5003738,"posY":5.056078,"posZ":2.499628,"rotX":2.04866808e-7,"rotY":89.99909,"rotZ":0.000004326226,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Le Portail s'Ouvre","Description":"Acte 3a","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"clueThresholdPerInvestigator\": 2,\n  \"cycle\": \"Standalone\",\n  \"id\": \"02281\",\n  \"type\": \"Act\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":119206,"SidewaysCard":true,"CustomDeck":{"1192":{"FaceURL":"https://i.imgur.com/gByrFzz.jpg","BackURL":"https://i.imgur.com/Ta6eG4n.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"16c617","Name":"Card","Transform":{"posX":-29.5003738,"posY":4.85607767,"posZ":2.499628,"rotX":2.04866808e-7,"rotY":89.99909,"rotZ":0.000004326226,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Gravir la Colline (v. I)","Description":"Acte 2a","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02278\",\n  \"type\": \"Act\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":119203,"SidewaysCard":true,"CustomDeck":{"1192":{"FaceURL":"https://i.imgur.com/gByrFzz.jpg","BackURL":"https://i.imgur.com/Ta6eG4n.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"6b8d34","Name":"CardCustom","Transform":{"posX":-29.5003738,"posY":1.87733042,"posZ":2.499628,"rotX":0.00219055451,"rotY":89.99909,"rotZ":-0.00162889087,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Le Chemin vers la Colline","Description":"Acte 1a","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"clueThresholdPerInvestigator\": 2,\n  \"cycle\": \"Standalone\",\n  \"id\": \"02277\",\n  \"type\": \"Act\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":559600,"SidewaysCard":true,"CustomDeck":{"5596":{"FaceURL":"http://cloud-3.steamusercontent.com/ugc/1770458304230390163/86745DFEBB91452AFFC6E625602BB716D5690406/","BackURL":"http://cloud-3.steamusercontent.com/ugc/1770458304230389073/6BDD166DCE2126F67E1F627756B17A6B02E5061D/","NumWidth":1,"NumHeight":1,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""}]},{"GUID":"2da9ab","Name":"Custom_Tile","Transform":{"posX":7,"posY":1.50486112,"posZ":11.5,"rotX":359.9891,"rotY":359.989624,"rotZ":-0.004949909,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/vppt2my.png","ImageSecondaryURL":"https://i.imgur.com/vppt2my.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":"","States":{"2":{"GUID":"4d3553","Name":"Custom_Tile","Transform":{"posX":-17.11995,"posY":1.60650957,"posZ":3.85999179,"rotX":359.9831,"rotY":359.984558,"rotZ":359.920074,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/HyfE8m8.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""},"3":{"GUID":"5b38c6","Name":"Custom_Tile","Transform":{"posX":-17.1199474,"posY":1.60650969,"posZ":3.85999274,"rotX":359.983124,"rotY":359.984467,"rotZ":359.9201,"scaleX":0.8,"scaleY":1,"scaleZ":0.8},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/dHKBLoD.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""}}},{"GUID":"2efca1","Name":"CardCustom","Transform":{"posX":16,"posY":1.51854384,"posZ":15.9993,"rotX":0.0109434621,"rotY":179.39119,"rotZ":0.00483223656,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":true,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":1106500,"SidewaysCard":false,"CustomDeck":{"11065":{"FaceURL":"http://cloud-3.steamusercontent.com/ugc/1874087573755654274/E1C516725CC32556A9F093B96384451BDB4AB8D1/","BackURL":"http://cloud-3.steamusercontent.com/ugc/1874087573755654274/E1C516725CC32556A9F093B96384451BDB4AB8D1/","NumWidth":1,"NumHeight":1,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"43be5c","Name":"Custom_Tile","Transform":{"posX":3.49999976,"posY":1.50278723,"posZ":-1.00000155,"rotX":0.00495243631,"rotY":90.02566,"rotZ":359.9891,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/vppt2my.png","ImageSecondaryURL":"https://i.imgur.com/vppt2my.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":"","States":{"2":{"GUID":"4d3553","Name":"Custom_Tile","Transform":{"posX":-17.11995,"posY":1.60650957,"posZ":3.85999179,"rotX":359.9831,"rotY":359.984558,"rotZ":359.920074,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/HyfE8m8.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""},"3":{"GUID":"5b38c6","Name":"Custom_Tile","Transform":{"posX":-17.1199474,"posY":1.60650969,"posZ":3.85999274,"rotX":359.983124,"rotY":359.984467,"rotZ":359.9201,"scaleX":0.8,"scaleY":1,"scaleZ":0.8},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/dHKBLoD.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""}}},{"GUID":"483a34","Name":"Custom_Tile","Transform":{"posX":10.499999,"posY":1.50218272,"posZ":-1.00000179,"rotX":0.00494775735,"rotY":90.00019,"rotZ":359.9891,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/vppt2my.png","ImageSecondaryURL":"https://i.imgur.com/vppt2my.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":"","States":{"2":{"GUID":"4d3553","Name":"Custom_Tile","Transform":{"posX":-17.11995,"posY":1.60650957,"posZ":3.85999179,"rotX":359.9831,"rotY":359.984558,"rotZ":359.920074,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/HyfE8m8.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""},"3":{"GUID":"5b38c6","Name":"Custom_Tile","Transform":{"posX":-17.1199474,"posY":1.60650969,"posZ":3.85999274,"rotX":359.983124,"rotY":359.984467,"rotZ":359.9201,"scaleX":0.8,"scaleY":1,"scaleZ":0.8},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/dHKBLoD.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""}}},{"GUID":"5d5269","Name":"Card","Transform":{"posX":-34.5006638,"posY":1.77890623,"posZ":2.99943066,"rotX":-0.00000503397541,"rotY":180.000122,"rotZ":1.7663919e-7,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Seth Bishop","Description":"Sorcier de Dunwich","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"health\": 3,\n  \"healthPerInv\": \"true\",\n  \"id\": \"02293\",\n  \"traits\": \"Humanoid. Sorcerer. Elite.\",\n  \"type\": \"Enemy\",\n  \"victory\": 1\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":16210,"SidewaysCard":false,"CustomDeck":{"162":{"FaceURL":"https://i.imgur.com/EEPF7vQ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"5e20af","Name":"Custom_Tile","Transform":{"posX":2.50000024,"posY":1.50677049,"posZ":19.5,"rotX":359.9888,"rotY":315.009674,"rotZ":0.00420429,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/vppt2my.png","ImageSecondaryURL":"https://i.imgur.com/vppt2my.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":"","States":{"2":{"GUID":"4d3553","Name":"Custom_Tile","Transform":{"posX":-17.11995,"posY":1.60650957,"posZ":3.85999179,"rotX":359.9831,"rotY":359.984558,"rotZ":359.920074,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/HyfE8m8.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""},"3":{"GUID":"5b38c6","Name":"Custom_Tile","Transform":{"posX":-17.1199474,"posY":1.60650969,"posZ":3.85999274,"rotX":359.983124,"rotY":359.984467,"rotZ":359.9201,"scaleX":0.8,"scaleY":1,"scaleZ":0.8},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/dHKBLoD.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""}}},{"GUID":"61f6d6","Name":"CardCustom","Transform":{"posX":-2.00000024,"posY":1.52009845,"posZ":16,"rotX":0.0108914087,"rotY":180.001083,"rotZ":0.00494838,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":true,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":1106600,"SidewaysCard":false,"CustomDeck":{"11066":{"FaceURL":"http://cloud-3.steamusercontent.com/ugc/1874087573755655756/F61AC3EADD445ABDD7DDEBA1DE6E775F79C68086/","BackURL":"http://cloud-3.steamusercontent.com/ugc/1874087573755655756/F61AC3EADD445ABDD7DDEBA1DE6E775F79C68086/","NumWidth":1,"NumHeight":1,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"7234af","Name":"Custom_Tile","Transform":{"posX":7,"posY":1.50324535,"posZ":2.99999976,"rotX":359.9891,"rotY":359.989624,"rotZ":-0.00494906073,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/vppt2my.png","ImageSecondaryURL":"https://i.imgur.com/vppt2my.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":"","States":{"2":{"GUID":"4d3553","Name":"Custom_Tile","Transform":{"posX":-17.11995,"posY":1.60650957,"posZ":3.85999179,"rotX":359.9831,"rotY":359.984558,"rotZ":359.920074,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/HyfE8m8.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""},"3":{"GUID":"5b38c6","Name":"Custom_Tile","Transform":{"posX":-17.1199474,"posY":1.60650969,"posZ":3.85999274,"rotX":359.983124,"rotY":359.984467,"rotZ":359.9201,"scaleX":0.8,"scaleY":1,"scaleZ":0.8},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/dHKBLoD.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""}}},{"GUID":"78362e","Name":"Custom_Tile","Transform":{"posX":7,"posY":1.506667,"posZ":21,"rotX":359.9891,"rotY":359.989624,"rotZ":-0.00495024864,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/vppt2my.png","ImageSecondaryURL":"https://i.imgur.com/vppt2my.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":"","States":{"2":{"GUID":"4d3553","Name":"Custom_Tile","Transform":{"posX":-17.11995,"posY":1.60650957,"posZ":3.85999179,"rotX":359.9831,"rotY":359.984558,"rotZ":359.920074,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/HyfE8m8.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""},"3":{"GUID":"5b38c6","Name":"Custom_Tile","Transform":{"posX":-17.1199474,"posY":1.60650969,"posZ":3.85999274,"rotX":359.983124,"rotY":359.984467,"rotZ":359.9201,"scaleX":0.8,"scaleY":1,"scaleZ":0.8},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/dHKBLoD.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""}}},{"GUID":"79f8de","Name":"Custom_Tile","Transform":{"posX":2.99999738,"posY":1.60163224,"posZ":-6.499996,"rotX":0.0171794724,"rotY":180.011,"rotZ":0.005656274,"scaleX":1.6428808,"scaleY":1,"scaleZ":1.6428808},"Nickname":"Mise en place du Chaos Bag","Description":"VI : Là où le Destin Attend","GMNotes":"{\"data\":\"Where Doom Awaits\",\"easy\":false,\"expert\":false,\"hard\":false,\"normal\":false,\"standalone\":true}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.8745098,"g":0.8,"b":0.7019608},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"http://cloud-3.steamusercontent.com/ugc/2011456161884106028/81BF2DAD34FE18B6788B56E21F16B81E6525AD99/","ImageSecondaryURL":"http://cloud-3.steamusercontent.com/ugc/2011456161884106028/81BF2DAD34FE18B6788B56E21F16B81E6525AD99/","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"\r\njacqueline_guid = '42cd6e'\r\n\r\nbuttonparams = {\r\n   ['easy'] = {label = \"Facile\", click_function = 'modeEasy', z_i = -0.2},\r\n   ['normal'] = {label = \"Standard\", click_function = 'modeNormal', z_i = 0.1},\r\n   ['hard'] = {label = \"Difficile\", click_function = 'modeHard', z_i = 0.4},\r\n   ['expert'] = {label = \"Expert\", click_function = 'modeExpert', z_i = 0.7},\r\n   ['standalone'] = {label = \"Indépendant\", click_function = 'modeStandalone', z_i = 0},\r\n}\r\n\r\nfunction onLoad()\r\n\r\n    metadata = JSON.decode(self.getGMNotes())\r\n    buttontable = {}\r\n    for key, value in pairs(buttonparams) do\r\n        if metadata[key] == true then\r\n            table.insert(buttontable,value)\r\n        end\r\n        \r\n    end\r\n\r\n    for _, button in pairs(buttontable) do\r\n        local data = {\r\n            click_function = button.click_function, \r\n            function_owner = self, \r\n            label = button.label, \r\n            position = {0, 0.1, button.z_i}, \r\n            scale = {0.3, 0.5, 0.3}, \r\n            width = 1500, \r\n            height = 400, \r\n            font_size = 250, \r\n            tooltip = \"Chaos bag du mode \"..button.label,\r\n            color = {0.5647, 0.4627, 0.2353, 1}, \r\n            font_color = {0.9041, 0.8313, 0.7356, 1},\r\n            hover_color = {99/255, 85/255, 48/255},\r\n            press_color = {192/255, 152/255, 94/255} }\r\n        self.createButton(data)\r\n        \r\n    end\r\n    jacqueline = getObjectFromGUID(jacqueline_guid)\r\n    chaosdata = jacqueline.getTable('chaosdata')\r\nend\r\n\r\nfunction modeEasy()\r\n    local  params ={}\r\n     params.mode = 'easy'\r\n     params.data = metadata.data\r\n     jacqueline.call('setChaosBag', params)\r\n  \r\nend\r\n\r\nfunction modeNormal()\r\n      local  params ={}\r\n       params.mode = 'normal'\r\n       params.data = metadata.data\r\n       jacqueline.call('setChaosBag', params)\r\n    \r\nend\r\n\r\nfunction modeHard()\r\n    local  params ={}\r\n     params.mode = 'hard'\r\n     params.data = metadata.data\r\n     jacqueline.call('setChaosBag', params)\r\n  \r\nend\r\n\r\nfunction modeExpert()\r\n    local  params ={}\r\n     params.mode = 'expert'\r\n     params.data = metadata.data\r\n     jacqueline.call('setChaosBag', params)\r\n  \r\nend\r\n\r\nfunction modeStandalone()\r\n    local  params ={}\r\n     params.mode = 'standalone'\r\n     params.data = metadata.data\r\n     jacqueline.call('setChaosBag', params)\r\n  \r\nend","LuaScriptState":"","XmlUI":""},{"GUID":"7da4bb","Name":"Card","Transform":{"posX":7,"posY":1.51761031,"posZ":7,"rotX":0.0108915363,"rotY":179.999786,"rotZ":0.00494816154,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"51048\",\n  \"locationBack\": {\n    \"connections\": \"Square|Plus|Tilde|Hourglass|Apostrophe|DivergingPath\",\n    \"icons\": \"Triangle\",\n    \"uses\": {\n      \"count\": 3,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    }\n  },\n  \"locationFront\": {\n    \"connections\": \"Square|Plus|Tilde|Hourglass|Apostrophe|DivergingPath\",\n    \"icons\": \"Triangle\"\n  },\n  \"traits\": \"Dunwich. Sentinel Hill.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276123,"SidewaysCard":false,"CustomDeck":{"2761":{"FaceURL":"https://i.imgur.com/FVWxpyu.jpg","BackURL":"https://i.imgur.com/EmJxccn.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"83e5f3","Name":"Deck","Transform":{"posX":-20.9997978,"posY":1.81030118,"posZ":14.500001,"rotX":-0.000004926627,"rotY":180.000183,"rotZ":6.2680607e-7,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Chemin Altéré","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":false,"SidewaysCard":false,"DeckIDs":[119108,276126,119111,119110,119109],"CustomDeck":{"1191":{"FaceURL":"https://i.imgur.com/VuuFOhX.jpg","BackURL":"https://i.imgur.com/Mpk9C04.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0},"2761":{"FaceURL":"https://i.imgur.com/FVWxpyu.jpg","BackURL":"https://i.imgur.com/EmJxccn.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":"","ContainedObjects":[{"GUID":"f7c247","Name":"Card","Transform":{"posX":-20.99979,"posY":4.865705,"posZ":14.5000067,"rotX":-0.00000525208361,"rotY":180.000336,"rotZ":1.2347661e-7,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Chemin Altéré","Description":"Dunwich. Bois. Altéré.\r","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02291\",\n  \"locationBack\": {\n    \"connections\": \"Square|Tee\",\n    \"icons\": \"Crescent|AlteredPath\",\n    \"uses\": {\n      \"countPerInvestigator\": 1,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    }\n  },\n  \"locationFront\": {\n    \"connections\": \"\",\n    \"icons\": \"AlteredPath\"\n  },\n  \"traits\": \"Dunwich. Woods. Altered.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":119108,"SidewaysCard":false,"CustomDeck":{"1191":{"FaceURL":"https://i.imgur.com/VuuFOhX.jpg","BackURL":"https://i.imgur.com/Mpk9C04.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"3ea4f2","Name":"Card","Transform":{"posX":-20.99979,"posY":5.065705,"posZ":14.5000067,"rotX":-0.00000525208361,"rotY":180.000336,"rotZ":1.2347661e-7,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Chemin Altéré","Description":"","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"51051\",\n  \"locationBack\": {\n    \"connections\": \"Square|Apostrophe\",\n    \"icons\": \"Clover|AlteredPath\",\n    \"uses\": {\n      \"countPerInvestigator\": 1,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    }\n  },\n  \"locationFront\": {\n    \"connections\": \"\",\n    \"icons\": \"AlteredPath\"\n  },\n  \"traits\": \"Dunwich. Woods. Altered.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276126,"SidewaysCard":false,"CustomDeck":{"2761":{"FaceURL":"https://i.imgur.com/FVWxpyu.jpg","BackURL":"https://i.imgur.com/EmJxccn.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"6be45e","Name":"Card","Transform":{"posX":-20.99979,"posY":5.26570463,"posZ":14.5000067,"rotX":-0.00000525208361,"rotY":180.000336,"rotZ":1.2347661e-7,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Chemin Altéré","Description":"Dunwich. Bois. Altéré.\r","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02290\",\n  \"locationBack\": {\n    \"connections\": \"Square|Tilde\",\n    \"icons\": \"SlantedEquals|AlteredPath\",\n    \"uses\": {\n      \"countPerInvestigator\": 1,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    }\n  },\n  \"locationFront\": {\n    \"connections\": \"\",\n    \"icons\": \"AlteredPath\"\n  },\n  \"traits\": \"Dunwich. Woods. Altered.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":119111,"SidewaysCard":false,"CustomDeck":{"1191":{"FaceURL":"https://i.imgur.com/VuuFOhX.jpg","BackURL":"https://i.imgur.com/Mpk9C04.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"3901fd","Name":"Card","Transform":{"posX":-20.99979,"posY":5.465705,"posZ":14.5000067,"rotX":-0.00000525208361,"rotY":180.000336,"rotZ":1.2347661e-7,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Chemin Altéré","Description":"Dunwich. Bois. Altéré.\r","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02292\",\n  \"locationBack\": {\n    \"connections\": \"Square|Crescent\",\n    \"icons\": \"Tee|AlteredPath\",\n    \"uses\": {\n      \"countPerInvestigator\": 1,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    }\n  },\n  \"locationFront\": {\n    \"connections\": \"\",\n    \"icons\": \"AlteredPath\"\n  },\n  \"traits\": \"Dunwich. Woods. Altered.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":119110,"SidewaysCard":false,"CustomDeck":{"1191":{"FaceURL":"https://i.imgur.com/VuuFOhX.jpg","BackURL":"https://i.imgur.com/Mpk9C04.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"b7e505","Name":"Card","Transform":{"posX":-20.99979,"posY":1.894564,"posZ":14.5000067,"rotX":0.00209905067,"rotY":180.000336,"rotZ":0.00230039959,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Chemin Altéré","Description":"Dunwich. Bois. Altéré.\r","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02289\",\n  \"locationBack\": {\n    \"connections\": \"Square|Crescent\",\n    \"icons\": \"Tee|AlteredPath\",\n    \"uses\": {\n      \"countPerInvestigator\": 1,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    }\n  },\n  \"locationFront\": {\n    \"connections\": \"\",\n    \"icons\": \"AlteredPath\"\n  },\n  \"traits\": \"Dunwich. Woods. Altered.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":119109,"SidewaysCard":false,"CustomDeck":{"1191":{"FaceURL":"https://i.imgur.com/VuuFOhX.jpg","BackURL":"https://i.imgur.com/Mpk9C04.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""}]},{"GUID":"87c21f","Name":"Custom_Tile","Transform":{"posX":11.5,"posY":1.50532794,"posZ":15.999999,"rotX":-0.00494679855,"rotY":269.9948,"rotZ":0.0108993035,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/vppt2my.png","ImageSecondaryURL":"https://i.imgur.com/vppt2my.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":"","States":{"2":{"GUID":"4d3553","Name":"Custom_Tile","Transform":{"posX":-17.11995,"posY":1.60650957,"posZ":3.85999179,"rotX":359.9831,"rotY":359.984558,"rotZ":359.920074,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/HyfE8m8.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""},"3":{"GUID":"5b38c6","Name":"Custom_Tile","Transform":{"posX":-17.1199474,"posY":1.60650969,"posZ":3.85999274,"rotX":359.983124,"rotY":359.984467,"rotZ":359.9201,"scaleX":0.8,"scaleY":1,"scaleZ":0.8},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/dHKBLoD.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""}}},{"GUID":"888c37","Name":"Custom_Tile","Transform":{"posX":-2.00010037,"posY":1.50592351,"posZ":12.9997,"rotX":359.9891,"rotY":359.979248,"rotZ":-0.00494840275,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/vppt2my.png","ImageSecondaryURL":"https://i.imgur.com/vppt2my.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":"","States":{"2":{"GUID":"4d3553","Name":"Custom_Tile","Transform":{"posX":-17.11995,"posY":1.60650957,"posZ":3.85999179,"rotX":359.9831,"rotY":359.984558,"rotZ":359.920074,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/HyfE8m8.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""},"3":{"GUID":"5b38c6","Name":"Custom_Tile","Transform":{"posX":-17.1199474,"posY":1.60650969,"posZ":3.85999274,"rotX":359.983124,"rotY":359.984467,"rotZ":359.9201,"scaleX":0.8,"scaleY":1,"scaleZ":0.8},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/dHKBLoD.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""}}},{"GUID":"94d30e","Name":"CardCustom","Transform":{"posX":15.500001,"posY":1.51687634,"posZ":6.99999952,"rotX":0.0108915064,"rotY":180.00029,"rotZ":0.004948274,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":true,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":1106700,"SidewaysCard":false,"CustomDeck":{"11067":{"FaceURL":"http://cloud-3.steamusercontent.com/ugc/1874087573755659049/9AF2DF88904D62C086CAAA295BE046CBE8E65415/","BackURL":"http://cloud-3.steamusercontent.com/ugc/1874087573755659049/9AF2DF88904D62C086CAAA295BE046CBE8E65415/","NumWidth":1,"NumHeight":1,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"9554e4","Name":"Deck","Transform":{"posX":30.4999,"posY":1.777273,"posZ":-3.0001,"rotX":-0.0005911285,"rotY":180.001587,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Deck Rencontre","Description":"Là où le Destin Attend","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":false,"SidewaysCard":false,"DeckIDs":[276015,276014,276013,276012,276025,276024,276023,276022,276021,276020,276019,276018,276017,276016,15928,15927,15931,15926,15930,15929,15509,15512,15508,15511,15515,15514,16717,16715,16716,16209,16714,16713,16711,16221,16219,16217,16216,16218,16215,16214,16213,16211,16212,16208],"CustomDeck":{"155":{"FaceURL":"https://i.imgur.com/7H57eeO.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0},"159":{"FaceURL":"https://i.imgur.com/7H57eeO.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0},"162":{"FaceURL":"https://i.imgur.com/EEPF7vQ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0},"167":{"FaceURL":"https://i.imgur.com/AdR3VIZ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0},"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":"","ContainedObjects":[{"GUID":"1c6a15","Name":"Card","Transform":{"posX":30.4999,"posY":12.8951788,"posZ":-3.0001,"rotX":0.00000636735649,"rotY":180.001572,"rotZ":180.0008,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"51066\",\n  \"traits\": \"Hazard.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276015,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"ae0230","Name":"Card","Transform":{"posX":30.4999,"posY":13.0326757,"posZ":-3.00010014,"rotX":-0.0005910795,"rotY":180.001572,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"51066\",\n  \"traits\": \"Hazard.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276014,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"728544","Name":"Card","Transform":{"posX":30.4999,"posY":12.8326759,"posZ":-3.00010014,"rotX":-0.0005910795,"rotY":180.001572,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"51067\",\n  \"traits\": \"Hazard.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276013,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"8fe840","Name":"Card","Transform":{"posX":30.4999,"posY":12.6326761,"posZ":-3.00010014,"rotX":-0.0005910795,"rotY":180.001572,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"51067\",\n  \"traits\": \"Hazard.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276012,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"cfa45a","Name":"Card","Transform":{"posX":30.4999,"posY":12.4326763,"posZ":-3.00010014,"rotX":-0.0005910795,"rotY":180.001572,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"51064\",\n  \"traits\": \"Omen.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276025,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"4126bc","Name":"Card","Transform":{"posX":30.4999,"posY":12.2326756,"posZ":-3.00010014,"rotX":-0.0005910795,"rotY":180.001572,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"51064\",\n  \"traits\": \"Omen.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276024,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"29c506","Name":"Card","Transform":{"posX":30.4999,"posY":12.0326757,"posZ":-3.00010014,"rotX":-0.0005910795,"rotY":180.001572,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"51064\",\n  \"traits\": \"Omen.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276023,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"cac119","Name":"Card","Transform":{"posX":30.4999,"posY":11.8326759,"posZ":-3.00010014,"rotX":-0.0005910795,"rotY":180.001572,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"51069\",\n  \"traits\": \"Terror.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276022,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"9ec9fe","Name":"Card","Transform":{"posX":30.4999,"posY":11.6326761,"posZ":-3.00010014,"rotX":-0.0005910795,"rotY":180.001572,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"51068\",\n  \"traits\": \"Terror.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276021,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"35b48f","Name":"Card","Transform":{"posX":30.4999,"posY":11.0951891,"posZ":-3.0001,"rotX":-0.000591019751,"rotY":180.001572,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"51070\",\n  \"traits\": \"Terror.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276020,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"b34f35","Name":"Card","Transform":{"posX":30.4999,"posY":11.2326756,"posZ":-3.00010014,"rotX":-0.0005910795,"rotY":180.001572,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"51069\",\n  \"traits\": \"Terror.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276019,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"7990a4","Name":"Card","Transform":{"posX":30.4999,"posY":11.0326757,"posZ":-3.00010014,"rotX":-0.0005910795,"rotY":180.001572,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"51070\",\n  \"traits\": \"Terror.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276018,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"57d787","Name":"Card","Transform":{"posX":30.4999,"posY":10.8326759,"posZ":-3.00010014,"rotX":-0.0005910795,"rotY":180.001572,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"51068\",\n  \"traits\": \"Terror.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276017,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"5c600e","Name":"Card","Transform":{"posX":30.4999,"posY":10.6326761,"posZ":-3.00010014,"rotX":-0.0005910795,"rotY":180.001572,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"51070\",\n  \"traits\": \"Terror.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276016,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"5683cc","Name":"Card","Transform":{"posX":30.4999,"posY":10.4326763,"posZ":-3.00010014,"rotX":-0.0005910795,"rotY":180.001572,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Mage de Yog-Sothoth","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"health\": 3,\n  \"id\": \"02087\",\n  \"traits\": \"Humanoid. Sorcerer.\",\n  \"type\": \"Enemy\",\n  \"victory\": 1\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":15928,"SidewaysCard":false,"CustomDeck":{"159":{"FaceURL":"https://i.imgur.com/7H57eeO.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"16346c","Name":"Card","Transform":{"posX":30.4999,"posY":10.2326756,"posZ":-3.00010014,"rotX":-0.0005910795,"rotY":180.001572,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Thrall","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"health\": 2,\n  \"id\": \"02086\",\n  \"traits\": \"Humanoid. Monster. Abomination.\",\n  \"type\": \"Enemy\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":15927,"SidewaysCard":false,"CustomDeck":{"159":{"FaceURL":"https://i.imgur.com/7H57eeO.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"f618d3","Name":"Card","Transform":{"posX":30.4999,"posY":10.0326757,"posZ":-3.00010014,"rotX":-0.0005910795,"rotY":180.001572,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Thrall","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"health\": 2,\n  \"id\": \"02086\",\n  \"traits\": \"Humanoid. Monster. Abomination.\",\n  \"type\": \"Enemy\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":15931,"SidewaysCard":false,"CustomDeck":{"159":{"FaceURL":"https://i.imgur.com/7H57eeO.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"0090a4","Name":"Card","Transform":{"posX":30.4999,"posY":9.832676,"posZ":-3.00010014,"rotX":-0.0005910795,"rotY":180.001572,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Thrall","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"health\": 2,\n  \"id\": \"02086\",\n  \"traits\": \"Humanoid. Monster. Abomination.\",\n  \"type\": \"Enemy\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":15926,"SidewaysCard":false,"CustomDeck":{"159":{"FaceURL":"https://i.imgur.com/7H57eeO.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"f31998","Name":"Card","Transform":{"posX":30.4999,"posY":9.632676,"posZ":-3.00010014,"rotX":-0.0005910795,"rotY":180.001572,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Lumière d'Aforgomon","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02085\",\n  \"traits\": \"Pact. Power.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":15930,"SidewaysCard":false,"CustomDeck":{"159":{"FaceURL":"https://i.imgur.com/7H57eeO.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"bdf835","Name":"Card","Transform":{"posX":30.4999,"posY":9.432676,"posZ":-3.00010014,"rotX":-0.0005910795,"rotY":180.001572,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Lumière d'Aforgomon","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02085\",\n  \"traits\": \"Pact. Power.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":15929,"SidewaysCard":false,"CustomDeck":{"159":{"FaceURL":"https://i.imgur.com/7H57eeO.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"b52985","Name":"Card","Transform":{"posX":30.4999,"posY":9.232676,"posZ":-3.00010014,"rotX":-0.0005910795,"rotY":180.001572,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Au-Delà du Voile","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02084\",\n  \"traits\": \"Hex.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":15509,"SidewaysCard":false,"CustomDeck":{"155":{"FaceURL":"https://i.imgur.com/7H57eeO.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"ed11ad","Name":"Card","Transform":{"posX":30.4999,"posY":9.032676,"posZ":-3.00010014,"rotX":-0.0005910795,"rotY":180.001572,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Au-Delà du Voile","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02084\",\n  \"traits\": \"Hex.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":15512,"SidewaysCard":false,"CustomDeck":{"155":{"FaceURL":"https://i.imgur.com/7H57eeO.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"cc2af0","Name":"Card","Transform":{"posX":30.4999,"posY":8.495179,"posZ":-3.0001,"rotX":0.000006469144,"rotY":180.001572,"rotZ":180.0008,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Au-Delà du Voile","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02084\",\n  \"traits\": \"Hex.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":15508,"SidewaysCard":false,"CustomDeck":{"155":{"FaceURL":"https://i.imgur.com/7H57eeO.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"3bd92a","Name":"Card","Transform":{"posX":30.4999,"posY":8.632676,"posZ":-3.00010014,"rotX":-0.0005910795,"rotY":180.001572,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Visions des Avenirs Passés","Description":"","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02083\",\n  \"traits\": \"Hex.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":15511,"SidewaysCard":false,"CustomDeck":{"155":{"FaceURL":"https://i.imgur.com/7H57eeO.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"5b9c33","Name":"Card","Transform":{"posX":30.4999,"posY":8.432676,"posZ":-3.00010014,"rotX":-0.0005910795,"rotY":180.001572,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Visions des Avenirs Passés","Description":"","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02083\",\n  \"traits\": \"Hex.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":15515,"SidewaysCard":false,"CustomDeck":{"155":{"FaceURL":"https://i.imgur.com/7H57eeO.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"92e0e2","Name":"Card","Transform":{"posX":30.4999,"posY":8.232676,"posZ":-3.00010014,"rotX":-0.0005910795,"rotY":180.001572,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Visions des Avenirs Passés","Description":"","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02083\",\n  \"traits\": \"Hex.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":15514,"SidewaysCard":false,"CustomDeck":{"155":{"FaceURL":"https://i.imgur.com/7H57eeO.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"3a2890","Name":"Card","Transform":{"posX":30.4999,"posY":8.032676,"posZ":-3.00010014,"rotX":-0.0005910795,"rotY":180.001572,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Bête Altérée","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02096\",\n  \"traits\": \"Power.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":16717,"SidewaysCard":false,"CustomDeck":{"167":{"FaceURL":"https://i.imgur.com/AdR3VIZ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"9b8df1","Name":"Card","Transform":{"posX":30.4999,"posY":7.83267546,"posZ":-3.00010014,"rotX":-0.0005910795,"rotY":180.001572,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Bête Altérée","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02096\",\n  \"traits\": \"Power.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":16715,"SidewaysCard":false,"CustomDeck":{"167":{"FaceURL":"https://i.imgur.com/AdR3VIZ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"63d0a1","Name":"Card","Transform":{"posX":30.4999,"posY":7.63267565,"posZ":-3.00010014,"rotX":-0.0005910795,"rotY":180.001572,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Thrall Lupin","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"health\": 3,\n  \"id\": \"02095\",\n  \"traits\": \"Creature. Monster. Abomination.\",\n  \"type\": \"Enemy\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":16716,"SidewaysCard":false,"CustomDeck":{"167":{"FaceURL":"https://i.imgur.com/AdR3VIZ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"d8038e","Name":"Card","Transform":{"posX":30.4999,"posY":5.765357,"posZ":-3.00010037,"rotX":-0.0005904865,"rotY":180.001572,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Dévot de la Clé","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"health\": 3,\n  \"id\": \"02294\",\n  \"traits\": \"Humanoid. Sorcerer.\",\n  \"type\": \"Enemy\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":16209,"SidewaysCard":false,"CustomDeck":{"162":{"FaceURL":"https://i.imgur.com/EEPF7vQ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"1c7f06","Name":"Card","Transform":{"posX":30.4999,"posY":7.43267632,"posZ":-3.00010014,"rotX":-0.0005910795,"rotY":180.001572,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Thrall Lupin","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"health\": 3,\n  \"id\": \"02095\",\n  \"traits\": \"Creature. Monster. Abomination.\",\n  \"type\": \"Enemy\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":16714,"SidewaysCard":false,"CustomDeck":{"167":{"FaceURL":"https://i.imgur.com/AdR3VIZ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"8041a2","Name":"Card","Transform":{"posX":30.4999,"posY":7.23267555,"posZ":-3.00010014,"rotX":-0.0005910795,"rotY":180.001572,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Thrall Aviaire","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"health\": 4,\n  \"id\": \"02094\",\n  \"traits\": \"Creature. Monster. Abomination.\",\n  \"type\": \"Enemy\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":16713,"SidewaysCard":false,"CustomDeck":{"167":{"FaceURL":"https://i.imgur.com/AdR3VIZ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"e07cf7","Name":"Card","Transform":{"posX":30.4999,"posY":7.032676,"posZ":-3.00010014,"rotX":-0.0005910795,"rotY":180.001572,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Thrall Aviaire","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"health\": 4,\n  \"id\": \"02094\",\n  \"traits\": \"Creature. Monster. Abomination.\",\n  \"type\": \"Enemy\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":16711,"SidewaysCard":false,"CustomDeck":{"167":{"FaceURL":"https://i.imgur.com/AdR3VIZ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"d03847","Name":"Card","Transform":{"posX":30.4999,"posY":6.832677,"posZ":-3.00010014,"rotX":-0.0005910795,"rotY":180.001572,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Vortex Temporel","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02298\",\n  \"traits\": \"Hex. Hazard.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":16221,"SidewaysCard":false,"CustomDeck":{"162":{"FaceURL":"https://i.imgur.com/EEPF7vQ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"8a5402","Name":"Card","Transform":{"posX":30.4999,"posY":6.632677,"posZ":-3.00010014,"rotX":-0.0005910795,"rotY":180.001572,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Vortex Temporel","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02298\",\n  \"traits\": \"Hex. Hazard.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":16219,"SidewaysCard":false,"CustomDeck":{"162":{"FaceURL":"https://i.imgur.com/EEPF7vQ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"6f3ec2","Name":"Card","Transform":{"posX":30.4999,"posY":6.432677,"posZ":-3.00010014,"rotX":-0.0005910795,"rotY":180.001572,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Vortex Temporel","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02298\",\n  \"traits\": \"Hex. Hazard.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":16217,"SidewaysCard":false,"CustomDeck":{"162":{"FaceURL":"https://i.imgur.com/EEPF7vQ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"67f1d9","Name":"Card","Transform":{"posX":30.4999,"posY":6.232677,"posZ":-3.00010014,"rotX":-0.0005910795,"rotY":180.001572,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Interstices","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02297\",\n  \"traits\": \"Hex. Hazard.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":16216,"SidewaysCard":false,"CustomDeck":{"162":{"FaceURL":"https://i.imgur.com/EEPF7vQ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"b70899","Name":"Card","Transform":{"posX":30.4999,"posY":6.0326767,"posZ":-3.00010014,"rotX":-0.0005910795,"rotY":180.001572,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Interstices","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02297\",\n  \"traits\": \"Hex. Hazard.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":16218,"SidewaysCard":false,"CustomDeck":{"162":{"FaceURL":"https://i.imgur.com/EEPF7vQ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"c7bd8d","Name":"Card","Transform":{"posX":30.4999,"posY":5.832677,"posZ":-3.00010014,"rotX":-0.0005910795,"rotY":180.001572,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Interstices","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02297\",\n  \"traits\": \"Hex. Hazard.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":16215,"SidewaysCard":false,"CustomDeck":{"162":{"FaceURL":"https://i.imgur.com/EEPF7vQ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"13e31c","Name":"Card","Transform":{"posX":30.4999,"posY":5.632677,"posZ":-3.00010014,"rotX":-0.0005910795,"rotY":180.001572,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Rites Hurlés","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02296\",\n  \"traits\": \"Hex.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":16214,"SidewaysCard":false,"CustomDeck":{"162":{"FaceURL":"https://i.imgur.com/EEPF7vQ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"c028bb","Name":"Card","Transform":{"posX":30.4999,"posY":5.432677,"posZ":-3.00010014,"rotX":-0.0005910795,"rotY":180.001572,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Rites Hurlés","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02296\",\n  \"traits\": \"Hex.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":16213,"SidewaysCard":false,"CustomDeck":{"162":{"FaceURL":"https://i.imgur.com/EEPF7vQ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"91538f","Name":"Card","Transform":{"posX":30.4999,"posY":5.232677,"posZ":-3.00010014,"rotX":-0.0005910795,"rotY":180.001572,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Rites Hurlés","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02296\",\n  \"traits\": \"Hex.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":16211,"SidewaysCard":false,"CustomDeck":{"162":{"FaceURL":"https://i.imgur.com/EEPF7vQ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"aef487","Name":"Card","Transform":{"posX":30.4999,"posY":5.0326767,"posZ":-3.00010014,"rotX":-0.0005910795,"rotY":180.001572,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Shoggoth Affolé","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"health\": 6,\n  \"id\": \"02295\",\n  \"traits\": \"Monster. Shoggoth.\",\n  \"type\": \"Enemy\",\n  \"victory\": 1\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":16212,"SidewaysCard":false,"CustomDeck":{"162":{"FaceURL":"https://i.imgur.com/EEPF7vQ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"919139","Name":"Card","Transform":{"posX":30.4999,"posY":4.832677,"posZ":-3.00010014,"rotX":-0.0005910795,"rotY":180.001572,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Dévot de la Clé","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"health\": 3,\n  \"id\": \"02294\",\n  \"traits\": \"Humanoid. Sorcerer.\",\n  \"type\": \"Enemy\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":16208,"SidewaysCard":false,"CustomDeck":{"162":{"FaceURL":"https://i.imgur.com/EEPF7vQ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""}]},{"GUID":"9eee13","Name":"CardCustom","Transform":{"posX":13.5,"posY":1.51552832,"posZ":-1.00000072,"rotX":0.0108915512,"rotY":179.999588,"rotZ":0.004948259,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":true,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":1105800,"SidewaysCard":false,"CustomDeck":{"11058":{"FaceURL":"http://cloud-3.steamusercontent.com/ugc/1874087573755656398/784A5C9E69597C25D0CE052B4C48C063453A9D1B/","BackURL":"http://cloud-3.steamusercontent.com/ugc/1874087573755656398/784A5C9E69597C25D0CE052B4C48C063453A9D1B/","NumWidth":1,"NumHeight":1,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"aaf560","Name":"Card","Transform":{"posX":7,"posY":1.52103209,"posZ":25,"rotX":0.0108909635,"rotY":180.005524,"rotZ":0.004949389,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Pic de la Sentinelle","Description":"Dunwich. Colline de la Sentinelle.\r","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02284\",\n  \"locationBack\": {\n    \"connections\": \"Square\",\n    \"icons\": \"Diamond\",\n    \"uses\": {\n      \"countPerInvestigator\": 2,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    },\n    \"victory\": 2\n  },\n  \"locationFront\": {\n    \"connections\": \"Square\",\n    \"icons\": \"Diamond\"\n  },\n  \"traits\": \"Dunwich. Sentinel Hill.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":119102,"SidewaysCard":false,"CustomDeck":{"1191":{"FaceURL":"https://i.imgur.com/VuuFOhX.jpg","BackURL":"https://i.imgur.com/Mpk9C04.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"b80c83","Name":"Deck","Transform":{"posX":12.5000038,"posY":1.531618,"posZ":-5.999914,"rotX":0.00494870963,"rotY":90.0031357,"rotZ":359.9891,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Deck Intrigue","Description":"Là où le Destin Attend","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":false,"SidewaysCard":true,"DeckIDs":[119201,119200],"CustomDeck":{"1192":{"FaceURL":"https://i.imgur.com/gByrFzz.jpg","BackURL":"https://i.imgur.com/Ta6eG4n.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":"","ContainedObjects":[{"GUID":"f3930b","Name":"Card","Transform":{"posX":12.5000076,"posY":1.60617685,"posZ":-5.99992228,"rotX":0.00427604327,"rotY":90.00328,"rotZ":359.988464,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Implorant des Pouvoirs","Description":"Intrigue 2a","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"doomThreshold\": 10,\n  \"id\": \"02276\",\n  \"type\": \"Agenda\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":119201,"SidewaysCard":true,"CustomDeck":{"1192":{"FaceURL":"https://i.imgur.com/gByrFzz.jpg","BackURL":"https://i.imgur.com/Ta6eG4n.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"7e1510","Name":"Card","Transform":{"posX":12.5000114,"posY":1.604412,"posZ":-5.99993038,"rotX":0.002596061,"rotY":90.00328,"rotZ":359.9881,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Invoquer les Anciens","Description":"Intrigue 1a","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"doomThreshold\": 12,\n  \"id\": \"02275\",\n  \"type\": \"Agenda\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":119200,"SidewaysCard":true,"CustomDeck":{"1192":{"FaceURL":"https://i.imgur.com/gByrFzz.jpg","BackURL":"https://i.imgur.com/Ta6eG4n.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""}]},{"GUID":"cbdef8","Name":"Custom_Tile","Transform":{"posX":2.5,"posY":1.50543988,"posZ":12.5,"rotX":-0.00420320267,"rotY":44.9994926,"rotZ":359.9888,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/vppt2my.png","ImageSecondaryURL":"https://i.imgur.com/vppt2my.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":"","States":{"2":{"GUID":"4d3553","Name":"Custom_Tile","Transform":{"posX":-17.11995,"posY":1.60650957,"posZ":3.85999179,"rotX":359.9831,"rotY":359.984558,"rotZ":359.920074,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/HyfE8m8.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""},"3":{"GUID":"5b38c6","Name":"Custom_Tile","Transform":{"posX":-17.1199474,"posY":1.60650969,"posZ":3.85999274,"rotX":359.983124,"rotY":359.984467,"rotZ":359.9201,"scaleX":0.8,"scaleY":1,"scaleZ":0.8},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/dHKBLoD.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""}}},{"GUID":"d21349","Name":"Deck","Transform":{"posX":-22.5003357,"posY":1.8006742,"posZ":2.49976182,"rotX":1.990956e-8,"rotY":89.99798,"rotZ":0.000004675799,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Deck Acte v. III","Description":"Là où le Destin Attend","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":false,"SidewaysCard":true,"DeckIDs":[119206,119205,559800],"CustomDeck":{"1192":{"FaceURL":"https://i.imgur.com/gByrFzz.jpg","BackURL":"https://i.imgur.com/Ta6eG4n.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0},"5598":{"FaceURL":"http://cloud-3.steamusercontent.com/ugc/1770458304230390163/86745DFEBB91452AFFC6E625602BB716D5690406/","BackURL":"http://cloud-3.steamusercontent.com/ugc/1770458304230389073/6BDD166DCE2126F67E1F627756B17A6B02E5061D/","NumWidth":1,"NumHeight":1,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":"","ContainedObjects":[{"GUID":"02a620","Name":"Card","Transform":{"posX":-22.5003414,"posY":5.056078,"posZ":2.49975562,"rotX":-1.34907026e-7,"rotY":89.99789,"rotZ":0.00000506975266,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Le Portail s'Ouvre","Description":"Acte 3a","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"clueThresholdPerInvestigator\": 2,\n  \"cycle\": \"Standalone\",\n  \"id\": \"02281\",\n  \"type\": \"Act\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":119206,"SidewaysCard":true,"CustomDeck":{"1192":{"FaceURL":"https://i.imgur.com/gByrFzz.jpg","BackURL":"https://i.imgur.com/Ta6eG4n.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"aaf051","Name":"Card","Transform":{"posX":-22.5003414,"posY":4.85607767,"posZ":2.49975562,"rotX":-1.34907026e-7,"rotY":89.99789,"rotZ":0.00000506975266,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Gravir la Colline (v. III)","Description":"Acte 2a","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02280\",\n  \"type\": \"Act\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":119205,"SidewaysCard":true,"CustomDeck":{"1192":{"FaceURL":"https://i.imgur.com/gByrFzz.jpg","BackURL":"https://i.imgur.com/Ta6eG4n.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"8cc40c","Name":"CardCustom","Transform":{"posX":-22.5003414,"posY":1.8773303,"posZ":2.49975562,"rotX":-0.00165851833,"rotY":89.99789,"rotZ":-0.00134234247,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Le Chemin vers la Colline","Description":"Acte 1a","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"clueThresholdPerInvestigator\": 2,\n  \"cycle\": \"Standalone\",\n  \"id\": \"02277\",\n  \"type\": \"Act\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":559800,"SidewaysCard":true,"CustomDeck":{"5598":{"FaceURL":"http://cloud-3.steamusercontent.com/ugc/1770458304230390163/86745DFEBB91452AFFC6E625602BB716D5690406/","BackURL":"http://cloud-3.steamusercontent.com/ugc/1770458304230389073/6BDD166DCE2126F67E1F627756B17A6B02E5061D/","NumWidth":1,"NumHeight":1,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""}]},{"GUID":"d45a71","Name":"Custom_Tile","Transform":{"posX":2.99999928,"posY":1.50368583,"posZ":3.499998,"rotX":-0.00420202548,"rotY":45.0046463,"rotZ":359.9888,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/vppt2my.png","ImageSecondaryURL":"https://i.imgur.com/vppt2my.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":"","States":{"2":{"GUID":"4d3553","Name":"Custom_Tile","Transform":{"posX":-17.11995,"posY":1.60650957,"posZ":3.85999179,"rotX":359.9831,"rotY":359.984558,"rotZ":359.920074,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/HyfE8m8.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""},"3":{"GUID":"5b38c6","Name":"Custom_Tile","Transform":{"posX":-17.1199474,"posY":1.60650969,"posZ":3.85999274,"rotX":359.983124,"rotY":359.984467,"rotZ":359.9201,"scaleX":0.8,"scaleY":1,"scaleZ":0.8},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/dHKBLoD.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""}}},{"GUID":"d9bd42","Name":"Deck","Transform":{"posX":-26.0003529,"posY":1.80067408,"posZ":2.49964666,"rotX":-4.18917239e-8,"rotY":90.00722,"rotZ":0.00000518622528,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Deck Acte v. II","Description":"Là où le Destin Attend","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":false,"SidewaysCard":true,"DeckIDs":[119206,119204,559700],"CustomDeck":{"1192":{"FaceURL":"https://i.imgur.com/gByrFzz.jpg","BackURL":"https://i.imgur.com/Ta6eG4n.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0},"5597":{"FaceURL":"http://cloud-3.steamusercontent.com/ugc/1770458304230390163/86745DFEBB91452AFFC6E625602BB716D5690406/","BackURL":"http://cloud-3.steamusercontent.com/ugc/1770458304230389073/6BDD166DCE2126F67E1F627756B17A6B02E5061D/","NumWidth":1,"NumHeight":1,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":"","ContainedObjects":[{"GUID":"7de809","Name":"Card","Transform":{"posX":-26.0003567,"posY":5.056078,"posZ":2.499639,"rotX":-1.10010554e-7,"rotY":90.00737,"rotZ":0.000005027763,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Le Portail s'Ouvre","Description":"Acte 3a","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"clueThresholdPerInvestigator\": 2,\n  \"cycle\": \"Standalone\",\n  \"id\": \"02281\",\n  \"type\": \"Act\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":119206,"SidewaysCard":true,"CustomDeck":{"1192":{"FaceURL":"https://i.imgur.com/gByrFzz.jpg","BackURL":"https://i.imgur.com/Ta6eG4n.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"997cee","Name":"Card","Transform":{"posX":-26.0003567,"posY":4.85607767,"posZ":2.499639,"rotX":-1.10010554e-7,"rotY":90.00737,"rotZ":0.000005027763,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Gravir la Colline (v. II)","Description":"Acte 2a","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02279\",\n  \"type\": \"Act\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":119204,"SidewaysCard":true,"CustomDeck":{"1192":{"FaceURL":"https://i.imgur.com/gByrFzz.jpg","BackURL":"https://i.imgur.com/Ta6eG4n.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"8724bd","Name":"CardCustom","Transform":{"posX":-26.0003567,"posY":1.8773303,"posZ":2.499639,"rotX":-0.00165452214,"rotY":90.00737,"rotZ":-0.00133705069,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Le Chemin vers la Colline","Description":"Acte 1a","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"clueThresholdPerInvestigator\": 2,\n  \"cycle\": \"Standalone\",\n  \"id\": \"02277\",\n  \"type\": \"Act\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":559700,"SidewaysCard":true,"CustomDeck":{"5597":{"FaceURL":"http://cloud-3.steamusercontent.com/ugc/1770458304230390163/86745DFEBB91452AFFC6E625602BB716D5690406/","BackURL":"http://cloud-3.steamusercontent.com/ugc/1770458304230389073/6BDD166DCE2126F67E1F627756B17A6B02E5061D/","NumWidth":1,"NumHeight":1,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""}]},{"GUID":"e339e5","Name":"Card","Transform":{"posX":7,"posY":1.5193212,"posZ":16,"rotX":0.0108915241,"rotY":180,"rotZ":0.004948224,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"51049\",\n  \"locationBack\": {\n    \"connections\": \"Triangle|Diamond|Tee|SlantedEquals|Crescent|Clover|AlteredPath\",\n    \"icons\": \"Square\",\n    \"uses\": {\n      \"count\": 3,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    }\n  },\n  \"locationFront\": {\n    \"connections\": \"Triangle|Diamond|Tee|SlantedEquals|Crescent|Clover|AlteredPath\",\n    \"icons\": \"Square\"\n  },\n  \"traits\": \"Dunwich. Sentinel Hill.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276124,"SidewaysCard":false,"CustomDeck":{"2761":{"FaceURL":"https://i.imgur.com/FVWxpyu.jpg","BackURL":"https://i.imgur.com/EmJxccn.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"e47391","Name":"Custom_Model_Bag","Transform":{"posX":-29.5000019,"posY":1.83530092,"posZ":7.499997,"rotX":-0.000005312095,"rotY":179.984818,"rotZ":-2.54429949e-7,"scaleX":0.7,"scaleY":0.7,"scaleZ":0.7},"Nickname":"Soutiens/faiblesses d'histoire","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":1,"g":1,"b":1},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"MaterialIndex":-1,"MeshIndex":-1,"CustomMesh":{"MeshURL":"https://pastebin.com/raw/ALrYhQGb","DiffuseURL":"http://cloud-3.steamusercontent.com/ugc/5077277234347423622/F89B4508C6E2782780C2B5593FB68379E0FB2DB6/","NormalURL":"","ColliderURL":"","Convex":true,"MaterialIndex":3,"TypeIndex":6,"CustomShader":{"SpecularColor":{"r":1,"g":1,"b":1},"SpecularIntensity":0,"SpecularSharpness":2,"FresnelStrength":0},"CastShadows":true},"Bag":{"Order":0},"LuaScript":"","LuaScriptState":"{\"ml\":[]}","XmlUI":"","ContainedObjects":[{"GUID":"413dcf","Name":"Card","Transform":{"posX":-29,"posY":1.93749154,"posZ":7.5,"rotX":0.00010214786,"rotY":180.000427,"rotZ":-0.000008327811,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"class\": \"Neutral\",\n  \"combatIcons\": 2,\n  \"cost\": 5,\n  \"cycle\": \"Return to The Dunwich Legacy\",\n  \"health\": 3,\n  \"id\": \"51052\",\n  \"intellectIcons\": 2,\n  \"sanity\": 3,\n  \"traits\": \"Ally. Criminal. Syndicate.\",\n  \"type\": \"Asset\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276122,"SidewaysCard":false,"CustomDeck":{"2761":{"FaceURL":"https://i.imgur.com/FVWxpyu.jpg","BackURL":"https://i.imgur.com/EmJxccn.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""}]},{"GUID":"e7750b","Name":"Custom_Tile","Transform":{"posX":15.5000019,"posY":1.504127,"posZ":11.5,"rotX":359.9891,"rotY":359.989563,"rotZ":-0.00495522562,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/vppt2my.png","ImageSecondaryURL":"https://i.imgur.com/vppt2my.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":"","States":{"2":{"GUID":"4d3553","Name":"Custom_Tile","Transform":{"posX":-17.11995,"posY":1.60650957,"posZ":3.85999179,"rotX":359.9831,"rotY":359.984558,"rotZ":359.920074,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/HyfE8m8.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""},"3":{"GUID":"5b38c6","Name":"Custom_Tile","Transform":{"posX":-17.1199474,"posY":1.60650969,"posZ":3.85999274,"rotX":359.983124,"rotY":359.984467,"rotZ":359.9201,"scaleX":0.8,"scaleY":1,"scaleZ":0.8},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/dHKBLoD.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""}}},{"GUID":"ebdf49","Name":"Deck","Transform":{"posX":-34.49965,"posY":1.80067372,"posZ":7.50004435,"rotX":-0.00000506333663,"rotY":179.988083,"rotZ":1.86648723e-8,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Hideuses Abominations","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":false,"SidewaysCard":false,"DeckIDs":[17930,17931,17934],"CustomDeck":{"179":{"FaceURL":"https://i.imgur.com/nB9kjFF.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":"","ContainedObjects":[{"GUID":"c8d931","Name":"Card","Transform":{"posX":-34.4996567,"posY":4.856077,"posZ":7.50003624,"rotX":-0.000005233255,"rotY":179.988129,"rotZ":8.516142e-7,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Agglomérat de Sphères","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"health\": 6,\n  \"id\": \"02103\",\n  \"traits\": \"Monster. Abomination.\",\n  \"type\": \"Enemy\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":17930,"SidewaysCard":false,"CustomDeck":{"179":{"FaceURL":"https://i.imgur.com/nB9kjFF.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"70c221","Name":"Card","Transform":{"posX":-34.4996567,"posY":5.05607748,"posZ":7.50003624,"rotX":-0.000005233255,"rotY":179.988129,"rotZ":8.516142e-7,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Serviteur du Rôdeur","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"health\": 5,\n  \"id\": \"02104\",\n  \"traits\": \"Monster. Abomination.\",\n  \"type\": \"Enemy\",\n  \"victory\": 1\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":17931,"SidewaysCard":false,"CustomDeck":{"179":{"FaceURL":"https://i.imgur.com/nB9kjFF.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"87be51","Name":"Card","Transform":{"posX":-34.4996567,"posY":1.87731946,"posZ":7.50003624,"rotX":0.00288081,"rotY":179.988129,"rotZ":-0.00345585938,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Agglomérat de Sphères","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"health\": 6,\n  \"id\": \"02103\",\n  \"traits\": \"Monster. Abomination.\",\n  \"type\": \"Enemy\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":17934,"SidewaysCard":false,"CustomDeck":{"179":{"FaceURL":"https://i.imgur.com/nB9kjFF.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""}]},{"GUID":"ed0d92","Name":"Card","Transform":{"posX":23.5001,"posY":1.5138092,"posZ":-5.500009,"rotX":0.0108918687,"rotY":179.995773,"rotZ":0.004947507,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Référence","Description":"Là où le Destin Attend","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":119100,"SidewaysCard":false,"CustomDeck":{"1191":{"FaceURL":"https://i.imgur.com/VuuFOhX.jpg","BackURL":"https://i.imgur.com/Mpk9C04.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"f81b6d","Name":"Custom_Tile","Transform":{"posX":2.5,"posY":1.50610518,"posZ":16,"rotX":-0.004946862,"rotY":269.9951,"rotZ":0.0108987223,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/vppt2my.png","ImageSecondaryURL":"https://i.imgur.com/vppt2my.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":"","States":{"2":{"GUID":"4d3553","Name":"Custom_Tile","Transform":{"posX":-17.11995,"posY":1.60650957,"posZ":3.85999179,"rotX":359.9831,"rotY":359.984558,"rotZ":359.920074,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/HyfE8m8.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""},"3":{"GUID":"5b38c6","Name":"Custom_Tile","Transform":{"posX":-17.1199474,"posY":1.60650969,"posZ":3.85999274,"rotX":359.983124,"rotY":359.984467,"rotZ":359.9201,"scaleX":0.8,"scaleY":1,"scaleZ":0.8},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/dHKBLoD.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""}}},{"GUID":"fa4366","Name":"Custom_Tile","Transform":{"posX":11,"posY":1.50299489,"posZ":3.49999976,"rotX":359.9888,"rotY":314.990173,"rotZ":0.004206652,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/vppt2my.png","ImageSecondaryURL":"https://i.imgur.com/vppt2my.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":"","States":{"2":{"GUID":"4d3553","Name":"Custom_Tile","Transform":{"posX":-17.11995,"posY":1.60650957,"posZ":3.85999179,"rotX":359.9831,"rotY":359.984558,"rotZ":359.920074,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/HyfE8m8.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""},"3":{"GUID":"5b38c6","Name":"Custom_Tile","Transform":{"posX":-17.1199474,"posY":1.60650969,"posZ":3.85999274,"rotX":359.983124,"rotY":359.984467,"rotZ":359.9201,"scaleX":0.8,"scaleY":1,"scaleZ":0.8},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/dHKBLoD.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""}}},{"GUID":"fccb36","Name":"CardCustom","Transform":{"posX":-6.092735e-8,"posY":1.51669419,"posZ":-1.00000048,"rotX":0.0108914329,"rotY":180.00061,"rotZ":0.00494847028,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":true,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":1105800,"SidewaysCard":false,"CustomDeck":{"11058":{"FaceURL":"http://cloud-3.steamusercontent.com/ugc/1874087573755656398/784A5C9E69597C25D0CE052B4C48C063453A9D1B/","BackURL":"http://cloud-3.steamusercontent.com/ugc/1874087573755656398/784A5C9E69597C25D0CE052B4C48C063453A9D1B/","NumWidth":1,"NumHeight":1,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"fdfeeb","Name":"CardCustom","Transform":{"posX":-2.00000024,"posY":1.518958,"posZ":10,"rotX":0.0108911823,"rotY":180.004181,"rotZ":0.004949017,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":true,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":1106800,"SidewaysCard":false,"CustomDeck":{"11068":{"FaceURL":"http://cloud-3.steamusercontent.com/ugc/1874087573755616213/4BA2D77C786D6072A7ECBD7B99A0A7C3C2048E41/","BackURL":"http://cloud-3.steamusercontent.com/ugc/1874087573755616213/4BA2D77C786D6072A7ECBD7B99A0A7C3C2048E41/","NumWidth":1,"NumHeight":1,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"fe4064","Name":"Card","Transform":{"posX":-26,"posY":1.49346447,"posZ":-5.5,"rotX":4.14417158e-8,"rotY":180,"rotZ":-1.96329125e-7,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276121,"SidewaysCard":false,"CustomDeck":{"2761":{"FaceURL":"https://i.imgur.com/FVWxpyu.jpg","BackURL":"https://i.imgur.com/EmJxccn.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"ff2fa7","Name":"CardCustom","Transform":{"posX":7,"posY":1.51608968,"posZ":-1.00000048,"rotX":0.0108921425,"rotY":179.992,"rotZ":0.00494667469,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":true,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":1105900,"SidewaysCard":false,"CustomDeck":{"11059":{"FaceURL":"http://cloud-3.steamusercontent.com/ugc/1874087573755657091/AFF8ACFBC5678926BCC68305BFC3843BF4612216/","BackURL":"http://cloud-3.steamusercontent.com/ugc/1874087573755657091/AFF8ACFBC5678926BCC68305BFC3843BF4612216/","NumWidth":1,"NumHeight":1,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""}],"AttachedDecals":[{"Transform":{"posX":-0.0021877822,"posY":-0.08963572,"posZ":-0.00288731651,"rotX":270,"rotY":359.869568,"rotZ":0,"scaleX":2.00000215,"scaleY":2.00000238,"scaleZ":2.00000262},"CustomDecal":{"Name":"dunwich_back","ImageURL":"http://cloud-3.steamusercontent.com/ugc/959719855119695911/931B9829687A20F4DEADB36DA57B7E6D76792231/","Size":7.4}}]},{"GUID":"7594f1","Name":"Custom_Model_Bag","Transform":{"posX":12.5000048,"posY":0.9799974,"posZ":45.0000038,"rotX":-0.00000500278156,"rotY":179.999847,"rotZ":5.240594e-7,"scaleX":1.20052135,"scaleY":0.249882281,"scaleZ":1.3145982},"Nickname":"V : Aux Frontières du Visible","Description":"Renouveau : L'Héritage de Dunwich","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":1,"g":1,"b":1},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"MaterialIndex":-1,"MeshIndex":-1,"CustomMesh":{"MeshURL":"https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/advboxes/tuckbox_h_MSH.obj","DiffuseURL":"http://cloud-3.steamusercontent.com/ugc/829135118403756878/0A3FE0A5BAC24197D5F19A6314365EDF3E80DC6F/","NormalURL":"","ColliderURL":"","Convex":true,"MaterialIndex":3,"TypeIndex":6,"CustomShader":{"SpecularColor":{"r":1,"g":1,"b":1},"SpecularIntensity":0,"SpecularSharpness":2,"FresnelStrength":0},"CastShadows":true},"Bag":{"Order":0},"LuaScript":"-- Utility memory bag by Directsun\r\n-- Version 2.7.0\r\n-- Fork of Memory Bag 2.0 by MrStump\r\n--\r\n-- Want to contribute? Create an issue or fork the code on GitHub and submit a pull request:\r\n-- https://github.com/sunflowermans/TTS-UtilityMemoryBag\r\n\r\n\r\nfunction updateSave()\r\n    local data_to_save = {[\"ml\"]=memoryList}\r\n    saved_data = JSON.encode(data_to_save)\r\n    self.script_state = saved_data\r\nend\r\n\r\nfunction combineMemoryFromBagsWithin()\r\n    local bagObjList = self.getObjects()\r\n    for _, bagObj in ipairs(bagObjList) do\r\n        local data = bagObj.lua_script_state\r\n        if data ~= nil then\r\n            local j = JSON.decode(data)\r\n            if j ~= nil and j.ml ~= nil then\r\n                for guid, entry in pairs(j.ml) do\r\n                    memoryList[guid] = entry\r\n                end\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\nfunction updateMemoryWithMoves()\r\n    memoryList = memoryListBackup\r\n    --get the first transposed object's coordinates\r\n    local obj = getObjectFromGUID(moveGuid)\r\n\r\n    -- p1 is where needs to go, p2 is where it was\r\n    local refObjPos = memoryList[moveGuid].pos\r\n    local deltaPos = findOffsetDistance(obj.getPosition(), refObjPos, nil)\r\n    local movedRotation = obj.getRotation()\r\n    for guid, entry in pairs(memoryList) do\r\n        memoryList[guid].pos.x = entry.pos.x - deltaPos.x\r\n        memoryList[guid].pos.y = entry.pos.y - deltaPos.y\r\n        memoryList[guid].pos.z = entry.pos.z - deltaPos.z\r\n        -- memoryList[guid].rot.x = movedRotation.x\r\n        -- memoryList[guid].rot.y = movedRotation.y\r\n        -- memoryList[guid].rot.z = movedRotation.z\r\n    end\r\n\r\n    --theList[obj.getGUID()] = {\r\n    --    pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n    --    rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n    --    lock=obj.getLock()\r\n    --}\r\n    moveList = {}\r\nend\r\n\r\nfunction onload(saved_data)\r\n\r\n    fresh = true\r\n    if saved_data ~= \"\" then\r\n        local loaded_data = JSON.decode(saved_data)\r\n        --Set up information off of loaded_data\r\n        memoryList = loaded_data.ml\r\n    else\r\n        --Set up information for if there is no saved saved data\r\n        memoryList = {}\r\n\r\n    end\r\n\r\n    moveList = {}\r\n    moveGuid = nil\r\n\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        fresh = false\r\n        createMemoryActionButtons()\r\n    end\r\nend\r\n\r\n\r\n--Beginning Setup\r\n\r\n\r\n--Make setup button\r\n function createSetupButton()\r\n    self.createButton({\r\n      label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n      position={0,0.1,-2.1}, rotation={0,0,0}, height=275, width=625,\r\n      font_size=150, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n end\r\n\r\n--Triggered by Transpose button\r\nfunction buttonClick_transpose()\r\n    moveGuid = nil\r\n    broadcastToAll(\"Select one object and move it- all objects will move relative to the new location\", {0.75, 0.75, 1})\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(true)\r\n    createSetupActionButtons(true)\r\nend\r\n\r\n--Triggered by setup button,\r\nfunction buttonClick_setup()\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(false)\r\n    createSetupActionButtons(false)\r\nend\r\n\r\nfunction getAllObjectsInMemory()\r\n    local objTable = {}\r\n    local curObj = {}\r\n\r\n    for guid in pairs(memoryListBackup) do\r\n        curObj = getObjectFromGUID(guid)\r\n        table.insert(objTable, curObj)\r\n    end\r\n\r\n    return objTable\r\n    -- return getAllObjects()\r\nend\r\n\r\n--Creates selection buttons on objects\r\nfunction createButtonsOnAllObjects(move)\r\n    buttonIndexMap = {}\r\n    local howManyButtons = 0\r\n\r\n    local objsToHaveButtons = {}\r\n    if move == true then\r\n        objsToHaveButtons = getAllObjectsInMemory()\r\n    else\r\n        objsToHaveButtons = getAllObjects()\r\n    end\r\n\r\n    for _, obj in ipairs(objsToHaveButtons) do\r\n        if obj ~= self then\r\n            --On a normal bag, the button positions aren't the same size as the bag.\r\n            globalScaleFactor = 1* 1/self.getScale().x\r\n            --Super sweet math to set button positions\r\n            local selfPos = self.getPosition()\r\n            local objPos = obj.getPosition()\r\n            local deltaPos = findOffsetDistance(selfPos, objPos, obj)\r\n            local objPos = rotateLocalCoordinates(deltaPos, self)\r\n            objPos.x = -objPos.x * globalScaleFactor\r\n            objPos.y = objPos.y * globalScaleFactor + 2\r\n            objPos.z = objPos.z * globalScaleFactor * 0.9\r\n            --Workaround for custom PDFs\r\n            if obj.Book then\r\n                objPos.y = objPos.y + 0.5\r\n            end\r\n            --Offset rotation of bag\r\n            local rot = self.getRotation()\r\n            rot.y = -rot.y + 180\r\n            --Create function\r\n            local funcName = \"selectButton_\" .. howManyButtons\r\n            local func = function() buttonClick_selection(obj, move) end\r\n            local color = {0.75,0.25,0.25,0.6}\r\n            local colorMove = {0,0,1,0.6}\r\n            if move == true then\r\n                color = colorMove\r\n            end\r\n            self.setVar(funcName, func)\r\n            self.createButton({\r\n                click_function=funcName, function_owner=self,\r\n                position=objPos, rotation=rot, height=500, width=500,\r\n                color=color,\r\n            })\r\n            buttonIndexMap[obj.getGUID()] = howManyButtons\r\n            howManyButtons = howManyButtons + 1\r\n        end\r\n    end\r\nend\r\n\r\n--Creates submit and cancel buttons\r\nfunction createSetupActionButtons(move)\r\n    self.createButton({\r\n        label=\"Annuler\", click_function=\"buttonClick_cancel\", function_owner=self,\r\n      position={-0.7,0.1,2.1}, rotation={0,0,0}, height=275, width=625,\r\n      font_size=145, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n\r\n    self.createButton({\r\n        label=\"Valider\", click_function=\"buttonClick_submit\", function_owner=self,\r\n        position={-0.7,0.3,2.6}, rotation={0,0,0}, height=275, width=625,\r\n        font_size=140, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n\r\n    if move == false then\r\n      self.createButton({\r\n          label=\"Ajouter\", click_function=\"buttonClick_add\", function_owner=self,\r\n          position={0.7,0.3,2.1}, rotation={0,0,0}, height=275, width=625,\r\n          font_size=140, color={0,0,0}, font_color={0.25,1,0.25}\r\n      })\r\n\r\n        self.createButton({\r\n            label=\"Sélection\", click_function=\"editDragSelection\", function_owner=self,\r\n            position={-0.7,0.3,3.1}, rotation={0,0,0}, height=275, width=625,\r\n            font_size=125, color={0,0,0}, font_color={1,1,1}\r\n        })\r\n\r\n        if fresh == false then\r\n                self.createButton({\r\n                    label=\"Mise à jour\", click_function=\"buttonClick_setNew\", function_owner=self,\r\n                    position={0.7,0.3,3.1}, rotation={0,0,0}, height=275, width=625,\r\n                    font_size=105, color={0,0,0}, font_color={0.75,0.75,1}\r\n                })\r\n                self.createButton({\r\n                    label=\"Retirer\", click_function=\"buttonClick_remove\", function_owner=self,\r\n                    position={0.7,0.3,2.6}, rotation={0,0,0}, height=275, width=625,\r\n                    font_size=140, color={0,0,0}, font_color={1,0.25,0.25}\r\n                })\r\n            end\r\n        end\r\n\r\n        self.createButton({\r\n            label=\"Reset\", click_function=\"buttonClick_reset\", function_owner=self,\r\n            position={0,0.3,-2.1}, rotation={0,0,0}, height=275, width=625,\r\n            font_size=165, color={0,0,0}, font_color={1,1,1}\r\n        })\r\n    end\r\n\r\n\r\n--During Setup\r\n\r\n\r\n--Checks or unchecks buttons\r\nfunction buttonClick_selection(obj, move)\r\n    local index = buttonIndexMap[obj.getGUID()]\r\n    local colorMove = {0,0,1,0.6}\r\n    local color = {0,1,0,0.6}\r\n\r\n    previousGuid = selectedGuid\r\n    selectedGuid = obj.getGUID()\r\n\r\n    theList = memoryList\r\n    if move == true then\r\n        theList = moveList\r\n        if previousGuid ~= nil and previousGuid ~= selectedGuid then\r\n            local prevObj = getObjectFromGUID(previousGuid)\r\n            prevObj.highlightOff()\r\n            self.editButton({index=previousIndex, color=colorMove})\r\n            theList[previousGuid] = nil\r\n        end\r\n        previousIndex = index\r\n    end\r\n\r\n    if theList[selectedGuid] == nil then\r\n        self.editButton({index=index, color=color})\r\n        --Adding pos/rot to memory table\r\n        local pos, rot = obj.getPosition(), obj.getRotation()\r\n        --I need to add it like this or it won't save due to indexing issue\r\n        theList[obj.getGUID()] = {\r\n            pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n            rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n            lock=obj.getLock(),\r\n            tint=obj.getColorTint()\r\n        }\r\n        obj.highlightOn({0,1,0})\r\n    else\r\n        color = {0.75,0.25,0.25,0.6}\r\n        if move == true then\r\n            color = colorMove\r\n        end\r\n        self.editButton({index=index, color=color})\r\n        theList[obj.getGUID()] = nil\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\nfunction editDragSelection(bagObj, player, remove)\r\n    local selectedObjs = Player[player].getSelectedObjects()\r\n    if not remove then\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            --Ignore if already in the memory list, or does not have a button\r\n            if index and not memoryList[obj.getGUID()] then\r\n                self.editButton({index=index, color={0,1,0,0.6}})\r\n                --Adding pos/rot to memory table\r\n                local pos, rot = obj.getPosition(), obj.getRotation()\r\n                --I need to add it like this or it won't save due to indexing issue\r\n                memoryList[obj.getGUID()] = {\r\n                    pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n                    rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n                    lock=obj.getLock(),\r\n                    tint=obj.getColorTint()\r\n                }\r\n                obj.highlightOn({0,1,0})\r\n            end\r\n        end\r\n    else\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            if index and memoryList[obj.getGUID()] then\r\n                color = {0.75,0.25,0.25,0.6}\r\n                self.editButton({index=index, color=color})\r\n                memoryList[obj.getGUID()] = nil\r\n                obj.highlightOff()\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\n--Cancels selection process\r\nfunction buttonClick_cancel()\r\n    memoryList = memoryListBackup\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        createMemoryActionButtons()\r\n    end\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Sélection annulée\", {1,1,1})\r\n    moveGuid = nil\r\nend\r\n\r\n--Saves selections\r\nfunction buttonClick_submit()\r\n    fresh = false\r\n    if next(moveList) ~= nil then\r\n        for guid in pairs(moveList) do\r\n            moveGuid = guid\r\n        end\r\n        if memoryListBackup[moveGuid] == nil then\r\n            broadcastToAll(\"Item selected for moving is not already in memory\", {1, 0.25, 0.25})\r\n        else\r\n            broadcastToAll(\"Moving all items in memory relative to new objects position!\", {0.75, 0.75, 1})\r\n            self.clearButtons()\r\n            self.clearInputs()\r\n            createMemoryActionButtons()\r\n            local count = 0\r\n            for guid in pairs(moveList) do\r\n                moveGuid = guid\r\n                count = count + 1\r\n                local obj = getObjectFromGUID(guid)\r\n                if obj ~= nil then obj.highlightOff() end\r\n            end\r\n            updateMemoryWithMoves()\r\n            updateSave()\r\n            buttonClick_place()\r\n        end\r\n    elseif next(memoryList) == nil and moveGuid == nil then\r\n        memoryList = memoryListBackup\r\n        broadcastToAll(\"No selections made.\", {0.75, 0.25, 0.25})\r\n    end\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    updateSave()\r\n    moveGuid = nil\r\nend\r\n\r\nfunction combineTables(first_table, second_table)\r\n    for k,v in pairs(second_table) do first_table[k] = v end\r\nend\r\n\r\nfunction buttonClick_add()\r\n    fresh = false\r\n    combineTables(memoryList, memoryListBackup)\r\n    broadcastToAll(\"Adding internal bags and selections to existing memory\", {0.25, 0.75, 0.25})\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_remove()\r\n    broadcastToAll(\"Removing Selected Entries From Memory\", {1.0, 0.25, 0.25})\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        memoryListBackup[guid] = nil\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Removed\", {1,1,1})\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_setNew()\r\n    broadcastToAll(\"Setting new position relative to items in memory\", {0.75, 0.75, 1})\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        guid = obj.guid\r\n        if memoryListBackup[guid] ~= nil then\r\n            count = count + 1\r\n            memoryListBackup[guid].pos = obj.getPosition()\r\n            memoryListBackup[guid].rot = obj.getRotation()\r\n            memoryListBackup[guid].lock = obj.getLock()\r\n            memoryListBackup[guid].tint = obj.getColorTint()\r\n        end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\n--Resets bag to starting status\r\nfunction buttonClick_reset()\r\n    fresh = true\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createSetupButton()\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Tool Reset\", {1,1,1})\r\n    updateSave()\r\nend\r\n\r\n\r\n--After Setup\r\n\r\n\r\n--Creates recall and place buttons\r\nfunction createMemoryActionButtons()\r\n    self.createButton({\r\n        label=\"Placer\", click_function=\"buttonClick_place\", function_owner=self,\r\n        position={0.7,0.1,2.2}, rotation={0,0,0}, height=275, width=625,\r\n        font_size=150, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Ranger\", click_function=\"buttonClick_recall\", function_owner=self,\r\n        position={-0.7,0.1,2.2}, rotation={0,0,0}, height=275, width=625,\r\n        font_size=150, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n        position={0,0.1,-2.2}, rotation={0,0,0}, height=275, width=625,\r\n        font_size=150, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    ---    self.createButton({\r\n    ---      label=\"Bouger\", click_function=\"buttonClick_transpose\", function_owner=self,\r\n    ---      position={-2,0.3,0.8}, rotation={0,270,0}, height=350, width=800,\r\n    ---      font_size=250, color={0,0,0}, font_color={0.75,0.75,1}\r\n    ---\r\nend\r\n\r\n--Sends objects from bag/table to their saved position/rotation\r\nfunction buttonClick_place()\r\n    local bagObjList = self.getObjects()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        --If obj is out on the table, move it to the saved pos/rot\r\n        if obj ~= nil then\r\n            obj.setPositionSmooth(entry.pos)\r\n            obj.setRotationSmooth(entry.rot)\r\n            obj.setLock(entry.lock)\r\n            obj.setColorTint(entry.tint)\r\n        else\r\n            --If obj is inside of the bag\r\n            for _, bagObj in ipairs(bagObjList) do\r\n                if bagObj.guid == guid then\r\n                    local item = self.takeObject({\r\n                        guid=guid, position=entry.pos, rotation=entry.rot, smooth=false\r\n                    })\r\n                    item.setLock(entry.lock)\r\n                    item.setColorTint(entry.tint)\r\n                    break\r\n                end\r\n            end\r\n        end\r\n    end\r\n    broadcastToAll(\"Objets placés\", {1,1,1})\r\nend\r\n\r\n--Recalls objects to bag from table\r\nfunction buttonClick_recall()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then self.putObject(obj) end\r\n    end\r\n    broadcastToAll(\"Objets rangés\", {1,1,1})\r\nend\r\n\r\n\r\n--Utility functions\r\n\r\n\r\n--Find delta (difference) between 2 x/y/z coordinates\r\nfunction findOffsetDistance(p1, p2, obj)\r\n    local yOffset = 0\r\n    if obj ~= nil then\r\n        local bounds = obj.getBounds()\r\n        yOffset = (bounds.size.y - bounds.offset.y)\r\n    end\r\n    local deltaPos = {}\r\n    deltaPos.x = (p2.x-p1.x)\r\n    deltaPos.y = (p2.y-p1.y) + yOffset\r\n    deltaPos.z = (p2.z-p1.z)\r\n    return deltaPos\r\nend\r\n\r\n--Used to rotate a set of coordinates by an angle\r\nfunction rotateLocalCoordinates(desiredPos, obj)\r\n    local objPos, objRot = obj.getPosition(), obj.getRotation()\r\n    local angle = math.rad(objRot.y)\r\n    local x = desiredPos.x * math.cos(angle) - desiredPos.z * math.sin(angle)\r\n    local z = desiredPos.x * math.sin(angle) + desiredPos.z * math.cos(angle)\r\n    --return {x=objPos.x+x, y=objPos.y+desiredPos.y, z=objPos.z+z}\r\n    return {x=x, y=desiredPos.y, z=z}\r\nend\r\n\r\nfunction rotateMyCoordinates(desiredPos, obj)\r\n    local angle = math.rad(obj.getRotation().y)\r\n    local x = desiredPos.x * math.sin(angle)\r\n    local z = desiredPos.z * math.cos(angle)\r\n    return {x=x, y=desiredPos.y, z=z}\r\nend\r\n\r\n--Coroutine delay, in seconds\r\nfunction wait(time)\r\n    local start = os.time()\r\n    repeat coroutine.yield(0) until os.time() > start + time\r\nend\r\n\r\n--Duplicates a table (needed to prevent it making reference to the same objects)\r\nfunction duplicateTable(oldTable)\r\n    local newTable = {}\r\n    for k, v in pairs(oldTable) do\r\n        newTable[k] = v\r\n    end\r\n    return newTable\r\nend\r\n\r\n--Moves scripted highlight from all objects\r\nfunction removeAllHighlights()\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\n--Round number (num) to the Nth decimal (dec)\r\nfunction round(num, dec)\r\n    local mult = 10^(dec or 0)\r\n    return math.floor(num * mult + 0.5) / mult\r\nend\r\n\r\n\r\n--[[\r\nThis object provides access to a variable stored on the \"Global script\".\r\nThe variable holds the GUIDs for every Utility Memory Bag in the scene.\r\nExample:\r\n{'805ebd', '35cc21', 'fc8886', 'f50264', '5f5f63'}\r\n--]]\r\nAllMemoryBagsInScene = {\r\n    NAME_OF_GLOBAL_VARIABLE = \"_UtilityMemoryBag_AllMemoryBagsInScene\"\r\n}\r\n\r\nfunction AllMemoryBagsInScene:add(guid)\r\n    local guids = Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\n    table.insert(guids, guid)\r\n    Global.setTable(self.NAME_OF_GLOBAL_VARIABLE, guids)\r\nend\r\n\r\nfunction AllMemoryBagsInScene:getGuidList()\r\n    return Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\nend\r\n","LuaScriptState":"{\"ml\":{\"100382\":{\"lock\":false,\"pos\":{\"x\":-19.9395027160645,\"y\":1.76630103588104,\"z\":6.276198387146},\"rot\":{\"x\":4.54838027508231E-06,\"y\":9.50675748754293E-05,\"z\":1.20602106079559E-08},\"tint\":{\"a\":0,\"b\":0,\"g\":0,\"r\":0}},\"319cd6\":{\"lock\":false,\"pos\":{\"x\":12.5,\"y\":1.53643202781677,\"z\":-5.99990463256836},\"rot\":{\"x\":0.00494710681959987,\"y\":89.9961700439453,\"z\":359.989105224609},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"3975c8\":{\"lock\":false,\"pos\":{\"x\":-27,\"y\":1.7789,\"z\":26},\"rot\":{\"x\":0,\"y\":180.0096,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"497aa9\":{\"lock\":false,\"pos\":{\"x\":14.9532,\"y\":1.5201,\"z\":23.5901},\"rot\":{\"x\":0.011,\"y\":178.8622,\"z\":0.0047},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"4b176b\":{\"lock\":false,\"pos\":{\"x\":22.3267440795898,\"y\":1.51391160488129,\"z\":-5.49482393264771},\"rot\":{\"x\":0.0108915958553553,\"y\":180,\"z\":0.00494809448719025},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"4badac\":{\"lock\":false,\"pos\":{\"x\":9.49999904632568,\"y\":1.50683128833771,\"z\":23},\"rot\":{\"x\":0.00494786119088531,\"y\":90.0000991821289,\"z\":359.989105224609},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"4e340d\":{\"lock\":false,\"pos\":{\"x\":-32.0003280639648,\"y\":1.80548810958862,\"z\":3.49977540969849},\"rot\":{\"x\":-5.04689296576544E-06,\"y\":180.000915527344,\"z\":-7.66395373830164E-08},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"5559ff\":{\"lock\":false,\"pos\":{\"x\":9.5,\"y\":1.50378978252411,\"z\":7.00000047683716},\"rot\":{\"x\":-0.00420805020257831,\"y\":44.9736747741699,\"z\":359.988800048828},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"6e85ad\":{\"lock\":false,\"pos\":{\"x\":-19.9999,\"y\":1.7653,\"z\":3.4998},\"rot\":{\"x\":0,\"y\":179.9786,\"z\":0},\"tint\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1}},\"70a53a\":{\"lock\":false,\"pos\":{\"x\":-20,\"y\":1.7789,\"z\":21.5},\"rot\":{\"x\":0,\"y\":179.9824,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"7234af\":{\"lock\":false,\"pos\":{\"x\":4,\"y\":1.50426471233368,\"z\":7},\"rot\":{\"x\":0.0108898608013988,\"y\":180.020477294922,\"z\":0.00495639024302363},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"770dc6\":{\"lock\":false,\"pos\":{\"x\":-24.9559955596924,\"y\":1.76629912853241,\"z\":28.8954029083252},\"rot\":{\"x\":4.5081596908858E-06,\"y\":9.19918966246769E-05,\"z\":3.74668360336727E-07},\"tint\":{\"a\":0,\"b\":0,\"g\":0,\"r\":0}},\"7a97a0\":{\"lock\":false,\"pos\":{\"x\":-23,\"y\":1.83530068397522,\"z\":10},\"rot\":{\"x\":-6.17852583673084E-06,\"y\":179.971862792969,\"z\":-5.56261303685801E-09},\"tint\":{\"a\":1,\"b\":0,\"g\":0,\"r\":0.614982545375824}},\"7e39d0\":{\"lock\":false,\"pos\":{\"x\":-20,\"y\":1.7789,\"z\":26},\"rot\":{\"x\":0,\"y\":180.0148,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"85249f\":{\"lock\":false,\"pos\":{\"x\":4,\"y\":1.5168,\"z\":1.5},\"rot\":{\"x\":0.011,\"y\":179.1234,\"z\":0.0048},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"8e90ff\":{\"lock\":false,\"pos\":{\"x\":17.5000019073486,\"y\":1.53118622303009,\"z\":-5.99989986419678},\"rot\":{\"x\":0.00494791939854622,\"y\":89.9999923706055,\"z\":359.989105224609},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"9105d6\":{\"lock\":false,\"pos\":{\"x\":15.0000009536743,\"y\":1.50540578365326,\"z\":18},\"rot\":{\"x\":0.0108899734914303,\"y\":180.020523071289,\"z\":0.00495944684371352},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"93ac98\":{\"lock\":false,\"pos\":{\"x\":-23,\"y\":1.83530044555664,\"z\":13.5000009536743},\"rot\":{\"x\":-4.35204719906324E-06,\"y\":179.972564697266,\"z\":2.80120360685032E-07},\"tint\":{\"a\":1,\"b\":0,\"g\":0,\"r\":0.614982545375824}},\"95ee07\":{\"lock\":false,\"pos\":{\"x\":-23.5,\"y\":1.7789,\"z\":21.5},\"rot\":{\"x\":0,\"y\":180.0086,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"96df71\":{\"lock\":false,\"pos\":{\"x\":-27,\"y\":1.7789,\"z\":21.5},\"rot\":{\"x\":0,\"y\":179.9966,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"a4a074\":{\"lock\":false,\"pos\":{\"x\":-1.49999988079071,\"y\":1.50473976135254,\"z\":6.99999952316284},\"rot\":{\"x\":0.0112017067149282,\"y\":135.013778686523,\"z\":-0.00420190813019872},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"ad9452\":{\"lock\":false,\"pos\":{\"x\":-7,\"y\":1.5199,\"z\":12.5},\"rot\":{\"x\":0.0109,\"y\":180.0097,\"z\":0.005},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"b526e3\":{\"lock\":false,\"pos\":{\"x\":-20,\"y\":1.83530068397522,\"z\":10.0000009536743},\"rot\":{\"x\":-4.74876424050308E-06,\"y\":179.971755981445,\"z\":-5.04201458362274E-10},\"tint\":{\"a\":1,\"b\":0,\"g\":0,\"r\":0.614982545375824}},\"b6088e\":{\"lock\":true,\"pos\":{\"x\":-20.0028991699219,\"y\":1.76419997215271,\"z\":3.50020003318787},\"rot\":{\"x\":0.0819000080227852,\"y\":180.013397216797,\"z\":0.0722000002861023},\"tint\":{\"a\":1,\"b\":0,\"g\":0,\"r\":0.499999940395355}},\"ba75c0\":{\"lock\":false,\"pos\":{\"x\":-26.0000019073486,\"y\":1.83530068397522,\"z\":9.99999904632568},\"rot\":{\"x\":-3.85226394428173E-06,\"y\":179.971755981445,\"z\":3.0175974075064E-07},\"tint\":{\"a\":1,\"b\":0,\"g\":0,\"r\":0.614982545375824}},\"bb23a9\":{\"lock\":false,\"pos\":{\"x\":3,\"y\":1.6016,\"z\":-6.5},\"rot\":{\"x\":0.0172,\"y\":180.0115,\"z\":0.0057},\"tint\":{\"a\":1,\"b\":0.701960802078247,\"g\":0.800000011920929,\"r\":0.874509811401367}},\"beaa6e\":{\"lock\":false,\"pos\":{\"x\":-1.49999964237213,\"y\":1.50683081150055,\"z\":18},\"rot\":{\"x\":-0.00420519197359681,\"y\":44.9881629943848,\"z\":359.988800048828},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"bf8897\":{\"lock\":false,\"pos\":{\"x\":-26,\"y\":1.83530044555664,\"z\":13.5},\"rot\":{\"x\":-6.23130881649558E-06,\"y\":179.974853515625,\"z\":1.96431457766266E-08},\"tint\":{\"a\":1,\"b\":0,\"g\":0,\"r\":0.614982545375824}},\"bfd0f7\":{\"lock\":false,\"pos\":{\"x\":9.49999904632568,\"y\":1.50483536720276,\"z\":12.5},\"rot\":{\"x\":0.00494783977046609,\"y\":90,\"z\":359.989105224609},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"c1ffb8\":{\"lock\":false,\"pos\":{\"x\":14.99,\"y\":1.518,\"z\":12.5106},\"rot\":{\"x\":0.0109,\"y\":179.8384,\"z\":0.0049},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"c4586b\":{\"lock\":false,\"pos\":{\"x\":30.5,\"y\":1.73394668102264,\"z\":-3},\"rot\":{\"x\":-0.00059087376575917,\"y\":180.00048828125,\"z\":180.001068115234},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"c56db4\":{\"lock\":false,\"pos\":{\"x\":-1.50000071525574,\"y\":1.50578534603119,\"z\":12.5},\"rot\":{\"x\":0.00494784349575639,\"y\":90.0001983642578,\"z\":359.989105224609},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"cb8584\":{\"lock\":false,\"pos\":{\"x\":24.9999980926514,\"y\":1.51367974281311,\"z\":-5.49999761581421},\"rot\":{\"x\":0.0108915446326137,\"y\":180,\"z\":180.004959106445},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"df7e24\":{\"lock\":false,\"pos\":{\"x\":-27.5001239776611,\"y\":1.81030213832855,\"z\":3.49987387657166},\"rot\":{\"x\":-5.14153271069517E-06,\"y\":180.00212097168,\"z\":1.32282437448339E-07},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"e191a7\":{\"lock\":false,\"pos\":{\"x\":-23.5,\"y\":1.7789,\"z\":26},\"rot\":{\"x\":0,\"y\":179.9993,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"f59531\":{\"lock\":false,\"pos\":{\"x\":4.1081,\"y\":1.521,\"z\":23.5402},\"rot\":{\"x\":0.0109,\"y\":179.3326,\"z\":0.0048},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"f94ecf\":{\"lock\":false,\"pos\":{\"x\":4.143,\"y\":1.5189,\"z\":12.5683},\"rot\":{\"x\":0.0109,\"y\":179.9962,\"z\":0.0049},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"ff8177\":{\"lock\":false,\"pos\":{\"x\":-19.9999980926514,\"y\":1.83530044555664,\"z\":13.5000019073486},\"rot\":{\"x\":-6.56874226478976E-06,\"y\":179.972579956055,\"z\":3.98810264812255E-08},\"tint\":{\"a\":1,\"b\":0,\"g\":0,\"r\":0.614982545375824}}}}","XmlUI":"","ContainedObjects":[{"GUID":"100382","Name":"Custom_Model","Transform":{"posX":-19.9395046,"posY":1.766301,"posZ":6.27619743,"rotX":0.00000453032771,"rotY":0.000191879459,"rotZ":8.949235e-9,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Text Tool","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0,"g":0,"b":0,"a":0},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":false,"Snap":false,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":false,"Tooltip":false,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomMesh":{"MeshURL":"http://cloud-3.steamusercontent.com/ugc/1478820768302617365/27883B7913E0E69143C3AA03493B7E7C4E8C29C0/","DiffuseURL":"","NormalURL":"","ColliderURL":"","Convex":true,"MaterialIndex":1,"TypeIndex":0,"CastShadows":true},"LuaScript":"-- Code for bag to identify text tool objects\r\nmovableTextTool_cowgoesmoo33 = true\r\n\r\n-- Number of characters before the text box width expands.\r\nEXPAND_INTERVAL = 20\r\n\r\n-- This table controls what is passed between save/load\r\ndata = {}\r\n\r\nfunction onLoad(saved_data)\r\n  if saved_data ~= '' then\r\n    data = JSON.decode(saved_data)\r\n    if data.text ~= '' then\r\n      self.interactable = data.interactable\r\n      staticMode()\r\n      return\r\n    end\r\n  else\r\n    data = {size=200, color=Color(0,0,0), text='', interactable=true,\r\n        enter_to_finish=false, autolock=false, autolift=false,\r\n        hover_height=0.05, box_transparency=1}\r\n  end\r\n\r\n  inputMode()\r\nend\r\n\r\n-- True if in the middle of delay after pressing Enter (with enter_to_finish on)\r\nfinishing = false\r\nfunction input_func(obj, color, input, stillEditing)\r\n  local params = getBox(input)\r\n  if params then\r\n    params.value = input\r\n    self.editInput(params)\r\n  end\r\n\r\n  if not stillEditing then\r\n    data.text = input\r\n    updateState()\r\n    if input ~= '' then staticMode(color) end\r\n  elseif data.enter_to_finish then\r\n    -- If enter is pressed: remove last newline and force finish\r\n    if not finishing and input:sub(-1) == '\\n' then\r\n      finishing = true\r\n      -- Delay to avoid user's Enter keypress being detected (opens chat box)\r\n      Wait.frames(function()\r\n        input = input:sub(1, -2)\r\n        data.text = input\r\n        updateState()\r\n        if input ~= '' then staticMode(color) else inputMode() end\r\n        finishing = false\r\n      end, 10)\r\n    end\r\n  end\r\nend\r\n\r\n-- When the inpupt box appears and lets the player type in it.\r\nfunction inputMode()\r\n  self.clearContextMenu()\r\n  self.clearInputs()\r\n  self.clearButtons()\r\n\r\n  local size = getBox(data.text, true)\r\n\r\n  self.createInput({\r\n    input_function = \"input_func\",\r\n    function_owner = self,\r\n    label          = \"Type Here\",\r\n    alignment      = 3,\r\n    position       = {x=0, y=data.hover_height, z=0},\r\n    rotation       = {0, 180, 0},\r\n    width          = size.width,\r\n    height         = size.height,\r\n    color          = getBackground(data.color),\r\n    font_color     = data.color,\r\n    font_size      = data.size,\r\n    value          = data.text,\r\n  })\r\n\r\n  self.addContextMenuItem('Color: Object Tint', function(color)\r\n    applyMultiple(color, 'setColor')\r\n  end)\r\n  self.addContextMenuItem('Color: Player', function(color)\r\n    applyMultiple(color, 'setColor', {Color.fromString(color)})\r\n  end)\r\n  self.addContextMenuItem('Color: Black', function(color)\r\n    applyMultiple(color, 'setColor', {Color(0,0,0)})\r\n  end)\r\n  self.addContextMenuItem('Color: White', function(color)\r\n    applyMultiple(color, 'setColor', {Color(1,1,1)})\r\n  end)\r\n  self.addContextMenuItem('Size: Increase', function(color)\r\n    applyMultiple(color, 'changeSize', {50})\r\n  end, true)\r\n  self.addContextMenuItem('Size: Decrease', function(color)\r\n    applyMultiple(color, 'changeSize', {-50})\r\n  end, true)\r\nend\r\n\r\n-- When the input box disappears and displays the text.\r\nfunction staticMode(player)\r\n  self.clearContextMenu()\r\n  if data.autolock then\r\n    self.locked = true\r\n  end\r\n  if self.getInputs() and #self.getInputs() ~= 0 then\r\n    self.removeInput(0)\r\n  end\r\n\r\n  -- Clear from selecting player\r\n  if player then\r\n    self.removeFromPlayerSelection(player)\r\n  end\r\n\r\n  local displayText = data.text\r\n  if data.enter_to_finish then\r\n    displayText = displayText:gsub('%[n%]', '\\n')\r\n  end\r\n\r\n  self.createButton({\r\n    label=displayText,\r\n    click_function=\"none\",\r\n    function_owner=self,\r\n    position={0,data.hover_height,0}, rotation={0,180,0}, height=0, width=0,\r\n    font_color=data.color, font_size=data.size\r\n  })\r\n\r\n  self.addContextMenuItem('Edit Text', function(color)\r\n    self.removeFromPlayerSelection(color)\r\n    inputMode()\r\n  end)\r\n  self.addContextMenuItem('Clear', function(color)\r\n    applyMultiple(color, 'clear', _, true)\r\n  end)\r\n  self.addContextMenuItem('Color: Object Tint', function(color)\r\n    applyMultiple(color, 'setColor')\r\n  end)\r\n  self.addContextMenuItem('Color: Player', function(color)\r\n    applyMultiple(color, 'setColor', {Color.fromString(color)})\r\n  end)\r\n  self.addContextMenuItem('Color: Black', function(color)\r\n    applyMultiple(color, 'setColor', {Color(0,0,0)})\r\n  end)\r\n  self.addContextMenuItem('Color: White', function(color)\r\n    applyMultiple(color, 'setColor', {Color(1,1,1)})\r\n  end)\r\n  self.addContextMenuItem('Size: Increase', function(color)\r\n    applyMultiple(color, 'changeSize', {50})\r\n  end, true)\r\n  self.addContextMenuItem('Size: Decrease', function(color)\r\n    applyMultiple(color, 'changeSize', {-50})\r\n  end, true)\r\n  self.addContextMenuItem('Permanently Attach', attemptAttach)\r\n  self.addContextMenuItem('Permalock', function(color)\r\n    applyMultiple(color, 'permalock', _, true)\r\n  end)\r\nend\r\n\r\nfunction changeSize(params)\r\n  local delta = params[1]\r\n  local newSize = data.size + delta\r\n  if newSize > 800  or newSize < 50 then\r\n    return\r\n  end\r\n  data.size = newSize\r\n  updateState()\r\n  if self.getButtons() and #self.getButtons() ~= 0 then\r\n    self.editButton({font_size=data.size})\r\n  else\r\n    local size = getBox(data.text, true)\r\n    self.editInput({width=size.width, height=size.height, font_size=data.size})\r\n  end\r\nend\r\n\r\nfunction setColor(params)\r\n  if params and params[1] then\r\n    data.color = params[1]\r\n  else\r\n    data.color = self.getColorTint():setAt('a', 1) -- Take on color of object tint\r\n  end\r\n  updateState()\r\n  if self.getButtons() and #self.getButtons() ~= 0 then\r\n    self.editButton({font_color=data.color})\r\n  else\r\n    self.editInput({font_color=data.color, color=getBackground(data.color)})\r\n  end\r\nend\r\n\r\nfunction getBackground(color) --determines whether to use black or white depending on luminance\r\n  local r,g,b = Color(color):get()\r\n\r\n  local lum = 0.2126*r + 0.7152*g + 0.0722*b\r\n  if lum > 0.75 then\r\n    return {0.2,0.2,0.2, data.box_transparency}\r\n  else\r\n    return {1,1,1, data.box_transparency}\r\n  end\r\nend\r\n\r\nfunction clear()\r\n  data.text = ''\r\n  updateState()\r\n  inputMode()\r\nend\r\n\r\nfunction permalock()\r\n  self.interactable = false\r\n  data.interactable = false\r\n  updateState()\r\nend\r\n\r\nlocal target_script = [[\r\nfunction onLoad(script_state)\r\n  if script_state and script_state ~= '' then\r\n    local state = JSON.decode(script_state)\r\n    for _,entry in ipairs(state) do\r\n      self.createButton(entry)\r\n    end\r\n    self.addContextMenuItem('Clear All Text', function(color)\r\n      self.clearContextMenu()\r\n      self.clearButtons()\r\n      self.script_state = ''\r\n      self.script_code = ''\r\n    end)\r\n  end\r\nend\r\n]]\r\n\r\nfunction attemptAttach(player_color)\r\n  local objs = Player[player_color].getSelectedObjects()\r\n  local attachee\r\n  local attachers = {}\r\n  for _,obj in ipairs(objs) do\r\n    if obj.getVar('movableTextTool_cowgoesmoo33') then\r\n      if obj ~= self then\r\n        table.insert(attachers, obj)\r\n      end\r\n    else\r\n      if attachee then\r\n        broadcastToColor(\"More than one target selected.\", player_color)\r\n        return\r\n      else\r\n        attachee = obj\r\n      end\r\n    end\r\n  end\r\n  if attachee then\r\n    local code = attachee.script_code\r\n    if code and code ~= '' and code ~= target_script then\r\n      broadcastToColor(\"Warning: script on card has been overriden. Rewind time to undo.\", player_color)\r\n    end\r\n    for i,attacher in ipairs(attachers) do\r\n      attacher.call('attach', {target = attachee})\r\n    end\r\n    attach({target = attachee})\r\n    local type, flip = attachee.type, attachee.getRotation().z\r\n    if (type == 'Card' or type == 'Deck') and flip > 175 and flip < 185 then\r\n      broadcastToColor(\"Warning: text will not display if card or deck is facing down.\", player_color)\r\n    end\r\n  else\r\n    broadcastToColor(\"You must have a target object in your selection (using click-and-drag or Ctrl+Click) to use this option.\", player_color)\r\n  end\r\nend\r\n\r\nfunction attach(params)\r\n  local target = params.target\r\n  local displayText = data.text\r\n  if data.enter_to_finish then\r\n    displayText = displayText:gsub('%[n%]', '\\n')\r\n  end\r\n\r\n  local textRotation = self.getRotation():sub(target.getRotation())\r\n    :add(Vector(180, 0, 180))\r\n\r\n  local textPosition = target.positionToLocal(\r\n    self.getPosition():add(Vector(0, data.hover_height, 0))\r\n  )\r\n  textPosition.x = -textPosition.x\r\n\r\n  local textScale = {}\r\n  textScale.x = self.getScale().x / target.getScale().x\r\n  textScale.y = self.getScale().x / target.getScale().y\r\n  textScale.z = self.getScale().x / target.getScale().z\r\n\r\n  local details = {\r\n    label=displayText,\r\n    click_function=\"none\",\r\n    function_owner=nil,\r\n    position=textPosition,\r\n    rotation=textRotation,\r\n    scale=textScale,\r\n    height=0, width=0,\r\n    font_color=data.color, font_size=data.size\r\n  }\r\n\r\n  target.createButton(details)\r\n\r\n  local script_state = target.script_state\r\n  if script_state and script_state ~= '' then\r\n    local state = JSON.decode(script_state)\r\n    table.insert(state, details)\r\n    target.script_state = JSON.encode(state)\r\n  else\r\n    target.script_state = JSON.encode({[1]=details})\r\n  end\r\n\r\n  target.script_code = target_script\r\n\r\n  self.destruct()\r\nend\r\n\r\nfunction applyMultiple(player_color, func_string, params, static_only)\r\n  local objs = Player[player_color].getSelectedObjects()\r\n  for _,obj in ipairs(objs) do\r\n    if obj.getVar('movableTextTool_cowgoesmoo33') then\r\n      if not static_only or obj.call('isStatic') then\r\n        obj.call(func_string, params)\r\n      end\r\n    end\r\n  end\r\nend\r\n\r\nfunction isStatic()\r\n  local input = self.getInputs()\r\n  return not input or #input == 0\r\nend\r\n\r\nfunction getBox(input, force)\r\n  local maxLength, lineCount = EXPAND_INTERVAL, 1\r\n  local lineLength = 0\r\n  for i = 1, #input do\r\n    local c = input:sub(i,i)\r\n    if c == '\\n' then\r\n      lineCount = lineCount + 1\r\n      if lineLength > maxLength then maxLength = (math.floor(lineLength / EXPAND_INTERVAL) + 1) * EXPAND_INTERVAL end\r\n      lineLength = 0\r\n    else\r\n      lineLength = lineLength + 1\r\n    end\r\n  end\r\n  if lineLength > maxLength then maxLength = (math.floor(lineLength / EXPAND_INTERVAL) + 1) * EXPAND_INTERVAL end\r\n\r\n  newWidth = data.size * maxLength * 0.9\r\n  newHeight = data.size * lineCount + 23\r\n\r\n  if force or boxWidth ~= newWidth or boxHeight ~= newHeight then\r\n    boxWidth, boxHeight = newWidth, newHeight\r\n    return {width = boxWidth, height = boxHeight}\r\n  end\r\n  return nil\r\nend\r\n\r\ntemp_lift = nil\r\nfunction onPickUp(player_color)\r\n  if data.autolift then\r\n    local player = Player[player_color]\r\n    temp_lift = player.lift_height\r\n    player.lift_height = 0\r\n  end\r\nend\r\n\r\nfunction onDrop(player_color)\r\n  if data.autolift and temp_lift then\r\n    Player[player_color].lift_height = temp_lift\r\n  end\r\nend\r\n\r\n-- Should be called every time data is modified, allows info to be saved on copy/paste\r\nfunction updateState()\r\n  self.script_state = JSON.encode(data)\r\nend\r\n\r\nfunction onSave()\r\n  self.script_state = JSON.encode(data)\r\n  return self.script_state\r\nend","LuaScriptState":"{\"autolift\":false,\"autolock\":false,\"box_transparency\":1,\"color\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1},\"enter_to_finish\":false,\"hover_height\":0.05,\"interactable\":true,\"size\":200,\"text\":\"Déplacement des \\nrejetons de Yog Sothoth\"}","XmlUI":""},{"GUID":"319cd6","Name":"Deck","Transform":{"posX":12.5,"posY":1.536432,"posZ":-5.99990749,"rotX":0.00494732941,"rotY":89.9961548,"rotZ":359.9891,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Deck Intrigue","Description":"Aux Frontières du Visible","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":false,"SidewaysCard":true,"DeckIDs":[19002,19001,19000],"CustomDeck":{"190":{"FaceURL":"https://i.imgur.com/MONRL2x.jpg","BackURL":"https://i.imgur.com/5KgkkOQ.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":"","ContainedObjects":[{"GUID":"b32aeb","Name":"Card","Transform":{"posX":12.5000019,"posY":1.6461308,"posZ":-5.9999094,"rotX":0.004957415,"rotY":89.99619,"rotZ":359.989044,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Horreurs Déchaînées","Description":"Intrigue 3a","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"doomThreshold\": 7,\n  \"id\": \"02239\",\n  \"type\": \"Agenda\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":19002,"SidewaysCard":true,"CustomDeck":{"190":{"FaceURL":"https://i.imgur.com/MONRL2x.jpg","BackURL":"https://i.imgur.com/5KgkkOQ.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"51e7a2","Name":"Card","Transform":{"posX":12.5000019,"posY":1.60714328,"posZ":-5.99991,"rotX":0.00435768766,"rotY":89.99619,"rotZ":359.988556,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Attendant son Heure","Description":"Intrigue 2a","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"doomThreshold\": 6,\n  \"id\": \"02238\",\n  \"type\": \"Agenda\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":19001,"SidewaysCard":true,"CustomDeck":{"190":{"FaceURL":"https://i.imgur.com/MONRL2x.jpg","BackURL":"https://i.imgur.com/5KgkkOQ.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"478563","Name":"Card","Transform":{"posX":12.5000057,"posY":1.61307991,"posZ":-5.99991941,"rotX":0.007869083,"rotY":89.99619,"rotZ":359.9878,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Créatures en Furie","Description":"Intrigue 1a","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"doomThreshold\": 5,\n  \"id\": \"02237\",\n  \"type\": \"Agenda\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":19000,"SidewaysCard":true,"CustomDeck":{"190":{"FaceURL":"https://i.imgur.com/MONRL2x.jpg","BackURL":"https://i.imgur.com/5KgkkOQ.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""}]},{"GUID":"4b176b","Name":"CardCustom","Transform":{"posX":22.326746,"posY":1.5139116,"posZ":-5.49482441,"rotX":0.0108913966,"rotY":180.000046,"rotZ":0.004948339,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Référence","Description":"Aux Frontières du Visible","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":559600,"SidewaysCard":false,"CustomDeck":{"5596":{"FaceURL":"http://cloud-3.steamusercontent.com/ugc/1770458304230375188/77BC315544B2278EAED7641278B231D0A9999556/","BackURL":"http://cloud-3.steamusercontent.com/ugc/1770458304230375417/8B659AFFC07EC3D05BED0501EC34879BD952522D/","NumWidth":1,"NumHeight":1,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"4badac","Name":"Custom_Tile","Transform":{"posX":9.499999,"posY":1.50683129,"posZ":23,"rotX":0.00494723627,"rotY":90.0002,"rotZ":359.9891,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/vppt2my.png","ImageSecondaryURL":"https://i.imgur.com/vppt2my.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":"","States":{"2":{"GUID":"44b0c5","Name":"Custom_Tile","Transform":{"posX":-39.7933121,"posY":1.63758957,"posZ":2.038383,"rotX":359.9201,"rotY":269.9961,"rotZ":0.0168742146,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/HyfE8m8.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""},"3":{"GUID":"5b38c6","Name":"Custom_Tile","Transform":{"posX":-38.8217163,"posY":1.99356019,"posZ":0.4159239,"rotX":359.9201,"rotY":272.9828,"rotZ":0.01687373,"scaleX":0.8,"scaleY":1,"scaleZ":0.8},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/dHKBLoD.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""}}},{"GUID":"4e340d","Name":"Deck","Transform":{"posX":-32.0003357,"posY":1.80548811,"posZ":3.49977016,"rotX":-0.00000472115335,"rotY":180.000931,"rotZ":-4.33628685e-7,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Formules Ésotériques","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":false,"SidewaysCard":false,"DeckIDs":[117303,117304,117302,117301],"CustomDeck":{"1173":{"FaceURL":"https://i.imgur.com/0FRbPFZ.jpg","BackURL":"https://i.imgur.com/z0qG3Pt.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":"","ContainedObjects":[{"GUID":"fb62f5","Name":"Card","Transform":{"posX":-32.00034,"posY":1.87235022,"posZ":3.4997654,"rotX":0.000676598749,"rotY":180.0009,"rotZ":-0.0006292513,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Formule Ésotérique","Description":"","GMNotes":"{\n  \"class\": \"Neutral\",\n  \"cost\": 0,\n  \"cycle\": \"Standalone\",\n  \"id\": \"02254\",\n  \"traits\": \"Spell.\",\n  \"type\": \"Asset\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":117303,"SidewaysCard":false,"CustomDeck":{"1173":{"FaceURL":"https://i.imgur.com/0FRbPFZ.jpg","BackURL":"https://i.imgur.com/z0qG3Pt.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"a72800","Name":"Card","Transform":{"posX":-32.00034,"posY":5.06089163,"posZ":3.4997654,"rotX":-0.0000049915634,"rotY":180.0009,"rotZ":-2.21364388e-7,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Formule Ésotérique","Description":"","GMNotes":"{\n  \"class\": \"Neutral\",\n  \"cost\": 0,\n  \"cycle\": \"Standalone\",\n  \"id\": \"02254\",\n  \"traits\": \"Spell.\",\n  \"type\": \"Asset\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":117304,"SidewaysCard":false,"CustomDeck":{"1173":{"FaceURL":"https://i.imgur.com/0FRbPFZ.jpg","BackURL":"https://i.imgur.com/z0qG3Pt.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"b48458","Name":"Card","Transform":{"posX":-32.00034,"posY":5.260892,"posZ":3.4997654,"rotX":-0.0000049915634,"rotY":180.0009,"rotZ":-2.21364388e-7,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Formule Ésotérique","Description":"","GMNotes":"{\n  \"class\": \"Neutral\",\n  \"cost\": 0,\n  \"cycle\": \"Standalone\",\n  \"id\": \"02254\",\n  \"traits\": \"Spell.\",\n  \"type\": \"Asset\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":117302,"SidewaysCard":false,"CustomDeck":{"1173":{"FaceURL":"https://i.imgur.com/0FRbPFZ.jpg","BackURL":"https://i.imgur.com/z0qG3Pt.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"a77157","Name":"Card","Transform":{"posX":-32.00034,"posY":1.88598585,"posZ":3.4997654,"rotX":0.00296735927,"rotY":180.0009,"rotZ":-0.0013419626,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Formule Ésotérique","Description":"","GMNotes":"{\n  \"class\": \"Neutral\",\n  \"cost\": 0,\n  \"cycle\": \"Standalone\",\n  \"id\": \"02254\",\n  \"traits\": \"Spell.\",\n  \"type\": \"Asset\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":117301,"SidewaysCard":false,"CustomDeck":{"1173":{"FaceURL":"https://i.imgur.com/0FRbPFZ.jpg","BackURL":"https://i.imgur.com/z0qG3Pt.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""}]},{"GUID":"5559ff","Name":"Custom_Tile","Transform":{"posX":9.5,"posY":1.50378978,"posZ":7.00000048,"rotX":-0.004208014,"rotY":44.9737,"rotZ":359.9888,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/vppt2my.png","ImageSecondaryURL":"https://i.imgur.com/vppt2my.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":"","States":{"2":{"GUID":"44b0c5","Name":"Custom_Tile","Transform":{"posX":-39.7933121,"posY":1.63758957,"posZ":2.038383,"rotX":359.9201,"rotY":269.9961,"rotZ":0.0168742146,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/HyfE8m8.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""},"3":{"GUID":"5b38c6","Name":"Custom_Tile","Transform":{"posX":-38.8217163,"posY":1.99356019,"posZ":0.4159239,"rotX":359.9201,"rotY":272.9828,"rotZ":0.01687373,"scaleX":0.8,"scaleY":1,"scaleZ":0.8},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/dHKBLoD.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""}}},{"GUID":"6e85ad","Name":"Custom_Model_Bag","Transform":{"posX":-19.9999,"posY":1.76530147,"posZ":3.4997983,"rotX":-0.00000415516524,"rotY":179.978592,"rotZ":-0.00000243318186,"scaleX":1,"scaleY":0.562042058,"scaleZ":1},"Nickname":"Déplacement rejetons de Yog Sototh","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":1,"g":1,"b":1},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"MaterialIndex":-1,"MeshIndex":-1,"CustomMesh":{"MeshURL":"https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/advboxes/tuckbox_h_MSH.obj","DiffuseURL":"http://cloud-3.steamusercontent.com/ugc/1983303656990210870/D2994AC54A968C74968E19B4F03195BC3664AEE5/","NormalURL":"","ColliderURL":"","Convex":true,"MaterialIndex":3,"TypeIndex":6,"CustomShader":{"SpecularColor":{"r":1,"g":1,"b":1},"SpecularIntensity":0,"SpecularSharpness":2,"FresnelStrength":0},"CastShadows":true},"Bag":{"Order":2},"LuaScript":"","LuaScriptState":"","XmlUI":"","ContainedObjects":[{"GUID":"5987e1","Name":"Custom_Tile","Transform":{"posX":-14.0000315,"posY":2.070467,"posZ":3.49999022,"rotX":0.0108503429,"rotY":179.9997,"rotZ":-0.00496041961,"scaleX":0.508209646,"scaleY":1,"scaleZ":0.508209646},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":1,"g":1,"b":1},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"http://cloud-3.steamusercontent.com/ugc/1932636167916093318/A61D5DC1896FFC954DE3AE0CA4A202E8767D69B1/","ImageSecondaryURL":"http://cloud-3.steamusercontent.com/ugc/1932636167916093318/A61D5DC1896FFC954DE3AE0CA4A202E8767D69B1/","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":2,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"5d31c9","Name":"Custom_Tile","Transform":{"posX":-13.5000105,"posY":2.070523,"posZ":3.49998331,"rotX":0.00617694529,"rotY":179.999908,"rotZ":0.00151016912,"scaleX":0.508209646,"scaleY":1,"scaleZ":0.508209646},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":1,"g":1,"b":1},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"http://cloud-3.steamusercontent.com/ugc/1932636167916090422/E9EC18EF06ED565B5D8071E8BBA1655B5AE562E0/","ImageSecondaryURL":"http://cloud-3.steamusercontent.com/ugc/1932636167916090422/E9EC18EF06ED565B5D8071E8BBA1655B5AE562E0/","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":2,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"db25ed","Name":"Custom_Tile","Transform":{"posX":-13.0000525,"posY":2.07050371,"posZ":3.5,"rotX":0.008796254,"rotY":180.00029,"rotZ":359.993378,"scaleX":0.508209646,"scaleY":1,"scaleZ":0.508209646},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":1,"g":1,"b":1},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"http://cloud-3.steamusercontent.com/ugc/1932636167916094372/B9D7A94D7F77A387B60636F4EAE88633E33C73A5/","ImageSecondaryURL":"http://cloud-3.steamusercontent.com/ugc/1932636167916094372/B9D7A94D7F77A387B60636F4EAE88633E33C73A5/","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":2,"Thickness":0.2,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"ce6512","Name":"Custom_Tile","Transform":{"posX":-13.9999008,"posY":2.084814,"posZ":4.000099,"rotX":0.11385,"rotY":180.000031,"rotZ":359.901855,"scaleX":0.508209646,"scaleY":1,"scaleZ":0.508209646},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":1,"g":1,"b":1},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"http://cloud-3.steamusercontent.com/ugc/1932636167916089463/D9B628D347A76B58B812FE8148E3555D0E6C4A33/","ImageSecondaryURL":"http://cloud-3.steamusercontent.com/ugc/1932636167916089463/D9B628D347A76B58B812FE8148E3555D0E6C4A33/","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":2,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"7bd19b","Name":"Custom_Tile","Transform":{"posX":-13.9997978,"posY":2.08475137,"posZ":3.50019383,"rotX":0.111156173,"rotY":179.999924,"rotZ":359.904175,"scaleX":0.508209646,"scaleY":1,"scaleZ":0.508209646},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":1,"g":1,"b":1},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"http://cloud-3.steamusercontent.com/ugc/1932636167916091963/EBBF176329F490453987E42E0C8ACF89029B32F6/","ImageSecondaryURL":"http://cloud-3.steamusercontent.com/ugc/1932636167916091963/EBBF176329F490453987E42E0C8ACF89029B32F6/","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":2,"Thickness":0.2,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"8513bd","Name":"Custom_Tile","Transform":{"posX":-20.0001316,"posY":2.34488082,"posZ":2.999945,"rotX":359.945435,"rotY":179.999146,"rotZ":0.133358628,"scaleX":0.508209646,"scaleY":1,"scaleZ":0.508209646},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":1,"g":1,"b":1},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"http://cloud-3.steamusercontent.com/ugc/1932636167916092541/FF404FFC6598C19F0D26930D7D771010D5D74108/","ImageSecondaryURL":"http://cloud-3.steamusercontent.com/ugc/1932636167916092541/FF404FFC6598C19F0D26930D7D771010D5D74108/","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":2,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""}]},{"GUID":"7234af","Name":"Custom_Tile","Transform":{"posX":4,"posY":1.50426471,"posZ":7,"rotX":0.0108897751,"rotY":180.020477,"rotZ":0.00495374575,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/vppt2my.png","ImageSecondaryURL":"https://i.imgur.com/vppt2my.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":"","States":{"2":{"GUID":"44b0c5","Name":"Custom_Tile","Transform":{"posX":-39.7933121,"posY":1.63758957,"posZ":2.038383,"rotX":359.9201,"rotY":269.9961,"rotZ":0.0168742146,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/HyfE8m8.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""},"3":{"GUID":"5b38c6","Name":"Custom_Tile","Transform":{"posX":-38.8217163,"posY":1.99356019,"posZ":0.4159239,"rotX":359.9201,"rotY":272.9828,"rotZ":0.01687373,"scaleX":0.8,"scaleY":1,"scaleZ":0.8},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/dHKBLoD.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""}}},{"GUID":"770dc6","Name":"Custom_Model","Transform":{"posX":-24.9559917,"posY":1.76629913,"posZ":28.8954067,"rotX":0.00000485223245,"rotY":0.000157151182,"rotZ":-1.64066947e-8,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Text Tool","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0,"g":0,"b":0,"a":0},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":false,"Snap":false,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":false,"Tooltip":false,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomMesh":{"MeshURL":"http://cloud-3.steamusercontent.com/ugc/1478820768302617365/27883B7913E0E69143C3AA03493B7E7C4E8C29C0/","DiffuseURL":"","NormalURL":"","ColliderURL":"","Convex":true,"MaterialIndex":1,"TypeIndex":0,"CastShadows":true},"LuaScript":"-- Code for bag to identify text tool objects\r\nmovableTextTool_cowgoesmoo33 = true\r\n\r\n-- Number of characters before the text box width expands.\r\nEXPAND_INTERVAL = 20\r\n\r\n-- This table controls what is passed between save/load\r\ndata = {}\r\n\r\nfunction onLoad(saved_data)\r\n  if saved_data ~= '' then\r\n    data = JSON.decode(saved_data)\r\n    if data.text ~= '' then\r\n      self.interactable = data.interactable\r\n      staticMode()\r\n      return\r\n    end\r\n  else\r\n    data = {size=200, color=Color(0,0,0), text='', interactable=true,\r\n        enter_to_finish=false, autolock=false, autolift=false,\r\n        hover_height=0.05, box_transparency=1}\r\n  end\r\n\r\n  inputMode()\r\nend\r\n\r\n-- True if in the middle of delay after pressing Enter (with enter_to_finish on)\r\nfinishing = false\r\nfunction input_func(obj, color, input, stillEditing)\r\n  local params = getBox(input)\r\n  if params then\r\n    params.value = input\r\n    self.editInput(params)\r\n  end\r\n\r\n  if not stillEditing then\r\n    data.text = input\r\n    updateState()\r\n    if input ~= '' then staticMode(color) end\r\n  elseif data.enter_to_finish then\r\n    -- If enter is pressed: remove last newline and force finish\r\n    if not finishing and input:sub(-1) == '\\n' then\r\n      finishing = true\r\n      -- Delay to avoid user's Enter keypress being detected (opens chat box)\r\n      Wait.frames(function()\r\n        input = input:sub(1, -2)\r\n        data.text = input\r\n        updateState()\r\n        if input ~= '' then staticMode(color) else inputMode() end\r\n        finishing = false\r\n      end, 10)\r\n    end\r\n  end\r\nend\r\n\r\n-- When the inpupt box appears and lets the player type in it.\r\nfunction inputMode()\r\n  self.clearContextMenu()\r\n  self.clearInputs()\r\n  self.clearButtons()\r\n\r\n  local size = getBox(data.text, true)\r\n\r\n  self.createInput({\r\n    input_function = \"input_func\",\r\n    function_owner = self,\r\n    label          = \"Type Here\",\r\n    alignment      = 3,\r\n    position       = {x=0, y=data.hover_height, z=0},\r\n    rotation       = {0, 180, 0},\r\n    width          = size.width,\r\n    height         = size.height,\r\n    color          = getBackground(data.color),\r\n    font_color     = data.color,\r\n    font_size      = data.size,\r\n    value          = data.text,\r\n  })\r\n\r\n  self.addContextMenuItem('Color: Object Tint', function(color)\r\n    applyMultiple(color, 'setColor')\r\n  end)\r\n  self.addContextMenuItem('Color: Player', function(color)\r\n    applyMultiple(color, 'setColor', {Color.fromString(color)})\r\n  end)\r\n  self.addContextMenuItem('Color: Black', function(color)\r\n    applyMultiple(color, 'setColor', {Color(0,0,0)})\r\n  end)\r\n  self.addContextMenuItem('Color: White', function(color)\r\n    applyMultiple(color, 'setColor', {Color(1,1,1)})\r\n  end)\r\n  self.addContextMenuItem('Size: Increase', function(color)\r\n    applyMultiple(color, 'changeSize', {50})\r\n  end, true)\r\n  self.addContextMenuItem('Size: Decrease', function(color)\r\n    applyMultiple(color, 'changeSize', {-50})\r\n  end, true)\r\nend\r\n\r\n-- When the input box disappears and displays the text.\r\nfunction staticMode(player)\r\n  self.clearContextMenu()\r\n  if data.autolock then\r\n    self.locked = true\r\n  end\r\n  if self.getInputs() and #self.getInputs() ~= 0 then\r\n    self.removeInput(0)\r\n  end\r\n\r\n  -- Clear from selecting player\r\n  if player then\r\n    self.removeFromPlayerSelection(player)\r\n  end\r\n\r\n  local displayText = data.text\r\n  if data.enter_to_finish then\r\n    displayText = displayText:gsub('%[n%]', '\\n')\r\n  end\r\n\r\n  self.createButton({\r\n    label=displayText,\r\n    click_function=\"none\",\r\n    function_owner=self,\r\n    position={0,data.hover_height,0}, rotation={0,180,0}, height=0, width=0,\r\n    font_color=data.color, font_size=data.size\r\n  })\r\n\r\n  self.addContextMenuItem('Edit Text', function(color)\r\n    self.removeFromPlayerSelection(color)\r\n    inputMode()\r\n  end)\r\n  self.addContextMenuItem('Clear', function(color)\r\n    applyMultiple(color, 'clear', _, true)\r\n  end)\r\n  self.addContextMenuItem('Color: Object Tint', function(color)\r\n    applyMultiple(color, 'setColor')\r\n  end)\r\n  self.addContextMenuItem('Color: Player', function(color)\r\n    applyMultiple(color, 'setColor', {Color.fromString(color)})\r\n  end)\r\n  self.addContextMenuItem('Color: Black', function(color)\r\n    applyMultiple(color, 'setColor', {Color(0,0,0)})\r\n  end)\r\n  self.addContextMenuItem('Color: White', function(color)\r\n    applyMultiple(color, 'setColor', {Color(1,1,1)})\r\n  end)\r\n  self.addContextMenuItem('Size: Increase', function(color)\r\n    applyMultiple(color, 'changeSize', {50})\r\n  end, true)\r\n  self.addContextMenuItem('Size: Decrease', function(color)\r\n    applyMultiple(color, 'changeSize', {-50})\r\n  end, true)\r\n  self.addContextMenuItem('Permanently Attach', attemptAttach)\r\n  self.addContextMenuItem('Permalock', function(color)\r\n    applyMultiple(color, 'permalock', _, true)\r\n  end)\r\nend\r\n\r\nfunction changeSize(params)\r\n  local delta = params[1]\r\n  local newSize = data.size + delta\r\n  if newSize > 800  or newSize < 50 then\r\n    return\r\n  end\r\n  data.size = newSize\r\n  updateState()\r\n  if self.getButtons() and #self.getButtons() ~= 0 then\r\n    self.editButton({font_size=data.size})\r\n  else\r\n    local size = getBox(data.text, true)\r\n    self.editInput({width=size.width, height=size.height, font_size=data.size})\r\n  end\r\nend\r\n\r\nfunction setColor(params)\r\n  if params and params[1] then\r\n    data.color = params[1]\r\n  else\r\n    data.color = self.getColorTint():setAt('a', 1) -- Take on color of object tint\r\n  end\r\n  updateState()\r\n  if self.getButtons() and #self.getButtons() ~= 0 then\r\n    self.editButton({font_color=data.color})\r\n  else\r\n    self.editInput({font_color=data.color, color=getBackground(data.color)})\r\n  end\r\nend\r\n\r\nfunction getBackground(color) --determines whether to use black or white depending on luminance\r\n  local r,g,b = Color(color):get()\r\n\r\n  local lum = 0.2126*r + 0.7152*g + 0.0722*b\r\n  if lum > 0.75 then\r\n    return {0.2,0.2,0.2, data.box_transparency}\r\n  else\r\n    return {1,1,1, data.box_transparency}\r\n  end\r\nend\r\n\r\nfunction clear()\r\n  data.text = ''\r\n  updateState()\r\n  inputMode()\r\nend\r\n\r\nfunction permalock()\r\n  self.interactable = false\r\n  data.interactable = false\r\n  updateState()\r\nend\r\n\r\nlocal target_script = [[\r\nfunction onLoad(script_state)\r\n  if script_state and script_state ~= '' then\r\n    local state = JSON.decode(script_state)\r\n    for _,entry in ipairs(state) do\r\n      self.createButton(entry)\r\n    end\r\n    self.addContextMenuItem('Clear All Text', function(color)\r\n      self.clearContextMenu()\r\n      self.clearButtons()\r\n      self.script_state = ''\r\n      self.script_code = ''\r\n    end)\r\n  end\r\nend\r\n]]\r\n\r\nfunction attemptAttach(player_color)\r\n  local objs = Player[player_color].getSelectedObjects()\r\n  local attachee\r\n  local attachers = {}\r\n  for _,obj in ipairs(objs) do\r\n    if obj.getVar('movableTextTool_cowgoesmoo33') then\r\n      if obj ~= self then\r\n        table.insert(attachers, obj)\r\n      end\r\n    else\r\n      if attachee then\r\n        broadcastToColor(\"More than one target selected.\", player_color)\r\n        return\r\n      else\r\n        attachee = obj\r\n      end\r\n    end\r\n  end\r\n  if attachee then\r\n    local code = attachee.script_code\r\n    if code and code ~= '' and code ~= target_script then\r\n      broadcastToColor(\"Warning: script on card has been overriden. Rewind time to undo.\", player_color)\r\n    end\r\n    for i,attacher in ipairs(attachers) do\r\n      attacher.call('attach', {target = attachee})\r\n    end\r\n    attach({target = attachee})\r\n    local type, flip = attachee.type, attachee.getRotation().z\r\n    if (type == 'Card' or type == 'Deck') and flip > 175 and flip < 185 then\r\n      broadcastToColor(\"Warning: text will not display if card or deck is facing down.\", player_color)\r\n    end\r\n  else\r\n    broadcastToColor(\"You must have a target object in your selection (using click-and-drag or Ctrl+Click) to use this option.\", player_color)\r\n  end\r\nend\r\n\r\nfunction attach(params)\r\n  local target = params.target\r\n  local displayText = data.text\r\n  if data.enter_to_finish then\r\n    displayText = displayText:gsub('%[n%]', '\\n')\r\n  end\r\n\r\n  local textRotation = self.getRotation():sub(target.getRotation())\r\n    :add(Vector(180, 0, 180))\r\n\r\n  local textPosition = target.positionToLocal(\r\n    self.getPosition():add(Vector(0, data.hover_height, 0))\r\n  )\r\n  textPosition.x = -textPosition.x\r\n\r\n  local textScale = {}\r\n  textScale.x = self.getScale().x / target.getScale().x\r\n  textScale.y = self.getScale().x / target.getScale().y\r\n  textScale.z = self.getScale().x / target.getScale().z\r\n\r\n  local details = {\r\n    label=displayText,\r\n    click_function=\"none\",\r\n    function_owner=nil,\r\n    position=textPosition,\r\n    rotation=textRotation,\r\n    scale=textScale,\r\n    height=0, width=0,\r\n    font_color=data.color, font_size=data.size\r\n  }\r\n\r\n  target.createButton(details)\r\n\r\n  local script_state = target.script_state\r\n  if script_state and script_state ~= '' then\r\n    local state = JSON.decode(script_state)\r\n    table.insert(state, details)\r\n    target.script_state = JSON.encode(state)\r\n  else\r\n    target.script_state = JSON.encode({[1]=details})\r\n  end\r\n\r\n  target.script_code = target_script\r\n\r\n  self.destruct()\r\nend\r\n\r\nfunction applyMultiple(player_color, func_string, params, static_only)\r\n  local objs = Player[player_color].getSelectedObjects()\r\n  for _,obj in ipairs(objs) do\r\n    if obj.getVar('movableTextTool_cowgoesmoo33') then\r\n      if not static_only or obj.call('isStatic') then\r\n        obj.call(func_string, params)\r\n      end\r\n    end\r\n  end\r\nend\r\n\r\nfunction isStatic()\r\n  local input = self.getInputs()\r\n  return not input or #input == 0\r\nend\r\n\r\nfunction getBox(input, force)\r\n  local maxLength, lineCount = EXPAND_INTERVAL, 1\r\n  local lineLength = 0\r\n  for i = 1, #input do\r\n    local c = input:sub(i,i)\r\n    if c == '\\n' then\r\n      lineCount = lineCount + 1\r\n      if lineLength > maxLength then maxLength = (math.floor(lineLength / EXPAND_INTERVAL) + 1) * EXPAND_INTERVAL end\r\n      lineLength = 0\r\n    else\r\n      lineLength = lineLength + 1\r\n    end\r\n  end\r\n  if lineLength > maxLength then maxLength = (math.floor(lineLength / EXPAND_INTERVAL) + 1) * EXPAND_INTERVAL end\r\n\r\n  newWidth = data.size * maxLength * 0.9\r\n  newHeight = data.size * lineCount + 23\r\n\r\n  if force or boxWidth ~= newWidth or boxHeight ~= newHeight then\r\n    boxWidth, boxHeight = newWidth, newHeight\r\n    return {width = boxWidth, height = boxHeight}\r\n  end\r\n  return nil\r\nend\r\n\r\ntemp_lift = nil\r\nfunction onPickUp(player_color)\r\n  if data.autolift then\r\n    local player = Player[player_color]\r\n    temp_lift = player.lift_height\r\n    player.lift_height = 0\r\n  end\r\nend\r\n\r\nfunction onDrop(player_color)\r\n  if data.autolift and temp_lift then\r\n    Player[player_color].lift_height = temp_lift\r\n  end\r\nend\r\n\r\n-- Should be called every time data is modified, allows info to be saved on copy/paste\r\nfunction updateState()\r\n  self.script_state = JSON.encode(data)\r\nend\r\n\r\nfunction onSave()\r\n  self.script_state = JSON.encode(data)\r\n  return self.script_state\r\nend","LuaScriptState":"{\"autolift\":false,\"autolock\":false,\"box_transparency\":1,\"color\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1},\"enter_to_finish\":false,\"hover_height\":0.05,\"interactable\":true,\"size\":500,\"text\":\"Hors jeu\"}","XmlUI":""},{"GUID":"7a97a0","Name":"Custom_Model_Bag","Transform":{"posX":-23,"posY":1.8353008,"posZ":9.999999,"rotX":-0.00000438542338,"rotY":179.971909,"rotZ":2.749081e-7,"scaleX":0.7,"scaleY":0.7,"scaleZ":0.7},"Nickname":"Choisir un lieu au hasard","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.614982545,"g":0,"b":0},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"MaterialIndex":-1,"MeshIndex":-1,"CustomMesh":{"MeshURL":"https://pastebin.com/raw/ALrYhQGb","DiffuseURL":"http://cloud-3.steamusercontent.com/ugc/1936013662302001975/7B1C2164A753181108452C97908B20F2F40F3F11/","NormalURL":"","ColliderURL":"","Convex":true,"MaterialIndex":3,"TypeIndex":6,"CustomShader":{"SpecularColor":{"r":1,"g":1,"b":1},"SpecularIntensity":0,"SpecularSharpness":2,"FresnelStrength":0},"CastShadows":true},"Bag":{"Order":0},"LuaScript":"-- Random memory bag\r\n-- based on Utility memory bag by Directsun (Version 2.7.0)\r\n\r\nlocal CONFIG = {\r\n    MEMORY_GROUP = {\r\n        -- This determines how many frames to wait before actually placing objects onto the table when the \"Place\" button is clicked.\r\n        -- This gives the other bags time to recall their objects.\r\n        -- The delay ONLY occurs if other bags have objects out.\r\n        FRAME_DELAY_BEFORE_PLACING_OBJECTS = 30\r\n    }\r\n}\r\n\r\nmath.randomseed(os.time())\r\n\r\n--[[ Memory Bag Groups ]]\r\n--[[ Utility Memory Bags may be added to a named group, called a \"memory group\".\r\nYou can add a bag to a group through the bag's UI: \"Setup\" > \"Group Name\" (to the left of the bag).\r\nOnly one bag from a group may have it's contents placed on the table at a time.\r\nWhen \"Place\" is clicked on a bag, the other bags in it's memory group are recalled.\r\nBy default a memory bag is not in any group. It's memory group is \"nil\". --]]\r\n\r\nmemoryGroupName = { memoryBag = self }\r\nfunction memoryGroupName:get()\r\n    return self._name\r\nend\r\n\r\nfunction memoryGroupName:set(newName)\r\n    GlobalMemoryGroups:unregisterBagInGroup(self:get(), self.memoryBag.getGUID())\r\n    GlobalMemoryGroups:registerBagInGroup(newName, self.memoryBag.getGUID())\r\n\r\n    if newName == \"\" then\r\n        self._name = nil\r\n    else\r\n        self._name = newName\r\n    end\r\nend\r\n\r\n-- Click the \"Recall\" button on all other bags in my memory group.\r\nfunction recallOtherBagsInMyGroup()\r\n    for _, bag in ipairs(getOtherBagsInMyGroup()) do\r\n        bag.call('buttonClick_recall')\r\n    end\r\nend\r\n\r\n-- Return \"true\" if another bag in my memory group has any objects out on the table.\r\nfunction anyOtherBagsInMyGroupArePlaced()\r\n    for _, bag in ipairs(getOtherBagsInMyGroup()) do\r\n        local state = bag.call('areAnyOfMyObjectsPlaced')\r\n        if state then return true end\r\n    end\r\n\r\n    return false\r\nend\r\n\r\n-- Return \"true\" if at least one object from this memory bag is out on the table.\r\nfunction areAnyOfMyObjectsPlaced()\r\n    for guid, _ in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then\r\n            return true\r\n        end\r\n    end\r\n    return false\r\nend\r\n\r\nfunction getOtherBagsInMyGroup()\r\n    local bags = {}\r\n    for bagGuid, _ in pairs(GlobalMemoryGroups:getGroup(memoryGroupName:get())) do\r\n        if bagGuid ~= self.getGUID() then\r\n            bag = getObjectFromGUID(bagGuid)\r\n            -- \"bag\" is nill if it has been deleted since the last time onLoad() was called.\r\n            if bag ~= nil then\r\n                table.insert(bags, bag)\r\n            end\r\n        end\r\n    end\r\n    return bags\r\nend\r\n\r\n--[[\r\nThis object provides access to a variable stored on the \"Global script\".\r\nThe variable holds the names & guids of all memory bag groups.\r\nThe global variable is a table and holds data like this:\r\n{\r\n    'My First Group Name' = {\r\n        '805ebd' = {},\r\n        '35cc21' = {},\r\n        'fc8886' = {},\r\n    },\r\n    'My Second Group Name' = {\r\n        'f50264' = {},\r\n        '5f5f63' = {},\r\n    },\r\n}\r\n--]]\r\nGlobalMemoryGroups = { NAME_OF_GLOBAL_VARIABLE = '_GlobalUtilityMemoryBagGroups' }\r\n\r\n-- Call me inside this script's \"onLoad()\" method!\r\nfunction GlobalMemoryGroups:onLoad(myGuid)\r\n    -- Create and initialize the global variable if it doesn't already exist:\r\n    if self:_getGroups() == nil then\r\n        self:_setGroups({})\r\n    end\r\nend\r\n\r\n-- Return the GUIDs of all bags in the \"groupName\". The return value is a dictionary that maps [GUID -> empty table].\r\nfunction GlobalMemoryGroups:getGroup(groupName)\r\n    guids = self:_getGroups()[groupName] or {}\r\n    return guids\r\nend\r\n\r\n-- Registers a bag in a memory group. Creates a new group if one doesn't exist.\r\nfunction GlobalMemoryGroups:registerBagInGroup(groupName, bagGuid)\r\n    if groupName == nil or groupName == \"\" then\r\n        return\r\n    end\r\n\r\n    self:_tryCreateNewGroup(groupName)\r\n    local groups = self:_getGroups()\r\n    groups[groupName][bagGuid] = {}\r\n    self:_setGroups(groups)\r\nend\r\n\r\n-- Removes this bag from the memory group.\r\nfunction GlobalMemoryGroups:unregisterBagInGroup(groupName, bagGuid)\r\n    local groups = self:_getGroups()\r\n    local group = groups[groupName]\r\n    if group ~= nil then\r\n        group[bagGuid] = nil\r\n        self:_setGroups(groups)\r\n    end\r\nend\r\n\r\n-- Return the global variable, which is a table holding all memory group names & guids.\r\nfunction GlobalMemoryGroups:_getGroups()\r\n    return Global.getTable(self.NAME_OF_GLOBAL_VARIABLE)\r\nend\r\n\r\n-- Override the global variable (i.e. the entire table).\r\nfunction GlobalMemoryGroups:_setGroups(newTable)\r\n    Global.setTable(self.NAME_OF_GLOBAL_VARIABLE, newTable)\r\nend\r\n\r\n-- Add a new memory group named \"groupName\" to the global variable, if one doesn't already exist.\r\nfunction GlobalMemoryGroups:_tryCreateNewGroup(groupName)\r\n    local groups = self:_getGroups()\r\n    if groups[groupName] == nil then\r\n        groups[groupName] = {}\r\n        self:_setGroups(groups)\r\n    end\r\nend\r\n\r\n-- This object controls the \"Group Name\" input text field that is part of the bag's ingame UI.\r\ngroupNameInput = {\r\n    greyedOutText     = \"Group Name\",\r\n    widthPerCharacter = 100,\r\n    padding           = 4,\r\n    memoryBag         = self\r\n}\r\nfunction groupNameInput:create(optionalStartingValue)\r\n    local effectiveText = optionalStartingValue or self.greyedOutText\r\n    local width = self:computeWidth(effectiveText)\r\n\r\n    self.memoryBag.createInput({\r\n        label = self.greyedOutText,\r\n        value = optionalStartingValue or nil,\r\n        alignment = 3, -- Center aligned\r\n        input_function = \"groupNameInput_onCharacterTyped\", function_owner = self.memoryBag,\r\n        position = { 2.1, 0.3, 0 }, rotation = { 0, 270, 0 }, width = width, height = 350,\r\n        font_size = 250, color = { 0, 0, 0 }, font_color = { 1, 1, 1 },\r\n    })\r\nend\r\n\r\nfunction groupNameInput:computeWidth(text)\r\n    return (string.len(text) + self.padding) * self.widthPerCharacter\r\nend\r\n\r\nfunction groupNameInput:updatedWidth(text)\r\n    self.memoryBag.editInput({\r\n        index = 0,\r\n        width = self:computeWidth(text)\r\n    })\r\nend\r\n\r\nfunction groupNameInput:onCharacterTyped(text, stillEditing)\r\n    if stillEditing then\r\n        self:updatedWidth(text)\r\n    else\r\n        if text == \"\" then\r\n            self:updatedWidth(self.greyedOutText)\r\n        end\r\n    end\r\nend\r\n\r\nfunction groupNameInput_onCharacterTyped(memoryBag, playerColor, text, stillEditing)\r\n    groupNameInput:onCharacterTyped(text, stillEditing)\r\nend\r\n\r\nfunction groupNameInput:setGroupNameToInputField()\r\n    local inputFields = self.memoryBag.getInputs()\r\n    if inputFields ~= nil then\r\n        -- Get input field 0, which corresponds to the groupNameInput.\r\n        -- Unfortunately \"self.getInputs()\" doesn't return the inputs in a guaranteed order.\r\n        local nameField = nil\r\n        for _, field in ipairs(inputFields) do\r\n            if field.index == 0 then\r\n                nameField = field\r\n            end\r\n        end\r\n\r\n        memoryGroupName:set(nameField.value)\r\n    end\r\nend\r\n\r\nfunction updateSave()\r\n    local data_to_save = { [\"ml\"] = memoryList, [\"groupName\"] = memoryGroupName:get() }\r\n    saved_data = JSON.encode(data_to_save)\r\n    self.script_state = saved_data\r\nend\r\n\r\nfunction combineMemoryFromBagsWithin()\r\n    local bagObjList = self.getObjects()\r\n    for _, bagObj in ipairs(bagObjList) do\r\n        local data = bagObj.lua_script_state\r\n        if data ~= nil then\r\n            local j = JSON.decode(data)\r\n            if j ~= nil and j.ml ~= nil then\r\n                for guid, entry in pairs(j.ml) do\r\n                    memoryList[guid] = entry\r\n                end\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\nfunction updateMemoryWithMoves()\r\n    memoryList = memoryListBackup\r\n    --get the first transposed object's coordinates\r\n    local obj = getObjectFromGUID(moveGuid)\r\n\r\n    -- p1 is where needs to go, p2 is where it was\r\n    local refObjPos = memoryList[moveGuid].pos\r\n    local deltaPos = findOffsetDistance(obj.getPosition(), refObjPos, nil)\r\n    local movedRotation = obj.getRotation()\r\n    for guid, entry in pairs(memoryList) do\r\n        memoryList[guid].pos.x = entry.pos.x - deltaPos.x\r\n        memoryList[guid].pos.y = entry.pos.y - deltaPos.y\r\n        memoryList[guid].pos.z = entry.pos.z - deltaPos.z\r\n    end\r\n    moveList = {}\r\nend\r\n\r\nfunction onload(saved_data)\r\n    GlobalMemoryGroups:onLoad(self.getGUID())\r\n    AllMemoryBagsInScene:add(self.getGUID())\r\n\r\n    fresh = true\r\n    if saved_data ~= \"\" then\r\n        local loaded_data = JSON.decode(saved_data)\r\n        --Set up information off of loaded_data\r\n        memoryList = loaded_data.ml\r\n        memoryGroupName:set(loaded_data.groupName)\r\n    else\r\n        --Set up information for if there is no saved saved data\r\n        memoryList = {}\r\n        memoryGroupName:set(nil)\r\n    end\r\n\r\n    moveList = {}\r\n    moveGuid = nil\r\n\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        fresh = false\r\n        createMemoryActionButtons()\r\n    end\r\nend\r\n\r\n--Beginning Setup\r\n\r\n--Make setup button\r\nfunction createSetupButton()\r\n    self.createButton({\r\n      label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n      position={0,0.3,2}, rotation={0,0,0}, height=350, width=800,\r\n      font_size=250, color={0,0,0}, font_color={1,1,1}\r\n  })\r\nend\r\n\r\n--Triggered by Transpose button\r\nfunction buttonClick_transpose()\r\n    moveGuid = nil\r\n    broadcastToAll(\"Select one object and move it- all objects will move relative to the new location\", { 0.75, 0.75, 1 })\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(true)\r\n    createSetupActionButtons(true)\r\nend\r\n\r\n--Triggered by setup button,\r\nfunction buttonClick_setup()\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(false)\r\n    createSetupActionButtons(false)\r\nend\r\n\r\nfunction getAllObjectsInMemory()\r\n    local objTable = {}\r\n    local curObj = {}\r\n\r\n    for guid in pairs(memoryListBackup) do\r\n        curObj = getObjectFromGUID(guid)\r\n        table.insert(objTable, curObj)\r\n    end\r\n\r\n    return objTable\r\nend\r\n\r\n--Creates selection buttons on objects\r\nfunction createButtonsOnAllObjects(move)\r\n    buttonIndexMap = {}\r\n    local howManyButtons = 0\r\n\r\n    local objsToHaveButtons = {}\r\n    if move == true then\r\n        objsToHaveButtons = getAllObjectsInMemory()\r\n    else\r\n        objsToHaveButtons = getAllObjects()\r\n    end\r\n\r\n    for _, obj in ipairs(objsToHaveButtons) do\r\n        if obj ~= self then\r\n            --On a normal bag, the button positions aren't the same size as the bag.\r\n            globalScaleFactor = 1 * 1 / self.getScale().x\r\n            --Super sweet math to set button positions\r\n            local selfPos = self.getPosition()\r\n            local objPos = obj.getPosition()\r\n            local deltaPos = findOffsetDistance(selfPos, objPos, obj)\r\n            local objPos = rotateLocalCoordinates(deltaPos, self)\r\n            objPos.x = -objPos.x * globalScaleFactor\r\n            objPos.y = objPos.y * globalScaleFactor + 2\r\n            objPos.z = objPos.z * globalScaleFactor\r\n            --Workaround for custom PDFs\r\n            if obj.Book then\r\n                objPos.y = objPos.y + 0.5\r\n            end\r\n            --Offset rotation of bag\r\n            local rot = self.getRotation()\r\n            rot.y = -rot.y + 180\r\n            --Create function\r\n            local funcName = \"selectButton_\" .. howManyButtons\r\n            local func = function() buttonClick_selection(obj, move) end\r\n            local color = { 0.75, 0.25, 0.25, 0.6 }\r\n            local colorMove = { 0, 0, 1, 0.6 }\r\n            if move == true then\r\n                color = colorMove\r\n            end\r\n            self.setVar(funcName, func)\r\n            self.createButton({\r\n                click_function = funcName, function_owner = self,\r\n                position = objPos, rotation = rot, height = 1000, width = 1000,\r\n                color = color,\r\n            })\r\n            buttonIndexMap[obj.getGUID()] = howManyButtons\r\n            howManyButtons = howManyButtons + 1\r\n        end\r\n    end\r\nend\r\n\r\n  --Creates submit and cancel buttons\r\n  function createSetupActionButtons(move)\r\n      self.createButton({\r\n         label=\"Annuler\", click_function=\"buttonClick_cancel\", function_owner=self,\r\n         position={-1.15,0.3,2.1}, rotation={0,0,0}, height=350, width=1100,\r\n         font_size=250, color={0,0,0}, font_color={1,1,1}\r\n      })\r\n\r\n      self.createButton({\r\n        label=\"Valider\", click_function=\"buttonClick_submit\", function_owner=self,\r\n        position={-1.15,0.3,2.8}, rotation={0,0,0}, height=350, width=1100,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n      })\r\n\r\n      if move == false then\r\n        self.createButton({\r\n            label=\"Ajouter\", click_function=\"buttonClick_add\", function_owner=self,\r\n            position={1.15,0.3,2.1}, rotation={0,0,0}, height=350, width=1100,\r\n            font_size=250, color={0,0,0}, font_color={0.25,1,0.25}\r\n          })\r\n\r\n          self.createButton({\r\n              label=\"Sélection\", click_function=\"editDragSelection\", function_owner=self,\r\n              position={-1.15,0.3,3.5}, rotation={0,0,0}, height=350, width=1100,\r\n              font_size=250, color={0,0,0}, font_color={1,1,1}\r\n          })\r\n\r\n          if fresh == false then\r\n              self.createButton({\r\n                  label=\"Mise à Jour\", click_function=\"buttonClick_setNew\", function_owner=self,\r\n                  position={1.15,0.3,3.5}, rotation={0,0,0}, height=350, width=1100,\r\n                  font_size=180, color={0,0,0}, font_color={0.75,0.75,1}\r\n              })\r\n              self.createButton({\r\n                  label=\"Retirer\", click_function=\"buttonClick_remove\", function_owner=self,\r\n                  position={1.15,0.3,2.8}, rotation={0,0,0}, height=350, width=1100,\r\n                  font_size=250, color={0,0,0}, font_color={1,0.25,0.25}\r\n              })\r\n          end\r\n      end\r\n\r\n      self.createButton({\r\n          label=\"Reset\", click_function=\"buttonClick_reset\", function_owner=self,\r\n          position={0,0.3,-2}, rotation={0,0,0}, height=350, width=800,\r\n          font_size=250, color={0,0,0}, font_color={1,1,1}\r\n      })\r\n  end\r\n\r\n\r\n--During Setup\r\n\r\n--Checks or unchecks buttons\r\nfunction buttonClick_selection(obj, move)\r\n    local index = buttonIndexMap[obj.getGUID()]\r\n    local colorMove = { 0, 0, 1, 0.6 }\r\n    local color = { 0, 1, 0, 0.6 }\r\n\r\n    previousGuid = selectedGuid\r\n    selectedGuid = obj.getGUID()\r\n\r\n    theList = memoryList\r\n    if move == true then\r\n        theList = moveList\r\n        if previousGuid ~= nil and previousGuid ~= selectedGuid then\r\n            local prevObj = getObjectFromGUID(previousGuid)\r\n            prevObj.highlightOff()\r\n            self.editButton({ index = previousIndex, color = colorMove })\r\n            theList[previousGuid] = nil\r\n        end\r\n        previousIndex = index\r\n    end\r\n\r\n    if theList[selectedGuid] == nil then\r\n        self.editButton({ index = index, color = color })\r\n        --Adding pos/rot to memory table\r\n        local pos, rot = obj.getPosition(), obj.getRotation()\r\n        --I need to add it like this or it won't save due to indexing issue\r\n        theList[obj.getGUID()] = {\r\n            pos = { x = round(pos.x, 4), y = round(pos.y, 4), z = round(pos.z, 4) },\r\n            rot = { x = round(rot.x, 4), y = round(rot.y, 4), z = round(rot.z, 4) },\r\n            lock = obj.getLock(),\r\n            tint = obj.getColorTint()\r\n        }\r\n        obj.highlightOn({ 0, 1, 0 })\r\n    else\r\n        color = { 0.75, 0.25, 0.25, 0.6 }\r\n        if move == true then\r\n            color = colorMove\r\n        end\r\n        self.editButton({ index = index, color = color })\r\n        theList[obj.getGUID()] = nil\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\nfunction editDragSelection(bagObj, player, remove)\r\n    local selectedObjs = Player[player].getSelectedObjects()\r\n    if not remove then\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            --Ignore if already in the memory list, or does not have a button\r\n            if index and not memoryList[obj.getGUID()] then\r\n                self.editButton({ index = index, color = { 0, 1, 0, 0.6 } })\r\n                --Adding pos/rot to memory table\r\n                local pos, rot = obj.getPosition(), obj.getRotation()\r\n                --I need to add it like this or it won't save due to indexing issue\r\n                memoryList[obj.getGUID()] = {\r\n                    pos = { x = round(pos.x, 4), y = round(pos.y, 4), z = round(pos.z, 4) },\r\n                    rot = { x = round(rot.x, 4), y = round(rot.y, 4), z = round(rot.z, 4) },\r\n                    lock = obj.getLock(),\r\n                    tint = obj.getColorTint()\r\n                }\r\n                obj.highlightOn({ 0, 1, 0 })\r\n            end\r\n        end\r\n    else\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            if index and memoryList[obj.getGUID()] then\r\n                color = { 0.75, 0.25, 0.25, 0.6 }\r\n                self.editButton({ index = index, color = color })\r\n                memoryList[obj.getGUID()] = nil\r\n                obj.highlightOff()\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\n--Cancels selection process\r\nfunction buttonClick_cancel()\r\n    memoryList = memoryListBackup\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        createMemoryActionButtons()\r\n    end\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Sélection annulée\", { 1, 1, 1 })\r\n    moveGuid = nil\r\nend\r\n\r\n--Saves selections\r\nfunction buttonClick_submit()\r\n    fresh = false\r\n    if next(moveList) ~= nil then\r\n        for guid in pairs(moveList) do\r\n            moveGuid = guid\r\n        end\r\n        if memoryListBackup[moveGuid] == nil then\r\n            broadcastToAll(\"Item selected for moving is not already in memory\", { 1, 0.25, 0.25 })\r\n        else\r\n            broadcastToAll(\"Moving all items in memory relative to new objects position!\", { 0.75, 0.75, 1 })\r\n            self.clearButtons()\r\n            self.clearInputs()\r\n            createMemoryActionButtons()\r\n            local count = 0\r\n            for guid in pairs(moveList) do\r\n                moveGuid = guid\r\n                count = count + 1\r\n                local obj = getObjectFromGUID(guid)\r\n                if obj ~= nil then obj.highlightOff() end\r\n            end\r\n            updateMemoryWithMoves()\r\n            updateSave()\r\n            buttonClick_place()\r\n        end\r\n    elseif next(memoryList) == nil and moveGuid == nil then\r\n        memoryList = memoryListBackup\r\n        broadcastToAll(\"No selections made.\", { 0.75, 0.25, 0.25 })\r\n    end\r\n    combineMemoryFromBagsWithin()\r\n    groupNameInput:setGroupNameToInputField()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count .. \" Objects Saved\", { 1, 1, 1 })\r\n    updateSave()\r\n    moveGuid = nil\r\nend\r\n\r\nfunction combineTables(first_table, second_table)\r\n    for k, v in pairs(second_table) do first_table[k] = v end\r\nend\r\n\r\nfunction buttonClick_add()\r\n    fresh = false\r\n    combineTables(memoryList, memoryListBackup)\r\n    broadcastToAll(\"Adding internal bags and selections to existing memory\", { 0.25, 0.75, 0.25 })\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count .. \" Objects Saved\", { 1, 1, 1 })\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_remove()\r\n    broadcastToAll(\"Removing Selected Entries From Memory\", { 1.0, 0.25, 0.25 })\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        memoryListBackup[guid] = nil\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count .. \" Objects Removed\", { 1, 1, 1 })\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_setNew()\r\n    broadcastToAll(\"Setting new position relative to items in memory\", { 0.75, 0.75, 1 })\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        guid = obj.guid\r\n        if memoryListBackup[guid] ~= nil then\r\n            count = count + 1\r\n            memoryListBackup[guid].pos = obj.getPosition()\r\n            memoryListBackup[guid].rot = obj.getRotation()\r\n            memoryListBackup[guid].lock = obj.getLock()\r\n            memoryListBackup[guid].tint = obj.getColorTint()\r\n        end\r\n    end\r\n    broadcastToAll(count .. \" Objects Saved\", { 1, 1, 1 })\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\n--Resets bag to starting status\r\nfunction buttonClick_reset()\r\n    fresh = true\r\n    memoryList = {}\r\n    memoryGroupName:set(nil)\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createSetupButton()\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Tool Reset\", { 1, 1, 1 })\r\n    updateSave()\r\nend\r\n\r\n--After Setup\r\n\r\n--Creates recall and place buttons\r\nfunction createMemoryActionButtons()\r\n    self.createButton({\r\n        label=\"Placer au hasard\", click_function=\"buttonClick_place\", function_owner=self,\r\n        position={0,0.3,2}, rotation={0,0,0}, height=350, width=2000,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Ranger\", click_function=\"buttonClick_recall\", function_owner=self,\r\n        position={0,0.3,2.8}, rotation={0,0,0}, height=350, width=1000,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n        position={2,0.3,0}, rotation={0,90,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    ---    self.createButton({\r\n    ---      label=\"Bouger\", click_function=\"buttonClick_transpose\", function_owner=self,\r\n    ---      position={-2,0.3,0.8}, rotation={0,270,0}, height=350, width=800,\r\n    ---      font_size=250, color={0,0,0}, font_color={0.75,0.75,1}\r\n    ---\r\nend\r\n\r\n--Sends objects from bag/table to their saved position/rotation\r\nfunction buttonClick_place()\r\n    if anyOtherBagsInMyGroupArePlaced() then\r\n        recallOtherBagsInMyGroup()\r\n        Wait.frames(_placeObjects, CONFIG.MEMORY_GROUP.FRAME_DELAY_BEFORE_PLACING_OBJECTS)\r\n    else\r\n        _placeObjects()\r\n    end\r\nend\r\n\r\nfunction _placeObjects()\r\n    local bagObjList = self.getObjects()\r\n\r\n    -- randomize memorylist position\r\n    local positionList = {}\r\n    for guid, entry in pairs(memoryList) do\r\n        table.insert(positionList, memoryList[guid].pos)\r\n    end\r\n\r\n    for i = #positionList, 2, -1 do\r\n        local j = math.random(i)\r\n        positionList[i], positionList[j] = positionList[j], positionList[i]\r\n    end\r\n\r\n    local i = 1\r\n    for guid, entry in pairs(memoryList) do\r\n        memoryList[guid].pos = positionList[i]\r\n        i = i + 1\r\n    end\r\n\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        --If obj is out on the table, move it to the saved pos/rot\r\n        if obj ~= nil then\r\n            obj.setPositionSmooth(entry.pos)\r\n            obj.setRotationSmooth(entry.rot)\r\n            obj.setLock(entry.lock)\r\n            obj.setColorTint(entry.tint)\r\n        else\r\n            --If obj is inside of the bag\r\n            for _, bagObj in ipairs(bagObjList) do\r\n                if bagObj.guid == guid then\r\n                    local item = self.takeObject({\r\n                        guid = guid, position = entry.pos, rotation = entry.rot, smooth = false\r\n                    })\r\n                    item.setLock(entry.lock)\r\n                    item.setColorTint(entry.tint)\r\n                    break\r\n                end\r\n            end\r\n        end\r\n    end\r\n    broadcastToAll(\"Objets placés au hasard\", {1,1,1})\r\nend\r\n\r\n--Recalls objects to bag from table\r\nfunction buttonClick_recall()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then self.putObject(obj) end\r\n    end\r\n    broadcastToAll(\"Objets rangés\", {1,1,1})\r\nend\r\n\r\n--Utility functions\r\n\r\n--Find delta (difference) between 2 x/y/z coordinates\r\nfunction findOffsetDistance(p1, p2, obj)\r\n    local yOffset = 0\r\n    if obj ~= nil then\r\n        local bounds = obj.getBounds()\r\n        yOffset = (bounds.size.y - bounds.offset.y)\r\n    end\r\n    local deltaPos = {}\r\n    deltaPos.x = (p2.x - p1.x)\r\n    deltaPos.y = (p2.y - p1.y) + yOffset\r\n    deltaPos.z = (p2.z - p1.z)\r\n    return deltaPos\r\nend\r\n\r\n--Used to rotate a set of coordinates by an angle\r\nfunction rotateLocalCoordinates(desiredPos, obj)\r\n    local objPos, objRot = obj.getPosition(), obj.getRotation()\r\n    local angle = math.rad(objRot.y)\r\n    local x = desiredPos.x * math.cos(angle) - desiredPos.z * math.sin(angle)\r\n    local z = desiredPos.x * math.sin(angle) + desiredPos.z * math.cos(angle)\r\n    --return {x=objPos.x+x, y=objPos.y+desiredPos.y, z=objPos.z+z}\r\n    return { x = x, y = desiredPos.y, z = z }\r\nend\r\n\r\nfunction rotateMyCoordinates(desiredPos, obj)\r\n    local angle = math.rad(obj.getRotation().y)\r\n    local x = desiredPos.x * math.sin(angle)\r\n    local z = desiredPos.z * math.cos(angle)\r\n    return { x = x, y = desiredPos.y, z = z }\r\nend\r\n\r\n--Coroutine delay, in seconds\r\nfunction wait(time)\r\n    local start = os.time()\r\n    repeat coroutine.yield(0) until os.time() > start + time\r\nend\r\n\r\n--Duplicates a table (needed to prevent it making reference to the same objects)\r\nfunction duplicateTable(oldTable)\r\n    local newTable = {}\r\n    for k, v in pairs(oldTable) do\r\n        newTable[k] = v\r\n    end\r\n    return newTable\r\nend\r\n\r\n--Moves scripted highlight from all objects\r\nfunction removeAllHighlights()\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\n--Round number (num) to the Nth decimal (dec)\r\nfunction round(num, dec)\r\n    local mult = 10 ^ (dec or 0)\r\n    return math.floor(num * mult + 0.5) / mult\r\nend\r\n\r\n--[[ This object provides access to a variable stored on the \"Global script\".\r\nThe variable holds the GUIDs for every Utility Memory Bag in the scene.\r\nExample: {'805ebd', '35cc21', 'fc8886', 'f50264', '5f5f63'} --]]\r\nAllMemoryBagsInScene = {\r\n    NAME_OF_GLOBAL_VARIABLE = \"_UtilityMemoryBag_AllMemoryBagsInScene\"\r\n}\r\n\r\nfunction AllMemoryBagsInScene:add(guid)\r\n    local guids = Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\n    table.insert(guids, guid)\r\n    Global.setTable(self.NAME_OF_GLOBAL_VARIABLE, guids)\r\nend\r\n\r\nfunction AllMemoryBagsInScene:getGuidList()\r\n    return Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\nend\r\n","LuaScriptState":"{\"ml\":{\"85249f\":{\"lock\":false,\"pos\":{\"x\":-23.4999828338623,\"y\":1.77885568141937,\"z\":21.5000152587891},\"rot\":{\"x\":-4.9853138079925E-06,\"y\":179.123397827148,\"z\":3.2727359666751E-07},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"95ee07\":{\"lock\":false,\"pos\":{\"x\":3.99999856948853,\"y\":1.5168240070343,\"z\":1.50000357627869},\"rot\":{\"x\":0.0108907157555223,\"y\":180.008605957031,\"z\":0.00494980020448565},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}}}}","XmlUI":"","ContainedObjects":[{"GUID":"85249f","Name":"Card","Transform":{"posX":3.99999976,"posY":1.516824,"posZ":1.50000083,"rotX":0.0109658968,"rotY":179.123413,"rotZ":0.00478101429,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Vallon de la Source","Description":"Dunwich.","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02244\",\n  \"locationBack\": {\n    \"connections\": \"Circle|Diamond|Plus\",\n    \"icons\": \"Triangle\",\n    \"uses\": {\n      \"count\": 2,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    }\n  },\n  \"locationFront\": {\n    \"connections\": \"Circle|Diamond|Plus\",\n    \"icons\": \"Triangle\"\n  },\n  \"traits\": \"Dunwich.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":117307,"SidewaysCard":false,"CustomDeck":{"1173":{"FaceURL":"https://i.imgur.com/0FRbPFZ.jpg","BackURL":"https://i.imgur.com/z0qG3Pt.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"95ee07","Name":"Card","Transform":{"posX":-23.49998,"posY":1.77890468,"posZ":21.500021,"rotX":-0.000005175857,"rotY":180.0086,"rotZ":-1.15034148e-7,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Vallon de la Source","Description":"Dunwich.","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02245\",\n  \"locationBack\": {\n    \"connections\": \"Circle|Diamond|Plus\",\n    \"icons\": \"Triangle\"\n  },\n  \"locationFront\": {\n    \"connections\": \"Circle|Diamond|Plus\",\n    \"icons\": \"Triangle\"\n  },\n  \"traits\": \"Dunwich.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":117308,"SidewaysCard":false,"CustomDeck":{"1173":{"FaceURL":"https://i.imgur.com/0FRbPFZ.jpg","BackURL":"https://i.imgur.com/z0qG3Pt.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""}]},{"GUID":"8e90ff","Name":"Deck","Transform":{"posX":17.5000019,"posY":1.53118622,"posZ":-5.9999,"rotX":0.004947972,"rotY":89.99998,"rotZ":359.9891,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Deck Acte","Description":"Aux Frontières du Visible","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":false,"SidewaysCard":true,"DeckIDs":[19004,19003],"CustomDeck":{"190":{"FaceURL":"https://i.imgur.com/MONRL2x.jpg","BackURL":"https://i.imgur.com/5KgkkOQ.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":"","ContainedObjects":[{"GUID":"1fb1bd","Name":"Card","Transform":{"posX":17.5000038,"posY":1.605746,"posZ":-5.999904,"rotX":0.004291191,"rotY":90.00002,"rotZ":359.9885,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Ils Doivent Être Détruits !","Description":"Acte 2a","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02241\",\n  \"type\": \"Act\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":19004,"SidewaysCard":true,"CustomDeck":{"190":{"FaceURL":"https://i.imgur.com/MONRL2x.jpg","BackURL":"https://i.imgur.com/5KgkkOQ.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"1fb7ca","Name":"Card","Transform":{"posX":17.5000057,"posY":1.60398173,"posZ":-5.99991226,"rotX":0.007810417,"rotY":90.00002,"rotZ":359.985779,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Texte Sarrasin","Description":"Acte 1a","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"clueThresholdPerInvestigator\": 2,\n  \"cycle\": \"Standalone\",\n  \"id\": \"02240\",\n  \"type\": \"Act\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":19003,"SidewaysCard":true,"CustomDeck":{"190":{"FaceURL":"https://i.imgur.com/MONRL2x.jpg","BackURL":"https://i.imgur.com/5KgkkOQ.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""}]},{"GUID":"9105d6","Name":"Custom_Tile","Transform":{"posX":15.0000019,"posY":1.50540578,"posZ":18,"rotX":0.0108898887,"rotY":180.020538,"rotZ":0.00496138027,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/vppt2my.png","ImageSecondaryURL":"https://i.imgur.com/vppt2my.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":"","States":{"2":{"GUID":"44b0c5","Name":"Custom_Tile","Transform":{"posX":-39.7933121,"posY":1.63758957,"posZ":2.038383,"rotX":359.9201,"rotY":269.9961,"rotZ":0.0168742146,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/HyfE8m8.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""},"3":{"GUID":"5b38c6","Name":"Custom_Tile","Transform":{"posX":-38.8217163,"posY":1.99356019,"posZ":0.4159239,"rotX":359.9201,"rotY":272.9828,"rotZ":0.01687373,"scaleX":0.8,"scaleY":1,"scaleZ":0.8},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/dHKBLoD.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""}}},{"GUID":"93ac98","Name":"Custom_Model_Bag","Transform":{"posX":-23,"posY":1.83530045,"posZ":13.500001,"rotX":-0.00000498428,"rotY":179.972565,"rotZ":2.01061951e-7,"scaleX":0.7,"scaleY":0.7,"scaleZ":0.7},"Nickname":"Choisir un lieu au hasard","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.614982545,"g":0,"b":0},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"MaterialIndex":-1,"MeshIndex":-1,"CustomMesh":{"MeshURL":"https://pastebin.com/raw/ALrYhQGb","DiffuseURL":"http://cloud-3.steamusercontent.com/ugc/1936013662301987863/EC85795E33EC43FD82F9617B47C13D0CBE057FB6/","NormalURL":"","ColliderURL":"","Convex":true,"MaterialIndex":3,"TypeIndex":6,"CustomShader":{"SpecularColor":{"r":1,"g":1,"b":1},"SpecularIntensity":0,"SpecularSharpness":2,"FresnelStrength":0},"CastShadows":true},"Bag":{"Order":0},"LuaScript":"-- Random memory bag\r\n-- based on Utility memory bag by Directsun (Version 2.7.0)\r\n\r\nlocal CONFIG = {\r\n    MEMORY_GROUP = {\r\n        -- This determines how many frames to wait before actually placing objects onto the table when the \"Place\" button is clicked.\r\n        -- This gives the other bags time to recall their objects.\r\n        -- The delay ONLY occurs if other bags have objects out.\r\n        FRAME_DELAY_BEFORE_PLACING_OBJECTS = 30\r\n    }\r\n}\r\n\r\nmath.randomseed(os.time())\r\n\r\n--[[ Memory Bag Groups ]]\r\n--[[ Utility Memory Bags may be added to a named group, called a \"memory group\".\r\nYou can add a bag to a group through the bag's UI: \"Setup\" > \"Group Name\" (to the left of the bag).\r\nOnly one bag from a group may have it's contents placed on the table at a time.\r\nWhen \"Place\" is clicked on a bag, the other bags in it's memory group are recalled.\r\nBy default a memory bag is not in any group. It's memory group is \"nil\". --]]\r\n\r\nmemoryGroupName = { memoryBag = self }\r\nfunction memoryGroupName:get()\r\n    return self._name\r\nend\r\n\r\nfunction memoryGroupName:set(newName)\r\n    GlobalMemoryGroups:unregisterBagInGroup(self:get(), self.memoryBag.getGUID())\r\n    GlobalMemoryGroups:registerBagInGroup(newName, self.memoryBag.getGUID())\r\n\r\n    if newName == \"\" then\r\n        self._name = nil\r\n    else\r\n        self._name = newName\r\n    end\r\nend\r\n\r\n-- Click the \"Recall\" button on all other bags in my memory group.\r\nfunction recallOtherBagsInMyGroup()\r\n    for _, bag in ipairs(getOtherBagsInMyGroup()) do\r\n        bag.call('buttonClick_recall')\r\n    end\r\nend\r\n\r\n-- Return \"true\" if another bag in my memory group has any objects out on the table.\r\nfunction anyOtherBagsInMyGroupArePlaced()\r\n    for _, bag in ipairs(getOtherBagsInMyGroup()) do\r\n        local state = bag.call('areAnyOfMyObjectsPlaced')\r\n        if state then return true end\r\n    end\r\n\r\n    return false\r\nend\r\n\r\n-- Return \"true\" if at least one object from this memory bag is out on the table.\r\nfunction areAnyOfMyObjectsPlaced()\r\n    for guid, _ in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then\r\n            return true\r\n        end\r\n    end\r\n    return false\r\nend\r\n\r\nfunction getOtherBagsInMyGroup()\r\n    local bags = {}\r\n    for bagGuid, _ in pairs(GlobalMemoryGroups:getGroup(memoryGroupName:get())) do\r\n        if bagGuid ~= self.getGUID() then\r\n            bag = getObjectFromGUID(bagGuid)\r\n            -- \"bag\" is nill if it has been deleted since the last time onLoad() was called.\r\n            if bag ~= nil then\r\n                table.insert(bags, bag)\r\n            end\r\n        end\r\n    end\r\n    return bags\r\nend\r\n\r\n--[[\r\nThis object provides access to a variable stored on the \"Global script\".\r\nThe variable holds the names & guids of all memory bag groups.\r\nThe global variable is a table and holds data like this:\r\n{\r\n    'My First Group Name' = {\r\n        '805ebd' = {},\r\n        '35cc21' = {},\r\n        'fc8886' = {},\r\n    },\r\n    'My Second Group Name' = {\r\n        'f50264' = {},\r\n        '5f5f63' = {},\r\n    },\r\n}\r\n--]]\r\nGlobalMemoryGroups = { NAME_OF_GLOBAL_VARIABLE = '_GlobalUtilityMemoryBagGroups' }\r\n\r\n-- Call me inside this script's \"onLoad()\" method!\r\nfunction GlobalMemoryGroups:onLoad(myGuid)\r\n    -- Create and initialize the global variable if it doesn't already exist:\r\n    if self:_getGroups() == nil then\r\n        self:_setGroups({})\r\n    end\r\nend\r\n\r\n-- Return the GUIDs of all bags in the \"groupName\". The return value is a dictionary that maps [GUID -> empty table].\r\nfunction GlobalMemoryGroups:getGroup(groupName)\r\n    guids = self:_getGroups()[groupName] or {}\r\n    return guids\r\nend\r\n\r\n-- Registers a bag in a memory group. Creates a new group if one doesn't exist.\r\nfunction GlobalMemoryGroups:registerBagInGroup(groupName, bagGuid)\r\n    if groupName == nil or groupName == \"\" then\r\n        return\r\n    end\r\n\r\n    self:_tryCreateNewGroup(groupName)\r\n    local groups = self:_getGroups()\r\n    groups[groupName][bagGuid] = {}\r\n    self:_setGroups(groups)\r\nend\r\n\r\n-- Removes this bag from the memory group.\r\nfunction GlobalMemoryGroups:unregisterBagInGroup(groupName, bagGuid)\r\n    local groups = self:_getGroups()\r\n    local group = groups[groupName]\r\n    if group ~= nil then\r\n        group[bagGuid] = nil\r\n        self:_setGroups(groups)\r\n    end\r\nend\r\n\r\n-- Return the global variable, which is a table holding all memory group names & guids.\r\nfunction GlobalMemoryGroups:_getGroups()\r\n    return Global.getTable(self.NAME_OF_GLOBAL_VARIABLE)\r\nend\r\n\r\n-- Override the global variable (i.e. the entire table).\r\nfunction GlobalMemoryGroups:_setGroups(newTable)\r\n    Global.setTable(self.NAME_OF_GLOBAL_VARIABLE, newTable)\r\nend\r\n\r\n-- Add a new memory group named \"groupName\" to the global variable, if one doesn't already exist.\r\nfunction GlobalMemoryGroups:_tryCreateNewGroup(groupName)\r\n    local groups = self:_getGroups()\r\n    if groups[groupName] == nil then\r\n        groups[groupName] = {}\r\n        self:_setGroups(groups)\r\n    end\r\nend\r\n\r\n-- This object controls the \"Group Name\" input text field that is part of the bag's ingame UI.\r\ngroupNameInput = {\r\n    greyedOutText     = \"Group Name\",\r\n    widthPerCharacter = 100,\r\n    padding           = 4,\r\n    memoryBag         = self\r\n}\r\nfunction groupNameInput:create(optionalStartingValue)\r\n    local effectiveText = optionalStartingValue or self.greyedOutText\r\n    local width = self:computeWidth(effectiveText)\r\n\r\n    self.memoryBag.createInput({\r\n        label = self.greyedOutText,\r\n        value = optionalStartingValue or nil,\r\n        alignment = 3, -- Center aligned\r\n        input_function = \"groupNameInput_onCharacterTyped\", function_owner = self.memoryBag,\r\n        position = { 2.1, 0.3, 0 }, rotation = { 0, 270, 0 }, width = width, height = 350,\r\n        font_size = 250, color = { 0, 0, 0 }, font_color = { 1, 1, 1 },\r\n    })\r\nend\r\n\r\nfunction groupNameInput:computeWidth(text)\r\n    return (string.len(text) + self.padding) * self.widthPerCharacter\r\nend\r\n\r\nfunction groupNameInput:updatedWidth(text)\r\n    self.memoryBag.editInput({\r\n        index = 0,\r\n        width = self:computeWidth(text)\r\n    })\r\nend\r\n\r\nfunction groupNameInput:onCharacterTyped(text, stillEditing)\r\n    if stillEditing then\r\n        self:updatedWidth(text)\r\n    else\r\n        if text == \"\" then\r\n            self:updatedWidth(self.greyedOutText)\r\n        end\r\n    end\r\nend\r\n\r\nfunction groupNameInput_onCharacterTyped(memoryBag, playerColor, text, stillEditing)\r\n    groupNameInput:onCharacterTyped(text, stillEditing)\r\nend\r\n\r\nfunction groupNameInput:setGroupNameToInputField()\r\n    local inputFields = self.memoryBag.getInputs()\r\n    if inputFields ~= nil then\r\n        -- Get input field 0, which corresponds to the groupNameInput.\r\n        -- Unfortunately \"self.getInputs()\" doesn't return the inputs in a guaranteed order.\r\n        local nameField = nil\r\n        for _, field in ipairs(inputFields) do\r\n            if field.index == 0 then\r\n                nameField = field\r\n            end\r\n        end\r\n\r\n        memoryGroupName:set(nameField.value)\r\n    end\r\nend\r\n\r\nfunction updateSave()\r\n    local data_to_save = { [\"ml\"] = memoryList, [\"groupName\"] = memoryGroupName:get() }\r\n    saved_data = JSON.encode(data_to_save)\r\n    self.script_state = saved_data\r\nend\r\n\r\nfunction combineMemoryFromBagsWithin()\r\n    local bagObjList = self.getObjects()\r\n    for _, bagObj in ipairs(bagObjList) do\r\n        local data = bagObj.lua_script_state\r\n        if data ~= nil then\r\n            local j = JSON.decode(data)\r\n            if j ~= nil and j.ml ~= nil then\r\n                for guid, entry in pairs(j.ml) do\r\n                    memoryList[guid] = entry\r\n                end\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\nfunction updateMemoryWithMoves()\r\n    memoryList = memoryListBackup\r\n    --get the first transposed object's coordinates\r\n    local obj = getObjectFromGUID(moveGuid)\r\n\r\n    -- p1 is where needs to go, p2 is where it was\r\n    local refObjPos = memoryList[moveGuid].pos\r\n    local deltaPos = findOffsetDistance(obj.getPosition(), refObjPos, nil)\r\n    local movedRotation = obj.getRotation()\r\n    for guid, entry in pairs(memoryList) do\r\n        memoryList[guid].pos.x = entry.pos.x - deltaPos.x\r\n        memoryList[guid].pos.y = entry.pos.y - deltaPos.y\r\n        memoryList[guid].pos.z = entry.pos.z - deltaPos.z\r\n    end\r\n    moveList = {}\r\nend\r\n\r\nfunction onload(saved_data)\r\n    GlobalMemoryGroups:onLoad(self.getGUID())\r\n    AllMemoryBagsInScene:add(self.getGUID())\r\n\r\n    fresh = true\r\n    if saved_data ~= \"\" then\r\n        local loaded_data = JSON.decode(saved_data)\r\n        --Set up information off of loaded_data\r\n        memoryList = loaded_data.ml\r\n        memoryGroupName:set(loaded_data.groupName)\r\n    else\r\n        --Set up information for if there is no saved saved data\r\n        memoryList = {}\r\n        memoryGroupName:set(nil)\r\n    end\r\n\r\n    moveList = {}\r\n    moveGuid = nil\r\n\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        fresh = false\r\n        createMemoryActionButtons()\r\n    end\r\nend\r\n\r\n--Beginning Setup\r\n\r\n--Make setup button\r\nfunction createSetupButton()\r\n    self.createButton({\r\n      label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n      position={0,0.3,2}, rotation={0,0,0}, height=350, width=800,\r\n      font_size=250, color={0,0,0}, font_color={1,1,1}\r\n  })\r\nend\r\n\r\n--Triggered by Transpose button\r\nfunction buttonClick_transpose()\r\n    moveGuid = nil\r\n    broadcastToAll(\"Select one object and move it- all objects will move relative to the new location\", { 0.75, 0.75, 1 })\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(true)\r\n    createSetupActionButtons(true)\r\nend\r\n\r\n--Triggered by setup button,\r\nfunction buttonClick_setup()\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(false)\r\n    createSetupActionButtons(false)\r\nend\r\n\r\nfunction getAllObjectsInMemory()\r\n    local objTable = {}\r\n    local curObj = {}\r\n\r\n    for guid in pairs(memoryListBackup) do\r\n        curObj = getObjectFromGUID(guid)\r\n        table.insert(objTable, curObj)\r\n    end\r\n\r\n    return objTable\r\nend\r\n\r\n--Creates selection buttons on objects\r\nfunction createButtonsOnAllObjects(move)\r\n    buttonIndexMap = {}\r\n    local howManyButtons = 0\r\n\r\n    local objsToHaveButtons = {}\r\n    if move == true then\r\n        objsToHaveButtons = getAllObjectsInMemory()\r\n    else\r\n        objsToHaveButtons = getAllObjects()\r\n    end\r\n\r\n    for _, obj in ipairs(objsToHaveButtons) do\r\n        if obj ~= self then\r\n            --On a normal bag, the button positions aren't the same size as the bag.\r\n            globalScaleFactor = 1 * 1 / self.getScale().x\r\n            --Super sweet math to set button positions\r\n            local selfPos = self.getPosition()\r\n            local objPos = obj.getPosition()\r\n            local deltaPos = findOffsetDistance(selfPos, objPos, obj)\r\n            local objPos = rotateLocalCoordinates(deltaPos, self)\r\n            objPos.x = -objPos.x * globalScaleFactor\r\n            objPos.y = objPos.y * globalScaleFactor + 2\r\n            objPos.z = objPos.z * globalScaleFactor\r\n            --Workaround for custom PDFs\r\n            if obj.Book then\r\n                objPos.y = objPos.y + 0.5\r\n            end\r\n            --Offset rotation of bag\r\n            local rot = self.getRotation()\r\n            rot.y = -rot.y + 180\r\n            --Create function\r\n            local funcName = \"selectButton_\" .. howManyButtons\r\n            local func = function() buttonClick_selection(obj, move) end\r\n            local color = { 0.75, 0.25, 0.25, 0.6 }\r\n            local colorMove = { 0, 0, 1, 0.6 }\r\n            if move == true then\r\n                color = colorMove\r\n            end\r\n            self.setVar(funcName, func)\r\n            self.createButton({\r\n                click_function = funcName, function_owner = self,\r\n                position = objPos, rotation = rot, height = 1000, width = 1000,\r\n                color = color,\r\n            })\r\n            buttonIndexMap[obj.getGUID()] = howManyButtons\r\n            howManyButtons = howManyButtons + 1\r\n        end\r\n    end\r\nend\r\n\r\n  --Creates submit and cancel buttons\r\n  function createSetupActionButtons(move)\r\n      self.createButton({\r\n         label=\"Annuler\", click_function=\"buttonClick_cancel\", function_owner=self,\r\n         position={-1.15,0.3,2.1}, rotation={0,0,0}, height=350, width=1100,\r\n         font_size=250, color={0,0,0}, font_color={1,1,1}\r\n      })\r\n\r\n      self.createButton({\r\n        label=\"Valider\", click_function=\"buttonClick_submit\", function_owner=self,\r\n        position={-1.15,0.3,2.8}, rotation={0,0,0}, height=350, width=1100,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n      })\r\n\r\n      if move == false then\r\n        self.createButton({\r\n            label=\"Ajouter\", click_function=\"buttonClick_add\", function_owner=self,\r\n            position={1.15,0.3,2.1}, rotation={0,0,0}, height=350, width=1100,\r\n            font_size=250, color={0,0,0}, font_color={0.25,1,0.25}\r\n          })\r\n\r\n          self.createButton({\r\n              label=\"Sélection\", click_function=\"editDragSelection\", function_owner=self,\r\n              position={-1.15,0.3,3.5}, rotation={0,0,0}, height=350, width=1100,\r\n              font_size=250, color={0,0,0}, font_color={1,1,1}\r\n          })\r\n\r\n          if fresh == false then\r\n              self.createButton({\r\n                  label=\"Mise à Jour\", click_function=\"buttonClick_setNew\", function_owner=self,\r\n                  position={1.15,0.3,3.5}, rotation={0,0,0}, height=350, width=1100,\r\n                  font_size=180, color={0,0,0}, font_color={0.75,0.75,1}\r\n              })\r\n              self.createButton({\r\n                  label=\"Retirer\", click_function=\"buttonClick_remove\", function_owner=self,\r\n                  position={1.15,0.3,2.8}, rotation={0,0,0}, height=350, width=1100,\r\n                  font_size=250, color={0,0,0}, font_color={1,0.25,0.25}\r\n              })\r\n          end\r\n      end\r\n\r\n      self.createButton({\r\n          label=\"Reset\", click_function=\"buttonClick_reset\", function_owner=self,\r\n          position={0,0.3,-2}, rotation={0,0,0}, height=350, width=800,\r\n          font_size=250, color={0,0,0}, font_color={1,1,1}\r\n      })\r\n  end\r\n\r\n\r\n--During Setup\r\n\r\n--Checks or unchecks buttons\r\nfunction buttonClick_selection(obj, move)\r\n    local index = buttonIndexMap[obj.getGUID()]\r\n    local colorMove = { 0, 0, 1, 0.6 }\r\n    local color = { 0, 1, 0, 0.6 }\r\n\r\n    previousGuid = selectedGuid\r\n    selectedGuid = obj.getGUID()\r\n\r\n    theList = memoryList\r\n    if move == true then\r\n        theList = moveList\r\n        if previousGuid ~= nil and previousGuid ~= selectedGuid then\r\n            local prevObj = getObjectFromGUID(previousGuid)\r\n            prevObj.highlightOff()\r\n            self.editButton({ index = previousIndex, color = colorMove })\r\n            theList[previousGuid] = nil\r\n        end\r\n        previousIndex = index\r\n    end\r\n\r\n    if theList[selectedGuid] == nil then\r\n        self.editButton({ index = index, color = color })\r\n        --Adding pos/rot to memory table\r\n        local pos, rot = obj.getPosition(), obj.getRotation()\r\n        --I need to add it like this or it won't save due to indexing issue\r\n        theList[obj.getGUID()] = {\r\n            pos = { x = round(pos.x, 4), y = round(pos.y, 4), z = round(pos.z, 4) },\r\n            rot = { x = round(rot.x, 4), y = round(rot.y, 4), z = round(rot.z, 4) },\r\n            lock = obj.getLock(),\r\n            tint = obj.getColorTint()\r\n        }\r\n        obj.highlightOn({ 0, 1, 0 })\r\n    else\r\n        color = { 0.75, 0.25, 0.25, 0.6 }\r\n        if move == true then\r\n            color = colorMove\r\n        end\r\n        self.editButton({ index = index, color = color })\r\n        theList[obj.getGUID()] = nil\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\nfunction editDragSelection(bagObj, player, remove)\r\n    local selectedObjs = Player[player].getSelectedObjects()\r\n    if not remove then\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            --Ignore if already in the memory list, or does not have a button\r\n            if index and not memoryList[obj.getGUID()] then\r\n                self.editButton({ index = index, color = { 0, 1, 0, 0.6 } })\r\n                --Adding pos/rot to memory table\r\n                local pos, rot = obj.getPosition(), obj.getRotation()\r\n                --I need to add it like this or it won't save due to indexing issue\r\n                memoryList[obj.getGUID()] = {\r\n                    pos = { x = round(pos.x, 4), y = round(pos.y, 4), z = round(pos.z, 4) },\r\n                    rot = { x = round(rot.x, 4), y = round(rot.y, 4), z = round(rot.z, 4) },\r\n                    lock = obj.getLock(),\r\n                    tint = obj.getColorTint()\r\n                }\r\n                obj.highlightOn({ 0, 1, 0 })\r\n            end\r\n        end\r\n    else\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            if index and memoryList[obj.getGUID()] then\r\n                color = { 0.75, 0.25, 0.25, 0.6 }\r\n                self.editButton({ index = index, color = color })\r\n                memoryList[obj.getGUID()] = nil\r\n                obj.highlightOff()\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\n--Cancels selection process\r\nfunction buttonClick_cancel()\r\n    memoryList = memoryListBackup\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        createMemoryActionButtons()\r\n    end\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Sélection annulée\", { 1, 1, 1 })\r\n    moveGuid = nil\r\nend\r\n\r\n--Saves selections\r\nfunction buttonClick_submit()\r\n    fresh = false\r\n    if next(moveList) ~= nil then\r\n        for guid in pairs(moveList) do\r\n            moveGuid = guid\r\n        end\r\n        if memoryListBackup[moveGuid] == nil then\r\n            broadcastToAll(\"Item selected for moving is not already in memory\", { 1, 0.25, 0.25 })\r\n        else\r\n            broadcastToAll(\"Moving all items in memory relative to new objects position!\", { 0.75, 0.75, 1 })\r\n            self.clearButtons()\r\n            self.clearInputs()\r\n            createMemoryActionButtons()\r\n            local count = 0\r\n            for guid in pairs(moveList) do\r\n                moveGuid = guid\r\n                count = count + 1\r\n                local obj = getObjectFromGUID(guid)\r\n                if obj ~= nil then obj.highlightOff() end\r\n            end\r\n            updateMemoryWithMoves()\r\n            updateSave()\r\n            buttonClick_place()\r\n        end\r\n    elseif next(memoryList) == nil and moveGuid == nil then\r\n        memoryList = memoryListBackup\r\n        broadcastToAll(\"No selections made.\", { 0.75, 0.25, 0.25 })\r\n    end\r\n    combineMemoryFromBagsWithin()\r\n    groupNameInput:setGroupNameToInputField()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count .. \" Objects Saved\", { 1, 1, 1 })\r\n    updateSave()\r\n    moveGuid = nil\r\nend\r\n\r\nfunction combineTables(first_table, second_table)\r\n    for k, v in pairs(second_table) do first_table[k] = v end\r\nend\r\n\r\nfunction buttonClick_add()\r\n    fresh = false\r\n    combineTables(memoryList, memoryListBackup)\r\n    broadcastToAll(\"Adding internal bags and selections to existing memory\", { 0.25, 0.75, 0.25 })\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count .. \" Objects Saved\", { 1, 1, 1 })\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_remove()\r\n    broadcastToAll(\"Removing Selected Entries From Memory\", { 1.0, 0.25, 0.25 })\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        memoryListBackup[guid] = nil\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count .. \" Objects Removed\", { 1, 1, 1 })\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_setNew()\r\n    broadcastToAll(\"Setting new position relative to items in memory\", { 0.75, 0.75, 1 })\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        guid = obj.guid\r\n        if memoryListBackup[guid] ~= nil then\r\n            count = count + 1\r\n            memoryListBackup[guid].pos = obj.getPosition()\r\n            memoryListBackup[guid].rot = obj.getRotation()\r\n            memoryListBackup[guid].lock = obj.getLock()\r\n            memoryListBackup[guid].tint = obj.getColorTint()\r\n        end\r\n    end\r\n    broadcastToAll(count .. \" Objects Saved\", { 1, 1, 1 })\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\n--Resets bag to starting status\r\nfunction buttonClick_reset()\r\n    fresh = true\r\n    memoryList = {}\r\n    memoryGroupName:set(nil)\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createSetupButton()\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Tool Reset\", { 1, 1, 1 })\r\n    updateSave()\r\nend\r\n\r\n--After Setup\r\n\r\n--Creates recall and place buttons\r\nfunction createMemoryActionButtons()\r\n    self.createButton({\r\n        label=\"Placer au hasard\", click_function=\"buttonClick_place\", function_owner=self,\r\n        position={0,0.3,2}, rotation={0,0,0}, height=350, width=2000,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Ranger\", click_function=\"buttonClick_recall\", function_owner=self,\r\n        position={0,0.3,2.8}, rotation={0,0,0}, height=350, width=1000,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n        position={2,0.3,0}, rotation={0,90,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    ---    self.createButton({\r\n    ---      label=\"Bouger\", click_function=\"buttonClick_transpose\", function_owner=self,\r\n    ---      position={-2,0.3,0.8}, rotation={0,270,0}, height=350, width=800,\r\n    ---      font_size=250, color={0,0,0}, font_color={0.75,0.75,1}\r\n    ---\r\nend\r\n\r\n--Sends objects from bag/table to their saved position/rotation\r\nfunction buttonClick_place()\r\n    if anyOtherBagsInMyGroupArePlaced() then\r\n        recallOtherBagsInMyGroup()\r\n        Wait.frames(_placeObjects, CONFIG.MEMORY_GROUP.FRAME_DELAY_BEFORE_PLACING_OBJECTS)\r\n    else\r\n        _placeObjects()\r\n    end\r\nend\r\n\r\nfunction _placeObjects()\r\n    local bagObjList = self.getObjects()\r\n\r\n    -- randomize memorylist position\r\n    local positionList = {}\r\n    for guid, entry in pairs(memoryList) do\r\n        table.insert(positionList, memoryList[guid].pos)\r\n    end\r\n\r\n    for i = #positionList, 2, -1 do\r\n        local j = math.random(i)\r\n        positionList[i], positionList[j] = positionList[j], positionList[i]\r\n    end\r\n\r\n    local i = 1\r\n    for guid, entry in pairs(memoryList) do\r\n        memoryList[guid].pos = positionList[i]\r\n        i = i + 1\r\n    end\r\n\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        --If obj is out on the table, move it to the saved pos/rot\r\n        if obj ~= nil then\r\n            obj.setPositionSmooth(entry.pos)\r\n            obj.setRotationSmooth(entry.rot)\r\n            obj.setLock(entry.lock)\r\n            obj.setColorTint(entry.tint)\r\n        else\r\n            --If obj is inside of the bag\r\n            for _, bagObj in ipairs(bagObjList) do\r\n                if bagObj.guid == guid then\r\n                    local item = self.takeObject({\r\n                        guid = guid, position = entry.pos, rotation = entry.rot, smooth = false\r\n                    })\r\n                    item.setLock(entry.lock)\r\n                    item.setColorTint(entry.tint)\r\n                    break\r\n                end\r\n            end\r\n        end\r\n    end\r\n    broadcastToAll(\"Objets placés au hasard\", {1,1,1})\r\nend\r\n\r\n--Recalls objects to bag from table\r\nfunction buttonClick_recall()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then self.putObject(obj) end\r\n    end\r\n    broadcastToAll(\"Objets rangés\", {1,1,1})\r\nend\r\n\r\n--Utility functions\r\n\r\n--Find delta (difference) between 2 x/y/z coordinates\r\nfunction findOffsetDistance(p1, p2, obj)\r\n    local yOffset = 0\r\n    if obj ~= nil then\r\n        local bounds = obj.getBounds()\r\n        yOffset = (bounds.size.y - bounds.offset.y)\r\n    end\r\n    local deltaPos = {}\r\n    deltaPos.x = (p2.x - p1.x)\r\n    deltaPos.y = (p2.y - p1.y) + yOffset\r\n    deltaPos.z = (p2.z - p1.z)\r\n    return deltaPos\r\nend\r\n\r\n--Used to rotate a set of coordinates by an angle\r\nfunction rotateLocalCoordinates(desiredPos, obj)\r\n    local objPos, objRot = obj.getPosition(), obj.getRotation()\r\n    local angle = math.rad(objRot.y)\r\n    local x = desiredPos.x * math.cos(angle) - desiredPos.z * math.sin(angle)\r\n    local z = desiredPos.x * math.sin(angle) + desiredPos.z * math.cos(angle)\r\n    --return {x=objPos.x+x, y=objPos.y+desiredPos.y, z=objPos.z+z}\r\n    return { x = x, y = desiredPos.y, z = z }\r\nend\r\n\r\nfunction rotateMyCoordinates(desiredPos, obj)\r\n    local angle = math.rad(obj.getRotation().y)\r\n    local x = desiredPos.x * math.sin(angle)\r\n    local z = desiredPos.z * math.cos(angle)\r\n    return { x = x, y = desiredPos.y, z = z }\r\nend\r\n\r\n--Coroutine delay, in seconds\r\nfunction wait(time)\r\n    local start = os.time()\r\n    repeat coroutine.yield(0) until os.time() > start + time\r\nend\r\n\r\n--Duplicates a table (needed to prevent it making reference to the same objects)\r\nfunction duplicateTable(oldTable)\r\n    local newTable = {}\r\n    for k, v in pairs(oldTable) do\r\n        newTable[k] = v\r\n    end\r\n    return newTable\r\nend\r\n\r\n--Moves scripted highlight from all objects\r\nfunction removeAllHighlights()\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\n--Round number (num) to the Nth decimal (dec)\r\nfunction round(num, dec)\r\n    local mult = 10 ^ (dec or 0)\r\n    return math.floor(num * mult + 0.5) / mult\r\nend\r\n\r\n--[[ This object provides access to a variable stored on the \"Global script\".\r\nThe variable holds the GUIDs for every Utility Memory Bag in the scene.\r\nExample: {'805ebd', '35cc21', 'fc8886', 'f50264', '5f5f63'} --]]\r\nAllMemoryBagsInScene = {\r\n    NAME_OF_GLOBAL_VARIABLE = \"_UtilityMemoryBag_AllMemoryBagsInScene\"\r\n}\r\n\r\nfunction AllMemoryBagsInScene:add(guid)\r\n    local guids = Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\n    table.insert(guids, guid)\r\n    Global.setTable(self.NAME_OF_GLOBAL_VARIABLE, guids)\r\nend\r\n\r\nfunction AllMemoryBagsInScene:getGuidList()\r\n    return Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\nend\r\n","LuaScriptState":"{\"ml\":{\"e191a7\":{\"lock\":false,\"pos\":{\"x\":4.10810089111328,\"y\":1.52100431919098,\"z\":23.5402011871338},\"rot\":{\"x\":0.0108914999291301,\"y\":179.999252319336,\"z\":0.00494796270504594},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"f59531\":{\"lock\":false,\"pos\":{\"x\":-23.499979019165,\"y\":1.7788553237915,\"z\":26.0000228881836},\"rot\":{\"x\":-5.02514149047784E-06,\"y\":179.332611083984,\"z\":1.05529217364619E-07},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}}}}","XmlUI":"","ContainedObjects":[{"GUID":"e191a7","Name":"Card","Transform":{"posX":-23.4999752,"posY":1.7789042,"posZ":26.00003,"rotX":-0.0000050710305,"rotY":179.999268,"rotZ":6.414535e-8,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Lande Dévastée","Description":"Dunwich.","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02249\",\n  \"locationBack\": {\n    \"connections\": \"Circle|Hourglass\",\n    \"icons\": \"Square\",\n    \"uses\": {\n      \"count\": 2,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    }\n  },\n  \"locationFront\": {\n    \"connections\": \"Circle|Hourglass\",\n    \"icons\": \"Square\"\n  },\n  \"traits\": \"Dunwich.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":117311,"SidewaysCard":false,"CustomDeck":{"1173":{"FaceURL":"https://i.imgur.com/0FRbPFZ.jpg","BackURL":"https://i.imgur.com/z0qG3Pt.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"f59531","Name":"Card","Transform":{"posX":4.10810232,"posY":1.52100432,"posZ":23.5402,"rotX":0.0109483488,"rotY":179.332611,"rotZ":0.004821117,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Lande Dévastée","Description":"Dunwich.","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02248\",\n  \"locationBack\": {\n    \"connections\": \"Circle|Hourglass\",\n    \"icons\": \"Square\",\n    \"uses\": {\n      \"count\": 3,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    }\n  },\n  \"locationFront\": {\n    \"connections\": \"Circle|Hourglass\",\n    \"icons\": \"Square\"\n  },\n  \"traits\": \"Dunwich.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":117312,"SidewaysCard":false,"CustomDeck":{"1173":{"FaceURL":"https://i.imgur.com/0FRbPFZ.jpg","BackURL":"https://i.imgur.com/z0qG3Pt.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""}]},{"GUID":"a4a074","Name":"Custom_Tile","Transform":{"posX":-1.49999988,"posY":1.50473976,"posZ":6.99999952,"rotX":0.0112016425,"rotY":135.013779,"rotZ":-0.00420137867,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/vppt2my.png","ImageSecondaryURL":"https://i.imgur.com/vppt2my.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":"","States":{"2":{"GUID":"44b0c5","Name":"Custom_Tile","Transform":{"posX":-39.7933121,"posY":1.63758957,"posZ":2.038383,"rotX":359.9201,"rotY":269.9961,"rotZ":0.0168742146,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/HyfE8m8.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""},"3":{"GUID":"5b38c6","Name":"Custom_Tile","Transform":{"posX":-38.8217163,"posY":1.99356019,"posZ":0.4159239,"rotX":359.9201,"rotY":272.9828,"rotZ":0.01687373,"scaleX":0.8,"scaleY":1,"scaleZ":0.8},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/dHKBLoD.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""}}},{"GUID":"b526e3","Name":"Custom_Model_Bag","Transform":{"posX":-20,"posY":1.8353008,"posZ":10,"rotX":-0.00000611221458,"rotY":179.971725,"rotZ":-7.91601053e-7,"scaleX":0.7,"scaleY":0.7,"scaleZ":0.7},"Nickname":"Choisir un lieu au hasard","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.614982545,"g":0,"b":0},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"MaterialIndex":-1,"MeshIndex":-1,"CustomMesh":{"MeshURL":"https://pastebin.com/raw/ALrYhQGb","DiffuseURL":"http://cloud-3.steamusercontent.com/ugc/1936013662302003564/A3B2CB76F0EB526F71A6076E20E5E5CF51C9A02A/","NormalURL":"","ColliderURL":"","Convex":true,"MaterialIndex":3,"TypeIndex":6,"CustomShader":{"SpecularColor":{"r":1,"g":1,"b":1},"SpecularIntensity":0,"SpecularSharpness":2,"FresnelStrength":0},"CastShadows":true},"Bag":{"Order":0},"LuaScript":"-- Random memory bag\r\n-- based on Utility memory bag by Directsun (Version 2.7.0)\r\n\r\nlocal CONFIG = {\r\n    MEMORY_GROUP = {\r\n        -- This determines how many frames to wait before actually placing objects onto the table when the \"Place\" button is clicked.\r\n        -- This gives the other bags time to recall their objects.\r\n        -- The delay ONLY occurs if other bags have objects out.\r\n        FRAME_DELAY_BEFORE_PLACING_OBJECTS = 30\r\n    }\r\n}\r\n\r\nmath.randomseed(os.time())\r\n\r\n--[[ Memory Bag Groups ]]\r\n--[[ Utility Memory Bags may be added to a named group, called a \"memory group\".\r\nYou can add a bag to a group through the bag's UI: \"Setup\" > \"Group Name\" (to the left of the bag).\r\nOnly one bag from a group may have it's contents placed on the table at a time.\r\nWhen \"Place\" is clicked on a bag, the other bags in it's memory group are recalled.\r\nBy default a memory bag is not in any group. It's memory group is \"nil\". --]]\r\n\r\nmemoryGroupName = { memoryBag = self }\r\nfunction memoryGroupName:get()\r\n    return self._name\r\nend\r\n\r\nfunction memoryGroupName:set(newName)\r\n    GlobalMemoryGroups:unregisterBagInGroup(self:get(), self.memoryBag.getGUID())\r\n    GlobalMemoryGroups:registerBagInGroup(newName, self.memoryBag.getGUID())\r\n\r\n    if newName == \"\" then\r\n        self._name = nil\r\n    else\r\n        self._name = newName\r\n    end\r\nend\r\n\r\n-- Click the \"Recall\" button on all other bags in my memory group.\r\nfunction recallOtherBagsInMyGroup()\r\n    for _, bag in ipairs(getOtherBagsInMyGroup()) do\r\n        bag.call('buttonClick_recall')\r\n    end\r\nend\r\n\r\n-- Return \"true\" if another bag in my memory group has any objects out on the table.\r\nfunction anyOtherBagsInMyGroupArePlaced()\r\n    for _, bag in ipairs(getOtherBagsInMyGroup()) do\r\n        local state = bag.call('areAnyOfMyObjectsPlaced')\r\n        if state then return true end\r\n    end\r\n\r\n    return false\r\nend\r\n\r\n-- Return \"true\" if at least one object from this memory bag is out on the table.\r\nfunction areAnyOfMyObjectsPlaced()\r\n    for guid, _ in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then\r\n            return true\r\n        end\r\n    end\r\n    return false\r\nend\r\n\r\nfunction getOtherBagsInMyGroup()\r\n    local bags = {}\r\n    for bagGuid, _ in pairs(GlobalMemoryGroups:getGroup(memoryGroupName:get())) do\r\n        if bagGuid ~= self.getGUID() then\r\n            bag = getObjectFromGUID(bagGuid)\r\n            -- \"bag\" is nill if it has been deleted since the last time onLoad() was called.\r\n            if bag ~= nil then\r\n                table.insert(bags, bag)\r\n            end\r\n        end\r\n    end\r\n    return bags\r\nend\r\n\r\n--[[\r\nThis object provides access to a variable stored on the \"Global script\".\r\nThe variable holds the names & guids of all memory bag groups.\r\nThe global variable is a table and holds data like this:\r\n{\r\n    'My First Group Name' = {\r\n        '805ebd' = {},\r\n        '35cc21' = {},\r\n        'fc8886' = {},\r\n    },\r\n    'My Second Group Name' = {\r\n        'f50264' = {},\r\n        '5f5f63' = {},\r\n    },\r\n}\r\n--]]\r\nGlobalMemoryGroups = { NAME_OF_GLOBAL_VARIABLE = '_GlobalUtilityMemoryBagGroups' }\r\n\r\n-- Call me inside this script's \"onLoad()\" method!\r\nfunction GlobalMemoryGroups:onLoad(myGuid)\r\n    -- Create and initialize the global variable if it doesn't already exist:\r\n    if self:_getGroups() == nil then\r\n        self:_setGroups({})\r\n    end\r\nend\r\n\r\n-- Return the GUIDs of all bags in the \"groupName\". The return value is a dictionary that maps [GUID -> empty table].\r\nfunction GlobalMemoryGroups:getGroup(groupName)\r\n    guids = self:_getGroups()[groupName] or {}\r\n    return guids\r\nend\r\n\r\n-- Registers a bag in a memory group. Creates a new group if one doesn't exist.\r\nfunction GlobalMemoryGroups:registerBagInGroup(groupName, bagGuid)\r\n    if groupName == nil or groupName == \"\" then\r\n        return\r\n    end\r\n\r\n    self:_tryCreateNewGroup(groupName)\r\n    local groups = self:_getGroups()\r\n    groups[groupName][bagGuid] = {}\r\n    self:_setGroups(groups)\r\nend\r\n\r\n-- Removes this bag from the memory group.\r\nfunction GlobalMemoryGroups:unregisterBagInGroup(groupName, bagGuid)\r\n    local groups = self:_getGroups()\r\n    local group = groups[groupName]\r\n    if group ~= nil then\r\n        group[bagGuid] = nil\r\n        self:_setGroups(groups)\r\n    end\r\nend\r\n\r\n-- Return the global variable, which is a table holding all memory group names & guids.\r\nfunction GlobalMemoryGroups:_getGroups()\r\n    return Global.getTable(self.NAME_OF_GLOBAL_VARIABLE)\r\nend\r\n\r\n-- Override the global variable (i.e. the entire table).\r\nfunction GlobalMemoryGroups:_setGroups(newTable)\r\n    Global.setTable(self.NAME_OF_GLOBAL_VARIABLE, newTable)\r\nend\r\n\r\n-- Add a new memory group named \"groupName\" to the global variable, if one doesn't already exist.\r\nfunction GlobalMemoryGroups:_tryCreateNewGroup(groupName)\r\n    local groups = self:_getGroups()\r\n    if groups[groupName] == nil then\r\n        groups[groupName] = {}\r\n        self:_setGroups(groups)\r\n    end\r\nend\r\n\r\n-- This object controls the \"Group Name\" input text field that is part of the bag's ingame UI.\r\ngroupNameInput = {\r\n    greyedOutText     = \"Group Name\",\r\n    widthPerCharacter = 100,\r\n    padding           = 4,\r\n    memoryBag         = self\r\n}\r\nfunction groupNameInput:create(optionalStartingValue)\r\n    local effectiveText = optionalStartingValue or self.greyedOutText\r\n    local width = self:computeWidth(effectiveText)\r\n\r\n    self.memoryBag.createInput({\r\n        label = self.greyedOutText,\r\n        value = optionalStartingValue or nil,\r\n        alignment = 3, -- Center aligned\r\n        input_function = \"groupNameInput_onCharacterTyped\", function_owner = self.memoryBag,\r\n        position = { 2.1, 0.3, 0 }, rotation = { 0, 270, 0 }, width = width, height = 350,\r\n        font_size = 250, color = { 0, 0, 0 }, font_color = { 1, 1, 1 },\r\n    })\r\nend\r\n\r\nfunction groupNameInput:computeWidth(text)\r\n    return (string.len(text) + self.padding) * self.widthPerCharacter\r\nend\r\n\r\nfunction groupNameInput:updatedWidth(text)\r\n    self.memoryBag.editInput({\r\n        index = 0,\r\n        width = self:computeWidth(text)\r\n    })\r\nend\r\n\r\nfunction groupNameInput:onCharacterTyped(text, stillEditing)\r\n    if stillEditing then\r\n        self:updatedWidth(text)\r\n    else\r\n        if text == \"\" then\r\n            self:updatedWidth(self.greyedOutText)\r\n        end\r\n    end\r\nend\r\n\r\nfunction groupNameInput_onCharacterTyped(memoryBag, playerColor, text, stillEditing)\r\n    groupNameInput:onCharacterTyped(text, stillEditing)\r\nend\r\n\r\nfunction groupNameInput:setGroupNameToInputField()\r\n    local inputFields = self.memoryBag.getInputs()\r\n    if inputFields ~= nil then\r\n        -- Get input field 0, which corresponds to the groupNameInput.\r\n        -- Unfortunately \"self.getInputs()\" doesn't return the inputs in a guaranteed order.\r\n        local nameField = nil\r\n        for _, field in ipairs(inputFields) do\r\n            if field.index == 0 then\r\n                nameField = field\r\n            end\r\n        end\r\n\r\n        memoryGroupName:set(nameField.value)\r\n    end\r\nend\r\n\r\nfunction updateSave()\r\n    local data_to_save = { [\"ml\"] = memoryList, [\"groupName\"] = memoryGroupName:get() }\r\n    saved_data = JSON.encode(data_to_save)\r\n    self.script_state = saved_data\r\nend\r\n\r\nfunction combineMemoryFromBagsWithin()\r\n    local bagObjList = self.getObjects()\r\n    for _, bagObj in ipairs(bagObjList) do\r\n        local data = bagObj.lua_script_state\r\n        if data ~= nil then\r\n            local j = JSON.decode(data)\r\n            if j ~= nil and j.ml ~= nil then\r\n                for guid, entry in pairs(j.ml) do\r\n                    memoryList[guid] = entry\r\n                end\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\nfunction updateMemoryWithMoves()\r\n    memoryList = memoryListBackup\r\n    --get the first transposed object's coordinates\r\n    local obj = getObjectFromGUID(moveGuid)\r\n\r\n    -- p1 is where needs to go, p2 is where it was\r\n    local refObjPos = memoryList[moveGuid].pos\r\n    local deltaPos = findOffsetDistance(obj.getPosition(), refObjPos, nil)\r\n    local movedRotation = obj.getRotation()\r\n    for guid, entry in pairs(memoryList) do\r\n        memoryList[guid].pos.x = entry.pos.x - deltaPos.x\r\n        memoryList[guid].pos.y = entry.pos.y - deltaPos.y\r\n        memoryList[guid].pos.z = entry.pos.z - deltaPos.z\r\n    end\r\n    moveList = {}\r\nend\r\n\r\nfunction onload(saved_data)\r\n    GlobalMemoryGroups:onLoad(self.getGUID())\r\n    AllMemoryBagsInScene:add(self.getGUID())\r\n\r\n    fresh = true\r\n    if saved_data ~= \"\" then\r\n        local loaded_data = JSON.decode(saved_data)\r\n        --Set up information off of loaded_data\r\n        memoryList = loaded_data.ml\r\n        memoryGroupName:set(loaded_data.groupName)\r\n    else\r\n        --Set up information for if there is no saved saved data\r\n        memoryList = {}\r\n        memoryGroupName:set(nil)\r\n    end\r\n\r\n    moveList = {}\r\n    moveGuid = nil\r\n\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        fresh = false\r\n        createMemoryActionButtons()\r\n    end\r\nend\r\n\r\n--Beginning Setup\r\n\r\n--Make setup button\r\nfunction createSetupButton()\r\n    self.createButton({\r\n      label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n      position={0,0.3,2}, rotation={0,0,0}, height=350, width=800,\r\n      font_size=250, color={0,0,0}, font_color={1,1,1}\r\n  })\r\nend\r\n\r\n--Triggered by Transpose button\r\nfunction buttonClick_transpose()\r\n    moveGuid = nil\r\n    broadcastToAll(\"Select one object and move it- all objects will move relative to the new location\", { 0.75, 0.75, 1 })\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(true)\r\n    createSetupActionButtons(true)\r\nend\r\n\r\n--Triggered by setup button,\r\nfunction buttonClick_setup()\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(false)\r\n    createSetupActionButtons(false)\r\nend\r\n\r\nfunction getAllObjectsInMemory()\r\n    local objTable = {}\r\n    local curObj = {}\r\n\r\n    for guid in pairs(memoryListBackup) do\r\n        curObj = getObjectFromGUID(guid)\r\n        table.insert(objTable, curObj)\r\n    end\r\n\r\n    return objTable\r\nend\r\n\r\n--Creates selection buttons on objects\r\nfunction createButtonsOnAllObjects(move)\r\n    buttonIndexMap = {}\r\n    local howManyButtons = 0\r\n\r\n    local objsToHaveButtons = {}\r\n    if move == true then\r\n        objsToHaveButtons = getAllObjectsInMemory()\r\n    else\r\n        objsToHaveButtons = getAllObjects()\r\n    end\r\n\r\n    for _, obj in ipairs(objsToHaveButtons) do\r\n        if obj ~= self then\r\n            --On a normal bag, the button positions aren't the same size as the bag.\r\n            globalScaleFactor = 1 * 1 / self.getScale().x\r\n            --Super sweet math to set button positions\r\n            local selfPos = self.getPosition()\r\n            local objPos = obj.getPosition()\r\n            local deltaPos = findOffsetDistance(selfPos, objPos, obj)\r\n            local objPos = rotateLocalCoordinates(deltaPos, self)\r\n            objPos.x = -objPos.x * globalScaleFactor\r\n            objPos.y = objPos.y * globalScaleFactor + 2\r\n            objPos.z = objPos.z * globalScaleFactor\r\n            --Workaround for custom PDFs\r\n            if obj.Book then\r\n                objPos.y = objPos.y + 0.5\r\n            end\r\n            --Offset rotation of bag\r\n            local rot = self.getRotation()\r\n            rot.y = -rot.y + 180\r\n            --Create function\r\n            local funcName = \"selectButton_\" .. howManyButtons\r\n            local func = function() buttonClick_selection(obj, move) end\r\n            local color = { 0.75, 0.25, 0.25, 0.6 }\r\n            local colorMove = { 0, 0, 1, 0.6 }\r\n            if move == true then\r\n                color = colorMove\r\n            end\r\n            self.setVar(funcName, func)\r\n            self.createButton({\r\n                click_function = funcName, function_owner = self,\r\n                position = objPos, rotation = rot, height = 1000, width = 1000,\r\n                color = color,\r\n            })\r\n            buttonIndexMap[obj.getGUID()] = howManyButtons\r\n            howManyButtons = howManyButtons + 1\r\n        end\r\n    end\r\nend\r\n\r\n  --Creates submit and cancel buttons\r\n  function createSetupActionButtons(move)\r\n      self.createButton({\r\n         label=\"Annuler\", click_function=\"buttonClick_cancel\", function_owner=self,\r\n         position={-1.15,0.3,2.1}, rotation={0,0,0}, height=350, width=1100,\r\n         font_size=250, color={0,0,0}, font_color={1,1,1}\r\n      })\r\n\r\n      self.createButton({\r\n        label=\"Valider\", click_function=\"buttonClick_submit\", function_owner=self,\r\n        position={-1.15,0.3,2.8}, rotation={0,0,0}, height=350, width=1100,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n      })\r\n\r\n      if move == false then\r\n        self.createButton({\r\n            label=\"Ajouter\", click_function=\"buttonClick_add\", function_owner=self,\r\n            position={1.15,0.3,2.1}, rotation={0,0,0}, height=350, width=1100,\r\n            font_size=250, color={0,0,0}, font_color={0.25,1,0.25}\r\n          })\r\n\r\n          self.createButton({\r\n              label=\"Sélection\", click_function=\"editDragSelection\", function_owner=self,\r\n              position={-1.15,0.3,3.5}, rotation={0,0,0}, height=350, width=1100,\r\n              font_size=250, color={0,0,0}, font_color={1,1,1}\r\n          })\r\n\r\n          if fresh == false then\r\n              self.createButton({\r\n                  label=\"Mise à Jour\", click_function=\"buttonClick_setNew\", function_owner=self,\r\n                  position={1.15,0.3,3.5}, rotation={0,0,0}, height=350, width=1100,\r\n                  font_size=180, color={0,0,0}, font_color={0.75,0.75,1}\r\n              })\r\n              self.createButton({\r\n                  label=\"Retirer\", click_function=\"buttonClick_remove\", function_owner=self,\r\n                  position={1.15,0.3,2.8}, rotation={0,0,0}, height=350, width=1100,\r\n                  font_size=250, color={0,0,0}, font_color={1,0.25,0.25}\r\n              })\r\n          end\r\n      end\r\n\r\n      self.createButton({\r\n          label=\"Reset\", click_function=\"buttonClick_reset\", function_owner=self,\r\n          position={0,0.3,-2}, rotation={0,0,0}, height=350, width=800,\r\n          font_size=250, color={0,0,0}, font_color={1,1,1}\r\n      })\r\n  end\r\n\r\n\r\n--During Setup\r\n\r\n--Checks or unchecks buttons\r\nfunction buttonClick_selection(obj, move)\r\n    local index = buttonIndexMap[obj.getGUID()]\r\n    local colorMove = { 0, 0, 1, 0.6 }\r\n    local color = { 0, 1, 0, 0.6 }\r\n\r\n    previousGuid = selectedGuid\r\n    selectedGuid = obj.getGUID()\r\n\r\n    theList = memoryList\r\n    if move == true then\r\n        theList = moveList\r\n        if previousGuid ~= nil and previousGuid ~= selectedGuid then\r\n            local prevObj = getObjectFromGUID(previousGuid)\r\n            prevObj.highlightOff()\r\n            self.editButton({ index = previousIndex, color = colorMove })\r\n            theList[previousGuid] = nil\r\n        end\r\n        previousIndex = index\r\n    end\r\n\r\n    if theList[selectedGuid] == nil then\r\n        self.editButton({ index = index, color = color })\r\n        --Adding pos/rot to memory table\r\n        local pos, rot = obj.getPosition(), obj.getRotation()\r\n        --I need to add it like this or it won't save due to indexing issue\r\n        theList[obj.getGUID()] = {\r\n            pos = { x = round(pos.x, 4), y = round(pos.y, 4), z = round(pos.z, 4) },\r\n            rot = { x = round(rot.x, 4), y = round(rot.y, 4), z = round(rot.z, 4) },\r\n            lock = obj.getLock(),\r\n            tint = obj.getColorTint()\r\n        }\r\n        obj.highlightOn({ 0, 1, 0 })\r\n    else\r\n        color = { 0.75, 0.25, 0.25, 0.6 }\r\n        if move == true then\r\n            color = colorMove\r\n        end\r\n        self.editButton({ index = index, color = color })\r\n        theList[obj.getGUID()] = nil\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\nfunction editDragSelection(bagObj, player, remove)\r\n    local selectedObjs = Player[player].getSelectedObjects()\r\n    if not remove then\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            --Ignore if already in the memory list, or does not have a button\r\n            if index and not memoryList[obj.getGUID()] then\r\n                self.editButton({ index = index, color = { 0, 1, 0, 0.6 } })\r\n                --Adding pos/rot to memory table\r\n                local pos, rot = obj.getPosition(), obj.getRotation()\r\n                --I need to add it like this or it won't save due to indexing issue\r\n                memoryList[obj.getGUID()] = {\r\n                    pos = { x = round(pos.x, 4), y = round(pos.y, 4), z = round(pos.z, 4) },\r\n                    rot = { x = round(rot.x, 4), y = round(rot.y, 4), z = round(rot.z, 4) },\r\n                    lock = obj.getLock(),\r\n                    tint = obj.getColorTint()\r\n                }\r\n                obj.highlightOn({ 0, 1, 0 })\r\n            end\r\n        end\r\n    else\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            if index and memoryList[obj.getGUID()] then\r\n                color = { 0.75, 0.25, 0.25, 0.6 }\r\n                self.editButton({ index = index, color = color })\r\n                memoryList[obj.getGUID()] = nil\r\n                obj.highlightOff()\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\n--Cancels selection process\r\nfunction buttonClick_cancel()\r\n    memoryList = memoryListBackup\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        createMemoryActionButtons()\r\n    end\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Sélection annulée\", { 1, 1, 1 })\r\n    moveGuid = nil\r\nend\r\n\r\n--Saves selections\r\nfunction buttonClick_submit()\r\n    fresh = false\r\n    if next(moveList) ~= nil then\r\n        for guid in pairs(moveList) do\r\n            moveGuid = guid\r\n        end\r\n        if memoryListBackup[moveGuid] == nil then\r\n            broadcastToAll(\"Item selected for moving is not already in memory\", { 1, 0.25, 0.25 })\r\n        else\r\n            broadcastToAll(\"Moving all items in memory relative to new objects position!\", { 0.75, 0.75, 1 })\r\n            self.clearButtons()\r\n            self.clearInputs()\r\n            createMemoryActionButtons()\r\n            local count = 0\r\n            for guid in pairs(moveList) do\r\n                moveGuid = guid\r\n                count = count + 1\r\n                local obj = getObjectFromGUID(guid)\r\n                if obj ~= nil then obj.highlightOff() end\r\n            end\r\n            updateMemoryWithMoves()\r\n            updateSave()\r\n            buttonClick_place()\r\n        end\r\n    elseif next(memoryList) == nil and moveGuid == nil then\r\n        memoryList = memoryListBackup\r\n        broadcastToAll(\"No selections made.\", { 0.75, 0.25, 0.25 })\r\n    end\r\n    combineMemoryFromBagsWithin()\r\n    groupNameInput:setGroupNameToInputField()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count .. \" Objects Saved\", { 1, 1, 1 })\r\n    updateSave()\r\n    moveGuid = nil\r\nend\r\n\r\nfunction combineTables(first_table, second_table)\r\n    for k, v in pairs(second_table) do first_table[k] = v end\r\nend\r\n\r\nfunction buttonClick_add()\r\n    fresh = false\r\n    combineTables(memoryList, memoryListBackup)\r\n    broadcastToAll(\"Adding internal bags and selections to existing memory\", { 0.25, 0.75, 0.25 })\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count .. \" Objects Saved\", { 1, 1, 1 })\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_remove()\r\n    broadcastToAll(\"Removing Selected Entries From Memory\", { 1.0, 0.25, 0.25 })\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        memoryListBackup[guid] = nil\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count .. \" Objects Removed\", { 1, 1, 1 })\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_setNew()\r\n    broadcastToAll(\"Setting new position relative to items in memory\", { 0.75, 0.75, 1 })\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        guid = obj.guid\r\n        if memoryListBackup[guid] ~= nil then\r\n            count = count + 1\r\n            memoryListBackup[guid].pos = obj.getPosition()\r\n            memoryListBackup[guid].rot = obj.getRotation()\r\n            memoryListBackup[guid].lock = obj.getLock()\r\n            memoryListBackup[guid].tint = obj.getColorTint()\r\n        end\r\n    end\r\n    broadcastToAll(count .. \" Objects Saved\", { 1, 1, 1 })\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\n--Resets bag to starting status\r\nfunction buttonClick_reset()\r\n    fresh = true\r\n    memoryList = {}\r\n    memoryGroupName:set(nil)\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createSetupButton()\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Tool Reset\", { 1, 1, 1 })\r\n    updateSave()\r\nend\r\n\r\n--After Setup\r\n\r\n--Creates recall and place buttons\r\nfunction createMemoryActionButtons()\r\n    self.createButton({\r\n        label=\"Placer au hasard\", click_function=\"buttonClick_place\", function_owner=self,\r\n        position={0,0.3,2}, rotation={0,0,0}, height=350, width=2000,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Ranger\", click_function=\"buttonClick_recall\", function_owner=self,\r\n        position={0,0.3,2.8}, rotation={0,0,0}, height=350, width=1000,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n        position={2,0.3,0}, rotation={0,90,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    ---    self.createButton({\r\n    ---      label=\"Bouger\", click_function=\"buttonClick_transpose\", function_owner=self,\r\n    ---      position={-2,0.3,0.8}, rotation={0,270,0}, height=350, width=800,\r\n    ---      font_size=250, color={0,0,0}, font_color={0.75,0.75,1}\r\n    ---\r\nend\r\n\r\n--Sends objects from bag/table to their saved position/rotation\r\nfunction buttonClick_place()\r\n    if anyOtherBagsInMyGroupArePlaced() then\r\n        recallOtherBagsInMyGroup()\r\n        Wait.frames(_placeObjects, CONFIG.MEMORY_GROUP.FRAME_DELAY_BEFORE_PLACING_OBJECTS)\r\n    else\r\n        _placeObjects()\r\n    end\r\nend\r\n\r\nfunction _placeObjects()\r\n    local bagObjList = self.getObjects()\r\n\r\n    -- randomize memorylist position\r\n    local positionList = {}\r\n    for guid, entry in pairs(memoryList) do\r\n        table.insert(positionList, memoryList[guid].pos)\r\n    end\r\n\r\n    for i = #positionList, 2, -1 do\r\n        local j = math.random(i)\r\n        positionList[i], positionList[j] = positionList[j], positionList[i]\r\n    end\r\n\r\n    local i = 1\r\n    for guid, entry in pairs(memoryList) do\r\n        memoryList[guid].pos = positionList[i]\r\n        i = i + 1\r\n    end\r\n\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        --If obj is out on the table, move it to the saved pos/rot\r\n        if obj ~= nil then\r\n            obj.setPositionSmooth(entry.pos)\r\n            obj.setRotationSmooth(entry.rot)\r\n            obj.setLock(entry.lock)\r\n            obj.setColorTint(entry.tint)\r\n        else\r\n            --If obj is inside of the bag\r\n            for _, bagObj in ipairs(bagObjList) do\r\n                if bagObj.guid == guid then\r\n                    local item = self.takeObject({\r\n                        guid = guid, position = entry.pos, rotation = entry.rot, smooth = false\r\n                    })\r\n                    item.setLock(entry.lock)\r\n                    item.setColorTint(entry.tint)\r\n                    break\r\n                end\r\n            end\r\n        end\r\n    end\r\n    broadcastToAll(\"Objets placés au hasard\", {1,1,1})\r\nend\r\n\r\n--Recalls objects to bag from table\r\nfunction buttonClick_recall()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then self.putObject(obj) end\r\n    end\r\n    broadcastToAll(\"Objets rangés\", {1,1,1})\r\nend\r\n\r\n--Utility functions\r\n\r\n--Find delta (difference) between 2 x/y/z coordinates\r\nfunction findOffsetDistance(p1, p2, obj)\r\n    local yOffset = 0\r\n    if obj ~= nil then\r\n        local bounds = obj.getBounds()\r\n        yOffset = (bounds.size.y - bounds.offset.y)\r\n    end\r\n    local deltaPos = {}\r\n    deltaPos.x = (p2.x - p1.x)\r\n    deltaPos.y = (p2.y - p1.y) + yOffset\r\n    deltaPos.z = (p2.z - p1.z)\r\n    return deltaPos\r\nend\r\n\r\n--Used to rotate a set of coordinates by an angle\r\nfunction rotateLocalCoordinates(desiredPos, obj)\r\n    local objPos, objRot = obj.getPosition(), obj.getRotation()\r\n    local angle = math.rad(objRot.y)\r\n    local x = desiredPos.x * math.cos(angle) - desiredPos.z * math.sin(angle)\r\n    local z = desiredPos.x * math.sin(angle) + desiredPos.z * math.cos(angle)\r\n    --return {x=objPos.x+x, y=objPos.y+desiredPos.y, z=objPos.z+z}\r\n    return { x = x, y = desiredPos.y, z = z }\r\nend\r\n\r\nfunction rotateMyCoordinates(desiredPos, obj)\r\n    local angle = math.rad(obj.getRotation().y)\r\n    local x = desiredPos.x * math.sin(angle)\r\n    local z = desiredPos.z * math.cos(angle)\r\n    return { x = x, y = desiredPos.y, z = z }\r\nend\r\n\r\n--Coroutine delay, in seconds\r\nfunction wait(time)\r\n    local start = os.time()\r\n    repeat coroutine.yield(0) until os.time() > start + time\r\nend\r\n\r\n--Duplicates a table (needed to prevent it making reference to the same objects)\r\nfunction duplicateTable(oldTable)\r\n    local newTable = {}\r\n    for k, v in pairs(oldTable) do\r\n        newTable[k] = v\r\n    end\r\n    return newTable\r\nend\r\n\r\n--Moves scripted highlight from all objects\r\nfunction removeAllHighlights()\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\n--Round number (num) to the Nth decimal (dec)\r\nfunction round(num, dec)\r\n    local mult = 10 ^ (dec or 0)\r\n    return math.floor(num * mult + 0.5) / mult\r\nend\r\n\r\n--[[ This object provides access to a variable stored on the \"Global script\".\r\nThe variable holds the GUIDs for every Utility Memory Bag in the scene.\r\nExample: {'805ebd', '35cc21', 'fc8886', 'f50264', '5f5f63'} --]]\r\nAllMemoryBagsInScene = {\r\n    NAME_OF_GLOBAL_VARIABLE = \"_UtilityMemoryBag_AllMemoryBagsInScene\"\r\n}\r\n\r\nfunction AllMemoryBagsInScene:add(guid)\r\n    local guids = Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\n    table.insert(guids, guid)\r\n    Global.setTable(self.NAME_OF_GLOBAL_VARIABLE, guids)\r\nend\r\n\r\nfunction AllMemoryBagsInScene:getGuidList()\r\n    return Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\nend\r\n","LuaScriptState":"{\"ml\":{\"70a53a\":{\"lock\":false,\"pos\":{\"x\":14.9900007247925,\"y\":1.51796793937683,\"z\":12.5105972290039},\"rot\":{\"x\":0.0108930664137006,\"y\":179.982437133789,\"z\":0.00494486186653376},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"c1ffb8\":{\"lock\":false,\"pos\":{\"x\":-19.9999752044678,\"y\":1.77885568141937,\"z\":21.5000247955322},\"rot\":{\"x\":-4.95907670483575E-06,\"y\":179.83837890625,\"z\":9.68527160694066E-08},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}}}}","XmlUI":"","ContainedObjects":[{"GUID":"70a53a","Name":"Card","Transform":{"posX":-19.9999714,"posY":1.77890468,"posZ":21.50003,"rotX":-0.00000486781528,"rotY":179.982437,"rotZ":-5.01816e-8,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Ruines des Whateley","Description":"Dunwich.","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02251\",\n  \"locationBack\": {\n    \"connections\": \"Triangle|Diamond|Hourglass\",\n    \"icons\": \"Plus\",\n    \"uses\": {\n      \"countPerInvestigator\": 2,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    }\n  },\n  \"locationFront\": {\n    \"connections\": \"Triangle|Diamond|Hourglass\",\n    \"icons\": \"Plus\"\n  },\n  \"traits\": \"Dunwich.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":117314,"SidewaysCard":false,"CustomDeck":{"1173":{"FaceURL":"https://i.imgur.com/0FRbPFZ.jpg","BackURL":"https://i.imgur.com/z0qG3Pt.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"c1ffb8","Name":"Card","Transform":{"posX":14.9900026,"posY":1.51796782,"posZ":12.5105944,"rotX":0.0109054595,"rotY":179.838364,"rotZ":0.004917696,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Ruines des Whateley","Description":"Dunwich.","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02250\",\n  \"locationBack\": {\n    \"connections\": \"Triangle|Diamond|Hourglass\",\n    \"icons\": \"Plus\",\n    \"uses\": {\n      \"countPerInvestigator\": 2,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    }\n  },\n  \"locationFront\": {\n    \"connections\": \"Triangle|Diamond|Hourglass\",\n    \"icons\": \"Plus\"\n  },\n  \"traits\": \"Dunwich.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":117313,"SidewaysCard":false,"CustomDeck":{"1173":{"FaceURL":"https://i.imgur.com/0FRbPFZ.jpg","BackURL":"https://i.imgur.com/z0qG3Pt.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""}]},{"GUID":"ba75c0","Name":"Custom_Model_Bag","Transform":{"posX":-26.0000038,"posY":1.8353008,"posZ":9.999997,"rotX":-0.00000543926353,"rotY":179.97171,"rotZ":2.087484e-7,"scaleX":0.7,"scaleY":0.7,"scaleZ":0.7},"Nickname":"Choisir un lieu au hasard","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.614982545,"g":0,"b":0},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"MaterialIndex":-1,"MeshIndex":-1,"CustomMesh":{"MeshURL":"https://pastebin.com/raw/ALrYhQGb","DiffuseURL":"http://cloud-3.steamusercontent.com/ugc/1936013662301512707/AACFC5A7E2B2828E449B2979907F1D94C4C5469C/","NormalURL":"","ColliderURL":"","Convex":true,"MaterialIndex":3,"TypeIndex":6,"CustomShader":{"SpecularColor":{"r":1,"g":1,"b":1},"SpecularIntensity":0,"SpecularSharpness":2,"FresnelStrength":0},"CastShadows":true},"Bag":{"Order":0},"LuaScript":"-- Random memory bag\r\n-- based on Utility memory bag by Directsun (Version 2.7.0)\r\n\r\nlocal CONFIG = {\r\n    MEMORY_GROUP = {\r\n        -- This determines how many frames to wait before actually placing objects onto the table when the \"Place\" button is clicked.\r\n        -- This gives the other bags time to recall their objects.\r\n        -- The delay ONLY occurs if other bags have objects out.\r\n        FRAME_DELAY_BEFORE_PLACING_OBJECTS = 30\r\n    }\r\n}\r\n\r\nmath.randomseed(os.time())\r\n\r\n--[[ Memory Bag Groups ]]\r\n--[[ Utility Memory Bags may be added to a named group, called a \"memory group\".\r\nYou can add a bag to a group through the bag's UI: \"Setup\" > \"Group Name\" (to the left of the bag).\r\nOnly one bag from a group may have it's contents placed on the table at a time.\r\nWhen \"Place\" is clicked on a bag, the other bags in it's memory group are recalled.\r\nBy default a memory bag is not in any group. It's memory group is \"nil\". --]]\r\n\r\nmemoryGroupName = { memoryBag = self }\r\nfunction memoryGroupName:get()\r\n    return self._name\r\nend\r\n\r\nfunction memoryGroupName:set(newName)\r\n    GlobalMemoryGroups:unregisterBagInGroup(self:get(), self.memoryBag.getGUID())\r\n    GlobalMemoryGroups:registerBagInGroup(newName, self.memoryBag.getGUID())\r\n\r\n    if newName == \"\" then\r\n        self._name = nil\r\n    else\r\n        self._name = newName\r\n    end\r\nend\r\n\r\n-- Click the \"Recall\" button on all other bags in my memory group.\r\nfunction recallOtherBagsInMyGroup()\r\n    for _, bag in ipairs(getOtherBagsInMyGroup()) do\r\n        bag.call('buttonClick_recall')\r\n    end\r\nend\r\n\r\n-- Return \"true\" if another bag in my memory group has any objects out on the table.\r\nfunction anyOtherBagsInMyGroupArePlaced()\r\n    for _, bag in ipairs(getOtherBagsInMyGroup()) do\r\n        local state = bag.call('areAnyOfMyObjectsPlaced')\r\n        if state then return true end\r\n    end\r\n\r\n    return false\r\nend\r\n\r\n-- Return \"true\" if at least one object from this memory bag is out on the table.\r\nfunction areAnyOfMyObjectsPlaced()\r\n    for guid, _ in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then\r\n            return true\r\n        end\r\n    end\r\n    return false\r\nend\r\n\r\nfunction getOtherBagsInMyGroup()\r\n    local bags = {}\r\n    for bagGuid, _ in pairs(GlobalMemoryGroups:getGroup(memoryGroupName:get())) do\r\n        if bagGuid ~= self.getGUID() then\r\n            bag = getObjectFromGUID(bagGuid)\r\n            -- \"bag\" is nill if it has been deleted since the last time onLoad() was called.\r\n            if bag ~= nil then\r\n                table.insert(bags, bag)\r\n            end\r\n        end\r\n    end\r\n    return bags\r\nend\r\n\r\n--[[\r\nThis object provides access to a variable stored on the \"Global script\".\r\nThe variable holds the names & guids of all memory bag groups.\r\nThe global variable is a table and holds data like this:\r\n{\r\n    'My First Group Name' = {\r\n        '805ebd' = {},\r\n        '35cc21' = {},\r\n        'fc8886' = {},\r\n    },\r\n    'My Second Group Name' = {\r\n        'f50264' = {},\r\n        '5f5f63' = {},\r\n    },\r\n}\r\n--]]\r\nGlobalMemoryGroups = { NAME_OF_GLOBAL_VARIABLE = '_GlobalUtilityMemoryBagGroups' }\r\n\r\n-- Call me inside this script's \"onLoad()\" method!\r\nfunction GlobalMemoryGroups:onLoad(myGuid)\r\n    -- Create and initialize the global variable if it doesn't already exist:\r\n    if self:_getGroups() == nil then\r\n        self:_setGroups({})\r\n    end\r\nend\r\n\r\n-- Return the GUIDs of all bags in the \"groupName\". The return value is a dictionary that maps [GUID -> empty table].\r\nfunction GlobalMemoryGroups:getGroup(groupName)\r\n    guids = self:_getGroups()[groupName] or {}\r\n    return guids\r\nend\r\n\r\n-- Registers a bag in a memory group. Creates a new group if one doesn't exist.\r\nfunction GlobalMemoryGroups:registerBagInGroup(groupName, bagGuid)\r\n    if groupName == nil or groupName == \"\" then\r\n        return\r\n    end\r\n\r\n    self:_tryCreateNewGroup(groupName)\r\n    local groups = self:_getGroups()\r\n    groups[groupName][bagGuid] = {}\r\n    self:_setGroups(groups)\r\nend\r\n\r\n-- Removes this bag from the memory group.\r\nfunction GlobalMemoryGroups:unregisterBagInGroup(groupName, bagGuid)\r\n    local groups = self:_getGroups()\r\n    local group = groups[groupName]\r\n    if group ~= nil then\r\n        group[bagGuid] = nil\r\n        self:_setGroups(groups)\r\n    end\r\nend\r\n\r\n-- Return the global variable, which is a table holding all memory group names & guids.\r\nfunction GlobalMemoryGroups:_getGroups()\r\n    return Global.getTable(self.NAME_OF_GLOBAL_VARIABLE)\r\nend\r\n\r\n-- Override the global variable (i.e. the entire table).\r\nfunction GlobalMemoryGroups:_setGroups(newTable)\r\n    Global.setTable(self.NAME_OF_GLOBAL_VARIABLE, newTable)\r\nend\r\n\r\n-- Add a new memory group named \"groupName\" to the global variable, if one doesn't already exist.\r\nfunction GlobalMemoryGroups:_tryCreateNewGroup(groupName)\r\n    local groups = self:_getGroups()\r\n    if groups[groupName] == nil then\r\n        groups[groupName] = {}\r\n        self:_setGroups(groups)\r\n    end\r\nend\r\n\r\n-- This object controls the \"Group Name\" input text field that is part of the bag's ingame UI.\r\ngroupNameInput = {\r\n    greyedOutText     = \"Group Name\",\r\n    widthPerCharacter = 100,\r\n    padding           = 4,\r\n    memoryBag         = self\r\n}\r\nfunction groupNameInput:create(optionalStartingValue)\r\n    local effectiveText = optionalStartingValue or self.greyedOutText\r\n    local width = self:computeWidth(effectiveText)\r\n\r\n    self.memoryBag.createInput({\r\n        label = self.greyedOutText,\r\n        value = optionalStartingValue or nil,\r\n        alignment = 3, -- Center aligned\r\n        input_function = \"groupNameInput_onCharacterTyped\", function_owner = self.memoryBag,\r\n        position = { 2.1, 0.3, 0 }, rotation = { 0, 270, 0 }, width = width, height = 350,\r\n        font_size = 250, color = { 0, 0, 0 }, font_color = { 1, 1, 1 },\r\n    })\r\nend\r\n\r\nfunction groupNameInput:computeWidth(text)\r\n    return (string.len(text) + self.padding) * self.widthPerCharacter\r\nend\r\n\r\nfunction groupNameInput:updatedWidth(text)\r\n    self.memoryBag.editInput({\r\n        index = 0,\r\n        width = self:computeWidth(text)\r\n    })\r\nend\r\n\r\nfunction groupNameInput:onCharacterTyped(text, stillEditing)\r\n    if stillEditing then\r\n        self:updatedWidth(text)\r\n    else\r\n        if text == \"\" then\r\n            self:updatedWidth(self.greyedOutText)\r\n        end\r\n    end\r\nend\r\n\r\nfunction groupNameInput_onCharacterTyped(memoryBag, playerColor, text, stillEditing)\r\n    groupNameInput:onCharacterTyped(text, stillEditing)\r\nend\r\n\r\nfunction groupNameInput:setGroupNameToInputField()\r\n    local inputFields = self.memoryBag.getInputs()\r\n    if inputFields ~= nil then\r\n        -- Get input field 0, which corresponds to the groupNameInput.\r\n        -- Unfortunately \"self.getInputs()\" doesn't return the inputs in a guaranteed order.\r\n        local nameField = nil\r\n        for _, field in ipairs(inputFields) do\r\n            if field.index == 0 then\r\n                nameField = field\r\n            end\r\n        end\r\n\r\n        memoryGroupName:set(nameField.value)\r\n    end\r\nend\r\n\r\nfunction updateSave()\r\n    local data_to_save = { [\"ml\"] = memoryList, [\"groupName\"] = memoryGroupName:get() }\r\n    saved_data = JSON.encode(data_to_save)\r\n    self.script_state = saved_data\r\nend\r\n\r\nfunction combineMemoryFromBagsWithin()\r\n    local bagObjList = self.getObjects()\r\n    for _, bagObj in ipairs(bagObjList) do\r\n        local data = bagObj.lua_script_state\r\n        if data ~= nil then\r\n            local j = JSON.decode(data)\r\n            if j ~= nil and j.ml ~= nil then\r\n                for guid, entry in pairs(j.ml) do\r\n                    memoryList[guid] = entry\r\n                end\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\nfunction updateMemoryWithMoves()\r\n    memoryList = memoryListBackup\r\n    --get the first transposed object's coordinates\r\n    local obj = getObjectFromGUID(moveGuid)\r\n\r\n    -- p1 is where needs to go, p2 is where it was\r\n    local refObjPos = memoryList[moveGuid].pos\r\n    local deltaPos = findOffsetDistance(obj.getPosition(), refObjPos, nil)\r\n    local movedRotation = obj.getRotation()\r\n    for guid, entry in pairs(memoryList) do\r\n        memoryList[guid].pos.x = entry.pos.x - deltaPos.x\r\n        memoryList[guid].pos.y = entry.pos.y - deltaPos.y\r\n        memoryList[guid].pos.z = entry.pos.z - deltaPos.z\r\n    end\r\n    moveList = {}\r\nend\r\n\r\nfunction onload(saved_data)\r\n    GlobalMemoryGroups:onLoad(self.getGUID())\r\n    AllMemoryBagsInScene:add(self.getGUID())\r\n\r\n    fresh = true\r\n    if saved_data ~= \"\" then\r\n        local loaded_data = JSON.decode(saved_data)\r\n        --Set up information off of loaded_data\r\n        memoryList = loaded_data.ml\r\n        memoryGroupName:set(loaded_data.groupName)\r\n    else\r\n        --Set up information for if there is no saved saved data\r\n        memoryList = {}\r\n        memoryGroupName:set(nil)\r\n    end\r\n\r\n    moveList = {}\r\n    moveGuid = nil\r\n\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        fresh = false\r\n        createMemoryActionButtons()\r\n    end\r\nend\r\n\r\n--Beginning Setup\r\n\r\n--Make setup button\r\nfunction createSetupButton()\r\n    self.createButton({\r\n      label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n      position={0,0.3,2}, rotation={0,0,0}, height=350, width=800,\r\n      font_size=250, color={0,0,0}, font_color={1,1,1}\r\n  })\r\nend\r\n\r\n--Triggered by Transpose button\r\nfunction buttonClick_transpose()\r\n    moveGuid = nil\r\n    broadcastToAll(\"Select one object and move it- all objects will move relative to the new location\", { 0.75, 0.75, 1 })\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(true)\r\n    createSetupActionButtons(true)\r\nend\r\n\r\n--Triggered by setup button,\r\nfunction buttonClick_setup()\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(false)\r\n    createSetupActionButtons(false)\r\nend\r\n\r\nfunction getAllObjectsInMemory()\r\n    local objTable = {}\r\n    local curObj = {}\r\n\r\n    for guid in pairs(memoryListBackup) do\r\n        curObj = getObjectFromGUID(guid)\r\n        table.insert(objTable, curObj)\r\n    end\r\n\r\n    return objTable\r\nend\r\n\r\n--Creates selection buttons on objects\r\nfunction createButtonsOnAllObjects(move)\r\n    buttonIndexMap = {}\r\n    local howManyButtons = 0\r\n\r\n    local objsToHaveButtons = {}\r\n    if move == true then\r\n        objsToHaveButtons = getAllObjectsInMemory()\r\n    else\r\n        objsToHaveButtons = getAllObjects()\r\n    end\r\n\r\n    for _, obj in ipairs(objsToHaveButtons) do\r\n        if obj ~= self then\r\n            --On a normal bag, the button positions aren't the same size as the bag.\r\n            globalScaleFactor = 1 * 1 / self.getScale().x\r\n            --Super sweet math to set button positions\r\n            local selfPos = self.getPosition()\r\n            local objPos = obj.getPosition()\r\n            local deltaPos = findOffsetDistance(selfPos, objPos, obj)\r\n            local objPos = rotateLocalCoordinates(deltaPos, self)\r\n            objPos.x = -objPos.x * globalScaleFactor\r\n            objPos.y = objPos.y * globalScaleFactor + 2\r\n            objPos.z = objPos.z * globalScaleFactor\r\n            --Workaround for custom PDFs\r\n            if obj.Book then\r\n                objPos.y = objPos.y + 0.5\r\n            end\r\n            --Offset rotation of bag\r\n            local rot = self.getRotation()\r\n            rot.y = -rot.y + 180\r\n            --Create function\r\n            local funcName = \"selectButton_\" .. howManyButtons\r\n            local func = function() buttonClick_selection(obj, move) end\r\n            local color = { 0.75, 0.25, 0.25, 0.6 }\r\n            local colorMove = { 0, 0, 1, 0.6 }\r\n            if move == true then\r\n                color = colorMove\r\n            end\r\n            self.setVar(funcName, func)\r\n            self.createButton({\r\n                click_function = funcName, function_owner = self,\r\n                position = objPos, rotation = rot, height = 1000, width = 1000,\r\n                color = color,\r\n            })\r\n            buttonIndexMap[obj.getGUID()] = howManyButtons\r\n            howManyButtons = howManyButtons + 1\r\n        end\r\n    end\r\nend\r\n\r\n  --Creates submit and cancel buttons\r\n  function createSetupActionButtons(move)\r\n      self.createButton({\r\n         label=\"Annuler\", click_function=\"buttonClick_cancel\", function_owner=self,\r\n         position={-1.15,0.3,2.1}, rotation={0,0,0}, height=350, width=1100,\r\n         font_size=250, color={0,0,0}, font_color={1,1,1}\r\n      })\r\n\r\n      self.createButton({\r\n        label=\"Valider\", click_function=\"buttonClick_submit\", function_owner=self,\r\n        position={-1.15,0.3,2.8}, rotation={0,0,0}, height=350, width=1100,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n      })\r\n\r\n      if move == false then\r\n        self.createButton({\r\n            label=\"Ajouter\", click_function=\"buttonClick_add\", function_owner=self,\r\n            position={1.15,0.3,2.1}, rotation={0,0,0}, height=350, width=1100,\r\n            font_size=250, color={0,0,0}, font_color={0.25,1,0.25}\r\n          })\r\n\r\n          self.createButton({\r\n              label=\"Sélection\", click_function=\"editDragSelection\", function_owner=self,\r\n              position={-1.15,0.3,3.5}, rotation={0,0,0}, height=350, width=1100,\r\n              font_size=250, color={0,0,0}, font_color={1,1,1}\r\n          })\r\n\r\n          if fresh == false then\r\n              self.createButton({\r\n                  label=\"Mise à Jour\", click_function=\"buttonClick_setNew\", function_owner=self,\r\n                  position={1.15,0.3,3.5}, rotation={0,0,0}, height=350, width=1100,\r\n                  font_size=180, color={0,0,0}, font_color={0.75,0.75,1}\r\n              })\r\n              self.createButton({\r\n                  label=\"Retirer\", click_function=\"buttonClick_remove\", function_owner=self,\r\n                  position={1.15,0.3,2.8}, rotation={0,0,0}, height=350, width=1100,\r\n                  font_size=250, color={0,0,0}, font_color={1,0.25,0.25}\r\n              })\r\n          end\r\n      end\r\n\r\n      self.createButton({\r\n          label=\"Reset\", click_function=\"buttonClick_reset\", function_owner=self,\r\n          position={0,0.3,-2}, rotation={0,0,0}, height=350, width=800,\r\n          font_size=250, color={0,0,0}, font_color={1,1,1}\r\n      })\r\n  end\r\n\r\n\r\n--During Setup\r\n\r\n--Checks or unchecks buttons\r\nfunction buttonClick_selection(obj, move)\r\n    local index = buttonIndexMap[obj.getGUID()]\r\n    local colorMove = { 0, 0, 1, 0.6 }\r\n    local color = { 0, 1, 0, 0.6 }\r\n\r\n    previousGuid = selectedGuid\r\n    selectedGuid = obj.getGUID()\r\n\r\n    theList = memoryList\r\n    if move == true then\r\n        theList = moveList\r\n        if previousGuid ~= nil and previousGuid ~= selectedGuid then\r\n            local prevObj = getObjectFromGUID(previousGuid)\r\n            prevObj.highlightOff()\r\n            self.editButton({ index = previousIndex, color = colorMove })\r\n            theList[previousGuid] = nil\r\n        end\r\n        previousIndex = index\r\n    end\r\n\r\n    if theList[selectedGuid] == nil then\r\n        self.editButton({ index = index, color = color })\r\n        --Adding pos/rot to memory table\r\n        local pos, rot = obj.getPosition(), obj.getRotation()\r\n        --I need to add it like this or it won't save due to indexing issue\r\n        theList[obj.getGUID()] = {\r\n            pos = { x = round(pos.x, 4), y = round(pos.y, 4), z = round(pos.z, 4) },\r\n            rot = { x = round(rot.x, 4), y = round(rot.y, 4), z = round(rot.z, 4) },\r\n            lock = obj.getLock(),\r\n            tint = obj.getColorTint()\r\n        }\r\n        obj.highlightOn({ 0, 1, 0 })\r\n    else\r\n        color = { 0.75, 0.25, 0.25, 0.6 }\r\n        if move == true then\r\n            color = colorMove\r\n        end\r\n        self.editButton({ index = index, color = color })\r\n        theList[obj.getGUID()] = nil\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\nfunction editDragSelection(bagObj, player, remove)\r\n    local selectedObjs = Player[player].getSelectedObjects()\r\n    if not remove then\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            --Ignore if already in the memory list, or does not have a button\r\n            if index and not memoryList[obj.getGUID()] then\r\n                self.editButton({ index = index, color = { 0, 1, 0, 0.6 } })\r\n                --Adding pos/rot to memory table\r\n                local pos, rot = obj.getPosition(), obj.getRotation()\r\n                --I need to add it like this or it won't save due to indexing issue\r\n                memoryList[obj.getGUID()] = {\r\n                    pos = { x = round(pos.x, 4), y = round(pos.y, 4), z = round(pos.z, 4) },\r\n                    rot = { x = round(rot.x, 4), y = round(rot.y, 4), z = round(rot.z, 4) },\r\n                    lock = obj.getLock(),\r\n                    tint = obj.getColorTint()\r\n                }\r\n                obj.highlightOn({ 0, 1, 0 })\r\n            end\r\n        end\r\n    else\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            if index and memoryList[obj.getGUID()] then\r\n                color = { 0.75, 0.25, 0.25, 0.6 }\r\n                self.editButton({ index = index, color = color })\r\n                memoryList[obj.getGUID()] = nil\r\n                obj.highlightOff()\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\n--Cancels selection process\r\nfunction buttonClick_cancel()\r\n    memoryList = memoryListBackup\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        createMemoryActionButtons()\r\n    end\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Sélection annulée\", { 1, 1, 1 })\r\n    moveGuid = nil\r\nend\r\n\r\n--Saves selections\r\nfunction buttonClick_submit()\r\n    fresh = false\r\n    if next(moveList) ~= nil then\r\n        for guid in pairs(moveList) do\r\n            moveGuid = guid\r\n        end\r\n        if memoryListBackup[moveGuid] == nil then\r\n            broadcastToAll(\"Item selected for moving is not already in memory\", { 1, 0.25, 0.25 })\r\n        else\r\n            broadcastToAll(\"Moving all items in memory relative to new objects position!\", { 0.75, 0.75, 1 })\r\n            self.clearButtons()\r\n            self.clearInputs()\r\n            createMemoryActionButtons()\r\n            local count = 0\r\n            for guid in pairs(moveList) do\r\n                moveGuid = guid\r\n                count = count + 1\r\n                local obj = getObjectFromGUID(guid)\r\n                if obj ~= nil then obj.highlightOff() end\r\n            end\r\n            updateMemoryWithMoves()\r\n            updateSave()\r\n            buttonClick_place()\r\n        end\r\n    elseif next(memoryList) == nil and moveGuid == nil then\r\n        memoryList = memoryListBackup\r\n        broadcastToAll(\"No selections made.\", { 0.75, 0.25, 0.25 })\r\n    end\r\n    combineMemoryFromBagsWithin()\r\n    groupNameInput:setGroupNameToInputField()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count .. \" Objects Saved\", { 1, 1, 1 })\r\n    updateSave()\r\n    moveGuid = nil\r\nend\r\n\r\nfunction combineTables(first_table, second_table)\r\n    for k, v in pairs(second_table) do first_table[k] = v end\r\nend\r\n\r\nfunction buttonClick_add()\r\n    fresh = false\r\n    combineTables(memoryList, memoryListBackup)\r\n    broadcastToAll(\"Adding internal bags and selections to existing memory\", { 0.25, 0.75, 0.25 })\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count .. \" Objects Saved\", { 1, 1, 1 })\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_remove()\r\n    broadcastToAll(\"Removing Selected Entries From Memory\", { 1.0, 0.25, 0.25 })\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        memoryListBackup[guid] = nil\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count .. \" Objects Removed\", { 1, 1, 1 })\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_setNew()\r\n    broadcastToAll(\"Setting new position relative to items in memory\", { 0.75, 0.75, 1 })\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        guid = obj.guid\r\n        if memoryListBackup[guid] ~= nil then\r\n            count = count + 1\r\n            memoryListBackup[guid].pos = obj.getPosition()\r\n            memoryListBackup[guid].rot = obj.getRotation()\r\n            memoryListBackup[guid].lock = obj.getLock()\r\n            memoryListBackup[guid].tint = obj.getColorTint()\r\n        end\r\n    end\r\n    broadcastToAll(count .. \" Objects Saved\", { 1, 1, 1 })\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\n--Resets bag to starting status\r\nfunction buttonClick_reset()\r\n    fresh = true\r\n    memoryList = {}\r\n    memoryGroupName:set(nil)\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createSetupButton()\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Tool Reset\", { 1, 1, 1 })\r\n    updateSave()\r\nend\r\n\r\n--After Setup\r\n\r\n--Creates recall and place buttons\r\nfunction createMemoryActionButtons()\r\n    self.createButton({\r\n        label=\"Placer au hasard\", click_function=\"buttonClick_place\", function_owner=self,\r\n        position={0,0.3,2}, rotation={0,0,0}, height=350, width=2000,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Ranger\", click_function=\"buttonClick_recall\", function_owner=self,\r\n        position={0,0.3,2.8}, rotation={0,0,0}, height=350, width=1000,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n        position={2,0.3,0}, rotation={0,90,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    ---    self.createButton({\r\n    ---      label=\"Bouger\", click_function=\"buttonClick_transpose\", function_owner=self,\r\n    ---      position={-2,0.3,0.8}, rotation={0,270,0}, height=350, width=800,\r\n    ---      font_size=250, color={0,0,0}, font_color={0.75,0.75,1}\r\n    ---\r\nend\r\n\r\n--Sends objects from bag/table to their saved position/rotation\r\nfunction buttonClick_place()\r\n    if anyOtherBagsInMyGroupArePlaced() then\r\n        recallOtherBagsInMyGroup()\r\n        Wait.frames(_placeObjects, CONFIG.MEMORY_GROUP.FRAME_DELAY_BEFORE_PLACING_OBJECTS)\r\n    else\r\n        _placeObjects()\r\n    end\r\nend\r\n\r\nfunction _placeObjects()\r\n    local bagObjList = self.getObjects()\r\n\r\n    -- randomize memorylist position\r\n    local positionList = {}\r\n    for guid, entry in pairs(memoryList) do\r\n        table.insert(positionList, memoryList[guid].pos)\r\n    end\r\n\r\n    for i = #positionList, 2, -1 do\r\n        local j = math.random(i)\r\n        positionList[i], positionList[j] = positionList[j], positionList[i]\r\n    end\r\n\r\n    local i = 1\r\n    for guid, entry in pairs(memoryList) do\r\n        memoryList[guid].pos = positionList[i]\r\n        i = i + 1\r\n    end\r\n\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        --If obj is out on the table, move it to the saved pos/rot\r\n        if obj ~= nil then\r\n            obj.setPositionSmooth(entry.pos)\r\n            obj.setRotationSmooth(entry.rot)\r\n            obj.setLock(entry.lock)\r\n            obj.setColorTint(entry.tint)\r\n        else\r\n            --If obj is inside of the bag\r\n            for _, bagObj in ipairs(bagObjList) do\r\n                if bagObj.guid == guid then\r\n                    local item = self.takeObject({\r\n                        guid = guid, position = entry.pos, rotation = entry.rot, smooth = false\r\n                    })\r\n                    item.setLock(entry.lock)\r\n                    item.setColorTint(entry.tint)\r\n                    break\r\n                end\r\n            end\r\n        end\r\n    end\r\n    broadcastToAll(\"Objets placés au hasard\", {1,1,1})\r\nend\r\n\r\n--Recalls objects to bag from table\r\nfunction buttonClick_recall()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then self.putObject(obj) end\r\n    end\r\n    broadcastToAll(\"Objets rangés\", {1,1,1})\r\nend\r\n\r\n--Utility functions\r\n\r\n--Find delta (difference) between 2 x/y/z coordinates\r\nfunction findOffsetDistance(p1, p2, obj)\r\n    local yOffset = 0\r\n    if obj ~= nil then\r\n        local bounds = obj.getBounds()\r\n        yOffset = (bounds.size.y - bounds.offset.y)\r\n    end\r\n    local deltaPos = {}\r\n    deltaPos.x = (p2.x - p1.x)\r\n    deltaPos.y = (p2.y - p1.y) + yOffset\r\n    deltaPos.z = (p2.z - p1.z)\r\n    return deltaPos\r\nend\r\n\r\n--Used to rotate a set of coordinates by an angle\r\nfunction rotateLocalCoordinates(desiredPos, obj)\r\n    local objPos, objRot = obj.getPosition(), obj.getRotation()\r\n    local angle = math.rad(objRot.y)\r\n    local x = desiredPos.x * math.cos(angle) - desiredPos.z * math.sin(angle)\r\n    local z = desiredPos.x * math.sin(angle) + desiredPos.z * math.cos(angle)\r\n    --return {x=objPos.x+x, y=objPos.y+desiredPos.y, z=objPos.z+z}\r\n    return { x = x, y = desiredPos.y, z = z }\r\nend\r\n\r\nfunction rotateMyCoordinates(desiredPos, obj)\r\n    local angle = math.rad(obj.getRotation().y)\r\n    local x = desiredPos.x * math.sin(angle)\r\n    local z = desiredPos.z * math.cos(angle)\r\n    return { x = x, y = desiredPos.y, z = z }\r\nend\r\n\r\n--Coroutine delay, in seconds\r\nfunction wait(time)\r\n    local start = os.time()\r\n    repeat coroutine.yield(0) until os.time() > start + time\r\nend\r\n\r\n--Duplicates a table (needed to prevent it making reference to the same objects)\r\nfunction duplicateTable(oldTable)\r\n    local newTable = {}\r\n    for k, v in pairs(oldTable) do\r\n        newTable[k] = v\r\n    end\r\n    return newTable\r\nend\r\n\r\n--Moves scripted highlight from all objects\r\nfunction removeAllHighlights()\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\n--Round number (num) to the Nth decimal (dec)\r\nfunction round(num, dec)\r\n    local mult = 10 ^ (dec or 0)\r\n    return math.floor(num * mult + 0.5) / mult\r\nend\r\n\r\n--[[ This object provides access to a variable stored on the \"Global script\".\r\nThe variable holds the GUIDs for every Utility Memory Bag in the scene.\r\nExample: {'805ebd', '35cc21', 'fc8886', 'f50264', '5f5f63'} --]]\r\nAllMemoryBagsInScene = {\r\n    NAME_OF_GLOBAL_VARIABLE = \"_UtilityMemoryBag_AllMemoryBagsInScene\"\r\n}\r\n\r\nfunction AllMemoryBagsInScene:add(guid)\r\n    local guids = Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\n    table.insert(guids, guid)\r\n    Global.setTable(self.NAME_OF_GLOBAL_VARIABLE, guids)\r\nend\r\n\r\nfunction AllMemoryBagsInScene:getGuidList()\r\n    return Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\nend\r\n","LuaScriptState":"{\"ml\":{\"96df71\":{\"lock\":false,\"pos\":{\"x\":4.14300107955933,\"y\":1.51891565322876,\"z\":12.5682973861694},\"rot\":{\"x\":0.0108917718753219,\"y\":179.996612548828,\"z\":0.00494758971035481},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"f94ecf\":{\"lock\":false,\"pos\":{\"x\":-26.9999885559082,\"y\":1.77885568141937,\"z\":21.5000095367432},\"rot\":{\"x\":-5.19322657055454E-06,\"y\":179.996231079102,\"z\":9.81484333806293E-08},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}}}}","XmlUI":"","ContainedObjects":[{"GUID":"96df71","Name":"Card","Transform":{"posX":-26.9999886,"posY":1.77890468,"posZ":21.5000134,"rotX":-0.00000517447234,"rotY":179.996628,"rotZ":-1.11567907e-7,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Pré des Dix-Arpents","Description":"Dunwich.","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02247\",\n  \"locationBack\": {\n    \"connections\": \"Circle|Triangle|Plus\",\n    \"icons\": \"Diamond\",\n    \"uses\": {\n      \"count\": 3,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    }\n  },\n  \"locationFront\": {\n    \"connections\": \"Circle|Triangle|Plus\",\n    \"icons\": \"Diamond\"\n  },\n  \"traits\": \"Dunwich.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":117310,"SidewaysCard":false,"CustomDeck":{"1173":{"FaceURL":"https://i.imgur.com/0FRbPFZ.jpg","BackURL":"https://i.imgur.com/z0qG3Pt.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"f94ecf","Name":"Card","Transform":{"posX":4.143002,"posY":1.51891565,"posZ":12.5682945,"rotX":0.01089187,"rotY":179.996231,"rotZ":0.004947555,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Pré des Dix-Arpents","Description":"Dunwich.","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02246\",\n  \"locationBack\": {\n    \"connections\": \"Circle|Triangle|Plus\",\n    \"icons\": \"Diamond\",\n    \"uses\": {\n      \"count\": 1,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    }\n  },\n  \"locationFront\": {\n    \"connections\": \"Circle|Triangle|Plus\",\n    \"icons\": \"Diamond\"\n  },\n  \"traits\": \"Dunwich.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":117309,"SidewaysCard":false,"CustomDeck":{"1173":{"FaceURL":"https://i.imgur.com/0FRbPFZ.jpg","BackURL":"https://i.imgur.com/z0qG3Pt.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""}]},{"GUID":"bb23a9","Name":"Custom_Tile","Transform":{"posX":2.999997,"posY":1.60163224,"posZ":-6.499995,"rotX":0.0171785243,"rotY":180.01152,"rotZ":0.00565560535,"scaleX":1.6428808,"scaleY":1,"scaleZ":1.6428808},"Nickname":"Mise en place du Chaos Bag","Description":"V : Aux Frontières du Visible","GMNotes":"{\"data\":\"Undimensioned and Unseen\",\"easy\":false,\"expert\":false,\"hard\":false,\"normal\":false,\"standalone\":true}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.8745098,"g":0.8,"b":0.7019608},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"http://cloud-3.steamusercontent.com/ugc/2011456161884106028/81BF2DAD34FE18B6788B56E21F16B81E6525AD99/","ImageSecondaryURL":"http://cloud-3.steamusercontent.com/ugc/2011456161884106028/81BF2DAD34FE18B6788B56E21F16B81E6525AD99/","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"\r\njacqueline_guid = '42cd6e'\r\n\r\nbuttonparams = {\r\n   ['easy'] = {label = \"Facile\", click_function = 'modeEasy', z_i = -0.2},\r\n   ['normal'] = {label = \"Standard\", click_function = 'modeNormal', z_i = 0.1},\r\n   ['hard'] = {label = \"Difficile\", click_function = 'modeHard', z_i = 0.4},\r\n   ['expert'] = {label = \"Expert\", click_function = 'modeExpert', z_i = 0.7},\r\n   ['standalone'] = {label = \"Indépendant\", click_function = 'modeStandalone', z_i = 0},\r\n}\r\n\r\nfunction onLoad()\r\n\r\n    metadata = JSON.decode(self.getGMNotes())\r\n    buttontable = {}\r\n    for key, value in pairs(buttonparams) do\r\n        if metadata[key] == true then\r\n            table.insert(buttontable,value)\r\n        end\r\n        \r\n    end\r\n\r\n    for _, button in pairs(buttontable) do\r\n        local data = {\r\n            click_function = button.click_function, \r\n            function_owner = self, \r\n            label = button.label, \r\n            position = {0, 0.1, button.z_i}, \r\n            scale = {0.3, 0.5, 0.3}, \r\n            width = 1500, \r\n            height = 400, \r\n            font_size = 250, \r\n            tooltip = \"Chaos bag du mode \"..button.label,\r\n            color = {0.5647, 0.4627, 0.2353, 1}, \r\n            font_color = {0.9041, 0.8313, 0.7356, 1},\r\n            hover_color = {99/255, 85/255, 48/255},\r\n            press_color = {192/255, 152/255, 94/255} }\r\n        self.createButton(data)\r\n        \r\n    end\r\n    jacqueline = getObjectFromGUID(jacqueline_guid)\r\n    chaosdata = jacqueline.getTable('chaosdata')\r\nend\r\n\r\nfunction modeEasy()\r\n    local  params ={}\r\n     params.mode = 'easy'\r\n     params.data = metadata.data\r\n     jacqueline.call('setChaosBag', params)\r\n  \r\nend\r\n\r\nfunction modeNormal()\r\n      local  params ={}\r\n       params.mode = 'normal'\r\n       params.data = metadata.data\r\n       jacqueline.call('setChaosBag', params)\r\n    \r\nend\r\n\r\nfunction modeHard()\r\n    local  params ={}\r\n     params.mode = 'hard'\r\n     params.data = metadata.data\r\n     jacqueline.call('setChaosBag', params)\r\n  \r\nend\r\n\r\nfunction modeExpert()\r\n    local  params ={}\r\n     params.mode = 'expert'\r\n     params.data = metadata.data\r\n     jacqueline.call('setChaosBag', params)\r\n  \r\nend\r\n\r\nfunction modeStandalone()\r\n    local  params ={}\r\n     params.mode = 'standalone'\r\n     params.data = metadata.data\r\n     jacqueline.call('setChaosBag', params)\r\n  \r\nend","LuaScriptState":"","XmlUI":""},{"GUID":"beaa6e","Name":"Custom_Tile","Transform":{"posX":-1.4999994,"posY":1.50683081,"posZ":18,"rotX":-0.004205395,"rotY":44.9881248,"rotZ":359.9888,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/vppt2my.png","ImageSecondaryURL":"https://i.imgur.com/vppt2my.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":"","States":{"2":{"GUID":"44b0c5","Name":"Custom_Tile","Transform":{"posX":-39.7933121,"posY":1.63758957,"posZ":2.038383,"rotX":359.9201,"rotY":269.9961,"rotZ":0.0168742146,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/HyfE8m8.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""},"3":{"GUID":"5b38c6","Name":"Custom_Tile","Transform":{"posX":-38.8217163,"posY":1.99356019,"posZ":0.4159239,"rotX":359.9201,"rotY":272.9828,"rotZ":0.01687373,"scaleX":0.8,"scaleY":1,"scaleZ":0.8},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/dHKBLoD.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""}}},{"GUID":"bf8897","Name":"Custom_Model_Bag","Transform":{"posX":-26,"posY":1.83530045,"posZ":13.5,"rotX":-0.00000620179435,"rotY":179.97493,"rotZ":1.13374305e-7,"scaleX":0.7,"scaleY":0.7,"scaleZ":0.7},"Nickname":"Choisir un lieu au hasard","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.614982545,"g":0,"b":0},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"MaterialIndex":-1,"MeshIndex":-1,"CustomMesh":{"MeshURL":"https://pastebin.com/raw/ALrYhQGb","DiffuseURL":"http://cloud-3.steamusercontent.com/ugc/1936013662301984640/CAAC8F1CA23C8211D520BA76CE7FDA34B8DFB353/","NormalURL":"","ColliderURL":"","Convex":true,"MaterialIndex":3,"TypeIndex":6,"CustomShader":{"SpecularColor":{"r":1,"g":1,"b":1},"SpecularIntensity":0,"SpecularSharpness":2,"FresnelStrength":0},"CastShadows":true},"Bag":{"Order":0},"LuaScript":"-- Random memory bag\r\n-- based on Utility memory bag by Directsun (Version 2.7.0)\r\n\r\nlocal CONFIG = {\r\n    MEMORY_GROUP = {\r\n        -- This determines how many frames to wait before actually placing objects onto the table when the \"Place\" button is clicked.\r\n        -- This gives the other bags time to recall their objects.\r\n        -- The delay ONLY occurs if other bags have objects out.\r\n        FRAME_DELAY_BEFORE_PLACING_OBJECTS = 30\r\n    }\r\n}\r\n\r\nmath.randomseed(os.time())\r\n\r\n--[[ Memory Bag Groups ]]\r\n--[[ Utility Memory Bags may be added to a named group, called a \"memory group\".\r\nYou can add a bag to a group through the bag's UI: \"Setup\" > \"Group Name\" (to the left of the bag).\r\nOnly one bag from a group may have it's contents placed on the table at a time.\r\nWhen \"Place\" is clicked on a bag, the other bags in it's memory group are recalled.\r\nBy default a memory bag is not in any group. It's memory group is \"nil\". --]]\r\n\r\nmemoryGroupName = { memoryBag = self }\r\nfunction memoryGroupName:get()\r\n    return self._name\r\nend\r\n\r\nfunction memoryGroupName:set(newName)\r\n    GlobalMemoryGroups:unregisterBagInGroup(self:get(), self.memoryBag.getGUID())\r\n    GlobalMemoryGroups:registerBagInGroup(newName, self.memoryBag.getGUID())\r\n\r\n    if newName == \"\" then\r\n        self._name = nil\r\n    else\r\n        self._name = newName\r\n    end\r\nend\r\n\r\n-- Click the \"Recall\" button on all other bags in my memory group.\r\nfunction recallOtherBagsInMyGroup()\r\n    for _, bag in ipairs(getOtherBagsInMyGroup()) do\r\n        bag.call('buttonClick_recall')\r\n    end\r\nend\r\n\r\n-- Return \"true\" if another bag in my memory group has any objects out on the table.\r\nfunction anyOtherBagsInMyGroupArePlaced()\r\n    for _, bag in ipairs(getOtherBagsInMyGroup()) do\r\n        local state = bag.call('areAnyOfMyObjectsPlaced')\r\n        if state then return true end\r\n    end\r\n\r\n    return false\r\nend\r\n\r\n-- Return \"true\" if at least one object from this memory bag is out on the table.\r\nfunction areAnyOfMyObjectsPlaced()\r\n    for guid, _ in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then\r\n            return true\r\n        end\r\n    end\r\n    return false\r\nend\r\n\r\nfunction getOtherBagsInMyGroup()\r\n    local bags = {}\r\n    for bagGuid, _ in pairs(GlobalMemoryGroups:getGroup(memoryGroupName:get())) do\r\n        if bagGuid ~= self.getGUID() then\r\n            bag = getObjectFromGUID(bagGuid)\r\n            -- \"bag\" is nill if it has been deleted since the last time onLoad() was called.\r\n            if bag ~= nil then\r\n                table.insert(bags, bag)\r\n            end\r\n        end\r\n    end\r\n    return bags\r\nend\r\n\r\n--[[\r\nThis object provides access to a variable stored on the \"Global script\".\r\nThe variable holds the names & guids of all memory bag groups.\r\nThe global variable is a table and holds data like this:\r\n{\r\n    'My First Group Name' = {\r\n        '805ebd' = {},\r\n        '35cc21' = {},\r\n        'fc8886' = {},\r\n    },\r\n    'My Second Group Name' = {\r\n        'f50264' = {},\r\n        '5f5f63' = {},\r\n    },\r\n}\r\n--]]\r\nGlobalMemoryGroups = { NAME_OF_GLOBAL_VARIABLE = '_GlobalUtilityMemoryBagGroups' }\r\n\r\n-- Call me inside this script's \"onLoad()\" method!\r\nfunction GlobalMemoryGroups:onLoad(myGuid)\r\n    -- Create and initialize the global variable if it doesn't already exist:\r\n    if self:_getGroups() == nil then\r\n        self:_setGroups({})\r\n    end\r\nend\r\n\r\n-- Return the GUIDs of all bags in the \"groupName\". The return value is a dictionary that maps [GUID -> empty table].\r\nfunction GlobalMemoryGroups:getGroup(groupName)\r\n    guids = self:_getGroups()[groupName] or {}\r\n    return guids\r\nend\r\n\r\n-- Registers a bag in a memory group. Creates a new group if one doesn't exist.\r\nfunction GlobalMemoryGroups:registerBagInGroup(groupName, bagGuid)\r\n    if groupName == nil or groupName == \"\" then\r\n        return\r\n    end\r\n\r\n    self:_tryCreateNewGroup(groupName)\r\n    local groups = self:_getGroups()\r\n    groups[groupName][bagGuid] = {}\r\n    self:_setGroups(groups)\r\nend\r\n\r\n-- Removes this bag from the memory group.\r\nfunction GlobalMemoryGroups:unregisterBagInGroup(groupName, bagGuid)\r\n    local groups = self:_getGroups()\r\n    local group = groups[groupName]\r\n    if group ~= nil then\r\n        group[bagGuid] = nil\r\n        self:_setGroups(groups)\r\n    end\r\nend\r\n\r\n-- Return the global variable, which is a table holding all memory group names & guids.\r\nfunction GlobalMemoryGroups:_getGroups()\r\n    return Global.getTable(self.NAME_OF_GLOBAL_VARIABLE)\r\nend\r\n\r\n-- Override the global variable (i.e. the entire table).\r\nfunction GlobalMemoryGroups:_setGroups(newTable)\r\n    Global.setTable(self.NAME_OF_GLOBAL_VARIABLE, newTable)\r\nend\r\n\r\n-- Add a new memory group named \"groupName\" to the global variable, if one doesn't already exist.\r\nfunction GlobalMemoryGroups:_tryCreateNewGroup(groupName)\r\n    local groups = self:_getGroups()\r\n    if groups[groupName] == nil then\r\n        groups[groupName] = {}\r\n        self:_setGroups(groups)\r\n    end\r\nend\r\n\r\n-- This object controls the \"Group Name\" input text field that is part of the bag's ingame UI.\r\ngroupNameInput = {\r\n    greyedOutText     = \"Group Name\",\r\n    widthPerCharacter = 100,\r\n    padding           = 4,\r\n    memoryBag         = self\r\n}\r\nfunction groupNameInput:create(optionalStartingValue)\r\n    local effectiveText = optionalStartingValue or self.greyedOutText\r\n    local width = self:computeWidth(effectiveText)\r\n\r\n    self.memoryBag.createInput({\r\n        label = self.greyedOutText,\r\n        value = optionalStartingValue or nil,\r\n        alignment = 3, -- Center aligned\r\n        input_function = \"groupNameInput_onCharacterTyped\", function_owner = self.memoryBag,\r\n        position = { 2.1, 0.3, 0 }, rotation = { 0, 270, 0 }, width = width, height = 350,\r\n        font_size = 250, color = { 0, 0, 0 }, font_color = { 1, 1, 1 },\r\n    })\r\nend\r\n\r\nfunction groupNameInput:computeWidth(text)\r\n    return (string.len(text) + self.padding) * self.widthPerCharacter\r\nend\r\n\r\nfunction groupNameInput:updatedWidth(text)\r\n    self.memoryBag.editInput({\r\n        index = 0,\r\n        width = self:computeWidth(text)\r\n    })\r\nend\r\n\r\nfunction groupNameInput:onCharacterTyped(text, stillEditing)\r\n    if stillEditing then\r\n        self:updatedWidth(text)\r\n    else\r\n        if text == \"\" then\r\n            self:updatedWidth(self.greyedOutText)\r\n        end\r\n    end\r\nend\r\n\r\nfunction groupNameInput_onCharacterTyped(memoryBag, playerColor, text, stillEditing)\r\n    groupNameInput:onCharacterTyped(text, stillEditing)\r\nend\r\n\r\nfunction groupNameInput:setGroupNameToInputField()\r\n    local inputFields = self.memoryBag.getInputs()\r\n    if inputFields ~= nil then\r\n        -- Get input field 0, which corresponds to the groupNameInput.\r\n        -- Unfortunately \"self.getInputs()\" doesn't return the inputs in a guaranteed order.\r\n        local nameField = nil\r\n        for _, field in ipairs(inputFields) do\r\n            if field.index == 0 then\r\n                nameField = field\r\n            end\r\n        end\r\n\r\n        memoryGroupName:set(nameField.value)\r\n    end\r\nend\r\n\r\nfunction updateSave()\r\n    local data_to_save = { [\"ml\"] = memoryList, [\"groupName\"] = memoryGroupName:get() }\r\n    saved_data = JSON.encode(data_to_save)\r\n    self.script_state = saved_data\r\nend\r\n\r\nfunction combineMemoryFromBagsWithin()\r\n    local bagObjList = self.getObjects()\r\n    for _, bagObj in ipairs(bagObjList) do\r\n        local data = bagObj.lua_script_state\r\n        if data ~= nil then\r\n            local j = JSON.decode(data)\r\n            if j ~= nil and j.ml ~= nil then\r\n                for guid, entry in pairs(j.ml) do\r\n                    memoryList[guid] = entry\r\n                end\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\nfunction updateMemoryWithMoves()\r\n    memoryList = memoryListBackup\r\n    --get the first transposed object's coordinates\r\n    local obj = getObjectFromGUID(moveGuid)\r\n\r\n    -- p1 is where needs to go, p2 is where it was\r\n    local refObjPos = memoryList[moveGuid].pos\r\n    local deltaPos = findOffsetDistance(obj.getPosition(), refObjPos, nil)\r\n    local movedRotation = obj.getRotation()\r\n    for guid, entry in pairs(memoryList) do\r\n        memoryList[guid].pos.x = entry.pos.x - deltaPos.x\r\n        memoryList[guid].pos.y = entry.pos.y - deltaPos.y\r\n        memoryList[guid].pos.z = entry.pos.z - deltaPos.z\r\n    end\r\n    moveList = {}\r\nend\r\n\r\nfunction onload(saved_data)\r\n    GlobalMemoryGroups:onLoad(self.getGUID())\r\n    AllMemoryBagsInScene:add(self.getGUID())\r\n\r\n    fresh = true\r\n    if saved_data ~= \"\" then\r\n        local loaded_data = JSON.decode(saved_data)\r\n        --Set up information off of loaded_data\r\n        memoryList = loaded_data.ml\r\n        memoryGroupName:set(loaded_data.groupName)\r\n    else\r\n        --Set up information for if there is no saved saved data\r\n        memoryList = {}\r\n        memoryGroupName:set(nil)\r\n    end\r\n\r\n    moveList = {}\r\n    moveGuid = nil\r\n\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        fresh = false\r\n        createMemoryActionButtons()\r\n    end\r\nend\r\n\r\n--Beginning Setup\r\n\r\n--Make setup button\r\nfunction createSetupButton()\r\n    self.createButton({\r\n      label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n      position={0,0.3,2}, rotation={0,0,0}, height=350, width=800,\r\n      font_size=250, color={0,0,0}, font_color={1,1,1}\r\n  })\r\nend\r\n\r\n--Triggered by Transpose button\r\nfunction buttonClick_transpose()\r\n    moveGuid = nil\r\n    broadcastToAll(\"Select one object and move it- all objects will move relative to the new location\", { 0.75, 0.75, 1 })\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(true)\r\n    createSetupActionButtons(true)\r\nend\r\n\r\n--Triggered by setup button,\r\nfunction buttonClick_setup()\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(false)\r\n    createSetupActionButtons(false)\r\nend\r\n\r\nfunction getAllObjectsInMemory()\r\n    local objTable = {}\r\n    local curObj = {}\r\n\r\n    for guid in pairs(memoryListBackup) do\r\n        curObj = getObjectFromGUID(guid)\r\n        table.insert(objTable, curObj)\r\n    end\r\n\r\n    return objTable\r\nend\r\n\r\n--Creates selection buttons on objects\r\nfunction createButtonsOnAllObjects(move)\r\n    buttonIndexMap = {}\r\n    local howManyButtons = 0\r\n\r\n    local objsToHaveButtons = {}\r\n    if move == true then\r\n        objsToHaveButtons = getAllObjectsInMemory()\r\n    else\r\n        objsToHaveButtons = getAllObjects()\r\n    end\r\n\r\n    for _, obj in ipairs(objsToHaveButtons) do\r\n        if obj ~= self then\r\n            --On a normal bag, the button positions aren't the same size as the bag.\r\n            globalScaleFactor = 1 * 1 / self.getScale().x\r\n            --Super sweet math to set button positions\r\n            local selfPos = self.getPosition()\r\n            local objPos = obj.getPosition()\r\n            local deltaPos = findOffsetDistance(selfPos, objPos, obj)\r\n            local objPos = rotateLocalCoordinates(deltaPos, self)\r\n            objPos.x = -objPos.x * globalScaleFactor\r\n            objPos.y = objPos.y * globalScaleFactor + 2\r\n            objPos.z = objPos.z * globalScaleFactor\r\n            --Workaround for custom PDFs\r\n            if obj.Book then\r\n                objPos.y = objPos.y + 0.5\r\n            end\r\n            --Offset rotation of bag\r\n            local rot = self.getRotation()\r\n            rot.y = -rot.y + 180\r\n            --Create function\r\n            local funcName = \"selectButton_\" .. howManyButtons\r\n            local func = function() buttonClick_selection(obj, move) end\r\n            local color = { 0.75, 0.25, 0.25, 0.6 }\r\n            local colorMove = { 0, 0, 1, 0.6 }\r\n            if move == true then\r\n                color = colorMove\r\n            end\r\n            self.setVar(funcName, func)\r\n            self.createButton({\r\n                click_function = funcName, function_owner = self,\r\n                position = objPos, rotation = rot, height = 1000, width = 1000,\r\n                color = color,\r\n            })\r\n            buttonIndexMap[obj.getGUID()] = howManyButtons\r\n            howManyButtons = howManyButtons + 1\r\n        end\r\n    end\r\nend\r\n\r\n  --Creates submit and cancel buttons\r\n  function createSetupActionButtons(move)\r\n      self.createButton({\r\n         label=\"Annuler\", click_function=\"buttonClick_cancel\", function_owner=self,\r\n         position={-1.15,0.3,2.1}, rotation={0,0,0}, height=350, width=1100,\r\n         font_size=250, color={0,0,0}, font_color={1,1,1}\r\n      })\r\n\r\n      self.createButton({\r\n        label=\"Valider\", click_function=\"buttonClick_submit\", function_owner=self,\r\n        position={-1.15,0.3,2.8}, rotation={0,0,0}, height=350, width=1100,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n      })\r\n\r\n      if move == false then\r\n        self.createButton({\r\n            label=\"Ajouter\", click_function=\"buttonClick_add\", function_owner=self,\r\n            position={1.15,0.3,2.1}, rotation={0,0,0}, height=350, width=1100,\r\n            font_size=250, color={0,0,0}, font_color={0.25,1,0.25}\r\n          })\r\n\r\n          self.createButton({\r\n              label=\"Sélection\", click_function=\"editDragSelection\", function_owner=self,\r\n              position={-1.15,0.3,3.5}, rotation={0,0,0}, height=350, width=1100,\r\n              font_size=250, color={0,0,0}, font_color={1,1,1}\r\n          })\r\n\r\n          if fresh == false then\r\n              self.createButton({\r\n                  label=\"Mise à Jour\", click_function=\"buttonClick_setNew\", function_owner=self,\r\n                  position={1.15,0.3,3.5}, rotation={0,0,0}, height=350, width=1100,\r\n                  font_size=180, color={0,0,0}, font_color={0.75,0.75,1}\r\n              })\r\n              self.createButton({\r\n                  label=\"Retirer\", click_function=\"buttonClick_remove\", function_owner=self,\r\n                  position={1.15,0.3,2.8}, rotation={0,0,0}, height=350, width=1100,\r\n                  font_size=250, color={0,0,0}, font_color={1,0.25,0.25}\r\n              })\r\n          end\r\n      end\r\n\r\n      self.createButton({\r\n          label=\"Reset\", click_function=\"buttonClick_reset\", function_owner=self,\r\n          position={0,0.3,-2}, rotation={0,0,0}, height=350, width=800,\r\n          font_size=250, color={0,0,0}, font_color={1,1,1}\r\n      })\r\n  end\r\n\r\n\r\n--During Setup\r\n\r\n--Checks or unchecks buttons\r\nfunction buttonClick_selection(obj, move)\r\n    local index = buttonIndexMap[obj.getGUID()]\r\n    local colorMove = { 0, 0, 1, 0.6 }\r\n    local color = { 0, 1, 0, 0.6 }\r\n\r\n    previousGuid = selectedGuid\r\n    selectedGuid = obj.getGUID()\r\n\r\n    theList = memoryList\r\n    if move == true then\r\n        theList = moveList\r\n        if previousGuid ~= nil and previousGuid ~= selectedGuid then\r\n            local prevObj = getObjectFromGUID(previousGuid)\r\n            prevObj.highlightOff()\r\n            self.editButton({ index = previousIndex, color = colorMove })\r\n            theList[previousGuid] = nil\r\n        end\r\n        previousIndex = index\r\n    end\r\n\r\n    if theList[selectedGuid] == nil then\r\n        self.editButton({ index = index, color = color })\r\n        --Adding pos/rot to memory table\r\n        local pos, rot = obj.getPosition(), obj.getRotation()\r\n        --I need to add it like this or it won't save due to indexing issue\r\n        theList[obj.getGUID()] = {\r\n            pos = { x = round(pos.x, 4), y = round(pos.y, 4), z = round(pos.z, 4) },\r\n            rot = { x = round(rot.x, 4), y = round(rot.y, 4), z = round(rot.z, 4) },\r\n            lock = obj.getLock(),\r\n            tint = obj.getColorTint()\r\n        }\r\n        obj.highlightOn({ 0, 1, 0 })\r\n    else\r\n        color = { 0.75, 0.25, 0.25, 0.6 }\r\n        if move == true then\r\n            color = colorMove\r\n        end\r\n        self.editButton({ index = index, color = color })\r\n        theList[obj.getGUID()] = nil\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\nfunction editDragSelection(bagObj, player, remove)\r\n    local selectedObjs = Player[player].getSelectedObjects()\r\n    if not remove then\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            --Ignore if already in the memory list, or does not have a button\r\n            if index and not memoryList[obj.getGUID()] then\r\n                self.editButton({ index = index, color = { 0, 1, 0, 0.6 } })\r\n                --Adding pos/rot to memory table\r\n                local pos, rot = obj.getPosition(), obj.getRotation()\r\n                --I need to add it like this or it won't save due to indexing issue\r\n                memoryList[obj.getGUID()] = {\r\n                    pos = { x = round(pos.x, 4), y = round(pos.y, 4), z = round(pos.z, 4) },\r\n                    rot = { x = round(rot.x, 4), y = round(rot.y, 4), z = round(rot.z, 4) },\r\n                    lock = obj.getLock(),\r\n                    tint = obj.getColorTint()\r\n                }\r\n                obj.highlightOn({ 0, 1, 0 })\r\n            end\r\n        end\r\n    else\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            if index and memoryList[obj.getGUID()] then\r\n                color = { 0.75, 0.25, 0.25, 0.6 }\r\n                self.editButton({ index = index, color = color })\r\n                memoryList[obj.getGUID()] = nil\r\n                obj.highlightOff()\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\n--Cancels selection process\r\nfunction buttonClick_cancel()\r\n    memoryList = memoryListBackup\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        createMemoryActionButtons()\r\n    end\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Sélection annulée\", { 1, 1, 1 })\r\n    moveGuid = nil\r\nend\r\n\r\n--Saves selections\r\nfunction buttonClick_submit()\r\n    fresh = false\r\n    if next(moveList) ~= nil then\r\n        for guid in pairs(moveList) do\r\n            moveGuid = guid\r\n        end\r\n        if memoryListBackup[moveGuid] == nil then\r\n            broadcastToAll(\"Item selected for moving is not already in memory\", { 1, 0.25, 0.25 })\r\n        else\r\n            broadcastToAll(\"Moving all items in memory relative to new objects position!\", { 0.75, 0.75, 1 })\r\n            self.clearButtons()\r\n            self.clearInputs()\r\n            createMemoryActionButtons()\r\n            local count = 0\r\n            for guid in pairs(moveList) do\r\n                moveGuid = guid\r\n                count = count + 1\r\n                local obj = getObjectFromGUID(guid)\r\n                if obj ~= nil then obj.highlightOff() end\r\n            end\r\n            updateMemoryWithMoves()\r\n            updateSave()\r\n            buttonClick_place()\r\n        end\r\n    elseif next(memoryList) == nil and moveGuid == nil then\r\n        memoryList = memoryListBackup\r\n        broadcastToAll(\"No selections made.\", { 0.75, 0.25, 0.25 })\r\n    end\r\n    combineMemoryFromBagsWithin()\r\n    groupNameInput:setGroupNameToInputField()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count .. \" Objects Saved\", { 1, 1, 1 })\r\n    updateSave()\r\n    moveGuid = nil\r\nend\r\n\r\nfunction combineTables(first_table, second_table)\r\n    for k, v in pairs(second_table) do first_table[k] = v end\r\nend\r\n\r\nfunction buttonClick_add()\r\n    fresh = false\r\n    combineTables(memoryList, memoryListBackup)\r\n    broadcastToAll(\"Adding internal bags and selections to existing memory\", { 0.25, 0.75, 0.25 })\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count .. \" Objects Saved\", { 1, 1, 1 })\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_remove()\r\n    broadcastToAll(\"Removing Selected Entries From Memory\", { 1.0, 0.25, 0.25 })\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        memoryListBackup[guid] = nil\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count .. \" Objects Removed\", { 1, 1, 1 })\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_setNew()\r\n    broadcastToAll(\"Setting new position relative to items in memory\", { 0.75, 0.75, 1 })\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        guid = obj.guid\r\n        if memoryListBackup[guid] ~= nil then\r\n            count = count + 1\r\n            memoryListBackup[guid].pos = obj.getPosition()\r\n            memoryListBackup[guid].rot = obj.getRotation()\r\n            memoryListBackup[guid].lock = obj.getLock()\r\n            memoryListBackup[guid].tint = obj.getColorTint()\r\n        end\r\n    end\r\n    broadcastToAll(count .. \" Objects Saved\", { 1, 1, 1 })\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\n--Resets bag to starting status\r\nfunction buttonClick_reset()\r\n    fresh = true\r\n    memoryList = {}\r\n    memoryGroupName:set(nil)\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createSetupButton()\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Tool Reset\", { 1, 1, 1 })\r\n    updateSave()\r\nend\r\n\r\n--After Setup\r\n\r\n--Creates recall and place buttons\r\nfunction createMemoryActionButtons()\r\n    self.createButton({\r\n        label=\"Placer au hasard\", click_function=\"buttonClick_place\", function_owner=self,\r\n        position={0,0.3,2}, rotation={0,0,0}, height=350, width=2000,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Ranger\", click_function=\"buttonClick_recall\", function_owner=self,\r\n        position={0,0.3,2.8}, rotation={0,0,0}, height=350, width=1000,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n        position={2,0.3,0}, rotation={0,90,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    ---    self.createButton({\r\n    ---      label=\"Bouger\", click_function=\"buttonClick_transpose\", function_owner=self,\r\n    ---      position={-2,0.3,0.8}, rotation={0,270,0}, height=350, width=800,\r\n    ---      font_size=250, color={0,0,0}, font_color={0.75,0.75,1}\r\n    ---\r\nend\r\n\r\n--Sends objects from bag/table to their saved position/rotation\r\nfunction buttonClick_place()\r\n    if anyOtherBagsInMyGroupArePlaced() then\r\n        recallOtherBagsInMyGroup()\r\n        Wait.frames(_placeObjects, CONFIG.MEMORY_GROUP.FRAME_DELAY_BEFORE_PLACING_OBJECTS)\r\n    else\r\n        _placeObjects()\r\n    end\r\nend\r\n\r\nfunction _placeObjects()\r\n    local bagObjList = self.getObjects()\r\n\r\n    -- randomize memorylist position\r\n    local positionList = {}\r\n    for guid, entry in pairs(memoryList) do\r\n        table.insert(positionList, memoryList[guid].pos)\r\n    end\r\n\r\n    for i = #positionList, 2, -1 do\r\n        local j = math.random(i)\r\n        positionList[i], positionList[j] = positionList[j], positionList[i]\r\n    end\r\n\r\n    local i = 1\r\n    for guid, entry in pairs(memoryList) do\r\n        memoryList[guid].pos = positionList[i]\r\n        i = i + 1\r\n    end\r\n\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        --If obj is out on the table, move it to the saved pos/rot\r\n        if obj ~= nil then\r\n            obj.setPositionSmooth(entry.pos)\r\n            obj.setRotationSmooth(entry.rot)\r\n            obj.setLock(entry.lock)\r\n            obj.setColorTint(entry.tint)\r\n        else\r\n            --If obj is inside of the bag\r\n            for _, bagObj in ipairs(bagObjList) do\r\n                if bagObj.guid == guid then\r\n                    local item = self.takeObject({\r\n                        guid = guid, position = entry.pos, rotation = entry.rot, smooth = false\r\n                    })\r\n                    item.setLock(entry.lock)\r\n                    item.setColorTint(entry.tint)\r\n                    break\r\n                end\r\n            end\r\n        end\r\n    end\r\n    broadcastToAll(\"Objets placés au hasard\", {1,1,1})\r\nend\r\n\r\n--Recalls objects to bag from table\r\nfunction buttonClick_recall()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then self.putObject(obj) end\r\n    end\r\n    broadcastToAll(\"Objets rangés\", {1,1,1})\r\nend\r\n\r\n--Utility functions\r\n\r\n--Find delta (difference) between 2 x/y/z coordinates\r\nfunction findOffsetDistance(p1, p2, obj)\r\n    local yOffset = 0\r\n    if obj ~= nil then\r\n        local bounds = obj.getBounds()\r\n        yOffset = (bounds.size.y - bounds.offset.y)\r\n    end\r\n    local deltaPos = {}\r\n    deltaPos.x = (p2.x - p1.x)\r\n    deltaPos.y = (p2.y - p1.y) + yOffset\r\n    deltaPos.z = (p2.z - p1.z)\r\n    return deltaPos\r\nend\r\n\r\n--Used to rotate a set of coordinates by an angle\r\nfunction rotateLocalCoordinates(desiredPos, obj)\r\n    local objPos, objRot = obj.getPosition(), obj.getRotation()\r\n    local angle = math.rad(objRot.y)\r\n    local x = desiredPos.x * math.cos(angle) - desiredPos.z * math.sin(angle)\r\n    local z = desiredPos.x * math.sin(angle) + desiredPos.z * math.cos(angle)\r\n    --return {x=objPos.x+x, y=objPos.y+desiredPos.y, z=objPos.z+z}\r\n    return { x = x, y = desiredPos.y, z = z }\r\nend\r\n\r\nfunction rotateMyCoordinates(desiredPos, obj)\r\n    local angle = math.rad(obj.getRotation().y)\r\n    local x = desiredPos.x * math.sin(angle)\r\n    local z = desiredPos.z * math.cos(angle)\r\n    return { x = x, y = desiredPos.y, z = z }\r\nend\r\n\r\n--Coroutine delay, in seconds\r\nfunction wait(time)\r\n    local start = os.time()\r\n    repeat coroutine.yield(0) until os.time() > start + time\r\nend\r\n\r\n--Duplicates a table (needed to prevent it making reference to the same objects)\r\nfunction duplicateTable(oldTable)\r\n    local newTable = {}\r\n    for k, v in pairs(oldTable) do\r\n        newTable[k] = v\r\n    end\r\n    return newTable\r\nend\r\n\r\n--Moves scripted highlight from all objects\r\nfunction removeAllHighlights()\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\n--Round number (num) to the Nth decimal (dec)\r\nfunction round(num, dec)\r\n    local mult = 10 ^ (dec or 0)\r\n    return math.floor(num * mult + 0.5) / mult\r\nend\r\n\r\n--[[ This object provides access to a variable stored on the \"Global script\".\r\nThe variable holds the GUIDs for every Utility Memory Bag in the scene.\r\nExample: {'805ebd', '35cc21', 'fc8886', 'f50264', '5f5f63'} --]]\r\nAllMemoryBagsInScene = {\r\n    NAME_OF_GLOBAL_VARIABLE = \"_UtilityMemoryBag_AllMemoryBagsInScene\"\r\n}\r\n\r\nfunction AllMemoryBagsInScene:add(guid)\r\n    local guids = Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\n    table.insert(guids, guid)\r\n    Global.setTable(self.NAME_OF_GLOBAL_VARIABLE, guids)\r\nend\r\n\r\nfunction AllMemoryBagsInScene:getGuidList()\r\n    return Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\nend\r\n","LuaScriptState":"{\"ml\":{\"3975c8\":{\"lock\":false,\"pos\":{\"x\":-26.9999847412109,\"y\":1.7788553237915,\"z\":26.0000190734863},\"rot\":{\"x\":-5.08359835293959E-06,\"y\":180.009521484375,\"z\":-6.73092941383402E-08},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"ad9452\":{\"lock\":false,\"pos\":{\"x\":-7.00000238418579,\"y\":1.51986491680145,\"z\":12.5000028610229},\"rot\":{\"x\":0.0108906421810389,\"y\":180.009704589844,\"z\":0.0049501652829349},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}}}}","XmlUI":"","ContainedObjects":[{"GUID":"3975c8","Name":"Card","Transform":{"posX":-7.000002,"posY":1.51986492,"posZ":12.5,"rotX":0.0108907763,"rotY":180.009521,"rotZ":0.004950206,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Village de Dunwich","Description":"Dunwich.","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02243\",\n  \"locationBack\": {\n    \"connections\": \"Triangle|Square|Diamond\",\n    \"icons\": \"Circle\",\n    \"uses\": {\n      \"count\": 3,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    }\n  },\n  \"locationFront\": {\n    \"connections\": \"Triangle|Square|Diamond\",\n    \"icons\": \"Circle\"\n  },\n  \"traits\": \"Dunwich.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":117305,"SidewaysCard":false,"CustomDeck":{"1173":{"FaceURL":"https://i.imgur.com/0FRbPFZ.jpg","BackURL":"https://i.imgur.com/z0qG3Pt.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"ad9452","Name":"Card","Transform":{"posX":-26.9999828,"posY":1.77890432,"posZ":26.0000248,"rotX":-0.0000050237154,"rotY":180.0097,"rotZ":-6.71120262e-8,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Village de Dunwich","Description":"Dunwich.","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02242\",\n  \"locationBack\": {\n    \"connections\": \"Triangle|Square|Diamond\",\n    \"icons\": \"Circle\",\n    \"uses\": {\n      \"count\": 1,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    }\n  },\n  \"locationFront\": {\n    \"connections\": \"Triangle|Square|Diamond\",\n    \"icons\": \"Circle\"\n  },\n  \"traits\": \"Dunwich.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":117306,"SidewaysCard":false,"CustomDeck":{"1173":{"FaceURL":"https://i.imgur.com/0FRbPFZ.jpg","BackURL":"https://i.imgur.com/z0qG3Pt.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""}]},{"GUID":"bfd0f7","Name":"Custom_Tile","Transform":{"posX":9.499999,"posY":1.50483537,"posZ":12.5,"rotX":0.0049477336,"rotY":90,"rotZ":359.9891,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/vppt2my.png","ImageSecondaryURL":"https://i.imgur.com/vppt2my.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":"","States":{"2":{"GUID":"44b0c5","Name":"Custom_Tile","Transform":{"posX":4.499998,"posY":1.6248529,"posZ":5,"rotX":-0.00006597261,"rotY":89.99994,"rotZ":-0.0000136240915,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/HyfE8m8.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""},"3":{"GUID":"5b38c6","Name":"Custom_Tile","Transform":{"posX":4.49999857,"posY":1.6248529,"posZ":5,"rotX":-0.000066110646,"rotY":89.99996,"rotZ":-0.0000137726465,"scaleX":0.8,"scaleY":1,"scaleZ":0.8},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/dHKBLoD.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""}}},{"GUID":"c4586b","Name":"Deck","Transform":{"posX":30.5,"posY":1.73394668,"posZ":-3,"rotX":-0.0005910126,"rotY":180.000488,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Deck Rencontre","Description":"Aux Frontières du Visible","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":false,"SidewaysCard":false,"DeckIDs":[276022,276021,276020,276019,276018,276017,276016,276031,276032,17512,17510,17508,17506,16717,16715,16714,16716,16711,16713,15413,16002,15418,15419,15416,15417,16006,16007,16005,16004,16000,16001,16003,16134,16138,16137],"CustomDeck":{"154":{"FaceURL":"https://i.imgur.com/7H57eeO.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0},"160":{"FaceURL":"https://i.imgur.com/EEPF7vQ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0},"161":{"FaceURL":"https://i.imgur.com/AdR3VIZ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0},"167":{"FaceURL":"https://i.imgur.com/AdR3VIZ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0},"175":{"FaceURL":"https://i.imgur.com/AdR3VIZ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0},"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":"","ContainedObjects":[{"GUID":"cac119","Name":"Card","Transform":{"posX":30.5,"posY":11.0518522,"posZ":-2.99999976,"rotX":0.000006713691,"rotY":180.000488,"rotZ":180.0008,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"51069\",\n  \"traits\": \"Terror.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276022,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"9ec9fe","Name":"Card","Transform":{"posX":30.5,"posY":11.1893492,"posZ":-3,"rotX":-0.000590900367,"rotY":180.000488,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"51068\",\n  \"traits\": \"Terror.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276021,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"35b48f","Name":"Card","Transform":{"posX":30.5,"posY":10.9893494,"posZ":-3,"rotX":-0.000590900367,"rotY":180.000488,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"51070\",\n  \"traits\": \"Terror.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276020,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"b34f35","Name":"Card","Transform":{"posX":30.5,"posY":10.78935,"posZ":-3,"rotX":-0.000590900367,"rotY":180.000488,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"51069\",\n  \"traits\": \"Terror.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276019,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"7990a4","Name":"Card","Transform":{"posX":30.5,"posY":10.58935,"posZ":-3,"rotX":-0.000590900367,"rotY":180.000488,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"51070\",\n  \"traits\": \"Terror.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276018,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"57d787","Name":"Card","Transform":{"posX":30.5,"posY":10.38935,"posZ":-3,"rotX":-0.000590900367,"rotY":180.000488,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"51068\",\n  \"traits\": \"Terror.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276017,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"5c600e","Name":"Card","Transform":{"posX":30.5,"posY":10.1893492,"posZ":-3,"rotX":-0.000590900367,"rotY":180.000488,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"51070\",\n  \"traits\": \"Terror.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276016,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"3bcd2a","Name":"Card","Transform":{"posX":30.5,"posY":9.989349,"posZ":-3,"rotX":-0.000590900367,"rotY":180.000488,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"51046\",\n  \"traits\": \"Power.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276031,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"e37705","Name":"Card","Transform":{"posX":30.5,"posY":9.78935,"posZ":-3,"rotX":-0.000590900367,"rotY":180.000488,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"51046\",\n  \"traits\": \"Power.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276032,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"493b56","Name":"Card","Transform":{"posX":30.5,"posY":9.58935,"posZ":-3,"rotX":-0.000590900367,"rotY":180.000488,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Sordide et Silencieux","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02089\",\n  \"traits\": \"Terror.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":17512,"SidewaysCard":false,"CustomDeck":{"175":{"FaceURL":"https://i.imgur.com/AdR3VIZ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"f9d854","Name":"Card","Transform":{"posX":30.5,"posY":9.38935,"posZ":-3,"rotX":-0.000590900367,"rotY":180.000488,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Sordide et Silencieux","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02089\",\n  \"traits\": \"Terror.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":17510,"SidewaysCard":false,"CustomDeck":{"175":{"FaceURL":"https://i.imgur.com/AdR3VIZ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"aea6f8","Name":"Card","Transform":{"posX":30.5,"posY":8.851863,"posZ":-2.99999976,"rotX":-0.0005909143,"rotY":180.000488,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Contrée Impie","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02088\",\n  \"traits\": \"Terror.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":17508,"SidewaysCard":false,"CustomDeck":{"175":{"FaceURL":"https://i.imgur.com/AdR3VIZ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"6f2907","Name":"Card","Transform":{"posX":30.5,"posY":8.989349,"posZ":-3,"rotX":-0.000590900367,"rotY":180.000488,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Contrée Impie","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02088\",\n  \"traits\": \"Terror.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":17506,"SidewaysCard":false,"CustomDeck":{"175":{"FaceURL":"https://i.imgur.com/AdR3VIZ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"3a2890","Name":"Card","Transform":{"posX":30.5,"posY":8.78935,"posZ":-3,"rotX":-0.000590900367,"rotY":180.000488,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Bête Altérée","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02096\",\n  \"traits\": \"Power.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":16717,"SidewaysCard":false,"CustomDeck":{"167":{"FaceURL":"https://i.imgur.com/AdR3VIZ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"9b8df1","Name":"Card","Transform":{"posX":30.5,"posY":8.58935,"posZ":-3,"rotX":-0.000590900367,"rotY":180.000488,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Bête Altérée","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02096\",\n  \"traits\": \"Power.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":16715,"SidewaysCard":false,"CustomDeck":{"167":{"FaceURL":"https://i.imgur.com/AdR3VIZ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"1c7f06","Name":"Card","Transform":{"posX":30.5,"posY":8.38935,"posZ":-3,"rotX":-0.000590900367,"rotY":180.000488,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Thrall Lupin","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"health\": 3,\n  \"id\": \"02095\",\n  \"traits\": \"Creature. Monster. Abomination.\",\n  \"type\": \"Enemy\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":16714,"SidewaysCard":false,"CustomDeck":{"167":{"FaceURL":"https://i.imgur.com/AdR3VIZ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"63d0a1","Name":"Card","Transform":{"posX":30.5,"posY":8.189349,"posZ":-3,"rotX":-0.000590900367,"rotY":180.000488,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Thrall Lupin","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"health\": 3,\n  \"id\": \"02095\",\n  \"traits\": \"Creature. Monster. Abomination.\",\n  \"type\": \"Enemy\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":16716,"SidewaysCard":false,"CustomDeck":{"167":{"FaceURL":"https://i.imgur.com/AdR3VIZ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"e07cf7","Name":"Card","Transform":{"posX":30.5,"posY":7.98934937,"posZ":-3,"rotX":-0.000590900367,"rotY":180.000488,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Thrall Aviaire","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"health\": 4,\n  \"id\": \"02094\",\n  \"traits\": \"Creature. Monster. Abomination.\",\n  \"type\": \"Enemy\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":16711,"SidewaysCard":false,"CustomDeck":{"167":{"FaceURL":"https://i.imgur.com/AdR3VIZ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"8041a2","Name":"Card","Transform":{"posX":30.5,"posY":7.789349,"posZ":-3,"rotX":-0.000590900367,"rotY":180.000488,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Thrall Aviaire","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"health\": 4,\n  \"id\": \"02094\",\n  \"traits\": \"Creature. Monster. Abomination.\",\n  \"type\": \"Enemy\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":16713,"SidewaysCard":false,"CustomDeck":{"167":{"FaceURL":"https://i.imgur.com/AdR3VIZ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"74772f","Name":"Card","Transform":{"posX":30.5,"posY":7.58934927,"posZ":-3,"rotX":-0.000590900367,"rotY":180.000488,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Avides de Mort","Description":"","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02091\",\n  \"traits\": \"Omen.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":15413,"SidewaysCard":false,"CustomDeck":{"154":{"FaceURL":"https://i.imgur.com/7H57eeO.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"9e5853","Name":"Card","Transform":{"posX":30.5,"posY":5.72203064,"posZ":-3.00000024,"rotX":-0.0005903475,"rotY":180.000488,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Bêtes Démesurées","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02256\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":16002,"SidewaysCard":false,"CustomDeck":{"160":{"FaceURL":"https://i.imgur.com/EEPF7vQ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"ec81eb","Name":"Card","Transform":{"posX":30.5,"posY":7.051863,"posZ":-2.99999976,"rotX":-0.0005909853,"rotY":180.000488,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Avides de Mort","Description":"","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02091\",\n  \"traits\": \"Omen.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":15418,"SidewaysCard":false,"CustomDeck":{"154":{"FaceURL":"https://i.imgur.com/7H57eeO.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"b248fe","Name":"Card","Transform":{"posX":30.5,"posY":7.189349,"posZ":-3,"rotX":-0.000590900367,"rotY":180.000488,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Engoulevent","Description":"","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"health\": 1,\n  \"id\": \"02090\",\n  \"traits\": \"Creature.\",\n  \"type\": \"Enemy\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":15419,"SidewaysCard":false,"CustomDeck":{"154":{"FaceURL":"https://i.imgur.com/7H57eeO.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"c75f9e","Name":"Card","Transform":{"posX":30.5,"posY":6.98934937,"posZ":-3,"rotX":-0.000590900367,"rotY":180.000488,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Engoulevent","Description":"","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"health\": 1,\n  \"id\": \"02090\",\n  \"traits\": \"Creature.\",\n  \"type\": \"Enemy\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":15416,"SidewaysCard":false,"CustomDeck":{"154":{"FaceURL":"https://i.imgur.com/7H57eeO.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"34acc2","Name":"Card","Transform":{"posX":30.5,"posY":6.78935051,"posZ":-3,"rotX":-0.000590900367,"rotY":180.000488,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Engoulevent","Description":"","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"health\": 1,\n  \"id\": \"02090\",\n  \"traits\": \"Creature.\",\n  \"type\": \"Enemy\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":15417,"SidewaysCard":false,"CustomDeck":{"154":{"FaceURL":"https://i.imgur.com/7H57eeO.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"2a40a7","Name":"Card","Transform":{"posX":30.5,"posY":6.5893507,"posZ":-3,"rotX":-0.000590900367,"rotY":180.000488,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"La Piste des Créatures","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02259\",\n  \"traits\": \"Terror.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":16006,"SidewaysCard":false,"CustomDeck":{"160":{"FaceURL":"https://i.imgur.com/EEPF7vQ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"8a8e70","Name":"Card","Transform":{"posX":30.5,"posY":6.051853,"posZ":-2.99999976,"rotX":0.00000675244746,"rotY":180.000488,"rotZ":180.0008,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"La Piste des Créatures","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02259\",\n  \"traits\": \"Terror.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":16007,"SidewaysCard":false,"CustomDeck":{"160":{"FaceURL":"https://i.imgur.com/EEPF7vQ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"375d8b","Name":"Card","Transform":{"posX":30.5,"posY":6.18935061,"posZ":-3,"rotX":-0.000590900367,"rotY":180.000488,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Attirer l'Attention","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02258\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":16005,"SidewaysCard":false,"CustomDeck":{"160":{"FaceURL":"https://i.imgur.com/EEPF7vQ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"a4daa5","Name":"Card","Transform":{"posX":30.5,"posY":5.98935032,"posZ":-3,"rotX":-0.000590900367,"rotY":180.000488,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Attirer l'Attention","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02258\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":16004,"SidewaysCard":false,"CustomDeck":{"160":{"FaceURL":"https://i.imgur.com/EEPF7vQ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"919139","Name":"Card","Transform":{"posX":30.5,"posY":5.78935051,"posZ":-3,"rotX":-0.000590900367,"rotY":180.000488,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Ruine et Destruction","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02257\",\n  \"traits\": \"Hazard.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":16000,"SidewaysCard":false,"CustomDeck":{"160":{"FaceURL":"https://i.imgur.com/EEPF7vQ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"333d52","Name":"Card","Transform":{"posX":30.5,"posY":5.5893507,"posZ":-3,"rotX":-0.000590900367,"rotY":180.000488,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Ruine et Destruction","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02257\",\n  \"traits\": \"Hazard.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":16001,"SidewaysCard":false,"CustomDeck":{"160":{"FaceURL":"https://i.imgur.com/EEPF7vQ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"666328","Name":"Card","Transform":{"posX":30.5,"posY":5.38935041,"posZ":-3,"rotX":-0.000590900367,"rotY":180.000488,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Ruine et Destruction","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02257\",\n  \"traits\": \"Hazard.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":16003,"SidewaysCard":false,"CustomDeck":{"160":{"FaceURL":"https://i.imgur.com/EEPF7vQ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"e288f9","Name":"Card","Transform":{"posX":30.5,"posY":5.18935061,"posZ":-3,"rotX":-0.000590900367,"rotY":180.000488,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Bêtes Démesurées","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02256\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":16134,"SidewaysCard":false,"CustomDeck":{"161":{"FaceURL":"https://i.imgur.com/AdR3VIZ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"3e59b3","Name":"Card","Transform":{"posX":30.5,"posY":4.98935032,"posZ":-3,"rotX":-0.000590900367,"rotY":180.000488,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Bêtes Démesurées","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02256\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":16138,"SidewaysCard":false,"CustomDeck":{"161":{"FaceURL":"https://i.imgur.com/AdR3VIZ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"568fc7","Name":"Card","Transform":{"posX":30.5,"posY":4.78935051,"posZ":-3,"rotX":-0.000590900367,"rotY":180.000488,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Bêtes Démesurées","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02256\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":16137,"SidewaysCard":false,"CustomDeck":{"161":{"FaceURL":"https://i.imgur.com/AdR3VIZ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""}]},{"GUID":"c56db4","Name":"Custom_Tile","Transform":{"posX":-1.50000119,"posY":1.50578535,"posZ":12.5,"rotX":0.00494776526,"rotY":90.00022,"rotZ":359.9891,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/vppt2my.png","ImageSecondaryURL":"https://i.imgur.com/vppt2my.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":"","States":{"2":{"GUID":"44b0c5","Name":"Custom_Tile","Transform":{"posX":-39.7933121,"posY":1.63758957,"posZ":2.038383,"rotX":359.9201,"rotY":269.9961,"rotZ":0.0168742146,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/HyfE8m8.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""},"3":{"GUID":"5b38c6","Name":"Custom_Tile","Transform":{"posX":-38.8217163,"posY":1.99356019,"posZ":0.4159239,"rotX":359.9201,"rotY":272.9828,"rotZ":0.01687373,"scaleX":0.8,"scaleY":1,"scaleZ":0.8},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/dHKBLoD.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""}}},{"GUID":"cb8584","Name":"Card","Transform":{"posX":24.9999981,"posY":1.51367974,"posZ":-5.49999952,"rotX":0.0108914776,"rotY":180.000031,"rotZ":180.004959,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276120,"SidewaysCard":false,"CustomDeck":{"2761":{"FaceURL":"https://i.imgur.com/FVWxpyu.jpg","BackURL":"https://i.imgur.com/EmJxccn.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"df7e24","Name":"Deck","Transform":{"posX":-27.5001278,"posY":1.81030214,"posZ":3.49986935,"rotX":-0.0000049779037,"rotY":180.002151,"rotZ":-2.54904279e-7,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":false,"SidewaysCard":false,"DeckIDs":[276033,276034,276035,276036,16136],"CustomDeck":{"161":{"FaceURL":"https://i.imgur.com/AdR3VIZ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0},"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":"","ContainedObjects":[{"GUID":"4b5a3c","Name":"Card","Transform":{"posX":-27.5001316,"posY":4.865706,"posZ":3.49986482,"rotX":-0.000004996639,"rotY":180.0021,"rotZ":-1.20133336e-7,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"health\": 1,\n  \"id\": \"51045\",\n  \"traits\": \"Monster. Abomination.\",\n  \"type\": \"Enemy\",\n  \"victory\": 1\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276033,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"5680e6","Name":"Card","Transform":{"posX":-27.5001316,"posY":5.065706,"posZ":3.49986482,"rotX":-0.000004996639,"rotY":180.0021,"rotZ":-1.20133336e-7,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"health\": 1,\n  \"id\": \"51044\",\n  \"traits\": \"Monster. Abomination.\",\n  \"type\": \"Enemy\",\n  \"victory\": 1\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276034,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"f991ae","Name":"Card","Transform":{"posX":-27.5001316,"posY":5.26570559,"posZ":3.49986482,"rotX":-0.000004996639,"rotY":180.0021,"rotZ":-1.20133336e-7,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"health\": 2,\n  \"id\": \"51043\",\n  \"traits\": \"Monster. Abomination.\",\n  \"type\": \"Enemy\",\n  \"victory\": 1\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276035,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"108642","Name":"Card","Transform":{"posX":-27.5001316,"posY":5.465706,"posZ":3.49986482,"rotX":-0.000004996639,"rotY":180.0021,"rotZ":-1.20133336e-7,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"health\": 1,\n  \"id\": \"51042\",\n  \"traits\": \"Monster. Abomination.\",\n  \"type\": \"Enemy\",\n  \"victory\": 1\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276036,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"efc5a6","Name":"Card","Transform":{"posX":-27.5001316,"posY":1.89465928,"posZ":3.49986482,"rotX":-0.00172473746,"rotY":180.0021,"rotZ":-0.00148370152,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Rejeton de Yog-Sothoth","Description":"","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"health\": 1,\n  \"id\": \"02255\",\n  \"traits\": \"Monster. Abomination.\",\n  \"type\": \"Enemy\",\n  \"victory\": 1\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":16136,"SidewaysCard":false,"CustomDeck":{"161":{"FaceURL":"https://i.imgur.com/AdR3VIZ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""}]},{"GUID":"ff8177","Name":"Custom_Model_Bag","Transform":{"posX":-19.9999962,"posY":1.83530056,"posZ":13.5000029,"rotX":-0.000005497887,"rotY":179.97258,"rotZ":-5.268951e-8,"scaleX":0.7,"scaleY":0.7,"scaleZ":0.7},"Nickname":"Choisir un lieu au hasard","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.614982545,"g":0,"b":0},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"MaterialIndex":-1,"MeshIndex":-1,"CustomMesh":{"MeshURL":"https://pastebin.com/raw/ALrYhQGb","DiffuseURL":"http://cloud-3.steamusercontent.com/ugc/1936013662301991904/7E84BE33F1D0A3E18D240D80DC3C8131FD44D609/","NormalURL":"","ColliderURL":"","Convex":true,"MaterialIndex":3,"TypeIndex":6,"CustomShader":{"SpecularColor":{"r":1,"g":1,"b":1},"SpecularIntensity":0,"SpecularSharpness":2,"FresnelStrength":0},"CastShadows":true},"Bag":{"Order":0},"LuaScript":"-- Random memory bag\r\n-- based on Utility memory bag by Directsun (Version 2.7.0)\r\n\r\nlocal CONFIG = {\r\n    MEMORY_GROUP = {\r\n        -- This determines how many frames to wait before actually placing objects onto the table when the \"Place\" button is clicked.\r\n        -- This gives the other bags time to recall their objects.\r\n        -- The delay ONLY occurs if other bags have objects out.\r\n        FRAME_DELAY_BEFORE_PLACING_OBJECTS = 30\r\n    }\r\n}\r\n\r\nmath.randomseed(os.time())\r\n\r\n--[[ Memory Bag Groups ]]\r\n--[[ Utility Memory Bags may be added to a named group, called a \"memory group\".\r\nYou can add a bag to a group through the bag's UI: \"Setup\" > \"Group Name\" (to the left of the bag).\r\nOnly one bag from a group may have it's contents placed on the table at a time.\r\nWhen \"Place\" is clicked on a bag, the other bags in it's memory group are recalled.\r\nBy default a memory bag is not in any group. It's memory group is \"nil\". --]]\r\n\r\nmemoryGroupName = { memoryBag = self }\r\nfunction memoryGroupName:get()\r\n    return self._name\r\nend\r\n\r\nfunction memoryGroupName:set(newName)\r\n    GlobalMemoryGroups:unregisterBagInGroup(self:get(), self.memoryBag.getGUID())\r\n    GlobalMemoryGroups:registerBagInGroup(newName, self.memoryBag.getGUID())\r\n\r\n    if newName == \"\" then\r\n        self._name = nil\r\n    else\r\n        self._name = newName\r\n    end\r\nend\r\n\r\n-- Click the \"Recall\" button on all other bags in my memory group.\r\nfunction recallOtherBagsInMyGroup()\r\n    for _, bag in ipairs(getOtherBagsInMyGroup()) do\r\n        bag.call('buttonClick_recall')\r\n    end\r\nend\r\n\r\n-- Return \"true\" if another bag in my memory group has any objects out on the table.\r\nfunction anyOtherBagsInMyGroupArePlaced()\r\n    for _, bag in ipairs(getOtherBagsInMyGroup()) do\r\n        local state = bag.call('areAnyOfMyObjectsPlaced')\r\n        if state then return true end\r\n    end\r\n\r\n    return false\r\nend\r\n\r\n-- Return \"true\" if at least one object from this memory bag is out on the table.\r\nfunction areAnyOfMyObjectsPlaced()\r\n    for guid, _ in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then\r\n            return true\r\n        end\r\n    end\r\n    return false\r\nend\r\n\r\nfunction getOtherBagsInMyGroup()\r\n    local bags = {}\r\n    for bagGuid, _ in pairs(GlobalMemoryGroups:getGroup(memoryGroupName:get())) do\r\n        if bagGuid ~= self.getGUID() then\r\n            bag = getObjectFromGUID(bagGuid)\r\n            -- \"bag\" is nill if it has been deleted since the last time onLoad() was called.\r\n            if bag ~= nil then\r\n                table.insert(bags, bag)\r\n            end\r\n        end\r\n    end\r\n    return bags\r\nend\r\n\r\n--[[\r\nThis object provides access to a variable stored on the \"Global script\".\r\nThe variable holds the names & guids of all memory bag groups.\r\nThe global variable is a table and holds data like this:\r\n{\r\n    'My First Group Name' = {\r\n        '805ebd' = {},\r\n        '35cc21' = {},\r\n        'fc8886' = {},\r\n    },\r\n    'My Second Group Name' = {\r\n        'f50264' = {},\r\n        '5f5f63' = {},\r\n    },\r\n}\r\n--]]\r\nGlobalMemoryGroups = { NAME_OF_GLOBAL_VARIABLE = '_GlobalUtilityMemoryBagGroups' }\r\n\r\n-- Call me inside this script's \"onLoad()\" method!\r\nfunction GlobalMemoryGroups:onLoad(myGuid)\r\n    -- Create and initialize the global variable if it doesn't already exist:\r\n    if self:_getGroups() == nil then\r\n        self:_setGroups({})\r\n    end\r\nend\r\n\r\n-- Return the GUIDs of all bags in the \"groupName\". The return value is a dictionary that maps [GUID -> empty table].\r\nfunction GlobalMemoryGroups:getGroup(groupName)\r\n    guids = self:_getGroups()[groupName] or {}\r\n    return guids\r\nend\r\n\r\n-- Registers a bag in a memory group. Creates a new group if one doesn't exist.\r\nfunction GlobalMemoryGroups:registerBagInGroup(groupName, bagGuid)\r\n    if groupName == nil or groupName == \"\" then\r\n        return\r\n    end\r\n\r\n    self:_tryCreateNewGroup(groupName)\r\n    local groups = self:_getGroups()\r\n    groups[groupName][bagGuid] = {}\r\n    self:_setGroups(groups)\r\nend\r\n\r\n-- Removes this bag from the memory group.\r\nfunction GlobalMemoryGroups:unregisterBagInGroup(groupName, bagGuid)\r\n    local groups = self:_getGroups()\r\n    local group = groups[groupName]\r\n    if group ~= nil then\r\n        group[bagGuid] = nil\r\n        self:_setGroups(groups)\r\n    end\r\nend\r\n\r\n-- Return the global variable, which is a table holding all memory group names & guids.\r\nfunction GlobalMemoryGroups:_getGroups()\r\n    return Global.getTable(self.NAME_OF_GLOBAL_VARIABLE)\r\nend\r\n\r\n-- Override the global variable (i.e. the entire table).\r\nfunction GlobalMemoryGroups:_setGroups(newTable)\r\n    Global.setTable(self.NAME_OF_GLOBAL_VARIABLE, newTable)\r\nend\r\n\r\n-- Add a new memory group named \"groupName\" to the global variable, if one doesn't already exist.\r\nfunction GlobalMemoryGroups:_tryCreateNewGroup(groupName)\r\n    local groups = self:_getGroups()\r\n    if groups[groupName] == nil then\r\n        groups[groupName] = {}\r\n        self:_setGroups(groups)\r\n    end\r\nend\r\n\r\n-- This object controls the \"Group Name\" input text field that is part of the bag's ingame UI.\r\ngroupNameInput = {\r\n    greyedOutText     = \"Group Name\",\r\n    widthPerCharacter = 100,\r\n    padding           = 4,\r\n    memoryBag         = self\r\n}\r\nfunction groupNameInput:create(optionalStartingValue)\r\n    local effectiveText = optionalStartingValue or self.greyedOutText\r\n    local width = self:computeWidth(effectiveText)\r\n\r\n    self.memoryBag.createInput({\r\n        label = self.greyedOutText,\r\n        value = optionalStartingValue or nil,\r\n        alignment = 3, -- Center aligned\r\n        input_function = \"groupNameInput_onCharacterTyped\", function_owner = self.memoryBag,\r\n        position = { 2.1, 0.3, 0 }, rotation = { 0, 270, 0 }, width = width, height = 350,\r\n        font_size = 250, color = { 0, 0, 0 }, font_color = { 1, 1, 1 },\r\n    })\r\nend\r\n\r\nfunction groupNameInput:computeWidth(text)\r\n    return (string.len(text) + self.padding) * self.widthPerCharacter\r\nend\r\n\r\nfunction groupNameInput:updatedWidth(text)\r\n    self.memoryBag.editInput({\r\n        index = 0,\r\n        width = self:computeWidth(text)\r\n    })\r\nend\r\n\r\nfunction groupNameInput:onCharacterTyped(text, stillEditing)\r\n    if stillEditing then\r\n        self:updatedWidth(text)\r\n    else\r\n        if text == \"\" then\r\n            self:updatedWidth(self.greyedOutText)\r\n        end\r\n    end\r\nend\r\n\r\nfunction groupNameInput_onCharacterTyped(memoryBag, playerColor, text, stillEditing)\r\n    groupNameInput:onCharacterTyped(text, stillEditing)\r\nend\r\n\r\nfunction groupNameInput:setGroupNameToInputField()\r\n    local inputFields = self.memoryBag.getInputs()\r\n    if inputFields ~= nil then\r\n        -- Get input field 0, which corresponds to the groupNameInput.\r\n        -- Unfortunately \"self.getInputs()\" doesn't return the inputs in a guaranteed order.\r\n        local nameField = nil\r\n        for _, field in ipairs(inputFields) do\r\n            if field.index == 0 then\r\n                nameField = field\r\n            end\r\n        end\r\n\r\n        memoryGroupName:set(nameField.value)\r\n    end\r\nend\r\n\r\nfunction updateSave()\r\n    local data_to_save = { [\"ml\"] = memoryList, [\"groupName\"] = memoryGroupName:get() }\r\n    saved_data = JSON.encode(data_to_save)\r\n    self.script_state = saved_data\r\nend\r\n\r\nfunction combineMemoryFromBagsWithin()\r\n    local bagObjList = self.getObjects()\r\n    for _, bagObj in ipairs(bagObjList) do\r\n        local data = bagObj.lua_script_state\r\n        if data ~= nil then\r\n            local j = JSON.decode(data)\r\n            if j ~= nil and j.ml ~= nil then\r\n                for guid, entry in pairs(j.ml) do\r\n                    memoryList[guid] = entry\r\n                end\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\nfunction updateMemoryWithMoves()\r\n    memoryList = memoryListBackup\r\n    --get the first transposed object's coordinates\r\n    local obj = getObjectFromGUID(moveGuid)\r\n\r\n    -- p1 is where needs to go, p2 is where it was\r\n    local refObjPos = memoryList[moveGuid].pos\r\n    local deltaPos = findOffsetDistance(obj.getPosition(), refObjPos, nil)\r\n    local movedRotation = obj.getRotation()\r\n    for guid, entry in pairs(memoryList) do\r\n        memoryList[guid].pos.x = entry.pos.x - deltaPos.x\r\n        memoryList[guid].pos.y = entry.pos.y - deltaPos.y\r\n        memoryList[guid].pos.z = entry.pos.z - deltaPos.z\r\n    end\r\n    moveList = {}\r\nend\r\n\r\nfunction onload(saved_data)\r\n    GlobalMemoryGroups:onLoad(self.getGUID())\r\n    AllMemoryBagsInScene:add(self.getGUID())\r\n\r\n    fresh = true\r\n    if saved_data ~= \"\" then\r\n        local loaded_data = JSON.decode(saved_data)\r\n        --Set up information off of loaded_data\r\n        memoryList = loaded_data.ml\r\n        memoryGroupName:set(loaded_data.groupName)\r\n    else\r\n        --Set up information for if there is no saved saved data\r\n        memoryList = {}\r\n        memoryGroupName:set(nil)\r\n    end\r\n\r\n    moveList = {}\r\n    moveGuid = nil\r\n\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        fresh = false\r\n        createMemoryActionButtons()\r\n    end\r\nend\r\n\r\n--Beginning Setup\r\n\r\n--Make setup button\r\nfunction createSetupButton()\r\n    self.createButton({\r\n      label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n      position={0,0.3,2}, rotation={0,0,0}, height=350, width=800,\r\n      font_size=250, color={0,0,0}, font_color={1,1,1}\r\n  })\r\nend\r\n\r\n--Triggered by Transpose button\r\nfunction buttonClick_transpose()\r\n    moveGuid = nil\r\n    broadcastToAll(\"Select one object and move it- all objects will move relative to the new location\", { 0.75, 0.75, 1 })\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(true)\r\n    createSetupActionButtons(true)\r\nend\r\n\r\n--Triggered by setup button,\r\nfunction buttonClick_setup()\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(false)\r\n    createSetupActionButtons(false)\r\nend\r\n\r\nfunction getAllObjectsInMemory()\r\n    local objTable = {}\r\n    local curObj = {}\r\n\r\n    for guid in pairs(memoryListBackup) do\r\n        curObj = getObjectFromGUID(guid)\r\n        table.insert(objTable, curObj)\r\n    end\r\n\r\n    return objTable\r\nend\r\n\r\n--Creates selection buttons on objects\r\nfunction createButtonsOnAllObjects(move)\r\n    buttonIndexMap = {}\r\n    local howManyButtons = 0\r\n\r\n    local objsToHaveButtons = {}\r\n    if move == true then\r\n        objsToHaveButtons = getAllObjectsInMemory()\r\n    else\r\n        objsToHaveButtons = getAllObjects()\r\n    end\r\n\r\n    for _, obj in ipairs(objsToHaveButtons) do\r\n        if obj ~= self then\r\n            --On a normal bag, the button positions aren't the same size as the bag.\r\n            globalScaleFactor = 1 * 1 / self.getScale().x\r\n            --Super sweet math to set button positions\r\n            local selfPos = self.getPosition()\r\n            local objPos = obj.getPosition()\r\n            local deltaPos = findOffsetDistance(selfPos, objPos, obj)\r\n            local objPos = rotateLocalCoordinates(deltaPos, self)\r\n            objPos.x = -objPos.x * globalScaleFactor\r\n            objPos.y = objPos.y * globalScaleFactor + 2\r\n            objPos.z = objPos.z * globalScaleFactor\r\n            --Workaround for custom PDFs\r\n            if obj.Book then\r\n                objPos.y = objPos.y + 0.5\r\n            end\r\n            --Offset rotation of bag\r\n            local rot = self.getRotation()\r\n            rot.y = -rot.y + 180\r\n            --Create function\r\n            local funcName = \"selectButton_\" .. howManyButtons\r\n            local func = function() buttonClick_selection(obj, move) end\r\n            local color = { 0.75, 0.25, 0.25, 0.6 }\r\n            local colorMove = { 0, 0, 1, 0.6 }\r\n            if move == true then\r\n                color = colorMove\r\n            end\r\n            self.setVar(funcName, func)\r\n            self.createButton({\r\n                click_function = funcName, function_owner = self,\r\n                position = objPos, rotation = rot, height = 1000, width = 1000,\r\n                color = color,\r\n            })\r\n            buttonIndexMap[obj.getGUID()] = howManyButtons\r\n            howManyButtons = howManyButtons + 1\r\n        end\r\n    end\r\nend\r\n\r\n  --Creates submit and cancel buttons\r\n  function createSetupActionButtons(move)\r\n      self.createButton({\r\n         label=\"Annuler\", click_function=\"buttonClick_cancel\", function_owner=self,\r\n         position={-1.15,0.3,2.1}, rotation={0,0,0}, height=350, width=1100,\r\n         font_size=250, color={0,0,0}, font_color={1,1,1}\r\n      })\r\n\r\n      self.createButton({\r\n        label=\"Valider\", click_function=\"buttonClick_submit\", function_owner=self,\r\n        position={-1.15,0.3,2.8}, rotation={0,0,0}, height=350, width=1100,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n      })\r\n\r\n      if move == false then\r\n        self.createButton({\r\n            label=\"Ajouter\", click_function=\"buttonClick_add\", function_owner=self,\r\n            position={1.15,0.3,2.1}, rotation={0,0,0}, height=350, width=1100,\r\n            font_size=250, color={0,0,0}, font_color={0.25,1,0.25}\r\n          })\r\n\r\n          self.createButton({\r\n              label=\"Sélection\", click_function=\"editDragSelection\", function_owner=self,\r\n              position={-1.15,0.3,3.5}, rotation={0,0,0}, height=350, width=1100,\r\n              font_size=250, color={0,0,0}, font_color={1,1,1}\r\n          })\r\n\r\n          if fresh == false then\r\n              self.createButton({\r\n                  label=\"Mise à Jour\", click_function=\"buttonClick_setNew\", function_owner=self,\r\n                  position={1.15,0.3,3.5}, rotation={0,0,0}, height=350, width=1100,\r\n                  font_size=180, color={0,0,0}, font_color={0.75,0.75,1}\r\n              })\r\n              self.createButton({\r\n                  label=\"Retirer\", click_function=\"buttonClick_remove\", function_owner=self,\r\n                  position={1.15,0.3,2.8}, rotation={0,0,0}, height=350, width=1100,\r\n                  font_size=250, color={0,0,0}, font_color={1,0.25,0.25}\r\n              })\r\n          end\r\n      end\r\n\r\n      self.createButton({\r\n          label=\"Reset\", click_function=\"buttonClick_reset\", function_owner=self,\r\n          position={0,0.3,-2}, rotation={0,0,0}, height=350, width=800,\r\n          font_size=250, color={0,0,0}, font_color={1,1,1}\r\n      })\r\n  end\r\n\r\n\r\n--During Setup\r\n\r\n--Checks or unchecks buttons\r\nfunction buttonClick_selection(obj, move)\r\n    local index = buttonIndexMap[obj.getGUID()]\r\n    local colorMove = { 0, 0, 1, 0.6 }\r\n    local color = { 0, 1, 0, 0.6 }\r\n\r\n    previousGuid = selectedGuid\r\n    selectedGuid = obj.getGUID()\r\n\r\n    theList = memoryList\r\n    if move == true then\r\n        theList = moveList\r\n        if previousGuid ~= nil and previousGuid ~= selectedGuid then\r\n            local prevObj = getObjectFromGUID(previousGuid)\r\n            prevObj.highlightOff()\r\n            self.editButton({ index = previousIndex, color = colorMove })\r\n            theList[previousGuid] = nil\r\n        end\r\n        previousIndex = index\r\n    end\r\n\r\n    if theList[selectedGuid] == nil then\r\n        self.editButton({ index = index, color = color })\r\n        --Adding pos/rot to memory table\r\n        local pos, rot = obj.getPosition(), obj.getRotation()\r\n        --I need to add it like this or it won't save due to indexing issue\r\n        theList[obj.getGUID()] = {\r\n            pos = { x = round(pos.x, 4), y = round(pos.y, 4), z = round(pos.z, 4) },\r\n            rot = { x = round(rot.x, 4), y = round(rot.y, 4), z = round(rot.z, 4) },\r\n            lock = obj.getLock(),\r\n            tint = obj.getColorTint()\r\n        }\r\n        obj.highlightOn({ 0, 1, 0 })\r\n    else\r\n        color = { 0.75, 0.25, 0.25, 0.6 }\r\n        if move == true then\r\n            color = colorMove\r\n        end\r\n        self.editButton({ index = index, color = color })\r\n        theList[obj.getGUID()] = nil\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\nfunction editDragSelection(bagObj, player, remove)\r\n    local selectedObjs = Player[player].getSelectedObjects()\r\n    if not remove then\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            --Ignore if already in the memory list, or does not have a button\r\n            if index and not memoryList[obj.getGUID()] then\r\n                self.editButton({ index = index, color = { 0, 1, 0, 0.6 } })\r\n                --Adding pos/rot to memory table\r\n                local pos, rot = obj.getPosition(), obj.getRotation()\r\n                --I need to add it like this or it won't save due to indexing issue\r\n                memoryList[obj.getGUID()] = {\r\n                    pos = { x = round(pos.x, 4), y = round(pos.y, 4), z = round(pos.z, 4) },\r\n                    rot = { x = round(rot.x, 4), y = round(rot.y, 4), z = round(rot.z, 4) },\r\n                    lock = obj.getLock(),\r\n                    tint = obj.getColorTint()\r\n                }\r\n                obj.highlightOn({ 0, 1, 0 })\r\n            end\r\n        end\r\n    else\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            if index and memoryList[obj.getGUID()] then\r\n                color = { 0.75, 0.25, 0.25, 0.6 }\r\n                self.editButton({ index = index, color = color })\r\n                memoryList[obj.getGUID()] = nil\r\n                obj.highlightOff()\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\n--Cancels selection process\r\nfunction buttonClick_cancel()\r\n    memoryList = memoryListBackup\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        createMemoryActionButtons()\r\n    end\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Sélection annulée\", { 1, 1, 1 })\r\n    moveGuid = nil\r\nend\r\n\r\n--Saves selections\r\nfunction buttonClick_submit()\r\n    fresh = false\r\n    if next(moveList) ~= nil then\r\n        for guid in pairs(moveList) do\r\n            moveGuid = guid\r\n        end\r\n        if memoryListBackup[moveGuid] == nil then\r\n            broadcastToAll(\"Item selected for moving is not already in memory\", { 1, 0.25, 0.25 })\r\n        else\r\n            broadcastToAll(\"Moving all items in memory relative to new objects position!\", { 0.75, 0.75, 1 })\r\n            self.clearButtons()\r\n            self.clearInputs()\r\n            createMemoryActionButtons()\r\n            local count = 0\r\n            for guid in pairs(moveList) do\r\n                moveGuid = guid\r\n                count = count + 1\r\n                local obj = getObjectFromGUID(guid)\r\n                if obj ~= nil then obj.highlightOff() end\r\n            end\r\n            updateMemoryWithMoves()\r\n            updateSave()\r\n            buttonClick_place()\r\n        end\r\n    elseif next(memoryList) == nil and moveGuid == nil then\r\n        memoryList = memoryListBackup\r\n        broadcastToAll(\"No selections made.\", { 0.75, 0.25, 0.25 })\r\n    end\r\n    combineMemoryFromBagsWithin()\r\n    groupNameInput:setGroupNameToInputField()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count .. \" Objects Saved\", { 1, 1, 1 })\r\n    updateSave()\r\n    moveGuid = nil\r\nend\r\n\r\nfunction combineTables(first_table, second_table)\r\n    for k, v in pairs(second_table) do first_table[k] = v end\r\nend\r\n\r\nfunction buttonClick_add()\r\n    fresh = false\r\n    combineTables(memoryList, memoryListBackup)\r\n    broadcastToAll(\"Adding internal bags and selections to existing memory\", { 0.25, 0.75, 0.25 })\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count .. \" Objects Saved\", { 1, 1, 1 })\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_remove()\r\n    broadcastToAll(\"Removing Selected Entries From Memory\", { 1.0, 0.25, 0.25 })\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        memoryListBackup[guid] = nil\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count .. \" Objects Removed\", { 1, 1, 1 })\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_setNew()\r\n    broadcastToAll(\"Setting new position relative to items in memory\", { 0.75, 0.75, 1 })\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        guid = obj.guid\r\n        if memoryListBackup[guid] ~= nil then\r\n            count = count + 1\r\n            memoryListBackup[guid].pos = obj.getPosition()\r\n            memoryListBackup[guid].rot = obj.getRotation()\r\n            memoryListBackup[guid].lock = obj.getLock()\r\n            memoryListBackup[guid].tint = obj.getColorTint()\r\n        end\r\n    end\r\n    broadcastToAll(count .. \" Objects Saved\", { 1, 1, 1 })\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\n--Resets bag to starting status\r\nfunction buttonClick_reset()\r\n    fresh = true\r\n    memoryList = {}\r\n    memoryGroupName:set(nil)\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createSetupButton()\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Tool Reset\", { 1, 1, 1 })\r\n    updateSave()\r\nend\r\n\r\n--After Setup\r\n\r\n--Creates recall and place buttons\r\nfunction createMemoryActionButtons()\r\n    self.createButton({\r\n        label=\"Placer au hasard\", click_function=\"buttonClick_place\", function_owner=self,\r\n        position={0,0.3,2}, rotation={0,0,0}, height=350, width=2000,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Ranger\", click_function=\"buttonClick_recall\", function_owner=self,\r\n        position={0,0.3,2.8}, rotation={0,0,0}, height=350, width=1000,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n        position={2,0.3,0}, rotation={0,90,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    ---    self.createButton({\r\n    ---      label=\"Bouger\", click_function=\"buttonClick_transpose\", function_owner=self,\r\n    ---      position={-2,0.3,0.8}, rotation={0,270,0}, height=350, width=800,\r\n    ---      font_size=250, color={0,0,0}, font_color={0.75,0.75,1}\r\n    ---\r\nend\r\n\r\n--Sends objects from bag/table to their saved position/rotation\r\nfunction buttonClick_place()\r\n    if anyOtherBagsInMyGroupArePlaced() then\r\n        recallOtherBagsInMyGroup()\r\n        Wait.frames(_placeObjects, CONFIG.MEMORY_GROUP.FRAME_DELAY_BEFORE_PLACING_OBJECTS)\r\n    else\r\n        _placeObjects()\r\n    end\r\nend\r\n\r\nfunction _placeObjects()\r\n    local bagObjList = self.getObjects()\r\n\r\n    -- randomize memorylist position\r\n    local positionList = {}\r\n    for guid, entry in pairs(memoryList) do\r\n        table.insert(positionList, memoryList[guid].pos)\r\n    end\r\n\r\n    for i = #positionList, 2, -1 do\r\n        local j = math.random(i)\r\n        positionList[i], positionList[j] = positionList[j], positionList[i]\r\n    end\r\n\r\n    local i = 1\r\n    for guid, entry in pairs(memoryList) do\r\n        memoryList[guid].pos = positionList[i]\r\n        i = i + 1\r\n    end\r\n\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        --If obj is out on the table, move it to the saved pos/rot\r\n        if obj ~= nil then\r\n            obj.setPositionSmooth(entry.pos)\r\n            obj.setRotationSmooth(entry.rot)\r\n            obj.setLock(entry.lock)\r\n            obj.setColorTint(entry.tint)\r\n        else\r\n            --If obj is inside of the bag\r\n            for _, bagObj in ipairs(bagObjList) do\r\n                if bagObj.guid == guid then\r\n                    local item = self.takeObject({\r\n                        guid = guid, position = entry.pos, rotation = entry.rot, smooth = false\r\n                    })\r\n                    item.setLock(entry.lock)\r\n                    item.setColorTint(entry.tint)\r\n                    break\r\n                end\r\n            end\r\n        end\r\n    end\r\n    broadcastToAll(\"Objets placés au hasard\", {1,1,1})\r\nend\r\n\r\n--Recalls objects to bag from table\r\nfunction buttonClick_recall()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then self.putObject(obj) end\r\n    end\r\n    broadcastToAll(\"Objets rangés\", {1,1,1})\r\nend\r\n\r\n--Utility functions\r\n\r\n--Find delta (difference) between 2 x/y/z coordinates\r\nfunction findOffsetDistance(p1, p2, obj)\r\n    local yOffset = 0\r\n    if obj ~= nil then\r\n        local bounds = obj.getBounds()\r\n        yOffset = (bounds.size.y - bounds.offset.y)\r\n    end\r\n    local deltaPos = {}\r\n    deltaPos.x = (p2.x - p1.x)\r\n    deltaPos.y = (p2.y - p1.y) + yOffset\r\n    deltaPos.z = (p2.z - p1.z)\r\n    return deltaPos\r\nend\r\n\r\n--Used to rotate a set of coordinates by an angle\r\nfunction rotateLocalCoordinates(desiredPos, obj)\r\n    local objPos, objRot = obj.getPosition(), obj.getRotation()\r\n    local angle = math.rad(objRot.y)\r\n    local x = desiredPos.x * math.cos(angle) - desiredPos.z * math.sin(angle)\r\n    local z = desiredPos.x * math.sin(angle) + desiredPos.z * math.cos(angle)\r\n    --return {x=objPos.x+x, y=objPos.y+desiredPos.y, z=objPos.z+z}\r\n    return { x = x, y = desiredPos.y, z = z }\r\nend\r\n\r\nfunction rotateMyCoordinates(desiredPos, obj)\r\n    local angle = math.rad(obj.getRotation().y)\r\n    local x = desiredPos.x * math.sin(angle)\r\n    local z = desiredPos.z * math.cos(angle)\r\n    return { x = x, y = desiredPos.y, z = z }\r\nend\r\n\r\n--Coroutine delay, in seconds\r\nfunction wait(time)\r\n    local start = os.time()\r\n    repeat coroutine.yield(0) until os.time() > start + time\r\nend\r\n\r\n--Duplicates a table (needed to prevent it making reference to the same objects)\r\nfunction duplicateTable(oldTable)\r\n    local newTable = {}\r\n    for k, v in pairs(oldTable) do\r\n        newTable[k] = v\r\n    end\r\n    return newTable\r\nend\r\n\r\n--Moves scripted highlight from all objects\r\nfunction removeAllHighlights()\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\n--Round number (num) to the Nth decimal (dec)\r\nfunction round(num, dec)\r\n    local mult = 10 ^ (dec or 0)\r\n    return math.floor(num * mult + 0.5) / mult\r\nend\r\n\r\n--[[ This object provides access to a variable stored on the \"Global script\".\r\nThe variable holds the GUIDs for every Utility Memory Bag in the scene.\r\nExample: {'805ebd', '35cc21', 'fc8886', 'f50264', '5f5f63'} --]]\r\nAllMemoryBagsInScene = {\r\n    NAME_OF_GLOBAL_VARIABLE = \"_UtilityMemoryBag_AllMemoryBagsInScene\"\r\n}\r\n\r\nfunction AllMemoryBagsInScene:add(guid)\r\n    local guids = Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\n    table.insert(guids, guid)\r\n    Global.setTable(self.NAME_OF_GLOBAL_VARIABLE, guids)\r\nend\r\n\r\nfunction AllMemoryBagsInScene:getGuidList()\r\n    return Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\nend\r\n","LuaScriptState":"{\"ml\":{\"497aa9\":{\"lock\":false,\"pos\":{\"x\":-19.9999732971191,\"y\":1.77885520458221,\"z\":26.0000305175781},\"rot\":{\"x\":-5.08979246660601E-06,\"y\":178.862152099609,\"z\":2.24386809577481E-07},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"7e39d0\":{\"lock\":false,\"pos\":{\"x\":14.9532041549683,\"y\":1.52007722854614,\"z\":23.5901031494141},\"rot\":{\"x\":0.0108902426436543,\"y\":180.014831542969,\"z\":0.00495097553357482},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}}}}","XmlUI":"","ContainedObjects":[{"GUID":"497aa9","Name":"Card","Transform":{"posX":14.9532051,"posY":1.52007723,"posZ":23.5901012,"rotX":0.0109876757,"rotY":178.862152,"rotZ":0.00473099574,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Bal du Diable","Description":"Dunwich.","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02252\",\n  \"locationBack\": {\n    \"connections\": \"Square|Plus\",\n    \"icons\": \"Hourglass\",\n    \"uses\": {\n      \"count\": 2,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    }\n  },\n  \"locationFront\": {\n    \"connections\": \"Square|Plus\",\n    \"icons\": \"Hourglass\"\n  },\n  \"traits\": \"Dunwich.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":117315,"SidewaysCard":false,"CustomDeck":{"1173":{"FaceURL":"https://i.imgur.com/0FRbPFZ.jpg","BackURL":"https://i.imgur.com/z0qG3Pt.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"7e39d0","Name":"Card","Transform":{"posX":-19.99997,"posY":1.7789042,"posZ":26.0000381,"rotX":-0.00000490916455,"rotY":180.014832,"rotZ":-1.307759e-7,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Bal du Diable","Description":"Dunwich.","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02253\",\n  \"locationBack\": {\n    \"connections\": \"Square|Plus\",\n    \"icons\": \"Hourglass\",\n    \"uses\": {\n      \"countPerInvestigator\": 1,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    }\n  },\n  \"locationFront\": {\n    \"connections\": \"Square|Plus\",\n    \"icons\": \"Hourglass\"\n  },\n  \"traits\": \"Dunwich.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":117316,"SidewaysCard":false,"CustomDeck":{"1173":{"FaceURL":"https://i.imgur.com/0FRbPFZ.jpg","BackURL":"https://i.imgur.com/z0qG3Pt.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""}]}],"AttachedDecals":[{"Transform":{"posX":-0.0021877822,"posY":-0.08963572,"posZ":-0.00288731651,"rotX":270,"rotY":359.869568,"rotZ":0,"scaleX":2.00000215,"scaleY":2.00000238,"scaleZ":2.00000262},"CustomDecal":{"Name":"dunwich_back","ImageURL":"http://cloud-3.steamusercontent.com/ugc/959719855119695911/931B9829687A20F4DEADB36DA57B7E6D76792231/","Size":7.4}}]},{"GUID":"781bc3","Name":"Custom_Tile","Transform":{"posX":3.00001,"posY":1.501975,"posZ":-5.49983454,"rotX":0.0108903367,"rotY":180.013245,"rotZ":0.00495109428,"scaleX":1.6428808,"scaleY":1,"scaleZ":1.6428808},"Nickname":"Mise en place du Chaos Bag","Description":"L'Héritage de Dunwich","GMNotes":"{\"data\":\"The Dunwich Legacy\",\"easy\":true,\"expert\":true,\"hard\":true,\"normal\":true,\"standalone\":false}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.8745098,"g":0.8,"b":0.7019608},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"http://cloud-3.steamusercontent.com/ugc/2011456161884106028/81BF2DAD34FE18B6788B56E21F16B81E6525AD99/","ImageSecondaryURL":"http://cloud-3.steamusercontent.com/ugc/2011456161884106028/81BF2DAD34FE18B6788B56E21F16B81E6525AD99/","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"\r\njacqueline_guid = '42cd6e'\r\n\r\nbuttonparams = {\r\n   ['easy'] = {label = \"Facile\", click_function = 'modeEasy', z_i = -0.2},\r\n   ['normal'] = {label = \"Standard\", click_function = 'modeNormal', z_i = 0.1},\r\n   ['hard'] = {label = \"Difficile\", click_function = 'modeHard', z_i = 0.4},\r\n   ['expert'] = {label = \"Expert\", click_function = 'modeExpert', z_i = 0.7},\r\n   ['standalone'] = {label = \"Indépendant\", click_function = 'modeStandalone', z_i = 0},\r\n}\r\n\r\nfunction onLoad()\r\n\r\n    metadata = JSON.decode(self.getGMNotes())\r\n    buttontable = {}\r\n    for key, value in pairs(buttonparams) do\r\n        if metadata[key] == true then\r\n            table.insert(buttontable,value)\r\n        end\r\n        \r\n    end\r\n\r\n    for _, button in pairs(buttontable) do\r\n        local data = {\r\n            click_function = button.click_function, \r\n            function_owner = self, \r\n            label = button.label, \r\n            position = {0, 0.1, button.z_i}, \r\n            scale = {0.3, 0.5, 0.3}, \r\n            width = 1500, \r\n            height = 400, \r\n            font_size = 250, \r\n            tooltip = \"Chaos bag du mode \"..button.label,\r\n            color = {0.5647, 0.4627, 0.2353, 1}, \r\n            font_color = {0.9041, 0.8313, 0.7356, 1},\r\n            hover_color = {99/255, 85/255, 48/255},\r\n            press_color = {192/255, 152/255, 94/255} }\r\n        self.createButton(data)\r\n        \r\n    end\r\n    jacqueline = getObjectFromGUID(jacqueline_guid)\r\n    chaosdata = jacqueline.getTable('chaosdata')\r\nend\r\n\r\nfunction modeEasy()\r\n    local  params ={}\r\n     params.mode = 'easy'\r\n     params.data = metadata.data\r\n     jacqueline.call('setChaosBag', params)\r\n  \r\nend\r\n\r\nfunction modeNormal()\r\n      local  params ={}\r\n       params.mode = 'normal'\r\n       params.data = metadata.data\r\n       jacqueline.call('setChaosBag', params)\r\n    \r\nend\r\n\r\nfunction modeHard()\r\n    local  params ={}\r\n     params.mode = 'hard'\r\n     params.data = metadata.data\r\n     jacqueline.call('setChaosBag', params)\r\n  \r\nend\r\n\r\nfunction modeExpert()\r\n    local  params ={}\r\n     params.mode = 'expert'\r\n     params.data = metadata.data\r\n     jacqueline.call('setChaosBag', params)\r\n  \r\nend\r\n\r\nfunction modeStandalone()\r\n    local  params ={}\r\n     params.mode = 'standalone'\r\n     params.data = metadata.data\r\n     jacqueline.call('setChaosBag', params)\r\n  \r\nend","LuaScriptState":"","XmlUI":""},{"GUID":"7911d4","Name":"Custom_PDF","Transform":{"posX":-18.5,"posY":1.47986,"posZ":-4.9973,"rotX":3.3955564e-7,"rotY":180.0081,"rotZ":9.03490758e-8,"scaleX":2.05722,"scaleY":1,"scaleZ":2.05722},"Nickname":"L'héritage de Dunwich","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":1,"g":1,"b":1},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomPDF":{"PDFUrl":"http://cloud-3.steamusercontent.com/ugc/1936013662297838134/7B252BBBADFB0EC739FD3A88383BD62887F4122B/","PDFPassword":"","PDFPage":0,"PDFPageOffset":0},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"8e5d21","Name":"Custom_Model_Bag","Transform":{"posX":-1.00019836,"posY":0.979997456,"posZ":45.0001,"rotX":-0.00000510214841,"rotY":180.02507,"rotZ":4.785258e-7,"scaleX":1.20052135,"scaleY":0.249882281,"scaleZ":1.3145982},"Nickname":"II : Le Musée Miskatonic","Description":"Renouveau : L'Héritage de Dunwich","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":1,"g":1,"b":1},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"MaterialIndex":-1,"MeshIndex":-1,"CustomMesh":{"MeshURL":"https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/advboxes/tuckbox_h_MSH.obj","DiffuseURL":"http://cloud-3.steamusercontent.com/ugc/829135118403751490/58E295C1174102527E7C307F19B0DBBB8431B750/","NormalURL":"","ColliderURL":"","Convex":true,"MaterialIndex":3,"TypeIndex":6,"CustomShader":{"SpecularColor":{"r":1,"g":1,"b":1},"SpecularIntensity":0,"SpecularSharpness":2,"FresnelStrength":0},"CastShadows":true},"Bag":{"Order":0},"LuaScript":"-- Utility memory bag by Directsun\r\n-- Version 2.7.0\r\n-- Fork of Memory Bag 2.0 by MrStump\r\n--\r\n-- Want to contribute? Create an issue or fork the code on GitHub and submit a pull request:\r\n-- https://github.com/sunflowermans/TTS-UtilityMemoryBag\r\n\r\n\r\nfunction updateSave()\r\n    local data_to_save = {[\"ml\"]=memoryList}\r\n    saved_data = JSON.encode(data_to_save)\r\n    self.script_state = saved_data\r\nend\r\n\r\nfunction combineMemoryFromBagsWithin()\r\n    local bagObjList = self.getObjects()\r\n    for _, bagObj in ipairs(bagObjList) do\r\n        local data = bagObj.lua_script_state\r\n        if data ~= nil then\r\n            local j = JSON.decode(data)\r\n            if j ~= nil and j.ml ~= nil then\r\n                for guid, entry in pairs(j.ml) do\r\n                    memoryList[guid] = entry\r\n                end\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\nfunction updateMemoryWithMoves()\r\n    memoryList = memoryListBackup\r\n    --get the first transposed object's coordinates\r\n    local obj = getObjectFromGUID(moveGuid)\r\n\r\n    -- p1 is where needs to go, p2 is where it was\r\n    local refObjPos = memoryList[moveGuid].pos\r\n    local deltaPos = findOffsetDistance(obj.getPosition(), refObjPos, nil)\r\n    local movedRotation = obj.getRotation()\r\n    for guid, entry in pairs(memoryList) do\r\n        memoryList[guid].pos.x = entry.pos.x - deltaPos.x\r\n        memoryList[guid].pos.y = entry.pos.y - deltaPos.y\r\n        memoryList[guid].pos.z = entry.pos.z - deltaPos.z\r\n        -- memoryList[guid].rot.x = movedRotation.x\r\n        -- memoryList[guid].rot.y = movedRotation.y\r\n        -- memoryList[guid].rot.z = movedRotation.z\r\n    end\r\n\r\n    --theList[obj.getGUID()] = {\r\n    --    pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n    --    rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n    --    lock=obj.getLock()\r\n    --}\r\n    moveList = {}\r\nend\r\n\r\nfunction onload(saved_data)\r\n\r\n    fresh = true\r\n    if saved_data ~= \"\" then\r\n        local loaded_data = JSON.decode(saved_data)\r\n        --Set up information off of loaded_data\r\n        memoryList = loaded_data.ml\r\n    else\r\n        --Set up information for if there is no saved saved data\r\n        memoryList = {}\r\n\r\n    end\r\n\r\n    moveList = {}\r\n    moveGuid = nil\r\n\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        fresh = false\r\n        createMemoryActionButtons()\r\n    end\r\nend\r\n\r\n\r\n--Beginning Setup\r\n\r\n\r\n--Make setup button\r\n function createSetupButton()\r\n    self.createButton({\r\n      label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n      position={0,0.1,-2.1}, rotation={0,0,0}, height=275, width=625,\r\n      font_size=150, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n end\r\n\r\n--Triggered by Transpose button\r\nfunction buttonClick_transpose()\r\n    moveGuid = nil\r\n    broadcastToAll(\"Select one object and move it- all objects will move relative to the new location\", {0.75, 0.75, 1})\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(true)\r\n    createSetupActionButtons(true)\r\nend\r\n\r\n--Triggered by setup button,\r\nfunction buttonClick_setup()\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(false)\r\n    createSetupActionButtons(false)\r\nend\r\n\r\nfunction getAllObjectsInMemory()\r\n    local objTable = {}\r\n    local curObj = {}\r\n\r\n    for guid in pairs(memoryListBackup) do\r\n        curObj = getObjectFromGUID(guid)\r\n        table.insert(objTable, curObj)\r\n    end\r\n\r\n    return objTable\r\n    -- return getAllObjects()\r\nend\r\n\r\n--Creates selection buttons on objects\r\nfunction createButtonsOnAllObjects(move)\r\n    buttonIndexMap = {}\r\n    local howManyButtons = 0\r\n\r\n    local objsToHaveButtons = {}\r\n    if move == true then\r\n        objsToHaveButtons = getAllObjectsInMemory()\r\n    else\r\n        objsToHaveButtons = getAllObjects()\r\n    end\r\n\r\n    for _, obj in ipairs(objsToHaveButtons) do\r\n        if obj ~= self then\r\n            --On a normal bag, the button positions aren't the same size as the bag.\r\n            globalScaleFactor = 1* 1/self.getScale().x\r\n            --Super sweet math to set button positions\r\n            local selfPos = self.getPosition()\r\n            local objPos = obj.getPosition()\r\n            local deltaPos = findOffsetDistance(selfPos, objPos, obj)\r\n            local objPos = rotateLocalCoordinates(deltaPos, self)\r\n            objPos.x = -objPos.x * globalScaleFactor\r\n            objPos.y = objPos.y * globalScaleFactor + 2\r\n            objPos.z = objPos.z * globalScaleFactor * 0.9\r\n            --Workaround for custom PDFs\r\n            if obj.Book then\r\n                objPos.y = objPos.y + 0.5\r\n            end\r\n            --Offset rotation of bag\r\n            local rot = self.getRotation()\r\n            rot.y = -rot.y + 180\r\n            --Create function\r\n            local funcName = \"selectButton_\" .. howManyButtons\r\n            local func = function() buttonClick_selection(obj, move) end\r\n            local color = {0.75,0.25,0.25,0.6}\r\n            local colorMove = {0,0,1,0.6}\r\n            if move == true then\r\n                color = colorMove\r\n            end\r\n            self.setVar(funcName, func)\r\n            self.createButton({\r\n                click_function=funcName, function_owner=self,\r\n                position=objPos, rotation=rot, height=500, width=500,\r\n                color=color,\r\n            })\r\n            buttonIndexMap[obj.getGUID()] = howManyButtons\r\n            howManyButtons = howManyButtons + 1\r\n        end\r\n    end\r\nend\r\n\r\n--Creates submit and cancel buttons\r\nfunction createSetupActionButtons(move)\r\n    self.createButton({\r\n        label=\"Annuler\", click_function=\"buttonClick_cancel\", function_owner=self,\r\n      position={-0.7,0.1,2.1}, rotation={0,0,0}, height=275, width=625,\r\n      font_size=145, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n\r\n    self.createButton({\r\n        label=\"Valider\", click_function=\"buttonClick_submit\", function_owner=self,\r\n        position={-0.7,0.3,2.6}, rotation={0,0,0}, height=275, width=625,\r\n        font_size=140, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n\r\n    if move == false then\r\n      self.createButton({\r\n          label=\"Ajouter\", click_function=\"buttonClick_add\", function_owner=self,\r\n          position={0.7,0.3,2.1}, rotation={0,0,0}, height=275, width=625,\r\n          font_size=140, color={0,0,0}, font_color={0.25,1,0.25}\r\n      })\r\n\r\n        self.createButton({\r\n            label=\"Sélection\", click_function=\"editDragSelection\", function_owner=self,\r\n            position={-0.7,0.3,3.1}, rotation={0,0,0}, height=275, width=625,\r\n            font_size=125, color={0,0,0}, font_color={1,1,1}\r\n        })\r\n\r\n        if fresh == false then\r\n                self.createButton({\r\n                    label=\"Mise à jour\", click_function=\"buttonClick_setNew\", function_owner=self,\r\n                    position={0.7,0.3,3.1}, rotation={0,0,0}, height=275, width=625,\r\n                    font_size=105, color={0,0,0}, font_color={0.75,0.75,1}\r\n                })\r\n                self.createButton({\r\n                    label=\"Retirer\", click_function=\"buttonClick_remove\", function_owner=self,\r\n                    position={0.7,0.3,2.6}, rotation={0,0,0}, height=275, width=625,\r\n                    font_size=140, color={0,0,0}, font_color={1,0.25,0.25}\r\n                })\r\n            end\r\n        end\r\n\r\n        self.createButton({\r\n            label=\"Reset\", click_function=\"buttonClick_reset\", function_owner=self,\r\n            position={0,0.3,-2.1}, rotation={0,0,0}, height=275, width=625,\r\n            font_size=165, color={0,0,0}, font_color={1,1,1}\r\n        })\r\n    end\r\n\r\n\r\n--During Setup\r\n\r\n\r\n--Checks or unchecks buttons\r\nfunction buttonClick_selection(obj, move)\r\n    local index = buttonIndexMap[obj.getGUID()]\r\n    local colorMove = {0,0,1,0.6}\r\n    local color = {0,1,0,0.6}\r\n\r\n    previousGuid = selectedGuid\r\n    selectedGuid = obj.getGUID()\r\n\r\n    theList = memoryList\r\n    if move == true then\r\n        theList = moveList\r\n        if previousGuid ~= nil and previousGuid ~= selectedGuid then\r\n            local prevObj = getObjectFromGUID(previousGuid)\r\n            prevObj.highlightOff()\r\n            self.editButton({index=previousIndex, color=colorMove})\r\n            theList[previousGuid] = nil\r\n        end\r\n        previousIndex = index\r\n    end\r\n\r\n    if theList[selectedGuid] == nil then\r\n        self.editButton({index=index, color=color})\r\n        --Adding pos/rot to memory table\r\n        local pos, rot = obj.getPosition(), obj.getRotation()\r\n        --I need to add it like this or it won't save due to indexing issue\r\n        theList[obj.getGUID()] = {\r\n            pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n            rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n            lock=obj.getLock(),\r\n            tint=obj.getColorTint()\r\n        }\r\n        obj.highlightOn({0,1,0})\r\n    else\r\n        color = {0.75,0.25,0.25,0.6}\r\n        if move == true then\r\n            color = colorMove\r\n        end\r\n        self.editButton({index=index, color=color})\r\n        theList[obj.getGUID()] = nil\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\nfunction editDragSelection(bagObj, player, remove)\r\n    local selectedObjs = Player[player].getSelectedObjects()\r\n    if not remove then\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            --Ignore if already in the memory list, or does not have a button\r\n            if index and not memoryList[obj.getGUID()] then\r\n                self.editButton({index=index, color={0,1,0,0.6}})\r\n                --Adding pos/rot to memory table\r\n                local pos, rot = obj.getPosition(), obj.getRotation()\r\n                --I need to add it like this or it won't save due to indexing issue\r\n                memoryList[obj.getGUID()] = {\r\n                    pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n                    rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n                    lock=obj.getLock(),\r\n                    tint=obj.getColorTint()\r\n                }\r\n                obj.highlightOn({0,1,0})\r\n            end\r\n        end\r\n    else\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            if index and memoryList[obj.getGUID()] then\r\n                color = {0.75,0.25,0.25,0.6}\r\n                self.editButton({index=index, color=color})\r\n                memoryList[obj.getGUID()] = nil\r\n                obj.highlightOff()\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\n--Cancels selection process\r\nfunction buttonClick_cancel()\r\n    memoryList = memoryListBackup\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        createMemoryActionButtons()\r\n    end\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Sélection annulée\", {1,1,1})\r\n    moveGuid = nil\r\nend\r\n\r\n--Saves selections\r\nfunction buttonClick_submit()\r\n    fresh = false\r\n    if next(moveList) ~= nil then\r\n        for guid in pairs(moveList) do\r\n            moveGuid = guid\r\n        end\r\n        if memoryListBackup[moveGuid] == nil then\r\n            broadcastToAll(\"Item selected for moving is not already in memory\", {1, 0.25, 0.25})\r\n        else\r\n            broadcastToAll(\"Moving all items in memory relative to new objects position!\", {0.75, 0.75, 1})\r\n            self.clearButtons()\r\n            self.clearInputs()\r\n            createMemoryActionButtons()\r\n            local count = 0\r\n            for guid in pairs(moveList) do\r\n                moveGuid = guid\r\n                count = count + 1\r\n                local obj = getObjectFromGUID(guid)\r\n                if obj ~= nil then obj.highlightOff() end\r\n            end\r\n            updateMemoryWithMoves()\r\n            updateSave()\r\n            buttonClick_place()\r\n        end\r\n    elseif next(memoryList) == nil and moveGuid == nil then\r\n        memoryList = memoryListBackup\r\n        broadcastToAll(\"No selections made.\", {0.75, 0.25, 0.25})\r\n    end\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    updateSave()\r\n    moveGuid = nil\r\nend\r\n\r\nfunction combineTables(first_table, second_table)\r\n    for k,v in pairs(second_table) do first_table[k] = v end\r\nend\r\n\r\nfunction buttonClick_add()\r\n    fresh = false\r\n    combineTables(memoryList, memoryListBackup)\r\n    broadcastToAll(\"Adding internal bags and selections to existing memory\", {0.25, 0.75, 0.25})\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_remove()\r\n    broadcastToAll(\"Removing Selected Entries From Memory\", {1.0, 0.25, 0.25})\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        memoryListBackup[guid] = nil\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Removed\", {1,1,1})\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_setNew()\r\n    broadcastToAll(\"Setting new position relative to items in memory\", {0.75, 0.75, 1})\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        guid = obj.guid\r\n        if memoryListBackup[guid] ~= nil then\r\n            count = count + 1\r\n            memoryListBackup[guid].pos = obj.getPosition()\r\n            memoryListBackup[guid].rot = obj.getRotation()\r\n            memoryListBackup[guid].lock = obj.getLock()\r\n            memoryListBackup[guid].tint = obj.getColorTint()\r\n        end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\n--Resets bag to starting status\r\nfunction buttonClick_reset()\r\n    fresh = true\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createSetupButton()\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Tool Reset\", {1,1,1})\r\n    updateSave()\r\nend\r\n\r\n\r\n--After Setup\r\n\r\n\r\n--Creates recall and place buttons\r\nfunction createMemoryActionButtons()\r\n    self.createButton({\r\n        label=\"Placer\", click_function=\"buttonClick_place\", function_owner=self,\r\n        position={0.7,0.1,2.2}, rotation={0,0,0}, height=275, width=625,\r\n        font_size=150, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Ranger\", click_function=\"buttonClick_recall\", function_owner=self,\r\n        position={-0.7,0.1,2.2}, rotation={0,0,0}, height=275, width=625,\r\n        font_size=150, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n        position={0,0.1,-2.2}, rotation={0,0,0}, height=275, width=625,\r\n        font_size=150, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    ---    self.createButton({\r\n    ---      label=\"Bouger\", click_function=\"buttonClick_transpose\", function_owner=self,\r\n    ---      position={-2,0.3,0.8}, rotation={0,270,0}, height=350, width=800,\r\n    ---      font_size=250, color={0,0,0}, font_color={0.75,0.75,1}\r\n    ---\r\nend\r\n\r\n--Sends objects from bag/table to their saved position/rotation\r\nfunction buttonClick_place()\r\n    local bagObjList = self.getObjects()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        --If obj is out on the table, move it to the saved pos/rot\r\n        if obj ~= nil then\r\n            obj.setPositionSmooth(entry.pos)\r\n            obj.setRotationSmooth(entry.rot)\r\n            obj.setLock(entry.lock)\r\n            obj.setColorTint(entry.tint)\r\n        else\r\n            --If obj is inside of the bag\r\n            for _, bagObj in ipairs(bagObjList) do\r\n                if bagObj.guid == guid then\r\n                    local item = self.takeObject({\r\n                        guid=guid, position=entry.pos, rotation=entry.rot, smooth=false\r\n                    })\r\n                    item.setLock(entry.lock)\r\n                    item.setColorTint(entry.tint)\r\n                    break\r\n                end\r\n            end\r\n        end\r\n    end\r\n    broadcastToAll(\"Objets placés\", {1,1,1})\r\nend\r\n\r\n--Recalls objects to bag from table\r\nfunction buttonClick_recall()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then self.putObject(obj) end\r\n    end\r\n    broadcastToAll(\"Objets rangés\", {1,1,1})\r\nend\r\n\r\n\r\n--Utility functions\r\n\r\n\r\n--Find delta (difference) between 2 x/y/z coordinates\r\nfunction findOffsetDistance(p1, p2, obj)\r\n    local yOffset = 0\r\n    if obj ~= nil then\r\n        local bounds = obj.getBounds()\r\n        yOffset = (bounds.size.y - bounds.offset.y)\r\n    end\r\n    local deltaPos = {}\r\n    deltaPos.x = (p2.x-p1.x)\r\n    deltaPos.y = (p2.y-p1.y) + yOffset\r\n    deltaPos.z = (p2.z-p1.z)\r\n    return deltaPos\r\nend\r\n\r\n--Used to rotate a set of coordinates by an angle\r\nfunction rotateLocalCoordinates(desiredPos, obj)\r\n    local objPos, objRot = obj.getPosition(), obj.getRotation()\r\n    local angle = math.rad(objRot.y)\r\n    local x = desiredPos.x * math.cos(angle) - desiredPos.z * math.sin(angle)\r\n    local z = desiredPos.x * math.sin(angle) + desiredPos.z * math.cos(angle)\r\n    --return {x=objPos.x+x, y=objPos.y+desiredPos.y, z=objPos.z+z}\r\n    return {x=x, y=desiredPos.y, z=z}\r\nend\r\n\r\nfunction rotateMyCoordinates(desiredPos, obj)\r\n    local angle = math.rad(obj.getRotation().y)\r\n    local x = desiredPos.x * math.sin(angle)\r\n    local z = desiredPos.z * math.cos(angle)\r\n    return {x=x, y=desiredPos.y, z=z}\r\nend\r\n\r\n--Coroutine delay, in seconds\r\nfunction wait(time)\r\n    local start = os.time()\r\n    repeat coroutine.yield(0) until os.time() > start + time\r\nend\r\n\r\n--Duplicates a table (needed to prevent it making reference to the same objects)\r\nfunction duplicateTable(oldTable)\r\n    local newTable = {}\r\n    for k, v in pairs(oldTable) do\r\n        newTable[k] = v\r\n    end\r\n    return newTable\r\nend\r\n\r\n--Moves scripted highlight from all objects\r\nfunction removeAllHighlights()\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\n--Round number (num) to the Nth decimal (dec)\r\nfunction round(num, dec)\r\n    local mult = 10^(dec or 0)\r\n    return math.floor(num * mult + 0.5) / mult\r\nend\r\n\r\n\r\n--[[\r\nThis object provides access to a variable stored on the \"Global script\".\r\nThe variable holds the GUIDs for every Utility Memory Bag in the scene.\r\nExample:\r\n{'805ebd', '35cc21', 'fc8886', 'f50264', '5f5f63'}\r\n--]]\r\nAllMemoryBagsInScene = {\r\n    NAME_OF_GLOBAL_VARIABLE = \"_UtilityMemoryBag_AllMemoryBagsInScene\"\r\n}\r\n\r\nfunction AllMemoryBagsInScene:add(guid)\r\n    local guids = Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\n    table.insert(guids, guid)\r\n    Global.setTable(self.NAME_OF_GLOBAL_VARIABLE, guids)\r\nend\r\n\r\nfunction AllMemoryBagsInScene:getGuidList()\r\n    return Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\nend\r\n","LuaScriptState":"{\"ml\":{\"018503\":{\"lock\":true,\"pos\":{\"x\":-3.5001060962677,\"y\":1.52108347415924,\"z\":20.5},\"rot\":{\"x\":0.0108913984149694,\"y\":180.002258300781,\"z\":0.00494861882179976},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"044e47\":{\"lock\":false,\"pos\":{\"x\":-25.4400043487549,\"y\":1.7662992477417,\"z\":11.3305978775024},\"rot\":{\"x\":5.6401731853839E-05,\"y\":359.951690673828,\"z\":-0.000210393161978573},\"tint\":{\"a\":0,\"b\":0,\"g\":0,\"r\":0}},\"06541a\":{\"lock\":false,\"pos\":{\"x\":30.4999008178711,\"y\":1.74838888645172,\"z\":-3.00009989738464},\"rot\":{\"x\":-0.000591205607634038,\"y\":180,\"z\":180.001068115234},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"0b9474\":{\"lock\":false,\"pos\":{\"x\":22.3267,\"y\":1.5139,\"z\":-5.4948},\"rot\":{\"x\":0.0109,\"y\":179.996,\"z\":0.0049},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"102945\":{\"lock\":false,\"pos\":{\"x\":6.5,\"y\":1.50671017169952,\"z\":21.0000019073486},\"rot\":{\"x\":359.993041992188,\"y\":30.0264205932617,\"z\":359.990264892578},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"16c9c9\":{\"lock\":false,\"pos\":{\"x\":4,\"y\":1.51796448230743,\"z\":7.5},\"rot\":{\"x\":0.0108915930613875,\"y\":179.999359130859,\"z\":0.00494812522083521},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"1ea2c4\":{\"lock\":false,\"pos\":{\"x\":0.499998956918716,\"y\":1.50665807723999,\"z\":18},\"rot\":{\"x\":0.00973002705723047,\"y\":119.991218566895,\"z\":359.993041992188},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"2efca1\":{\"lock\":true,\"pos\":{\"x\":12,\"y\":1.51822412014008,\"z\":12.5},\"rot\":{\"x\":0.010891254991293,\"y\":180.003021240234,\"z\":0.00494878832250834},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"3bcad3\":{\"lock\":false,\"pos\":{\"x\":7.5,\"y\":1.50529313087463,\"z\":14},\"rot\":{\"x\":0.0112004177644849,\"y\":135,\"z\":-0.00420432770624757},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"4763ba\":{\"lock\":false,\"pos\":{\"x\":-21.5003185272217,\"y\":1.77890622615814,\"z\":3.49957418441772},\"rot\":{\"x\":-5.1323390835023E-06,\"y\":180.00309753418,\"z\":3.44796013962423E-08},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"4fcd01\":{\"lock\":false,\"pos\":{\"x\":7.5,\"y\":1.50605356693268,\"z\":18},\"rot\":{\"x\":-0.00115730438847095,\"y\":60.0178985595703,\"z\":359.988098144531},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"555443\":{\"lock\":false,\"pos\":{\"x\":12.5,\"y\":1.53643202781677,\"z\":-5.99991130828857},\"rot\":{\"x\":0.00495052896440029,\"y\":90.0127639770508,\"z\":359.989105224609},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"5559ff\":{\"lock\":false,\"pos\":{\"x\":7.5,\"y\":1.50462782382965,\"z\":10.5},\"rot\":{\"x\":0.0111995758488774,\"y\":134.988296508789,\"z\":-0.00420674402266741},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"5ae079\":{\"lock\":false,\"pos\":{\"x\":-20.50830078125,\"y\":1.83530068397522,\"z\":10.0028991699219},\"rot\":{\"x\":-5.16031741426559E-06,\"y\":179.961669921875,\"z\":2.72541058166098E-07},\"tint\":{\"a\":1,\"b\":0,\"g\":0,\"r\":0.614982545375824}},\"618c13\":{\"lock\":false,\"pos\":{\"x\":-28.5007419586182,\"y\":1.77890622615814,\"z\":3.49925327301025},\"rot\":{\"x\":-5.09596111442079E-06,\"y\":180.003005981445,\"z\":1.48447938386198E-07},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"61f6d6\":{\"lock\":true,\"pos\":{\"x\":-3.50000023841858,\"y\":1.51956272125244,\"z\":12.5},\"rot\":{\"x\":0.0108915297314525,\"y\":179.999786376953,\"z\":0.00494818342849612},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"63c116\":{\"lock\":false,\"pos\":{\"x\":12,\"y\":1.5051896572113,\"z\":15.5},\"rot\":{\"x\":0.0108898831531405,\"y\":180.020462036133,\"z\":0.00495654251426458},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"6d1b1c\":{\"lock\":false,\"pos\":{\"x\":25,\"y\":1.51367974281311,\"z\":-5.50000238418579},\"rot\":{\"x\":0.0108925411477685,\"y\":179.988876342773,\"z\":180.004943847656},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"7234af\":{\"lock\":false,\"pos\":{\"x\":4,\"y\":1.5051201581955,\"z\":11.5},\"rot\":{\"x\":0.0108916200697422,\"y\":180,\"z\":0.00495174620300531},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"759a42\":{\"lock\":false,\"pos\":{\"x\":8.5,\"y\":1.50644242763519,\"z\":20.5},\"rot\":{\"x\":0.00420311978086829,\"y\":224.999893188477,\"z\":0.0112039614468813},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"84b664\":{\"lock\":false,\"pos\":{\"x\":-32.1550064086914,\"y\":1.76630067825317,\"z\":11.3665933609009},\"rot\":{\"x\":4.90481670567533E-06,\"y\":0.0369329378008842,\"z\":1.30453328139879E-08},\"tint\":{\"a\":0,\"b\":0,\"g\":0,\"r\":0}},\"8a388a\":{\"lock\":false,\"pos\":{\"x\":-32.001163482666,\"y\":1.77890622615814,\"z\":3.49894285202026},\"rot\":{\"x\":-5.03597175338655E-06,\"y\":180.004867553711,\"z\":-1.09583190521789E-07},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"8d37ad\":{\"lock\":false,\"pos\":{\"x\":-25,\"y\":1.8353,\"z\":3.5},\"rot\":{\"x\":0,\"y\":179.9848,\"z\":0},\"tint\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1}},\"8f51ad\":{\"lock\":false,\"pos\":{\"x\":-30.5002288818359,\"y\":1.81511569023132,\"z\":8.99986457824707},\"rot\":{\"x\":-5.11924008606002E-06,\"y\":180.002593994141,\"z\":1.55446784333435E-07},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"94d30e\":{\"lock\":true,\"pos\":{\"x\":8,\"y\":1.52094566822052,\"z\":25},\"rot\":{\"x\":0.0108915884047747,\"y\":179.999633789063,\"z\":0.00494820345193148},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"966926\":{\"lock\":false,\"pos\":{\"x\":0.499999672174454,\"y\":1.50589776039124,\"z\":14},\"rot\":{\"x\":-0.00420422805473208,\"y\":44.9944801330566,\"z\":359.988800048828},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"9c34eb\":{\"lock\":false,\"pos\":{\"x\":17.5000019073486,\"y\":1.54081428050995,\"z\":-5.99980115890503},\"rot\":{\"x\":0.00494684465229511,\"y\":89.9938583374023,\"z\":359.989105224609},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"a22db0\":{\"lock\":false,\"pos\":{\"x\":4.00000047683716,\"y\":1.50768649578094,\"z\":25},\"rot\":{\"x\":0.00494594033807516,\"y\":89.9914703369141,\"z\":359.989105224609},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"a4a074\":{\"lock\":false,\"pos\":{\"x\":0.499999731779099,\"y\":1.50523245334625,\"z\":10.5000009536743},\"rot\":{\"x\":-0.00420497450977564,\"y\":44.988151550293,\"z\":359.988800048828},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"a4c96c\":{\"lock\":true,\"pos\":{\"x\":12,\"y\":1.51936459541321,\"z\":18.5},\"rot\":{\"x\":0.0108914999291301,\"y\":179.999877929688,\"z\":0.00494822021573782},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"a5838a\":{\"lock\":false,\"pos\":{\"x\":1.99999976158142,\"y\":1.50709879398346,\"z\":21.0000038146973},\"rot\":{\"x\":0.0119065959006548,\"y\":150.000030517578,\"z\":-0.00115925923455507},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"b157ee\":{\"lock\":false,\"pos\":{\"x\":3,\"y\":1.6016,\"z\":-6.5},\"rot\":{\"x\":0.0168,\"y\":179.9813,\"z\":0},\"tint\":{\"a\":1,\"b\":0.701960802078247,\"g\":0.800000011920929,\"r\":0.874509811401367}},\"cdb67c\":{\"lock\":false,\"pos\":{\"x\":-20.2868995666504,\"y\":1.76630067825317,\"z\":11.4502000808716},\"rot\":{\"x\":5.00312899021083E-06,\"y\":359.976654052734,\"z\":-1.41177949330995E-07},\"tint\":{\"a\":0,\"b\":0,\"g\":0,\"r\":0}},\"cff541\":{\"lock\":false,\"pos\":{\"x\":-3.49999976158142,\"y\":1.5067183971405,\"z\":16.5},\"rot\":{\"x\":0.0108911618590355,\"y\":180.002166748047,\"z\":0.00495222676545382},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"d324d6\":{\"lock\":false,\"pos\":{\"x\":0.500199317932129,\"y\":1.50713336467743,\"z\":20.5002002716064},\"rot\":{\"x\":0.0112012270838022,\"y\":135.00846862793,\"z\":-0.00420258520171046},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"da039d\":{\"lock\":false,\"pos\":{\"x\":4,\"y\":1.51958024501801,\"z\":16},\"rot\":{\"x\":0.0108914934098721,\"y\":179.999588012695,\"z\":0.00494818249717355},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"db953a\":{\"lock\":false,\"pos\":{\"x\":-25.5519828796387,\"y\":1.83628761768341,\"z\":10.0262250900269},\"rot\":{\"x\":0.0707153826951981,\"y\":179.906219482422,\"z\":3.00145547953434E-05},\"tint\":{\"a\":1,\"b\":0,\"g\":0,\"r\":0.614982545375824}},\"ebd824\":{\"lock\":false,\"pos\":{\"x\":-22.1019916534424,\"y\":1.76629936695099,\"z\":25.585807800293},\"rot\":{\"x\":4.91459013574058E-06,\"y\":3.29039103235118E-05,\"z\":-2.59400167124113E-07},\"tint\":{\"a\":0,\"b\":0,\"g\":0,\"r\":0}},\"f3a917\":{\"lock\":false,\"pos\":{\"x\":-34.0002555847168,\"y\":1.77890574932098,\"z\":8.99974536895752},\"rot\":{\"x\":-4.92726212542038E-06,\"y\":180,\"z\":-8.79222525895784E-08},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"fccb36\":{\"lock\":true,\"pos\":{\"x\":12,\"y\":1.5206001996994,\"z\":25},\"rot\":{\"x\":0.0108914924785495,\"y\":180.000122070313,\"z\":0.00494821788743138},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"fcf19d\":{\"lock\":true,\"pos\":{\"x\":-3.49999165534973,\"y\":1.52193880081177,\"z\":24.9999885559082},\"rot\":{\"x\":0.0108914189040661,\"y\":179.999938964844,\"z\":0.00494817597791553},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"ff2fa7\":{\"lock\":true,\"pos\":{\"x\":0.499998569488525,\"y\":1.52159345149994,\"z\":25},\"rot\":{\"x\":0.010891504585743,\"y\":179.999221801758,\"z\":0.00494808377698064},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}}}}","XmlUI":"","ContainedObjects":[{"GUID":"018503","Name":"CardCustom","Transform":{"posX":-3.500106,"posY":1.52108347,"posZ":20.5,"rotX":0.0108913984,"rotY":180.002258,"rotZ":0.004948619,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":true,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":1106400,"SidewaysCard":false,"CustomDeck":{"11064":{"FaceURL":"http://cloud-3.steamusercontent.com/ugc/1874087573755616213/4BA2D77C786D6072A7ECBD7B99A0A7C3C2048E41/","BackURL":"http://cloud-3.steamusercontent.com/ugc/1874087573755616213/4BA2D77C786D6072A7ECBD7B99A0A7C3C2048E41/","NumWidth":1,"NumHeight":1,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"044e47","Name":"Custom_Model","Transform":{"posX":-25.4400043,"posY":1.76629925,"posZ":11.3305969,"rotX":0.00005549043,"rotY":359.95163,"rotZ":-0.000208697209,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Text Tool","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0,"g":0,"b":0,"a":0},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":false,"Snap":false,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":false,"Tooltip":false,"GridProjection":false,"HideWhenFaceDown":false,"Hands":true,"CustomMesh":{"MeshURL":"http://cloud-3.steamusercontent.com/ugc/1478820768302617365/27883B7913E0E69143C3AA03493B7E7C4E8C29C0/","DiffuseURL":"","NormalURL":"","ColliderURL":"","Convex":true,"MaterialIndex":1,"TypeIndex":0,"CastShadows":true},"LuaScript":"-- Code for bag to identify text tool objects\r\nmovableTextTool_cowgoesmoo33 = true\r\n\r\n-- Number of characters before the text box width expands.\r\nEXPAND_INTERVAL = 20\r\n\r\n-- This table controls what is passed between save/load\r\ndata = {}\r\n\r\nfunction onLoad(saved_data)\r\n  if saved_data ~= '' then\r\n    data = JSON.decode(saved_data)\r\n    if data.text ~= '' then\r\n      self.interactable = data.interactable\r\n      staticMode()\r\n      return\r\n    end\r\n  else\r\n    data = {size=200, color=Color(0,0,0), text='', interactable=true,\r\n        enter_to_finish=false, autolock=false, autolift=false,\r\n        hover_height=0.05, box_transparency=1}\r\n  end\r\n\r\n  inputMode()\r\nend\r\n\r\n-- True if in the middle of delay after pressing Enter (with enter_to_finish on)\r\nfinishing = false\r\nfunction input_func(obj, color, input, stillEditing)\r\n  local params = getBox(input)\r\n  if params then\r\n    params.value = input\r\n    self.editInput(params)\r\n  end\r\n\r\n  if not stillEditing then\r\n    data.text = input\r\n    updateState()\r\n    if input ~= '' then staticMode(color) end\r\n  elseif data.enter_to_finish then\r\n    -- If enter is pressed: remove last newline and force finish\r\n    if not finishing and input:sub(-1) == '\\n' then\r\n      finishing = true\r\n      -- Delay to avoid user's Enter keypress being detected (opens chat box)\r\n      Wait.frames(function()\r\n        input = input:sub(1, -2)\r\n        data.text = input\r\n        updateState()\r\n        if input ~= '' then staticMode(color) else inputMode() end\r\n        finishing = false\r\n      end, 10)\r\n    end\r\n  end\r\nend\r\n\r\n-- When the inpupt box appears and lets the player type in it.\r\nfunction inputMode()\r\n  self.clearContextMenu()\r\n  self.clearInputs()\r\n  self.clearButtons()\r\n\r\n  local size = getBox(data.text, true)\r\n\r\n  self.createInput({\r\n    input_function = \"input_func\",\r\n    function_owner = self,\r\n    label          = \"Type Here\",\r\n    alignment      = 3,\r\n    position       = {x=0, y=data.hover_height, z=0},\r\n    rotation       = {0, 180, 0},\r\n    width          = size.width,\r\n    height         = size.height,\r\n    color          = getBackground(data.color),\r\n    font_color     = data.color,\r\n    font_size      = data.size,\r\n    value          = data.text,\r\n  })\r\n\r\n  self.addContextMenuItem('Color: Object Tint', function(color)\r\n    applyMultiple(color, 'setColor')\r\n  end)\r\n  self.addContextMenuItem('Color: Player', function(color)\r\n    applyMultiple(color, 'setColor', {Color.fromString(color)})\r\n  end)\r\n  self.addContextMenuItem('Color: Black', function(color)\r\n    applyMultiple(color, 'setColor', {Color(0,0,0)})\r\n  end)\r\n  self.addContextMenuItem('Color: White', function(color)\r\n    applyMultiple(color, 'setColor', {Color(1,1,1)})\r\n  end)\r\n  self.addContextMenuItem('Size: Increase', function(color)\r\n    applyMultiple(color, 'changeSize', {50})\r\n  end, true)\r\n  self.addContextMenuItem('Size: Decrease', function(color)\r\n    applyMultiple(color, 'changeSize', {-50})\r\n  end, true)\r\nend\r\n\r\n-- When the input box disappears and displays the text.\r\nfunction staticMode(player)\r\n  self.clearContextMenu()\r\n  if data.autolock then\r\n    self.locked = true\r\n  end\r\n  if self.getInputs() and #self.getInputs() ~= 0 then\r\n    self.removeInput(0)\r\n  end\r\n\r\n  -- Clear from selecting player\r\n  if player then\r\n    self.removeFromPlayerSelection(player)\r\n  end\r\n\r\n  local displayText = data.text\r\n  if data.enter_to_finish then\r\n    displayText = displayText:gsub('%[n%]', '\\n')\r\n  end\r\n\r\n  self.createButton({\r\n    label=displayText,\r\n    click_function=\"none\",\r\n    function_owner=self,\r\n    position={0,data.hover_height,0}, rotation={0,180,0}, height=0, width=0,\r\n    font_color=data.color, font_size=data.size\r\n  })\r\n\r\n  self.addContextMenuItem('Edit Text', function(color)\r\n    self.removeFromPlayerSelection(color)\r\n    inputMode()\r\n  end)\r\n  self.addContextMenuItem('Clear', function(color)\r\n    applyMultiple(color, 'clear', _, true)\r\n  end)\r\n  self.addContextMenuItem('Color: Object Tint', function(color)\r\n    applyMultiple(color, 'setColor')\r\n  end)\r\n  self.addContextMenuItem('Color: Player', function(color)\r\n    applyMultiple(color, 'setColor', {Color.fromString(color)})\r\n  end)\r\n  self.addContextMenuItem('Color: Black', function(color)\r\n    applyMultiple(color, 'setColor', {Color(0,0,0)})\r\n  end)\r\n  self.addContextMenuItem('Color: White', function(color)\r\n    applyMultiple(color, 'setColor', {Color(1,1,1)})\r\n  end)\r\n  self.addContextMenuItem('Size: Increase', function(color)\r\n    applyMultiple(color, 'changeSize', {50})\r\n  end, true)\r\n  self.addContextMenuItem('Size: Decrease', function(color)\r\n    applyMultiple(color, 'changeSize', {-50})\r\n  end, true)\r\n  self.addContextMenuItem('Permanently Attach', attemptAttach)\r\n  self.addContextMenuItem('Permalock', function(color)\r\n    applyMultiple(color, 'permalock', _, true)\r\n  end)\r\nend\r\n\r\nfunction changeSize(params)\r\n  local delta = params[1]\r\n  local newSize = data.size + delta\r\n  if newSize > 800  or newSize < 50 then\r\n    return\r\n  end\r\n  data.size = newSize\r\n  updateState()\r\n  if self.getButtons() and #self.getButtons() ~= 0 then\r\n    self.editButton({font_size=data.size})\r\n  else\r\n    local size = getBox(data.text, true)\r\n    self.editInput({width=size.width, height=size.height, font_size=data.size})\r\n  end\r\nend\r\n\r\nfunction setColor(params)\r\n  if params and params[1] then\r\n    data.color = params[1]\r\n  else\r\n    data.color = self.getColorTint():setAt('a', 1) -- Take on color of object tint\r\n  end\r\n  updateState()\r\n  if self.getButtons() and #self.getButtons() ~= 0 then\r\n    self.editButton({font_color=data.color})\r\n  else\r\n    self.editInput({font_color=data.color, color=getBackground(data.color)})\r\n  end\r\nend\r\n\r\nfunction getBackground(color) --determines whether to use black or white depending on luminance\r\n  local r,g,b = Color(color):get()\r\n\r\n  local lum = 0.2126*r + 0.7152*g + 0.0722*b\r\n  if lum > 0.75 then\r\n    return {0.2,0.2,0.2, data.box_transparency}\r\n  else\r\n    return {1,1,1, data.box_transparency}\r\n  end\r\nend\r\n\r\nfunction clear()\r\n  data.text = ''\r\n  updateState()\r\n  inputMode()\r\nend\r\n\r\nfunction permalock()\r\n  self.interactable = false\r\n  data.interactable = false\r\n  updateState()\r\nend\r\n\r\nlocal target_script = [[\r\nfunction onLoad(script_state)\r\n  if script_state and script_state ~= '' then\r\n    local state = JSON.decode(script_state)\r\n    for _,entry in ipairs(state) do\r\n      self.createButton(entry)\r\n    end\r\n    self.addContextMenuItem('Clear All Text', function(color)\r\n      self.clearContextMenu()\r\n      self.clearButtons()\r\n      self.script_state = ''\r\n      self.script_code = ''\r\n    end)\r\n  end\r\nend\r\n]]\r\n\r\nfunction attemptAttach(player_color)\r\n  local objs = Player[player_color].getSelectedObjects()\r\n  local attachee\r\n  local attachers = {}\r\n  for _,obj in ipairs(objs) do\r\n    if obj.getVar('movableTextTool_cowgoesmoo33') then\r\n      if obj ~= self then\r\n        table.insert(attachers, obj)\r\n      end\r\n    else\r\n      if attachee then\r\n        broadcastToColor(\"More than one target selected.\", player_color)\r\n        return\r\n      else\r\n        attachee = obj\r\n      end\r\n    end\r\n  end\r\n  if attachee then\r\n    local code = attachee.script_code\r\n    if code and code ~= '' and code ~= target_script then\r\n      broadcastToColor(\"Warning: script on card has been overriden. Rewind time to undo.\", player_color)\r\n    end\r\n    for i,attacher in ipairs(attachers) do\r\n      attacher.call('attach', {target = attachee})\r\n    end\r\n    attach({target = attachee})\r\n    local type, flip = attachee.type, attachee.getRotation().z\r\n    if (type == 'Card' or type == 'Deck') and flip > 175 and flip < 185 then\r\n      broadcastToColor(\"Warning: text will not display if card or deck is facing down.\", player_color)\r\n    end\r\n  else\r\n    broadcastToColor(\"You must have a target object in your selection (using click-and-drag or Ctrl+Click) to use this option.\", player_color)\r\n  end\r\nend\r\n\r\nfunction attach(params)\r\n  local target = params.target\r\n  local displayText = data.text\r\n  if data.enter_to_finish then\r\n    displayText = displayText:gsub('%[n%]', '\\n')\r\n  end\r\n\r\n  local textRotation = self.getRotation():sub(target.getRotation())\r\n    :add(Vector(180, 0, 180))\r\n\r\n  local textPosition = target.positionToLocal(\r\n    self.getPosition():add(Vector(0, data.hover_height, 0))\r\n  )\r\n  textPosition.x = -textPosition.x\r\n\r\n  local textScale = {}\r\n  textScale.x = self.getScale().x / target.getScale().x\r\n  textScale.y = self.getScale().x / target.getScale().y\r\n  textScale.z = self.getScale().x / target.getScale().z\r\n\r\n  local details = {\r\n    label=displayText,\r\n    click_function=\"none\",\r\n    function_owner=nil,\r\n    position=textPosition,\r\n    rotation=textRotation,\r\n    scale=textScale,\r\n    height=0, width=0,\r\n    font_color=data.color, font_size=data.size\r\n  }\r\n\r\n  target.createButton(details)\r\n\r\n  local script_state = target.script_state\r\n  if script_state and script_state ~= '' then\r\n    local state = JSON.decode(script_state)\r\n    table.insert(state, details)\r\n    target.script_state = JSON.encode(state)\r\n  else\r\n    target.script_state = JSON.encode({[1]=details})\r\n  end\r\n\r\n  target.script_code = target_script\r\n\r\n  self.destruct()\r\nend\r\n\r\nfunction applyMultiple(player_color, func_string, params, static_only)\r\n  local objs = Player[player_color].getSelectedObjects()\r\n  for _,obj in ipairs(objs) do\r\n    if obj.getVar('movableTextTool_cowgoesmoo33') then\r\n      if not static_only or obj.call('isStatic') then\r\n        obj.call(func_string, params)\r\n      end\r\n    end\r\n  end\r\nend\r\n\r\nfunction isStatic()\r\n  local input = self.getInputs()\r\n  return not input or #input == 0\r\nend\r\n\r\nfunction getBox(input, force)\r\n  local maxLength, lineCount = EXPAND_INTERVAL, 1\r\n  local lineLength = 0\r\n  for i = 1, #input do\r\n    local c = input:sub(i,i)\r\n    if c == '\\n' then\r\n      lineCount = lineCount + 1\r\n      if lineLength > maxLength then maxLength = (math.floor(lineLength / EXPAND_INTERVAL) + 1) * EXPAND_INTERVAL end\r\n      lineLength = 0\r\n    else\r\n      lineLength = lineLength + 1\r\n    end\r\n  end\r\n  if lineLength > maxLength then maxLength = (math.floor(lineLength / EXPAND_INTERVAL) + 1) * EXPAND_INTERVAL end\r\n\r\n  newWidth = data.size * maxLength * 0.9\r\n  newHeight = data.size * lineCount + 23\r\n\r\n  if force or boxWidth ~= newWidth or boxHeight ~= newHeight then\r\n    boxWidth, boxHeight = newWidth, newHeight\r\n    return {width = boxWidth, height = boxHeight}\r\n  end\r\n  return nil\r\nend\r\n\r\ntemp_lift = nil\r\nfunction onPickUp(player_color)\r\n  if data.autolift then\r\n    local player = Player[player_color]\r\n    temp_lift = player.lift_height\r\n    player.lift_height = 0\r\n  end\r\nend\r\n\r\nfunction onDrop(player_color)\r\n  if data.autolift and temp_lift then\r\n    Player[player_color].lift_height = temp_lift\r\n  end\r\nend\r\n\r\n-- Should be called every time data is modified, allows info to be saved on copy/paste\r\nfunction updateState()\r\n  self.script_state = JSON.encode(data)\r\nend\r\n\r\nfunction onSave()\r\n  self.script_state = JSON.encode(data)\r\n  return self.script_state\r\nend","LuaScriptState":"{\"autolift\":false,\"autolock\":false,\"box_transparency\":1,\"color\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1},\"enter_to_finish\":false,\"hover_height\":0.05,\"interactable\":true,\"size\":200,\"text\":\"Bureau de sécurité\"}","XmlUI":""},{"GUID":"06541a","Name":"Deck","Transform":{"posX":30.4999,"posY":1.74838889,"posZ":-3.0001,"rotX":-0.000591237447,"rotY":180,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Deck Rencontre","Description":"Le Musée Miskatonic","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":false,"SidewaysCard":false,"DeckIDs":[276043,276042,276040,276041,276006,276007,276015,276014,276013,276012,276001,276000,276003,276002,276004,276005,15509,15512,15508,15511,15514,15515,18608,19902,18609,18607,18606,18603,18605,16312,16311,16313,16314,16315,16310,16316,16337,16338],"CustomDeck":{"155":{"FaceURL":"https://i.imgur.com/7H57eeO.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0},"163":{"FaceURL":"https://i.imgur.com/f8FRV80.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0},"186":{"FaceURL":"https://i.imgur.com/f8FRV80.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0},"199":{"FaceURL":"https://i.imgur.com/GI7QyCb.jpg","BackURL":"https://i.imgur.com/EUjYjZK.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0},"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":"","ContainedObjects":[{"GUID":"db6e4c","Name":"Card","Transform":{"posX":30.4999,"posY":11.6663046,"posZ":-3.0001,"rotX":-0.000591179065,"rotY":180,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"51023\",\n  \"traits\": \"Power.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276043,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"dce872","Name":"Card","Transform":{"posX":30.4999,"posY":11.803792,"posZ":-3.00010014,"rotX":-0.0005912372,"rotY":180,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"51023\",\n  \"traits\": \"Power.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276042,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"c2ab99","Name":"Card","Transform":{"posX":30.4999,"posY":11.6037912,"posZ":-3.00010014,"rotX":-0.0005912372,"rotY":180,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"51024\",\n  \"traits\": \"Power.\",\n  \"type\": \"Treachery\",\n  \"victory\": 0\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276040,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"0be495","Name":"Card","Transform":{"posX":30.4999,"posY":11.0663052,"posZ":-3.0001,"rotX":-0.0005912637,"rotY":180,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"51024\",\n  \"traits\": \"Power.\",\n  \"type\": \"Treachery\",\n  \"victory\": 0\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276041,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"3af5af","Name":"Card","Transform":{"posX":30.4999,"posY":11.2037916,"posZ":-3.00010014,"rotX":-0.0005912372,"rotY":180,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"51065\",\n  \"traits\": \"Obstacle.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276006,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"cf2464","Name":"Card","Transform":{"posX":30.4999,"posY":11.0037918,"posZ":-3.00010014,"rotX":-0.0005912372,"rotY":180,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"51065\",\n  \"traits\": \"Obstacle.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276007,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"1c6a15","Name":"Card","Transform":{"posX":30.4999,"posY":10.803792,"posZ":-3.00010014,"rotX":-0.0005912372,"rotY":180,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"51066\",\n  \"traits\": \"Hazard.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276015,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"ae0230","Name":"Card","Transform":{"posX":30.4999,"posY":10.6037912,"posZ":-3.00010014,"rotX":-0.0005912372,"rotY":180,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"51066\",\n  \"traits\": \"Hazard.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276014,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"728544","Name":"Card","Transform":{"posX":30.4999,"posY":10.4037914,"posZ":-3.00010014,"rotX":-0.0005912372,"rotY":180,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"51067\",\n  \"traits\": \"Hazard.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276013,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"8fe840","Name":"Card","Transform":{"posX":30.4999,"posY":10.2037916,"posZ":-3.00010014,"rotX":-0.0005912372,"rotY":180,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"51067\",\n  \"traits\": \"Hazard.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276012,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"0236d6","Name":"Card","Transform":{"posX":30.4999,"posY":9.666305,"posZ":-3.0001,"rotX":-0.0005911483,"rotY":180,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"51063\",\n  \"traits\": \"Hex.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276001,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"612d05","Name":"Card","Transform":{"posX":30.4999,"posY":9.803792,"posZ":-3.00010014,"rotX":-0.0005912372,"rotY":180,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"51063\",\n  \"traits\": \"Hex.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276000,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"d4d20c","Name":"Card","Transform":{"posX":30.4999,"posY":9.603791,"posZ":-3.00010014,"rotX":-0.0005912372,"rotY":180,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"51062\",\n  \"traits\": \"Hex.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276003,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"6fc7cc","Name":"Card","Transform":{"posX":30.4999,"posY":9.403791,"posZ":-3.00010014,"rotX":-0.0005912372,"rotY":180,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"51062\",\n  \"traits\": \"Hex.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276002,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"9ec870","Name":"Card","Transform":{"posX":30.4999,"posY":9.203792,"posZ":-3.00010014,"rotX":-0.0005912372,"rotY":180,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"51061\",\n  \"traits\": \"Hex.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276004,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"5c7d44","Name":"Card","Transform":{"posX":30.4999,"posY":9.003792,"posZ":-3.00010014,"rotX":-0.0005912372,"rotY":180,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"51061\",\n  \"traits\": \"Hex.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276005,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"b52985","Name":"Card","Transform":{"posX":30.4999,"posY":8.803792,"posZ":-3.00010014,"rotX":-0.0005912372,"rotY":180,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Au-Delà du Voile","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02084\",\n  \"traits\": \"Hex.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":15509,"SidewaysCard":false,"CustomDeck":{"155":{"FaceURL":"https://i.imgur.com/7H57eeO.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"ed11ad","Name":"Card","Transform":{"posX":30.4999,"posY":8.603791,"posZ":-3.00010014,"rotX":-0.0005912372,"rotY":180,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Au-Delà du Voile","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02084\",\n  \"traits\": \"Hex.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":15512,"SidewaysCard":false,"CustomDeck":{"155":{"FaceURL":"https://i.imgur.com/7H57eeO.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"cc2af0","Name":"Card","Transform":{"posX":30.4999,"posY":8.403791,"posZ":-3.00010014,"rotX":-0.0005912372,"rotY":180,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Au-Delà du Voile","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02084\",\n  \"traits\": \"Hex.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":15508,"SidewaysCard":false,"CustomDeck":{"155":{"FaceURL":"https://i.imgur.com/7H57eeO.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"3bd92a","Name":"Card","Transform":{"posX":30.4999,"posY":8.203792,"posZ":-3.00010014,"rotX":-0.0005912372,"rotY":180,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Visions des Avenirs Passés","Description":"","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02083\",\n  \"traits\": \"Hex.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":15511,"SidewaysCard":false,"CustomDeck":{"155":{"FaceURL":"https://i.imgur.com/7H57eeO.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"92e0e2","Name":"Card","Transform":{"posX":30.4999,"posY":8.003792,"posZ":-3.00010014,"rotX":-0.0005912372,"rotY":180,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Visions des Avenirs Passés","Description":"","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02083\",\n  \"traits\": \"Hex.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":15514,"SidewaysCard":false,"CustomDeck":{"155":{"FaceURL":"https://i.imgur.com/7H57eeO.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"5b9c33","Name":"Card","Transform":{"posX":30.4999,"posY":7.80379152,"posZ":-3.00010014,"rotX":-0.0005912372,"rotY":180,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Visions des Avenirs Passés","Description":"","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02083\",\n  \"traits\": \"Hex.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":15515,"SidewaysCard":false,"CustomDeck":{"155":{"FaceURL":"https://i.imgur.com/7H57eeO.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"d8d1a1","Name":"Card","Transform":{"posX":30.4999,"posY":7.60379076,"posZ":-3.00010014,"rotX":-0.0005912372,"rotY":180,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Coup du Sort","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02093\",\n  \"traits\": \"Omen.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":18608,"SidewaysCard":false,"CustomDeck":{"186":{"FaceURL":"https://i.imgur.com/f8FRV80.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"da76bb","Name":"Card","Transform":{"posX":30.4999,"posY":5.73928928,"posZ":-3.00010037,"rotX":-0.000590501,"rotY":180,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Horreur Chasseresse","Description":"Issue du Néant","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"health\": 3,\n  \"id\": \"02141\",\n  \"traits\": \"Monster. Elite.\",\n  \"type\": \"Enemy\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":19902,"SidewaysCard":false,"CustomDeck":{"199":{"FaceURL":"https://i.imgur.com/GI7QyCb.jpg","BackURL":"https://i.imgur.com/EUjYjZK.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"0ee4ad","Name":"Card","Transform":{"posX":30.4999,"posY":7.40379143,"posZ":-3.00010014,"rotX":-0.0005912372,"rotY":180,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Coup du Sort","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02093\",\n  \"traits\": \"Omen.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":18609,"SidewaysCard":false,"CustomDeck":{"186":{"FaceURL":"https://i.imgur.com/f8FRV80.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"9b7bc0","Name":"Card","Transform":{"posX":30.4999,"posY":7.20379162,"posZ":-3.00010014,"rotX":-0.0005912372,"rotY":180,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Coup du Sort","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02093\",\n  \"traits\": \"Omen.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":18607,"SidewaysCard":false,"CustomDeck":{"186":{"FaceURL":"https://i.imgur.com/f8FRV80.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"941ff9","Name":"Card","Transform":{"posX":30.4999,"posY":6.666306,"posZ":-3.0001,"rotX":-0.0005912151,"rotY":180,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Chance Maudite","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02092\",\n  \"traits\": \"Omen.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":18606,"SidewaysCard":false,"CustomDeck":{"186":{"FaceURL":"https://i.imgur.com/f8FRV80.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"368d2c","Name":"Card","Transform":{"posX":30.4999,"posY":6.80379248,"posZ":-3.00010014,"rotX":-0.0005912372,"rotY":180,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Chance Maudite","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02092\",\n  \"traits\": \"Omen.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":18603,"SidewaysCard":false,"CustomDeck":{"186":{"FaceURL":"https://i.imgur.com/f8FRV80.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"695a70","Name":"Card","Transform":{"posX":30.4999,"posY":6.60379267,"posZ":-3.00010014,"rotX":-0.0005912372,"rotY":180,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Chance Maudite","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02092\",\n  \"traits\": \"Omen.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":18605,"SidewaysCard":false,"CustomDeck":{"186":{"FaceURL":"https://i.imgur.com/f8FRV80.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"a95294","Name":"Card","Transform":{"posX":30.4999,"posY":6.40379238,"posZ":-3.00010014,"rotX":-0.0005912372,"rotY":180,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Rampant Derrière Vous","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02146\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":16312,"SidewaysCard":false,"CustomDeck":{"163":{"FaceURL":"https://i.imgur.com/f8FRV80.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"52050a","Name":"Card","Transform":{"posX":30.4999,"posY":6.20379257,"posZ":-3.00010014,"rotX":-0.0005912372,"rotY":180,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Rampant Derrière Vous","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02146\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":16311,"SidewaysCard":false,"CustomDeck":{"163":{"FaceURL":"https://i.imgur.com/f8FRV80.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"a3e90a","Name":"Card","Transform":{"posX":30.4999,"posY":6.003793,"posZ":-3.00010014,"rotX":-0.0005912372,"rotY":180,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Expositions Temporaires","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02145\",\n  \"traits\": \"Terror.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":16313,"SidewaysCard":false,"CustomDeck":{"163":{"FaceURL":"https://i.imgur.com/f8FRV80.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"90a197","Name":"Card","Transform":{"posX":30.4999,"posY":5.80379248,"posZ":-3.00010014,"rotX":-0.0005912372,"rotY":180,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Expositions Temporaires","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02145\",\n  \"traits\": \"Terror.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":16314,"SidewaysCard":false,"CustomDeck":{"163":{"FaceURL":"https://i.imgur.com/f8FRV80.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"b49261","Name":"Card","Transform":{"posX":30.4999,"posY":5.2663064,"posZ":-3.0001,"rotX":-0.0005911663,"rotY":180,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Passage dans le Voile","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02144\",\n  \"traits\": \"Power.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":16315,"SidewaysCard":false,"CustomDeck":{"163":{"FaceURL":"https://i.imgur.com/f8FRV80.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"8ed7d2","Name":"Card","Transform":{"posX":30.4999,"posY":5.40379238,"posZ":-3.00010014,"rotX":-0.0005912372,"rotY":180,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Passage dans le Voile","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02144\",\n  \"traits\": \"Power.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":16310,"SidewaysCard":false,"CustomDeck":{"163":{"FaceURL":"https://i.imgur.com/f8FRV80.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"840d4d","Name":"Card","Transform":{"posX":30.4999,"posY":5.20379257,"posZ":-3.00010014,"rotX":-0.0005912372,"rotY":180,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Passage dans le Voile","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02144\",\n  \"traits\": \"Power.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":16316,"SidewaysCard":false,"CustomDeck":{"163":{"FaceURL":"https://i.imgur.com/f8FRV80.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"ec4ef0","Name":"Card","Transform":{"posX":30.4999,"posY":5.003793,"posZ":-3.00010014,"rotX":-0.0005912372,"rotY":180,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Traqué dans l'Obscurité","Description":"","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02143\",\n  \"traits\": \"Tactic.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":16337,"SidewaysCard":false,"CustomDeck":{"163":{"FaceURL":"https://i.imgur.com/f8FRV80.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"dd6818","Name":"Card","Transform":{"posX":30.4999,"posY":4.80379248,"posZ":-3.00010014,"rotX":-0.0005912372,"rotY":180,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Traqué dans l'Obscurité","Description":"","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02143\",\n  \"traits\": \"Tactic.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":16338,"SidewaysCard":false,"CustomDeck":{"163":{"FaceURL":"https://i.imgur.com/f8FRV80.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""}]},{"GUID":"0b9474","Name":"Card","Transform":{"posX":22.3267021,"posY":1.5139116,"posZ":-5.49479961,"rotX":0.0108917933,"rotY":179.996017,"rotZ":0.004947675,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Référence","Description":"Le Musée Miskatonic","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":19900,"SidewaysCard":false,"CustomDeck":{"199":{"FaceURL":"https://i.imgur.com/GI7QyCb.jpg","BackURL":"https://i.imgur.com/EUjYjZK.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"102945","Name":"Custom_Tile","Transform":{"posX":6.5,"posY":1.50671017,"posZ":21.0000019,"rotX":359.993042,"rotY":30.02642,"rotZ":359.990265,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/vppt2my.png","ImageSecondaryURL":"https://i.imgur.com/vppt2my.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":"","States":{"2":{"GUID":"44b0c5","Name":"Custom_Tile","Transform":{"posX":-39.7933121,"posY":1.63758957,"posZ":2.038383,"rotX":359.9201,"rotY":269.9961,"rotZ":0.0168742146,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/HyfE8m8.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""},"3":{"GUID":"5b38c6","Name":"Custom_Tile","Transform":{"posX":-38.8217163,"posY":1.99356019,"posZ":0.4159239,"rotX":359.9201,"rotY":272.9828,"rotZ":0.01687373,"scaleX":0.8,"scaleY":1,"scaleZ":0.8},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/dHKBLoD.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""}}},{"GUID":"16c9c9","Name":"Card","Transform":{"posX":4,"posY":1.51796448,"posZ":7.5,"rotX":0.0108916117,"rotY":179.999359,"rotZ":0.004948199,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Entrée du Musée","Description":"Miskatonic.","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02126\",\n  \"locationBack\": {\n    \"connections\": \"Square\",\n    \"icons\": \"Circle\",\n    \"uses\": {\n      \"count\": 2,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    }\n  },\n  \"locationFront\": {\n    \"connections\": \"Square\",\n    \"icons\": \"Circle\"\n  },\n  \"traits\": \"Miskatonic.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":19906,"SidewaysCard":false,"CustomDeck":{"199":{"FaceURL":"https://i.imgur.com/GI7QyCb.jpg","BackURL":"https://i.imgur.com/EUjYjZK.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"1ea2c4","Name":"Custom_Tile","Transform":{"posX":0.499998361,"posY":1.50665808,"posZ":18,"rotX":0.009730049,"rotY":119.991234,"rotZ":359.993042,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/vppt2my.png","ImageSecondaryURL":"https://i.imgur.com/vppt2my.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":"","States":{"2":{"GUID":"44b0c5","Name":"Custom_Tile","Transform":{"posX":-39.7933121,"posY":1.63758957,"posZ":2.038383,"rotX":359.9201,"rotY":269.9961,"rotZ":0.0168742146,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/HyfE8m8.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""},"3":{"GUID":"5b38c6","Name":"Custom_Tile","Transform":{"posX":-38.8217163,"posY":1.99356019,"posZ":0.4159239,"rotX":359.9201,"rotY":272.9828,"rotZ":0.01687373,"scaleX":0.8,"scaleY":1,"scaleZ":0.8},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/dHKBLoD.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""}}},{"GUID":"2efca1","Name":"CardCustom","Transform":{"posX":12,"posY":1.51822412,"posZ":12.5,"rotX":0.010891255,"rotY":180.003021,"rotZ":0.00494878832,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":true,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":1106500,"SidewaysCard":false,"CustomDeck":{"11065":{"FaceURL":"http://cloud-3.steamusercontent.com/ugc/1874087573755654274/E1C516725CC32556A9F093B96384451BDB4AB8D1/","BackURL":"http://cloud-3.steamusercontent.com/ugc/1874087573755654274/E1C516725CC32556A9F093B96384451BDB4AB8D1/","NumWidth":1,"NumHeight":1,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"3bcad3","Name":"Custom_Tile","Transform":{"posX":7.5,"posY":1.50529313,"posZ":14,"rotX":0.0112005351,"rotY":135,"rotZ":-0.004204382,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/vppt2my.png","ImageSecondaryURL":"https://i.imgur.com/vppt2my.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":"","States":{"2":{"GUID":"44b0c5","Name":"Custom_Tile","Transform":{"posX":-39.7933121,"posY":1.63758957,"posZ":2.038383,"rotX":359.9201,"rotY":269.9961,"rotZ":0.0168742146,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/HyfE8m8.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""},"3":{"GUID":"5b38c6","Name":"Custom_Tile","Transform":{"posX":-38.8217163,"posY":1.99356019,"posZ":0.4159239,"rotX":359.9201,"rotY":272.9828,"rotZ":0.01687373,"scaleX":0.8,"scaleY":1,"scaleZ":0.8},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/dHKBLoD.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""}}},{"GUID":"4763ba","Name":"Card","Transform":{"posX":-21.50032,"posY":1.77890623,"posZ":3.49957275,"rotX":-0.00000516165,"rotY":180.003067,"rotZ":2.90529869e-7,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Engendrée par l'Ombre","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02142\",\n  \"traits\": \"Power.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":19901,"SidewaysCard":false,"CustomDeck":{"199":{"FaceURL":"https://i.imgur.com/GI7QyCb.jpg","BackURL":"https://i.imgur.com/EUjYjZK.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"4fcd01","Name":"Custom_Tile","Transform":{"posX":7.5,"posY":1.50605357,"posZ":18,"rotX":-0.00115720311,"rotY":60.0179,"rotZ":359.9881,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/vppt2my.png","ImageSecondaryURL":"https://i.imgur.com/vppt2my.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":"","States":{"2":{"GUID":"44b0c5","Name":"Custom_Tile","Transform":{"posX":-39.7933121,"posY":1.63758957,"posZ":2.038383,"rotX":359.9201,"rotY":269.9961,"rotZ":0.0168742146,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/HyfE8m8.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""},"3":{"GUID":"5b38c6","Name":"Custom_Tile","Transform":{"posX":-38.8217163,"posY":1.99356019,"posZ":0.4159239,"rotX":359.9201,"rotY":272.9828,"rotZ":0.01687373,"scaleX":0.8,"scaleY":1,"scaleZ":0.8},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/dHKBLoD.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""}}},{"GUID":"555443","Name":"Deck","Transform":{"posX":12.5,"posY":1.536432,"posZ":-5.99991226,"rotX":0.004950565,"rotY":90.01279,"rotZ":359.9891,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Deck Intrigue","Description":"Le Musée Miskatonic","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":false,"SidewaysCard":true,"DeckIDs":[20002,20001,20000],"CustomDeck":{"200":{"FaceURL":"https://i.imgur.com/Tq7TPqq.jpg","BackURL":"https://i.imgur.com/0DGPHHP.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":"","ContainedObjects":[{"GUID":"468a95","Name":"Card","Transform":{"posX":12.499999,"posY":4.791836,"posZ":-5.99991226,"rotX":0.004950457,"rotY":90.01289,"rotZ":359.9891,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Dans Chaque Ombre","Description":"Intrigue 3a","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"doomThreshold\": 7,\n  \"id\": \"02121\",\n  \"type\": \"Agenda\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":20002,"SidewaysCard":true,"CustomDeck":{"200":{"FaceURL":"https://i.imgur.com/Tq7TPqq.jpg","BackURL":"https://i.imgur.com/0DGPHHP.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"82bbd0","Name":"Card","Transform":{"posX":12.499999,"posY":4.591836,"posZ":-5.99991226,"rotX":0.004950457,"rotY":90.01289,"rotZ":359.9891,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Les Ombres Grandissent","Description":"Intrigue 2a","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"doomThreshold\": 7,\n  \"id\": \"02120\",\n  \"type\": \"Agenda\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":20001,"SidewaysCard":true,"CustomDeck":{"200":{"FaceURL":"https://i.imgur.com/Tq7TPqq.jpg","BackURL":"https://i.imgur.com/0DGPHHP.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"b5962c","Name":"Card","Transform":{"posX":12.5000057,"posY":1.61307776,"posZ":-5.99992752,"rotX":0.007841049,"rotY":90.01289,"rotZ":359.985657,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Accès Restreint","Description":"Intrigue 1a","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"doomThreshold\": 5,\n  \"id\": \"02119\",\n  \"type\": \"Agenda\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":20000,"SidewaysCard":true,"CustomDeck":{"200":{"FaceURL":"https://i.imgur.com/Tq7TPqq.jpg","BackURL":"https://i.imgur.com/0DGPHHP.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""}]},{"GUID":"5559ff","Name":"Custom_Tile","Transform":{"posX":7.5,"posY":1.50462782,"posZ":10.5,"rotX":0.0111997463,"rotY":134.9883,"rotZ":-0.00420664856,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/vppt2my.png","ImageSecondaryURL":"https://i.imgur.com/vppt2my.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":"","States":{"2":{"GUID":"44b0c5","Name":"Custom_Tile","Transform":{"posX":-39.7933121,"posY":1.63758957,"posZ":2.038383,"rotX":359.9201,"rotY":269.9961,"rotZ":0.0168742146,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/HyfE8m8.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""},"3":{"GUID":"5b38c6","Name":"Custom_Tile","Transform":{"posX":-38.8217163,"posY":1.99356019,"posZ":0.4159239,"rotX":359.9201,"rotY":272.9828,"rotZ":0.01687373,"scaleX":0.8,"scaleY":1,"scaleZ":0.8},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/dHKBLoD.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""}}},{"GUID":"5ae079","Name":"Custom_Model_Bag","Transform":{"posX":-20.5083,"posY":1.8353008,"posZ":10.0028992,"rotX":-0.000005064188,"rotY":179.96167,"rotZ":1.15417137e-7,"scaleX":0.7,"scaleY":0.7,"scaleZ":0.7},"Nickname":"bag coin aléatoire","Description":"merci à Chr1Z pour le script","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.614982545,"g":0,"b":0},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"MaterialIndex":-1,"MeshIndex":-1,"CustomMesh":{"MeshURL":"https://pastebin.com/raw/ALrYhQGb","DiffuseURL":"http://cloud-3.steamusercontent.com/ugc/1936013662298201029/7B1C2164A753181108452C97908B20F2F40F3F11/","NormalURL":"","ColliderURL":"","Convex":true,"MaterialIndex":3,"TypeIndex":6,"CustomShader":{"SpecularColor":{"r":1,"g":1,"b":1},"SpecularIntensity":0,"SpecularSharpness":2,"FresnelStrength":0},"CastShadows":true},"Bag":{"Order":0},"LuaScript":"-- Random memory bag\r\n-- based on Utility memory bag by Directsun (Version 2.7.0)\r\n\r\nlocal CONFIG = {\r\n    MEMORY_GROUP = {\r\n        -- This determines how many frames to wait before actually placing objects onto the table when the \"Place\" button is clicked.\r\n        -- This gives the other bags time to recall their objects.\r\n        -- The delay ONLY occurs if other bags have objects out.\r\n        FRAME_DELAY_BEFORE_PLACING_OBJECTS = 30\r\n    }\r\n}\r\n\r\nmath.randomseed(os.time())\r\n\r\n--[[ Memory Bag Groups ]]\r\n--[[ Utility Memory Bags may be added to a named group, called a \"memory group\".\r\nYou can add a bag to a group through the bag's UI: \"Setup\" > \"Group Name\" (to the left of the bag).\r\nOnly one bag from a group may have it's contents placed on the table at a time.\r\nWhen \"Place\" is clicked on a bag, the other bags in it's memory group are recalled.\r\nBy default a memory bag is not in any group. It's memory group is \"nil\". --]]\r\n\r\nmemoryGroupName = { memoryBag = self }\r\nfunction memoryGroupName:get()\r\n    return self._name\r\nend\r\n\r\nfunction memoryGroupName:set(newName)\r\n    GlobalMemoryGroups:unregisterBagInGroup(self:get(), self.memoryBag.getGUID())\r\n    GlobalMemoryGroups:registerBagInGroup(newName, self.memoryBag.getGUID())\r\n\r\n    if newName == \"\" then\r\n        self._name = nil\r\n    else\r\n        self._name = newName\r\n    end\r\nend\r\n\r\n-- Click the \"Recall\" button on all other bags in my memory group.\r\nfunction recallOtherBagsInMyGroup()\r\n    for _, bag in ipairs(getOtherBagsInMyGroup()) do\r\n        bag.call('buttonClick_recall')\r\n    end\r\nend\r\n\r\n-- Return \"true\" if another bag in my memory group has any objects out on the table.\r\nfunction anyOtherBagsInMyGroupArePlaced()\r\n    for _, bag in ipairs(getOtherBagsInMyGroup()) do\r\n        local state = bag.call('areAnyOfMyObjectsPlaced')\r\n        if state then return true end\r\n    end\r\n\r\n    return false\r\nend\r\n\r\n-- Return \"true\" if at least one object from this memory bag is out on the table.\r\nfunction areAnyOfMyObjectsPlaced()\r\n    for guid, _ in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then\r\n            return true\r\n        end\r\n    end\r\n    return false\r\nend\r\n\r\nfunction getOtherBagsInMyGroup()\r\n    local bags = {}\r\n    for bagGuid, _ in pairs(GlobalMemoryGroups:getGroup(memoryGroupName:get())) do\r\n        if bagGuid ~= self.getGUID() then\r\n            bag = getObjectFromGUID(bagGuid)\r\n            -- \"bag\" is nill if it has been deleted since the last time onLoad() was called.\r\n            if bag ~= nil then\r\n                table.insert(bags, bag)\r\n            end\r\n        end\r\n    end\r\n    return bags\r\nend\r\n\r\n--[[\r\nThis object provides access to a variable stored on the \"Global script\".\r\nThe variable holds the names & guids of all memory bag groups.\r\nThe global variable is a table and holds data like this:\r\n{\r\n    'My First Group Name' = {\r\n        '805ebd' = {},\r\n        '35cc21' = {},\r\n        'fc8886' = {},\r\n    },\r\n    'My Second Group Name' = {\r\n        'f50264' = {},\r\n        '5f5f63' = {},\r\n    },\r\n}\r\n--]]\r\nGlobalMemoryGroups = { NAME_OF_GLOBAL_VARIABLE = '_GlobalUtilityMemoryBagGroups' }\r\n\r\n-- Call me inside this script's \"onLoad()\" method!\r\nfunction GlobalMemoryGroups:onLoad(myGuid)\r\n    -- Create and initialize the global variable if it doesn't already exist:\r\n    if self:_getGroups() == nil then\r\n        self:_setGroups({})\r\n    end\r\nend\r\n\r\n-- Return the GUIDs of all bags in the \"groupName\". The return value is a dictionary that maps [GUID -> empty table].\r\nfunction GlobalMemoryGroups:getGroup(groupName)\r\n    guids = self:_getGroups()[groupName] or {}\r\n    return guids\r\nend\r\n\r\n-- Registers a bag in a memory group. Creates a new group if one doesn't exist.\r\nfunction GlobalMemoryGroups:registerBagInGroup(groupName, bagGuid)\r\n    if groupName == nil or groupName == \"\" then\r\n        return\r\n    end\r\n\r\n    self:_tryCreateNewGroup(groupName)\r\n    local groups = self:_getGroups()\r\n    groups[groupName][bagGuid] = {}\r\n    self:_setGroups(groups)\r\nend\r\n\r\n-- Removes this bag from the memory group.\r\nfunction GlobalMemoryGroups:unregisterBagInGroup(groupName, bagGuid)\r\n    local groups = self:_getGroups()\r\n    local group = groups[groupName]\r\n    if group ~= nil then\r\n        group[bagGuid] = nil\r\n        self:_setGroups(groups)\r\n    end\r\nend\r\n\r\n-- Return the global variable, which is a table holding all memory group names & guids.\r\nfunction GlobalMemoryGroups:_getGroups()\r\n    return Global.getTable(self.NAME_OF_GLOBAL_VARIABLE)\r\nend\r\n\r\n-- Override the global variable (i.e. the entire table).\r\nfunction GlobalMemoryGroups:_setGroups(newTable)\r\n    Global.setTable(self.NAME_OF_GLOBAL_VARIABLE, newTable)\r\nend\r\n\r\n-- Add a new memory group named \"groupName\" to the global variable, if one doesn't already exist.\r\nfunction GlobalMemoryGroups:_tryCreateNewGroup(groupName)\r\n    local groups = self:_getGroups()\r\n    if groups[groupName] == nil then\r\n        groups[groupName] = {}\r\n        self:_setGroups(groups)\r\n    end\r\nend\r\n\r\n-- This object controls the \"Group Name\" input text field that is part of the bag's ingame UI.\r\ngroupNameInput = {\r\n    greyedOutText     = \"Group Name\",\r\n    widthPerCharacter = 100,\r\n    padding           = 4,\r\n    memoryBag         = self\r\n}\r\nfunction groupNameInput:create(optionalStartingValue)\r\n    local effectiveText = optionalStartingValue or self.greyedOutText\r\n    local width = self:computeWidth(effectiveText)\r\n\r\n    self.memoryBag.createInput({\r\n        label = self.greyedOutText,\r\n        value = optionalStartingValue or nil,\r\n        alignment = 3, -- Center aligned\r\n        input_function = \"groupNameInput_onCharacterTyped\", function_owner = self.memoryBag,\r\n        position = { 2.1, 0.3, 0 }, rotation = { 0, 270, 0 }, width = width, height = 350,\r\n        font_size = 250, color = { 0, 0, 0 }, font_color = { 1, 1, 1 },\r\n    })\r\nend\r\n\r\nfunction groupNameInput:computeWidth(text)\r\n    return (string.len(text) + self.padding) * self.widthPerCharacter\r\nend\r\n\r\nfunction groupNameInput:updatedWidth(text)\r\n    self.memoryBag.editInput({\r\n        index = 0,\r\n        width = self:computeWidth(text)\r\n    })\r\nend\r\n\r\nfunction groupNameInput:onCharacterTyped(text, stillEditing)\r\n    if stillEditing then\r\n        self:updatedWidth(text)\r\n    else\r\n        if text == \"\" then\r\n            self:updatedWidth(self.greyedOutText)\r\n        end\r\n    end\r\nend\r\n\r\nfunction groupNameInput_onCharacterTyped(memoryBag, playerColor, text, stillEditing)\r\n    groupNameInput:onCharacterTyped(text, stillEditing)\r\nend\r\n\r\nfunction groupNameInput:setGroupNameToInputField()\r\n    local inputFields = self.memoryBag.getInputs()\r\n    if inputFields ~= nil then\r\n        -- Get input field 0, which corresponds to the groupNameInput.\r\n        -- Unfortunately \"self.getInputs()\" doesn't return the inputs in a guaranteed order.\r\n        local nameField = nil\r\n        for _, field in ipairs(inputFields) do\r\n            if field.index == 0 then\r\n                nameField = field\r\n            end\r\n        end\r\n\r\n        memoryGroupName:set(nameField.value)\r\n    end\r\nend\r\n\r\nfunction updateSave()\r\n    local data_to_save = { [\"ml\"] = memoryList, [\"groupName\"] = memoryGroupName:get() }\r\n    saved_data = JSON.encode(data_to_save)\r\n    self.script_state = saved_data\r\nend\r\n\r\nfunction combineMemoryFromBagsWithin()\r\n    local bagObjList = self.getObjects()\r\n    for _, bagObj in ipairs(bagObjList) do\r\n        local data = bagObj.lua_script_state\r\n        if data ~= nil then\r\n            local j = JSON.decode(data)\r\n            if j ~= nil and j.ml ~= nil then\r\n                for guid, entry in pairs(j.ml) do\r\n                    memoryList[guid] = entry\r\n                end\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\nfunction updateMemoryWithMoves()\r\n    memoryList = memoryListBackup\r\n    --get the first transposed object's coordinates\r\n    local obj = getObjectFromGUID(moveGuid)\r\n\r\n    -- p1 is where needs to go, p2 is where it was\r\n    local refObjPos = memoryList[moveGuid].pos\r\n    local deltaPos = findOffsetDistance(obj.getPosition(), refObjPos, nil)\r\n    local movedRotation = obj.getRotation()\r\n    for guid, entry in pairs(memoryList) do\r\n        memoryList[guid].pos.x = entry.pos.x - deltaPos.x\r\n        memoryList[guid].pos.y = entry.pos.y - deltaPos.y\r\n        memoryList[guid].pos.z = entry.pos.z - deltaPos.z\r\n    end\r\n    moveList = {}\r\nend\r\n\r\nfunction onload(saved_data)\r\n    GlobalMemoryGroups:onLoad(self.getGUID())\r\n    AllMemoryBagsInScene:add(self.getGUID())\r\n\r\n    fresh = true\r\n    if saved_data ~= \"\" then\r\n        local loaded_data = JSON.decode(saved_data)\r\n        --Set up information off of loaded_data\r\n        memoryList = loaded_data.ml\r\n        memoryGroupName:set(loaded_data.groupName)\r\n    else\r\n        --Set up information for if there is no saved saved data\r\n        memoryList = {}\r\n        memoryGroupName:set(nil)\r\n    end\r\n\r\n    moveList = {}\r\n    moveGuid = nil\r\n\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        fresh = false\r\n        createMemoryActionButtons()\r\n    end\r\nend\r\n\r\n--Beginning Setup\r\n\r\n--Make setup button\r\nfunction createSetupButton()\r\n    self.createButton({\r\n      label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n      position={0,0.3,2}, rotation={0,0,0}, height=350, width=800,\r\n      font_size=250, color={0,0,0}, font_color={1,1,1}\r\n  })\r\nend\r\n\r\n--Triggered by Transpose button\r\nfunction buttonClick_transpose()\r\n    moveGuid = nil\r\n    broadcastToAll(\"Select one object and move it- all objects will move relative to the new location\", { 0.75, 0.75, 1 })\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(true)\r\n    createSetupActionButtons(true)\r\nend\r\n\r\n--Triggered by setup button,\r\nfunction buttonClick_setup()\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(false)\r\n    createSetupActionButtons(false)\r\nend\r\n\r\nfunction getAllObjectsInMemory()\r\n    local objTable = {}\r\n    local curObj = {}\r\n\r\n    for guid in pairs(memoryListBackup) do\r\n        curObj = getObjectFromGUID(guid)\r\n        table.insert(objTable, curObj)\r\n    end\r\n\r\n    return objTable\r\nend\r\n\r\n--Creates selection buttons on objects\r\nfunction createButtonsOnAllObjects(move)\r\n    buttonIndexMap = {}\r\n    local howManyButtons = 0\r\n\r\n    local objsToHaveButtons = {}\r\n    if move == true then\r\n        objsToHaveButtons = getAllObjectsInMemory()\r\n    else\r\n        objsToHaveButtons = getAllObjects()\r\n    end\r\n\r\n    for _, obj in ipairs(objsToHaveButtons) do\r\n        if obj ~= self then\r\n            --On a normal bag, the button positions aren't the same size as the bag.\r\n            globalScaleFactor = 1 * 1 / self.getScale().x\r\n            --Super sweet math to set button positions\r\n            local selfPos = self.getPosition()\r\n            local objPos = obj.getPosition()\r\n            local deltaPos = findOffsetDistance(selfPos, objPos, obj)\r\n            local objPos = rotateLocalCoordinates(deltaPos, self)\r\n            objPos.x = -objPos.x * globalScaleFactor\r\n            objPos.y = objPos.y * globalScaleFactor + 2\r\n            objPos.z = objPos.z * globalScaleFactor\r\n            --Workaround for custom PDFs\r\n            if obj.Book then\r\n                objPos.y = objPos.y + 0.5\r\n            end\r\n            --Offset rotation of bag\r\n            local rot = self.getRotation()\r\n            rot.y = -rot.y + 180\r\n            --Create function\r\n            local funcName = \"selectButton_\" .. howManyButtons\r\n            local func = function() buttonClick_selection(obj, move) end\r\n            local color = { 0.75, 0.25, 0.25, 0.6 }\r\n            local colorMove = { 0, 0, 1, 0.6 }\r\n            if move == true then\r\n                color = colorMove\r\n            end\r\n            self.setVar(funcName, func)\r\n            self.createButton({\r\n                click_function = funcName, function_owner = self,\r\n                position = objPos, rotation = rot, height = 1000, width = 1000,\r\n                color = color,\r\n            })\r\n            buttonIndexMap[obj.getGUID()] = howManyButtons\r\n            howManyButtons = howManyButtons + 1\r\n        end\r\n    end\r\nend\r\n\r\n  --Creates submit and cancel buttons\r\n  function createSetupActionButtons(move)\r\n      self.createButton({\r\n         label=\"Annuler\", click_function=\"buttonClick_cancel\", function_owner=self,\r\n         position={-1.15,0.3,2.1}, rotation={0,0,0}, height=350, width=1100,\r\n         font_size=250, color={0,0,0}, font_color={1,1,1}\r\n      })\r\n\r\n      self.createButton({\r\n        label=\"Valider\", click_function=\"buttonClick_submit\", function_owner=self,\r\n        position={-1.15,0.3,2.8}, rotation={0,0,0}, height=350, width=1100,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n      })\r\n\r\n      if move == false then\r\n        self.createButton({\r\n            label=\"Ajouter\", click_function=\"buttonClick_add\", function_owner=self,\r\n            position={1.15,0.3,2.1}, rotation={0,0,0}, height=350, width=1100,\r\n            font_size=250, color={0,0,0}, font_color={0.25,1,0.25}\r\n          })\r\n\r\n          self.createButton({\r\n              label=\"Sélection\", click_function=\"editDragSelection\", function_owner=self,\r\n              position={-1.15,0.3,3.5}, rotation={0,0,0}, height=350, width=1100,\r\n              font_size=250, color={0,0,0}, font_color={1,1,1}\r\n          })\r\n\r\n          if fresh == false then\r\n              self.createButton({\r\n                  label=\"Mise à Jour\", click_function=\"buttonClick_setNew\", function_owner=self,\r\n                  position={1.15,0.3,3.5}, rotation={0,0,0}, height=350, width=1100,\r\n                  font_size=180, color={0,0,0}, font_color={0.75,0.75,1}\r\n              })\r\n              self.createButton({\r\n                  label=\"Retirer\", click_function=\"buttonClick_remove\", function_owner=self,\r\n                  position={1.15,0.3,2.8}, rotation={0,0,0}, height=350, width=1100,\r\n                  font_size=250, color={0,0,0}, font_color={1,0.25,0.25}\r\n              })\r\n          end\r\n      end\r\n\r\n      self.createButton({\r\n          label=\"Reset\", click_function=\"buttonClick_reset\", function_owner=self,\r\n          position={0,0.3,-2}, rotation={0,0,0}, height=350, width=800,\r\n          font_size=250, color={0,0,0}, font_color={1,1,1}\r\n      })\r\n  end\r\n\r\n\r\n--During Setup\r\n\r\n--Checks or unchecks buttons\r\nfunction buttonClick_selection(obj, move)\r\n    local index = buttonIndexMap[obj.getGUID()]\r\n    local colorMove = { 0, 0, 1, 0.6 }\r\n    local color = { 0, 1, 0, 0.6 }\r\n\r\n    previousGuid = selectedGuid\r\n    selectedGuid = obj.getGUID()\r\n\r\n    theList = memoryList\r\n    if move == true then\r\n        theList = moveList\r\n        if previousGuid ~= nil and previousGuid ~= selectedGuid then\r\n            local prevObj = getObjectFromGUID(previousGuid)\r\n            prevObj.highlightOff()\r\n            self.editButton({ index = previousIndex, color = colorMove })\r\n            theList[previousGuid] = nil\r\n        end\r\n        previousIndex = index\r\n    end\r\n\r\n    if theList[selectedGuid] == nil then\r\n        self.editButton({ index = index, color = color })\r\n        --Adding pos/rot to memory table\r\n        local pos, rot = obj.getPosition(), obj.getRotation()\r\n        --I need to add it like this or it won't save due to indexing issue\r\n        theList[obj.getGUID()] = {\r\n            pos = { x = round(pos.x, 4), y = round(pos.y, 4), z = round(pos.z, 4) },\r\n            rot = { x = round(rot.x, 4), y = round(rot.y, 4), z = round(rot.z, 4) },\r\n            lock = obj.getLock(),\r\n            tint = obj.getColorTint()\r\n        }\r\n        obj.highlightOn({ 0, 1, 0 })\r\n    else\r\n        color = { 0.75, 0.25, 0.25, 0.6 }\r\n        if move == true then\r\n            color = colorMove\r\n        end\r\n        self.editButton({ index = index, color = color })\r\n        theList[obj.getGUID()] = nil\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\nfunction editDragSelection(bagObj, player, remove)\r\n    local selectedObjs = Player[player].getSelectedObjects()\r\n    if not remove then\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            --Ignore if already in the memory list, or does not have a button\r\n            if index and not memoryList[obj.getGUID()] then\r\n                self.editButton({ index = index, color = { 0, 1, 0, 0.6 } })\r\n                --Adding pos/rot to memory table\r\n                local pos, rot = obj.getPosition(), obj.getRotation()\r\n                --I need to add it like this or it won't save due to indexing issue\r\n                memoryList[obj.getGUID()] = {\r\n                    pos = { x = round(pos.x, 4), y = round(pos.y, 4), z = round(pos.z, 4) },\r\n                    rot = { x = round(rot.x, 4), y = round(rot.y, 4), z = round(rot.z, 4) },\r\n                    lock = obj.getLock(),\r\n                    tint = obj.getColorTint()\r\n                }\r\n                obj.highlightOn({ 0, 1, 0 })\r\n            end\r\n        end\r\n    else\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            if index and memoryList[obj.getGUID()] then\r\n                color = { 0.75, 0.25, 0.25, 0.6 }\r\n                self.editButton({ index = index, color = color })\r\n                memoryList[obj.getGUID()] = nil\r\n                obj.highlightOff()\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\n--Cancels selection process\r\nfunction buttonClick_cancel()\r\n    memoryList = memoryListBackup\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        createMemoryActionButtons()\r\n    end\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Sélection annulée\", { 1, 1, 1 })\r\n    moveGuid = nil\r\nend\r\n\r\n--Saves selections\r\nfunction buttonClick_submit()\r\n    fresh = false\r\n    if next(moveList) ~= nil then\r\n        for guid in pairs(moveList) do\r\n            moveGuid = guid\r\n        end\r\n        if memoryListBackup[moveGuid] == nil then\r\n            broadcastToAll(\"Item selected for moving is not already in memory\", { 1, 0.25, 0.25 })\r\n        else\r\n            broadcastToAll(\"Moving all items in memory relative to new objects position!\", { 0.75, 0.75, 1 })\r\n            self.clearButtons()\r\n            self.clearInputs()\r\n            createMemoryActionButtons()\r\n            local count = 0\r\n            for guid in pairs(moveList) do\r\n                moveGuid = guid\r\n                count = count + 1\r\n                local obj = getObjectFromGUID(guid)\r\n                if obj ~= nil then obj.highlightOff() end\r\n            end\r\n            updateMemoryWithMoves()\r\n            updateSave()\r\n            buttonClick_place()\r\n        end\r\n    elseif next(memoryList) == nil and moveGuid == nil then\r\n        memoryList = memoryListBackup\r\n        broadcastToAll(\"No selections made.\", { 0.75, 0.25, 0.25 })\r\n    end\r\n    combineMemoryFromBagsWithin()\r\n    groupNameInput:setGroupNameToInputField()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count .. \" Objects Saved\", { 1, 1, 1 })\r\n    updateSave()\r\n    moveGuid = nil\r\nend\r\n\r\nfunction combineTables(first_table, second_table)\r\n    for k, v in pairs(second_table) do first_table[k] = v end\r\nend\r\n\r\nfunction buttonClick_add()\r\n    fresh = false\r\n    combineTables(memoryList, memoryListBackup)\r\n    broadcastToAll(\"Adding internal bags and selections to existing memory\", { 0.25, 0.75, 0.25 })\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count .. \" Objects Saved\", { 1, 1, 1 })\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_remove()\r\n    broadcastToAll(\"Removing Selected Entries From Memory\", { 1.0, 0.25, 0.25 })\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        memoryListBackup[guid] = nil\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count .. \" Objects Removed\", { 1, 1, 1 })\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_setNew()\r\n    broadcastToAll(\"Setting new position relative to items in memory\", { 0.75, 0.75, 1 })\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        guid = obj.guid\r\n        if memoryListBackup[guid] ~= nil then\r\n            count = count + 1\r\n            memoryListBackup[guid].pos = obj.getPosition()\r\n            memoryListBackup[guid].rot = obj.getRotation()\r\n            memoryListBackup[guid].lock = obj.getLock()\r\n            memoryListBackup[guid].tint = obj.getColorTint()\r\n        end\r\n    end\r\n    broadcastToAll(count .. \" Objects Saved\", { 1, 1, 1 })\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\n--Resets bag to starting status\r\nfunction buttonClick_reset()\r\n    fresh = true\r\n    memoryList = {}\r\n    memoryGroupName:set(nil)\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createSetupButton()\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Tool Reset\", { 1, 1, 1 })\r\n    updateSave()\r\nend\r\n\r\n--After Setup\r\n\r\n--Creates recall and place buttons\r\nfunction createMemoryActionButtons()\r\n    self.createButton({\r\n        label=\"Placer au hasard\", click_function=\"buttonClick_place\", function_owner=self,\r\n        position={0,0.3,2}, rotation={0,0,0}, height=350, width=2000,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Ranger\", click_function=\"buttonClick_recall\", function_owner=self,\r\n        position={0,0.3,2.8}, rotation={0,0,0}, height=350, width=1000,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n        position={2,0.3,0}, rotation={0,90,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    ---    self.createButton({\r\n    ---      label=\"Bouger\", click_function=\"buttonClick_transpose\", function_owner=self,\r\n    ---      position={-2,0.3,0.8}, rotation={0,270,0}, height=350, width=800,\r\n    ---      font_size=250, color={0,0,0}, font_color={0.75,0.75,1}\r\n    ---\r\nend\r\n\r\n--Sends objects from bag/table to their saved position/rotation\r\nfunction buttonClick_place()\r\n    if anyOtherBagsInMyGroupArePlaced() then\r\n        recallOtherBagsInMyGroup()\r\n        Wait.frames(_placeObjects, CONFIG.MEMORY_GROUP.FRAME_DELAY_BEFORE_PLACING_OBJECTS)\r\n    else\r\n        _placeObjects()\r\n    end\r\nend\r\n\r\nfunction _placeObjects()\r\n    local bagObjList = self.getObjects()\r\n\r\n    -- randomize memorylist position\r\n    local positionList = {}\r\n    for guid, entry in pairs(memoryList) do\r\n        table.insert(positionList, memoryList[guid].pos)\r\n    end\r\n\r\n    for i = #positionList, 2, -1 do\r\n        local j = math.random(i)\r\n        positionList[i], positionList[j] = positionList[j], positionList[i]\r\n    end\r\n\r\n    local i = 1\r\n    for guid, entry in pairs(memoryList) do\r\n        memoryList[guid].pos = positionList[i]\r\n        i = i + 1\r\n    end\r\n\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        --If obj is out on the table, move it to the saved pos/rot\r\n        if obj ~= nil then\r\n            obj.setPositionSmooth(entry.pos)\r\n            obj.setRotationSmooth(entry.rot)\r\n            obj.setLock(entry.lock)\r\n            obj.setColorTint(entry.tint)\r\n        else\r\n            --If obj is inside of the bag\r\n            for _, bagObj in ipairs(bagObjList) do\r\n                if bagObj.guid == guid then\r\n                    local item = self.takeObject({\r\n                        guid = guid, position = entry.pos, rotation = entry.rot, smooth = false\r\n                    })\r\n                    item.setLock(entry.lock)\r\n                    item.setColorTint(entry.tint)\r\n                    break\r\n                end\r\n            end\r\n        end\r\n    end\r\n    broadcastToAll(\"Objets placés au hasard\", {1,1,1})\r\nend\r\n\r\n--Recalls objects to bag from table\r\nfunction buttonClick_recall()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then self.putObject(obj) end\r\n    end\r\n    broadcastToAll(\"Objets rangés\", {1,1,1})\r\nend\r\n\r\n--Utility functions\r\n\r\n--Find delta (difference) between 2 x/y/z coordinates\r\nfunction findOffsetDistance(p1, p2, obj)\r\n    local yOffset = 0\r\n    if obj ~= nil then\r\n        local bounds = obj.getBounds()\r\n        yOffset = (bounds.size.y - bounds.offset.y)\r\n    end\r\n    local deltaPos = {}\r\n    deltaPos.x = (p2.x - p1.x)\r\n    deltaPos.y = (p2.y - p1.y) + yOffset\r\n    deltaPos.z = (p2.z - p1.z)\r\n    return deltaPos\r\nend\r\n\r\n--Used to rotate a set of coordinates by an angle\r\nfunction rotateLocalCoordinates(desiredPos, obj)\r\n    local objPos, objRot = obj.getPosition(), obj.getRotation()\r\n    local angle = math.rad(objRot.y)\r\n    local x = desiredPos.x * math.cos(angle) - desiredPos.z * math.sin(angle)\r\n    local z = desiredPos.x * math.sin(angle) + desiredPos.z * math.cos(angle)\r\n    --return {x=objPos.x+x, y=objPos.y+desiredPos.y, z=objPos.z+z}\r\n    return { x = x, y = desiredPos.y, z = z }\r\nend\r\n\r\nfunction rotateMyCoordinates(desiredPos, obj)\r\n    local angle = math.rad(obj.getRotation().y)\r\n    local x = desiredPos.x * math.sin(angle)\r\n    local z = desiredPos.z * math.cos(angle)\r\n    return { x = x, y = desiredPos.y, z = z }\r\nend\r\n\r\n--Coroutine delay, in seconds\r\nfunction wait(time)\r\n    local start = os.time()\r\n    repeat coroutine.yield(0) until os.time() > start + time\r\nend\r\n\r\n--Duplicates a table (needed to prevent it making reference to the same objects)\r\nfunction duplicateTable(oldTable)\r\n    local newTable = {}\r\n    for k, v in pairs(oldTable) do\r\n        newTable[k] = v\r\n    end\r\n    return newTable\r\nend\r\n\r\n--Moves scripted highlight from all objects\r\nfunction removeAllHighlights()\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\n--Round number (num) to the Nth decimal (dec)\r\nfunction round(num, dec)\r\n    local mult = 10 ^ (dec or 0)\r\n    return math.floor(num * mult + 0.5) / mult\r\nend\r\n\r\n--[[ This object provides access to a variable stored on the \"Global script\".\r\nThe variable holds the GUIDs for every Utility Memory Bag in the scene.\r\nExample: {'805ebd', '35cc21', 'fc8886', 'f50264', '5f5f63'} --]]\r\nAllMemoryBagsInScene = {\r\n    NAME_OF_GLOBAL_VARIABLE = \"_UtilityMemoryBag_AllMemoryBagsInScene\"\r\n}\r\n\r\nfunction AllMemoryBagsInScene:add(guid)\r\n    local guids = Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\n    table.insert(guids, guid)\r\n    Global.setTable(self.NAME_OF_GLOBAL_VARIABLE, guids)\r\nend\r\n\r\nfunction AllMemoryBagsInScene:getGuidList()\r\n    return Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\nend\r\n","LuaScriptState":"{\"ml\":{\"a6dd2a\":{\"lock\":false,\"pos\":{\"x\":11.9999980926514,\"y\":1.51698851585388,\"z\":6.00000286102295},\"rot\":{\"x\":0.0108900023624301,\"y\":180.019409179688,\"z\":0.00495199207216501},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"e12a62\":{\"lock\":false,\"pos\":{\"x\":-20.4999122619629,\"y\":1.77885556221008,\"z\":23.000093460083},\"rot\":{\"x\":-5.10704558109865E-06,\"y\":180.011093139648,\"z\":8.85711770592934E-09},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}}}}","XmlUI":"","ContainedObjects":[{"GUID":"a6dd2a","Name":"Card","Transform":{"posX":-20.4998989,"posY":1.77890456,"posZ":23.0001087,"rotX":-0.00000511740336,"rotY":180.019409,"rotZ":-2.52315786e-8,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Bureau de l'Administration","Description":"Miskatonic.","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02130\",\n  \"locationBack\": {\n    \"connections\": \"Square\",\n    \"icons\": \"Triangle\",\n    \"uses\": {\n      \"countPerInvestigator\": 1,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    }\n  },\n  \"locationFront\": {\n    \"connections\": \"Square\",\n    \"icons\": \"Triangle\"\n  },\n  \"traits\": \"Miskatonic.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":19908,"SidewaysCard":false,"CustomDeck":{"199":{"FaceURL":"https://i.imgur.com/GI7QyCb.jpg","BackURL":"https://i.imgur.com/EUjYjZK.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"e12a62","Name":"Card","Transform":{"posX":12.000001,"posY":1.51698852,"posZ":5.99999952,"rotX":0.01089062,"rotY":180.011047,"rotZ":0.00495034736,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Bureau de l'Administration","Description":"Miskatonic.","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02131\",\n  \"locationBack\": {\n    \"connections\": \"Square\",\n    \"icons\": \"Triangle\",\n    \"uses\": {\n      \"countPerInvestigator\": 2,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    }\n  },\n  \"locationFront\": {\n    \"connections\": \"Square\",\n    \"icons\": \"Triangle\"\n  },\n  \"traits\": \"Miskatonic.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":19909,"SidewaysCard":false,"CustomDeck":{"199":{"FaceURL":"https://i.imgur.com/GI7QyCb.jpg","BackURL":"https://i.imgur.com/EUjYjZK.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""}]},{"GUID":"618c13","Name":"Card","Transform":{"posX":-28.5007458,"posY":1.77890623,"posZ":3.49925,"rotX":-0.00000504437139,"rotY":180.002991,"rotZ":6.0433095e-8,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Adam Lynch","Description":"Sécurité du Musée","GMNotes":"{\n  \"class\": \"Neutral\",\n  \"cost\": 0,\n  \"cycle\": \"Standalone\",\n  \"health\": 1,\n  \"id\": \"02139\",\n  \"sanity\": 1,\n  \"traits\": \"Ally. Miskatonic.\",\n  \"type\": \"Asset\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":19903,"SidewaysCard":false,"CustomDeck":{"199":{"FaceURL":"https://i.imgur.com/GI7QyCb.jpg","BackURL":"https://i.imgur.com/EUjYjZK.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"61f6d6","Name":"CardCustom","Transform":{"posX":-3.50000024,"posY":1.51956272,"posZ":12.5,"rotX":0.01089153,"rotY":179.999786,"rotZ":0.00494818343,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":true,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":1106600,"SidewaysCard":false,"CustomDeck":{"11066":{"FaceURL":"http://cloud-3.steamusercontent.com/ugc/1874087573755655756/F61AC3EADD445ABDD7DDEBA1DE6E775F79C68086/","BackURL":"http://cloud-3.steamusercontent.com/ugc/1874087573755655756/F61AC3EADD445ABDD7DDEBA1DE6E775F79C68086/","NumWidth":1,"NumHeight":1,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"63c116","Name":"Custom_Tile","Transform":{"posX":12,"posY":1.50518966,"posZ":15.5,"rotX":0.0108895842,"rotY":180.020432,"rotZ":0.004956404,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/vppt2my.png","ImageSecondaryURL":"https://i.imgur.com/vppt2my.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":"","States":{"2":{"GUID":"44b0c5","Name":"Custom_Tile","Transform":{"posX":-39.7933121,"posY":1.63758957,"posZ":2.038383,"rotX":359.9201,"rotY":269.9961,"rotZ":0.0168742146,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/HyfE8m8.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""},"3":{"GUID":"5b38c6","Name":"Custom_Tile","Transform":{"posX":-38.8217163,"posY":1.99356019,"posZ":0.4159239,"rotX":359.9201,"rotY":272.9828,"rotZ":0.01687373,"scaleX":0.8,"scaleY":1,"scaleZ":0.8},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/dHKBLoD.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""}}},{"GUID":"6d1b1c","Name":"Card","Transform":{"posX":25,"posY":1.51367974,"posZ":-5.500004,"rotX":0.01089251,"rotY":179.988892,"rotZ":180.004944,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":1136905,"SidewaysCard":false,"CustomDeck":{"11369":{"FaceURL":"https://i.imgur.com/FVWxpyu.jpg","BackURL":"https://i.imgur.com/EmJxccn.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"7234af","Name":"Custom_Tile","Transform":{"posX":4,"posY":1.50512016,"posZ":11.5,"rotX":0.0108916471,"rotY":180,"rotZ":0.004952501,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/vppt2my.png","ImageSecondaryURL":"https://i.imgur.com/vppt2my.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":"","States":{"2":{"GUID":"44b0c5","Name":"Custom_Tile","Transform":{"posX":-39.7933121,"posY":1.63758957,"posZ":2.038383,"rotX":359.9201,"rotY":269.9961,"rotZ":0.0168742146,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/HyfE8m8.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""},"3":{"GUID":"5b38c6","Name":"Custom_Tile","Transform":{"posX":-38.8217163,"posY":1.99356019,"posZ":0.4159239,"rotX":359.9201,"rotY":272.9828,"rotZ":0.01687373,"scaleX":0.8,"scaleY":1,"scaleZ":0.8},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/dHKBLoD.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""}}},{"GUID":"759a42","Name":"Custom_Tile","Transform":{"posX":8.5,"posY":1.50644243,"posZ":20.5,"rotX":0.00420304341,"rotY":224.9999,"rotZ":0.0112040658,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/vppt2my.png","ImageSecondaryURL":"https://i.imgur.com/vppt2my.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"84b664","Name":"Custom_Model","Transform":{"posX":-32.15501,"posY":1.76630068,"posZ":11.3665905,"rotX":0.00000484279371,"rotY":0.0369198173,"rotZ":4.43306334e-7,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Text Tool","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0,"g":0,"b":0,"a":0},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":false,"Snap":false,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":false,"Tooltip":false,"GridProjection":false,"HideWhenFaceDown":false,"Hands":true,"CustomMesh":{"MeshURL":"http://cloud-3.steamusercontent.com/ugc/1478820768302617365/27883B7913E0E69143C3AA03493B7E7C4E8C29C0/","DiffuseURL":"","NormalURL":"","ColliderURL":"","Convex":true,"MaterialIndex":1,"TypeIndex":0,"CastShadows":true},"LuaScript":"-- Code for bag to identify text tool objects\r\nmovableTextTool_cowgoesmoo33 = true\r\n\r\n-- Number of characters before the text box width expands.\r\nEXPAND_INTERVAL = 20\r\n\r\n-- This table controls what is passed between save/load\r\ndata = {}\r\n\r\nfunction onLoad(saved_data)\r\n  if saved_data ~= '' then\r\n    data = JSON.decode(saved_data)\r\n    if data.text ~= '' then\r\n      self.interactable = data.interactable\r\n      staticMode()\r\n      return\r\n    end\r\n  else\r\n    data = {size=200, color=Color(0,0,0), text='', interactable=true,\r\n        enter_to_finish=false, autolock=false, autolift=false,\r\n        hover_height=0.05, box_transparency=1}\r\n  end\r\n\r\n  inputMode()\r\nend\r\n\r\n-- True if in the middle of delay after pressing Enter (with enter_to_finish on)\r\nfinishing = false\r\nfunction input_func(obj, color, input, stillEditing)\r\n  local params = getBox(input)\r\n  if params then\r\n    params.value = input\r\n    self.editInput(params)\r\n  end\r\n\r\n  if not stillEditing then\r\n    data.text = input\r\n    updateState()\r\n    if input ~= '' then staticMode(color) end\r\n  elseif data.enter_to_finish then\r\n    -- If enter is pressed: remove last newline and force finish\r\n    if not finishing and input:sub(-1) == '\\n' then\r\n      finishing = true\r\n      -- Delay to avoid user's Enter keypress being detected (opens chat box)\r\n      Wait.frames(function()\r\n        input = input:sub(1, -2)\r\n        data.text = input\r\n        updateState()\r\n        if input ~= '' then staticMode(color) else inputMode() end\r\n        finishing = false\r\n      end, 10)\r\n    end\r\n  end\r\nend\r\n\r\n-- When the inpupt box appears and lets the player type in it.\r\nfunction inputMode()\r\n  self.clearContextMenu()\r\n  self.clearInputs()\r\n  self.clearButtons()\r\n\r\n  local size = getBox(data.text, true)\r\n\r\n  self.createInput({\r\n    input_function = \"input_func\",\r\n    function_owner = self,\r\n    label          = \"Type Here\",\r\n    alignment      = 3,\r\n    position       = {x=0, y=data.hover_height, z=0},\r\n    rotation       = {0, 180, 0},\r\n    width          = size.width,\r\n    height         = size.height,\r\n    color          = getBackground(data.color),\r\n    font_color     = data.color,\r\n    font_size      = data.size,\r\n    value          = data.text,\r\n  })\r\n\r\n  self.addContextMenuItem('Color: Object Tint', function(color)\r\n    applyMultiple(color, 'setColor')\r\n  end)\r\n  self.addContextMenuItem('Color: Player', function(color)\r\n    applyMultiple(color, 'setColor', {Color.fromString(color)})\r\n  end)\r\n  self.addContextMenuItem('Color: Black', function(color)\r\n    applyMultiple(color, 'setColor', {Color(0,0,0)})\r\n  end)\r\n  self.addContextMenuItem('Color: White', function(color)\r\n    applyMultiple(color, 'setColor', {Color(1,1,1)})\r\n  end)\r\n  self.addContextMenuItem('Size: Increase', function(color)\r\n    applyMultiple(color, 'changeSize', {50})\r\n  end, true)\r\n  self.addContextMenuItem('Size: Decrease', function(color)\r\n    applyMultiple(color, 'changeSize', {-50})\r\n  end, true)\r\nend\r\n\r\n-- When the input box disappears and displays the text.\r\nfunction staticMode(player)\r\n  self.clearContextMenu()\r\n  if data.autolock then\r\n    self.locked = true\r\n  end\r\n  if self.getInputs() and #self.getInputs() ~= 0 then\r\n    self.removeInput(0)\r\n  end\r\n\r\n  -- Clear from selecting player\r\n  if player then\r\n    self.removeFromPlayerSelection(player)\r\n  end\r\n\r\n  local displayText = data.text\r\n  if data.enter_to_finish then\r\n    displayText = displayText:gsub('%[n%]', '\\n')\r\n  end\r\n\r\n  self.createButton({\r\n    label=displayText,\r\n    click_function=\"none\",\r\n    function_owner=self,\r\n    position={0,data.hover_height,0}, rotation={0,180,0}, height=0, width=0,\r\n    font_color=data.color, font_size=data.size\r\n  })\r\n\r\n  self.addContextMenuItem('Edit Text', function(color)\r\n    self.removeFromPlayerSelection(color)\r\n    inputMode()\r\n  end)\r\n  self.addContextMenuItem('Clear', function(color)\r\n    applyMultiple(color, 'clear', _, true)\r\n  end)\r\n  self.addContextMenuItem('Color: Object Tint', function(color)\r\n    applyMultiple(color, 'setColor')\r\n  end)\r\n  self.addContextMenuItem('Color: Player', function(color)\r\n    applyMultiple(color, 'setColor', {Color.fromString(color)})\r\n  end)\r\n  self.addContextMenuItem('Color: Black', function(color)\r\n    applyMultiple(color, 'setColor', {Color(0,0,0)})\r\n  end)\r\n  self.addContextMenuItem('Color: White', function(color)\r\n    applyMultiple(color, 'setColor', {Color(1,1,1)})\r\n  end)\r\n  self.addContextMenuItem('Size: Increase', function(color)\r\n    applyMultiple(color, 'changeSize', {50})\r\n  end, true)\r\n  self.addContextMenuItem('Size: Decrease', function(color)\r\n    applyMultiple(color, 'changeSize', {-50})\r\n  end, true)\r\n  self.addContextMenuItem('Permanently Attach', attemptAttach)\r\n  self.addContextMenuItem('Permalock', function(color)\r\n    applyMultiple(color, 'permalock', _, true)\r\n  end)\r\nend\r\n\r\nfunction changeSize(params)\r\n  local delta = params[1]\r\n  local newSize = data.size + delta\r\n  if newSize > 800  or newSize < 50 then\r\n    return\r\n  end\r\n  data.size = newSize\r\n  updateState()\r\n  if self.getButtons() and #self.getButtons() ~= 0 then\r\n    self.editButton({font_size=data.size})\r\n  else\r\n    local size = getBox(data.text, true)\r\n    self.editInput({width=size.width, height=size.height, font_size=data.size})\r\n  end\r\nend\r\n\r\nfunction setColor(params)\r\n  if params and params[1] then\r\n    data.color = params[1]\r\n  else\r\n    data.color = self.getColorTint():setAt('a', 1) -- Take on color of object tint\r\n  end\r\n  updateState()\r\n  if self.getButtons() and #self.getButtons() ~= 0 then\r\n    self.editButton({font_color=data.color})\r\n  else\r\n    self.editInput({font_color=data.color, color=getBackground(data.color)})\r\n  end\r\nend\r\n\r\nfunction getBackground(color) --determines whether to use black or white depending on luminance\r\n  local r,g,b = Color(color):get()\r\n\r\n  local lum = 0.2126*r + 0.7152*g + 0.0722*b\r\n  if lum > 0.75 then\r\n    return {0.2,0.2,0.2, data.box_transparency}\r\n  else\r\n    return {1,1,1, data.box_transparency}\r\n  end\r\nend\r\n\r\nfunction clear()\r\n  data.text = ''\r\n  updateState()\r\n  inputMode()\r\nend\r\n\r\nfunction permalock()\r\n  self.interactable = false\r\n  data.interactable = false\r\n  updateState()\r\nend\r\n\r\nlocal target_script = [[\r\nfunction onLoad(script_state)\r\n  if script_state and script_state ~= '' then\r\n    local state = JSON.decode(script_state)\r\n    for _,entry in ipairs(state) do\r\n      self.createButton(entry)\r\n    end\r\n    self.addContextMenuItem('Clear All Text', function(color)\r\n      self.clearContextMenu()\r\n      self.clearButtons()\r\n      self.script_state = ''\r\n      self.script_code = ''\r\n    end)\r\n  end\r\nend\r\n]]\r\n\r\nfunction attemptAttach(player_color)\r\n  local objs = Player[player_color].getSelectedObjects()\r\n  local attachee\r\n  local attachers = {}\r\n  for _,obj in ipairs(objs) do\r\n    if obj.getVar('movableTextTool_cowgoesmoo33') then\r\n      if obj ~= self then\r\n        table.insert(attachers, obj)\r\n      end\r\n    else\r\n      if attachee then\r\n        broadcastToColor(\"More than one target selected.\", player_color)\r\n        return\r\n      else\r\n        attachee = obj\r\n      end\r\n    end\r\n  end\r\n  if attachee then\r\n    local code = attachee.script_code\r\n    if code and code ~= '' and code ~= target_script then\r\n      broadcastToColor(\"Warning: script on card has been overriden. Rewind time to undo.\", player_color)\r\n    end\r\n    for i,attacher in ipairs(attachers) do\r\n      attacher.call('attach', {target = attachee})\r\n    end\r\n    attach({target = attachee})\r\n    local type, flip = attachee.type, attachee.getRotation().z\r\n    if (type == 'Card' or type == 'Deck') and flip > 175 and flip < 185 then\r\n      broadcastToColor(\"Warning: text will not display if card or deck is facing down.\", player_color)\r\n    end\r\n  else\r\n    broadcastToColor(\"You must have a target object in your selection (using click-and-drag or Ctrl+Click) to use this option.\", player_color)\r\n  end\r\nend\r\n\r\nfunction attach(params)\r\n  local target = params.target\r\n  local displayText = data.text\r\n  if data.enter_to_finish then\r\n    displayText = displayText:gsub('%[n%]', '\\n')\r\n  end\r\n\r\n  local textRotation = self.getRotation():sub(target.getRotation())\r\n    :add(Vector(180, 0, 180))\r\n\r\n  local textPosition = target.positionToLocal(\r\n    self.getPosition():add(Vector(0, data.hover_height, 0))\r\n  )\r\n  textPosition.x = -textPosition.x\r\n\r\n  local textScale = {}\r\n  textScale.x = self.getScale().x / target.getScale().x\r\n  textScale.y = self.getScale().x / target.getScale().y\r\n  textScale.z = self.getScale().x / target.getScale().z\r\n\r\n  local details = {\r\n    label=displayText,\r\n    click_function=\"none\",\r\n    function_owner=nil,\r\n    position=textPosition,\r\n    rotation=textRotation,\r\n    scale=textScale,\r\n    height=0, width=0,\r\n    font_color=data.color, font_size=data.size\r\n  }\r\n\r\n  target.createButton(details)\r\n\r\n  local script_state = target.script_state\r\n  if script_state and script_state ~= '' then\r\n    local state = JSON.decode(script_state)\r\n    table.insert(state, details)\r\n    target.script_state = JSON.encode(state)\r\n  else\r\n    target.script_state = JSON.encode({[1]=details})\r\n  end\r\n\r\n  target.script_code = target_script\r\n\r\n  self.destruct()\r\nend\r\n\r\nfunction applyMultiple(player_color, func_string, params, static_only)\r\n  local objs = Player[player_color].getSelectedObjects()\r\n  for _,obj in ipairs(objs) do\r\n    if obj.getVar('movableTextTool_cowgoesmoo33') then\r\n      if not static_only or obj.call('isStatic') then\r\n        obj.call(func_string, params)\r\n      end\r\n    end\r\n  end\r\nend\r\n\r\nfunction isStatic()\r\n  local input = self.getInputs()\r\n  return not input or #input == 0\r\nend\r\n\r\nfunction getBox(input, force)\r\n  local maxLength, lineCount = EXPAND_INTERVAL, 1\r\n  local lineLength = 0\r\n  for i = 1, #input do\r\n    local c = input:sub(i,i)\r\n    if c == '\\n' then\r\n      lineCount = lineCount + 1\r\n      if lineLength > maxLength then maxLength = (math.floor(lineLength / EXPAND_INTERVAL) + 1) * EXPAND_INTERVAL end\r\n      lineLength = 0\r\n    else\r\n      lineLength = lineLength + 1\r\n    end\r\n  end\r\n  if lineLength > maxLength then maxLength = (math.floor(lineLength / EXPAND_INTERVAL) + 1) * EXPAND_INTERVAL end\r\n\r\n  newWidth = data.size * maxLength * 0.9\r\n  newHeight = data.size * lineCount + 23\r\n\r\n  if force or boxWidth ~= newWidth or boxHeight ~= newHeight then\r\n    boxWidth, boxHeight = newWidth, newHeight\r\n    return {width = boxWidth, height = boxHeight}\r\n  end\r\n  return nil\r\nend\r\n\r\ntemp_lift = nil\r\nfunction onPickUp(player_color)\r\n  if data.autolift then\r\n    local player = Player[player_color]\r\n    temp_lift = player.lift_height\r\n    player.lift_height = 0\r\n  end\r\nend\r\n\r\nfunction onDrop(player_color)\r\n  if data.autolift and temp_lift then\r\n    Player[player_color].lift_height = temp_lift\r\n  end\r\nend\r\n\r\n-- Should be called every time data is modified, allows info to be saved on copy/paste\r\nfunction updateState()\r\n  self.script_state = JSON.encode(data)\r\nend\r\n\r\nfunction onSave()\r\n  self.script_state = JSON.encode(data)\r\n  return self.script_state\r\nend","LuaScriptState":"{\"autolift\":false,\"autolock\":false,\"box_transparency\":1,\"color\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1},\"enter_to_finish\":false,\"hover_height\":0.05,\"interactable\":true,\"size\":200,\"text\":\"Deck Exposition\"}","XmlUI":""},{"GUID":"8a388a","Name":"Card","Transform":{"posX":-32.0011673,"posY":1.77890623,"posZ":3.4989388,"rotX":-0.00000489668764,"rotY":180.004883,"rotZ":-1.88848318e-7,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Harold Walsted","Description":"Conservateur du Musée","GMNotes":"{\n  \"class\": \"Neutral\",\n  \"cost\": 0,\n  \"cycle\": \"Standalone\",\n  \"health\": 1,\n  \"id\": \"02138\",\n  \"sanity\": 1,\n  \"traits\": \"Ally. Miskatonic.\",\n  \"type\": \"Asset\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":19905,"SidewaysCard":false,"CustomDeck":{"199":{"FaceURL":"https://i.imgur.com/GI7QyCb.jpg","BackURL":"https://i.imgur.com/EUjYjZK.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"8d37ad","Name":"Custom_Model_Bag","Transform":{"posX":-25.0000019,"posY":1.83530128,"posZ":3.499998,"rotX":-0.00000505530534,"rotY":179.9848,"rotZ":-5.02582338e-7,"scaleX":0.7,"scaleY":0.7,"scaleZ":0.7},"Nickname":"Soutiens/faiblesses d'histoire","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":1,"g":1,"b":1},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"MaterialIndex":-1,"MeshIndex":-1,"CustomMesh":{"MeshURL":"https://pastebin.com/raw/ALrYhQGb","DiffuseURL":"http://cloud-3.steamusercontent.com/ugc/5077277234347423622/F89B4508C6E2782780C2B5593FB68379E0FB2DB6/","NormalURL":"","ColliderURL":"","Convex":true,"MaterialIndex":3,"TypeIndex":6,"CustomShader":{"SpecularColor":{"r":1,"g":1,"b":1},"SpecularIntensity":0,"SpecularSharpness":2,"FresnelStrength":0},"CastShadows":true},"Bag":{"Order":0},"LuaScript":"","LuaScriptState":"{\"ml\":[]}","XmlUI":"","ContainedObjects":[{"GUID":"c7e721","Name":"Card","Transform":{"posX":-25.5,"posY":1.93745565,"posZ":3,"rotX":0.00202085683,"rotY":180.002289,"rotZ":-0.00133883522,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Le Necronomicon","Description":"Traduction d'Olaus Wormius","GMNotes":"{\n  \"class\": \"Neutral\",\n  \"cost\": 2,\n  \"cycle\": \"The Dunwich Legacy\",\n  \"id\": \"02140\",\n  \"intellectIcons\": 1,\n  \"traits\": \"Item. Tome.\",\n  \"type\": \"Asset\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":19904,"SidewaysCard":false,"CustomDeck":{"199":{"FaceURL":"https://i.imgur.com/GI7QyCb.jpg","BackURL":"https://i.imgur.com/EUjYjZK.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""}]},{"GUID":"8f51ad","Name":"Deck","Transform":{"posX":-30.5002327,"posY":1.81992972,"posZ":8.999862,"rotX":-0.00000491672927,"rotY":180.002563,"rotZ":5.49953967e-8,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":false,"SidewaysCard":false,"DeckIDs":[1137006,19915,19912,19917,19916,19914,1137007],"CustomDeck":{"199":{"FaceURL":"https://i.imgur.com/GI7QyCb.jpg","BackURL":"https://i.imgur.com/EUjYjZK.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0},"11370":{"FaceURL":"https://i.imgur.com/FVWxpyu.jpg","BackURL":"https://i.imgur.com/EmJxccn.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":"","ContainedObjects":[{"GUID":"74075d","Name":"Card","Transform":{"posX":-30.5002365,"posY":4.782799,"posZ":8.999856,"rotX":-0.000268010655,"rotY":180.00264,"rotZ":-0.00019941543,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"51021\",\n  \"locationBack\": {\n    \"connections\": \"Square\",\n    \"icons\": \"Star|ExhibitHall\",\n    \"uses\": {\n      \"countPerInvestigator\": 1,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    },\n    \"victory\": 1\n  },\n  \"locationFront\": {\n    \"connections\": \"Square\",\n    \"icons\": \"ExhibitHall\"\n  },\n  \"traits\": \"Miskatonic. Exhibit.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":1137006,"SidewaysCard":false,"CustomDeck":{"11370":{"FaceURL":"https://i.imgur.com/FVWxpyu.jpg","BackURL":"https://i.imgur.com/EmJxccn.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"e6b20b","Name":"Card","Transform":{"posX":-30.5002365,"posY":5.0753336,"posZ":8.999856,"rotX":-0.00000487948,"rotY":180.00264,"rotZ":6.35377546e-7,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Salle d'Exposition","Description":"Miskatonic. Exposition.","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02135\",\n  \"locationBack\": {\n    \"connections\": \"Square|Tee\",\n    \"icons\": \"Crescent|ExhibitHall\",\n    \"uses\": {\n      \"countPerInvestigator\": 2,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    },\n    \"victory\": 1\n  },\n  \"locationFront\": {\n    \"connections\": \"Square\",\n    \"icons\": \"ExhibitHall\"\n  },\n  \"traits\": \"Miskatonic. Exhibit.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":19915,"SidewaysCard":false,"CustomDeck":{"199":{"FaceURL":"https://i.imgur.com/GI7QyCb.jpg","BackURL":"https://i.imgur.com/EUjYjZK.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"0f57d6","Name":"Card","Transform":{"posX":-30.5002365,"posY":5.2753334,"posZ":8.999856,"rotX":-0.00000487948,"rotY":180.00264,"rotZ":6.35377546e-7,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Salle d'Exposition","Description":"Miskatonic. Exposition.","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02133\",\n  \"locationBack\": {\n    \"connections\": \"Square|Crescent\",\n    \"icons\": \"Tee|ExhibitHall\",\n    \"uses\": {\n      \"countPerInvestigator\": 1,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    },\n    \"victory\": 1\n  },\n  \"locationFront\": {\n    \"connections\": \"Square\",\n    \"icons\": \"ExhibitHall\"\n  },\n  \"traits\": \"Miskatonic. Exhibit.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":19912,"SidewaysCard":false,"CustomDeck":{"199":{"FaceURL":"https://i.imgur.com/GI7QyCb.jpg","BackURL":"https://i.imgur.com/EUjYjZK.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"bc49ed","Name":"Card","Transform":{"posX":-30.5002365,"posY":5.393371,"posZ":8.999856,"rotX":0.00110785558,"rotY":180.00264,"rotZ":-0.000600728439,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Salle d'Exposition","Description":"Miskatonic. Exposition.","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02134\",\n  \"locationBack\": {\n    \"connections\": \"Square|Tilde\",\n    \"icons\": \"Hourglass|ExhibitHall\",\n    \"uses\": {\n      \"countPerInvestigator\": 1,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    },\n    \"victory\": 1\n  },\n  \"locationFront\": {\n    \"connections\": \"Square\",\n    \"icons\": \"ExhibitHall\"\n  },\n  \"traits\": \"Miskatonic. Exhibit.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":19917,"SidewaysCard":false,"CustomDeck":{"199":{"FaceURL":"https://i.imgur.com/GI7QyCb.jpg","BackURL":"https://i.imgur.com/EUjYjZK.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"8be7d2","Name":"Card","Transform":{"posX":-30.5002365,"posY":5.6753335,"posZ":8.999856,"rotX":-0.00000487948,"rotY":180.00264,"rotZ":6.35377546e-7,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Salle d'Exposition","Description":"Miskatonic. Exposition.","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02136\",\n  \"locationBack\": {\n    \"connections\": \"Square|Hourglass\",\n    \"icons\": \"Tilde|ExhibitHall\",\n    \"uses\": {\n      \"countPerInvestigator\": 2,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    },\n    \"victory\": 1\n  },\n  \"locationFront\": {\n    \"connections\": \"Square\",\n    \"icons\": \"ExhibitHall\"\n  },\n  \"traits\": \"Miskatonic. Exhibit.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":19916,"SidewaysCard":false,"CustomDeck":{"199":{"FaceURL":"https://i.imgur.com/GI7QyCb.jpg","BackURL":"https://i.imgur.com/EUjYjZK.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"11fda1","Name":"Card","Transform":{"posX":-30.5002365,"posY":5.87533331,"posZ":8.999856,"rotX":-0.00000487948,"rotY":180.00264,"rotZ":6.35377546e-7,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Salle d'Exposition","Description":"Miskatonic. Exposition.","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02132\",\n  \"locationBack\": {\n    \"connections\": \"Square\",\n    \"icons\": \"Plus|ExhibitHall\"\n  },\n  \"locationFront\": {\n    \"connections\": \"Square\",\n    \"icons\": \"ExhibitHall\"\n  },\n  \"traits\": \"Miskatonic. Exhibit.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":19914,"SidewaysCard":false,"CustomDeck":{"199":{"FaceURL":"https://i.imgur.com/GI7QyCb.jpg","BackURL":"https://i.imgur.com/EUjYjZK.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"7c3e7a","Name":"Card","Transform":{"posX":-30.5002365,"posY":1.91198587,"posZ":8.999856,"rotX":0.002336045,"rotY":180.00264,"rotZ":-0.00178035814,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"51022\",\n  \"locationBack\": {\n    \"connections\": \"Square|SlantedEquals\",\n    \"icons\": \"Hourglass|ExhibitHall\"\n  },\n  \"locationFront\": {\n    \"connections\": \"Square\",\n    \"icons\": \"ExhibitHall\"\n  },\n  \"traits\": \"Miskatonic. Exhibit.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":1137007,"SidewaysCard":false,"CustomDeck":{"11370":{"FaceURL":"https://i.imgur.com/FVWxpyu.jpg","BackURL":"https://i.imgur.com/EmJxccn.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""}]},{"GUID":"94d30e","Name":"CardCustom","Transform":{"posX":8,"posY":1.52094567,"posZ":25,"rotX":0.0108915884,"rotY":179.999634,"rotZ":0.00494820345,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":true,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":1106700,"SidewaysCard":false,"CustomDeck":{"11067":{"FaceURL":"http://cloud-3.steamusercontent.com/ugc/1874087573755659049/9AF2DF88904D62C086CAAA295BE046CBE8E65415/","BackURL":"http://cloud-3.steamusercontent.com/ugc/1874087573755659049/9AF2DF88904D62C086CAAA295BE046CBE8E65415/","NumWidth":1,"NumHeight":1,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"966926","Name":"Custom_Tile","Transform":{"posX":0.499999374,"posY":1.50589776,"posZ":14,"rotX":-0.004203926,"rotY":44.9944458,"rotZ":359.9888,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/vppt2my.png","ImageSecondaryURL":"https://i.imgur.com/vppt2my.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":"","States":{"2":{"GUID":"44b0c5","Name":"Custom_Tile","Transform":{"posX":-39.7933121,"posY":1.63758957,"posZ":2.038383,"rotX":359.9201,"rotY":269.9961,"rotZ":0.0168742146,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/HyfE8m8.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""},"3":{"GUID":"5b38c6","Name":"Custom_Tile","Transform":{"posX":-38.8217163,"posY":1.99356019,"posZ":0.4159239,"rotX":359.9201,"rotY":272.9828,"rotZ":0.01687373,"scaleX":0.8,"scaleY":1,"scaleZ":0.8},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/dHKBLoD.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""}}},{"GUID":"9c34eb","Name":"Deck","Transform":{"posX":17.5000019,"posY":1.54081428,"posZ":-5.999801,"rotX":0.004947085,"rotY":89.99384,"rotZ":359.9891,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Deck Acte","Description":"Le Musée Miskatonic","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":false,"SidewaysCard":true,"DeckIDs":[20005,20006,20004,20003],"CustomDeck":{"200":{"FaceURL":"https://i.imgur.com/Tq7TPqq.jpg","BackURL":"https://i.imgur.com/0DGPHHP.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":"","ContainedObjects":[{"GUID":"6bf821","Name":"Card","Transform":{"posX":17.5,"posY":4.64535427,"posZ":-5.999801,"rotX":0.00494432263,"rotY":89.99384,"rotZ":359.9891,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"À la Recherche de l'Ouvrage","Description":"Acte 3a","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02125\",\n  \"type\": \"Act\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":20005,"SidewaysCard":true,"CustomDeck":{"200":{"FaceURL":"https://i.imgur.com/Tq7TPqq.jpg","BackURL":"https://i.imgur.com/0DGPHHP.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"a19eed","Name":"Card","Transform":{"posX":17.5,"posY":4.796218,"posZ":-5.99979973,"rotX":0.004946789,"rotY":89.99384,"rotZ":359.9891,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Entré par Effraction","Description":"Acte 2a","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02124\",\n  \"type\": \"Act\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":20006,"SidewaysCard":true,"CustomDeck":{"200":{"FaceURL":"https://i.imgur.com/Tq7TPqq.jpg","BackURL":"https://i.imgur.com/0DGPHHP.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"90b0c5","Name":"Card","Transform":{"posX":17.5,"posY":4.596218,"posZ":-5.99979973,"rotX":0.004946789,"rotY":89.99384,"rotZ":359.9891,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"La Nuit au Musée","Description":"Acte 2a","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02123\",\n  \"type\": \"Act\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":20004,"SidewaysCard":true,"CustomDeck":{"200":{"FaceURL":"https://i.imgur.com/Tq7TPqq.jpg","BackURL":"https://i.imgur.com/0DGPHHP.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"41f3a9","Name":"Card","Transform":{"posX":17.5000076,"posY":1.62130988,"posZ":-5.999816,"rotX":0.00256442674,"rotY":89.99384,"rotZ":359.988068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Trouver une Entrée","Description":"Acte 1a","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"clueThreshold\": 2,\n  \"cycle\": \"Standalone\",\n  \"id\": \"02122\",\n  \"type\": \"Act\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":20003,"SidewaysCard":true,"CustomDeck":{"200":{"FaceURL":"https://i.imgur.com/Tq7TPqq.jpg","BackURL":"https://i.imgur.com/0DGPHHP.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""}]},{"GUID":"a22db0","Name":"Custom_Tile","Transform":{"posX":4.00000048,"posY":1.5076865,"posZ":25,"rotX":0.00494623324,"rotY":89.99147,"rotZ":359.9891,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/vppt2my.png","ImageSecondaryURL":"https://i.imgur.com/vppt2my.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":"","States":{"2":{"GUID":"44b0c5","Name":"Custom_Tile","Transform":{"posX":-39.7933121,"posY":1.63758957,"posZ":2.038383,"rotX":359.9201,"rotY":269.9961,"rotZ":0.0168742146,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/HyfE8m8.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""},"3":{"GUID":"5b38c6","Name":"Custom_Tile","Transform":{"posX":-38.8217163,"posY":1.99356019,"posZ":0.4159239,"rotX":359.9201,"rotY":272.9828,"rotZ":0.01687373,"scaleX":0.8,"scaleY":1,"scaleZ":0.8},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/dHKBLoD.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""}}},{"GUID":"a4a074","Name":"Custom_Tile","Transform":{"posX":0.4999996,"posY":1.50523233,"posZ":10.500001,"rotX":-0.00420535449,"rotY":44.9881325,"rotZ":359.9888,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/vppt2my.png","ImageSecondaryURL":"https://i.imgur.com/vppt2my.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":"","States":{"2":{"GUID":"44b0c5","Name":"Custom_Tile","Transform":{"posX":-39.7933121,"posY":1.63758957,"posZ":2.038383,"rotX":359.9201,"rotY":269.9961,"rotZ":0.0168742146,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/HyfE8m8.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""},"3":{"GUID":"5b38c6","Name":"Custom_Tile","Transform":{"posX":-38.8217163,"posY":1.99356019,"posZ":0.4159239,"rotX":359.9201,"rotY":272.9828,"rotZ":0.01687373,"scaleX":0.8,"scaleY":1,"scaleZ":0.8},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/dHKBLoD.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""}}},{"GUID":"a4c96c","Name":"CardCustom","Transform":{"posX":12,"posY":1.5193646,"posZ":18.5,"rotX":0.0108915,"rotY":179.999878,"rotZ":0.00494822,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":true,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":1105900,"SidewaysCard":false,"CustomDeck":{"11059":{"FaceURL":"http://cloud-3.steamusercontent.com/ugc/1874087573755657091/AFF8ACFBC5678926BCC68305BFC3843BF4612216/","BackURL":"http://cloud-3.steamusercontent.com/ugc/1874087573755657091/AFF8ACFBC5678926BCC68305BFC3843BF4612216/","NumWidth":1,"NumHeight":1,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"a5838a","Name":"Custom_Tile","Transform":{"posX":2,"posY":1.50709879,"posZ":21.0000038,"rotX":0.0119068045,"rotY":150.000031,"rotZ":-0.00115816121,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/vppt2my.png","ImageSecondaryURL":"https://i.imgur.com/vppt2my.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":"","States":{"2":{"GUID":"44b0c5","Name":"Custom_Tile","Transform":{"posX":-39.7933121,"posY":1.63758957,"posZ":2.038383,"rotX":359.9201,"rotY":269.9961,"rotZ":0.0168742146,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/HyfE8m8.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""},"3":{"GUID":"5b38c6","Name":"Custom_Tile","Transform":{"posX":-38.8217163,"posY":1.99356019,"posZ":0.4159239,"rotX":359.9201,"rotY":272.9828,"rotZ":0.01687373,"scaleX":0.8,"scaleY":1,"scaleZ":0.8},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/dHKBLoD.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""}}},{"GUID":"b157ee","Name":"Custom_Tile","Transform":{"posX":3.000003,"posY":1.601639,"posZ":-6.49999571,"rotX":0.0168371964,"rotY":179.981308,"rotZ":-5.464814e-8,"scaleX":1.6428808,"scaleY":1,"scaleZ":1.6428808},"Nickname":"Mise en place du Chaos Bag","Description":"II : Le Musée Miskatonic","GMNotes":"{\"data\":\"The Miskatonic Museum\",\"easy\":false,\"expert\":false,\"hard\":false,\"normal\":false,\"standalone\":true}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.8745098,"g":0.8,"b":0.7019608},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"http://cloud-3.steamusercontent.com/ugc/2011456161884106028/81BF2DAD34FE18B6788B56E21F16B81E6525AD99/","ImageSecondaryURL":"http://cloud-3.steamusercontent.com/ugc/2011456161884106028/81BF2DAD34FE18B6788B56E21F16B81E6525AD99/","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"\r\njacqueline_guid = '42cd6e'\r\n\r\nbuttonparams = {\r\n   ['easy'] = {label = \"Facile\", click_function = 'modeEasy', z_i = -0.2},\r\n   ['normal'] = {label = \"Standard\", click_function = 'modeNormal', z_i = 0.1},\r\n   ['hard'] = {label = \"Difficile\", click_function = 'modeHard', z_i = 0.4},\r\n   ['expert'] = {label = \"Expert\", click_function = 'modeExpert', z_i = 0.7},\r\n   ['standalone'] = {label = \"Indépendant\", click_function = 'modeStandalone', z_i = 0},\r\n}\r\n\r\nfunction onLoad()\r\n\r\n    metadata = JSON.decode(self.getGMNotes())\r\n    buttontable = {}\r\n    for key, value in pairs(buttonparams) do\r\n        if metadata[key] == true then\r\n            table.insert(buttontable,value)\r\n        end\r\n        \r\n    end\r\n\r\n    for _, button in pairs(buttontable) do\r\n        local data = {\r\n            click_function = button.click_function, \r\n            function_owner = self, \r\n            label = button.label, \r\n            position = {0, 0.1, button.z_i}, \r\n            scale = {0.3, 0.5, 0.3}, \r\n            width = 1500, \r\n            height = 400, \r\n            font_size = 250, \r\n            tooltip = \"Chaos bag du mode \"..button.label,\r\n            color = {0.5647, 0.4627, 0.2353, 1}, \r\n            font_color = {0.9041, 0.8313, 0.7356, 1},\r\n            hover_color = {99/255, 85/255, 48/255},\r\n            press_color = {192/255, 152/255, 94/255} }\r\n        self.createButton(data)\r\n        \r\n    end\r\n    jacqueline = getObjectFromGUID(jacqueline_guid)\r\n    chaosdata = jacqueline.getTable('chaosdata')\r\nend\r\n\r\nfunction modeEasy()\r\n    local  params ={}\r\n     params.mode = 'easy'\r\n     params.data = metadata.data\r\n     jacqueline.call('setChaosBag', params)\r\n  \r\nend\r\n\r\nfunction modeNormal()\r\n      local  params ={}\r\n       params.mode = 'normal'\r\n       params.data = metadata.data\r\n       jacqueline.call('setChaosBag', params)\r\n    \r\nend\r\n\r\nfunction modeHard()\r\n    local  params ={}\r\n     params.mode = 'hard'\r\n     params.data = metadata.data\r\n     jacqueline.call('setChaosBag', params)\r\n  \r\nend\r\n\r\nfunction modeExpert()\r\n    local  params ={}\r\n     params.mode = 'expert'\r\n     params.data = metadata.data\r\n     jacqueline.call('setChaosBag', params)\r\n  \r\nend\r\n\r\nfunction modeStandalone()\r\n    local  params ={}\r\n     params.mode = 'standalone'\r\n     params.data = metadata.data\r\n     jacqueline.call('setChaosBag', params)\r\n  \r\nend","LuaScriptState":"","XmlUI":""},{"GUID":"cdb67c","Name":"Custom_Model","Transform":{"posX":-20.2869,"posY":1.76630068,"posZ":11.4502,"rotX":0.00000497859855,"rotY":359.9766,"rotZ":1.07881677e-8,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Text Tool","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0,"g":0,"b":0,"a":0},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":false,"Snap":false,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":false,"Tooltip":false,"GridProjection":false,"HideWhenFaceDown":false,"Hands":true,"CustomMesh":{"MeshURL":"http://cloud-3.steamusercontent.com/ugc/1478820768302617365/27883B7913E0E69143C3AA03493B7E7C4E8C29C0/","DiffuseURL":"","NormalURL":"","ColliderURL":"","Convex":true,"MaterialIndex":1,"TypeIndex":0,"CastShadows":true},"LuaScript":"-- Code for bag to identify text tool objects\r\nmovableTextTool_cowgoesmoo33 = true\r\n\r\n-- Number of characters before the text box width expands.\r\nEXPAND_INTERVAL = 20\r\n\r\n-- This table controls what is passed between save/load\r\ndata = {}\r\n\r\nfunction onLoad(saved_data)\r\n  if saved_data ~= '' then\r\n    data = JSON.decode(saved_data)\r\n    if data.text ~= '' then\r\n      self.interactable = data.interactable\r\n      staticMode()\r\n      return\r\n    end\r\n  else\r\n    data = {size=200, color=Color(0,0,0), text='', interactable=true,\r\n        enter_to_finish=false, autolock=false, autolift=false,\r\n        hover_height=0.05, box_transparency=1}\r\n  end\r\n\r\n  inputMode()\r\nend\r\n\r\n-- True if in the middle of delay after pressing Enter (with enter_to_finish on)\r\nfinishing = false\r\nfunction input_func(obj, color, input, stillEditing)\r\n  local params = getBox(input)\r\n  if params then\r\n    params.value = input\r\n    self.editInput(params)\r\n  end\r\n\r\n  if not stillEditing then\r\n    data.text = input\r\n    updateState()\r\n    if input ~= '' then staticMode(color) end\r\n  elseif data.enter_to_finish then\r\n    -- If enter is pressed: remove last newline and force finish\r\n    if not finishing and input:sub(-1) == '\\n' then\r\n      finishing = true\r\n      -- Delay to avoid user's Enter keypress being detected (opens chat box)\r\n      Wait.frames(function()\r\n        input = input:sub(1, -2)\r\n        data.text = input\r\n        updateState()\r\n        if input ~= '' then staticMode(color) else inputMode() end\r\n        finishing = false\r\n      end, 10)\r\n    end\r\n  end\r\nend\r\n\r\n-- When the inpupt box appears and lets the player type in it.\r\nfunction inputMode()\r\n  self.clearContextMenu()\r\n  self.clearInputs()\r\n  self.clearButtons()\r\n\r\n  local size = getBox(data.text, true)\r\n\r\n  self.createInput({\r\n    input_function = \"input_func\",\r\n    function_owner = self,\r\n    label          = \"Type Here\",\r\n    alignment      = 3,\r\n    position       = {x=0, y=data.hover_height, z=0},\r\n    rotation       = {0, 180, 0},\r\n    width          = size.width,\r\n    height         = size.height,\r\n    color          = getBackground(data.color),\r\n    font_color     = data.color,\r\n    font_size      = data.size,\r\n    value          = data.text,\r\n  })\r\n\r\n  self.addContextMenuItem('Color: Object Tint', function(color)\r\n    applyMultiple(color, 'setColor')\r\n  end)\r\n  self.addContextMenuItem('Color: Player', function(color)\r\n    applyMultiple(color, 'setColor', {Color.fromString(color)})\r\n  end)\r\n  self.addContextMenuItem('Color: Black', function(color)\r\n    applyMultiple(color, 'setColor', {Color(0,0,0)})\r\n  end)\r\n  self.addContextMenuItem('Color: White', function(color)\r\n    applyMultiple(color, 'setColor', {Color(1,1,1)})\r\n  end)\r\n  self.addContextMenuItem('Size: Increase', function(color)\r\n    applyMultiple(color, 'changeSize', {50})\r\n  end, true)\r\n  self.addContextMenuItem('Size: Decrease', function(color)\r\n    applyMultiple(color, 'changeSize', {-50})\r\n  end, true)\r\nend\r\n\r\n-- When the input box disappears and displays the text.\r\nfunction staticMode(player)\r\n  self.clearContextMenu()\r\n  if data.autolock then\r\n    self.locked = true\r\n  end\r\n  if self.getInputs() and #self.getInputs() ~= 0 then\r\n    self.removeInput(0)\r\n  end\r\n\r\n  -- Clear from selecting player\r\n  if player then\r\n    self.removeFromPlayerSelection(player)\r\n  end\r\n\r\n  local displayText = data.text\r\n  if data.enter_to_finish then\r\n    displayText = displayText:gsub('%[n%]', '\\n')\r\n  end\r\n\r\n  self.createButton({\r\n    label=displayText,\r\n    click_function=\"none\",\r\n    function_owner=self,\r\n    position={0,data.hover_height,0}, rotation={0,180,0}, height=0, width=0,\r\n    font_color=data.color, font_size=data.size\r\n  })\r\n\r\n  self.addContextMenuItem('Edit Text', function(color)\r\n    self.removeFromPlayerSelection(color)\r\n    inputMode()\r\n  end)\r\n  self.addContextMenuItem('Clear', function(color)\r\n    applyMultiple(color, 'clear', _, true)\r\n  end)\r\n  self.addContextMenuItem('Color: Object Tint', function(color)\r\n    applyMultiple(color, 'setColor')\r\n  end)\r\n  self.addContextMenuItem('Color: Player', function(color)\r\n    applyMultiple(color, 'setColor', {Color.fromString(color)})\r\n  end)\r\n  self.addContextMenuItem('Color: Black', function(color)\r\n    applyMultiple(color, 'setColor', {Color(0,0,0)})\r\n  end)\r\n  self.addContextMenuItem('Color: White', function(color)\r\n    applyMultiple(color, 'setColor', {Color(1,1,1)})\r\n  end)\r\n  self.addContextMenuItem('Size: Increase', function(color)\r\n    applyMultiple(color, 'changeSize', {50})\r\n  end, true)\r\n  self.addContextMenuItem('Size: Decrease', function(color)\r\n    applyMultiple(color, 'changeSize', {-50})\r\n  end, true)\r\n  self.addContextMenuItem('Permanently Attach', attemptAttach)\r\n  self.addContextMenuItem('Permalock', function(color)\r\n    applyMultiple(color, 'permalock', _, true)\r\n  end)\r\nend\r\n\r\nfunction changeSize(params)\r\n  local delta = params[1]\r\n  local newSize = data.size + delta\r\n  if newSize > 800  or newSize < 50 then\r\n    return\r\n  end\r\n  data.size = newSize\r\n  updateState()\r\n  if self.getButtons() and #self.getButtons() ~= 0 then\r\n    self.editButton({font_size=data.size})\r\n  else\r\n    local size = getBox(data.text, true)\r\n    self.editInput({width=size.width, height=size.height, font_size=data.size})\r\n  end\r\nend\r\n\r\nfunction setColor(params)\r\n  if params and params[1] then\r\n    data.color = params[1]\r\n  else\r\n    data.color = self.getColorTint():setAt('a', 1) -- Take on color of object tint\r\n  end\r\n  updateState()\r\n  if self.getButtons() and #self.getButtons() ~= 0 then\r\n    self.editButton({font_color=data.color})\r\n  else\r\n    self.editInput({font_color=data.color, color=getBackground(data.color)})\r\n  end\r\nend\r\n\r\nfunction getBackground(color) --determines whether to use black or white depending on luminance\r\n  local r,g,b = Color(color):get()\r\n\r\n  local lum = 0.2126*r + 0.7152*g + 0.0722*b\r\n  if lum > 0.75 then\r\n    return {0.2,0.2,0.2, data.box_transparency}\r\n  else\r\n    return {1,1,1, data.box_transparency}\r\n  end\r\nend\r\n\r\nfunction clear()\r\n  data.text = ''\r\n  updateState()\r\n  inputMode()\r\nend\r\n\r\nfunction permalock()\r\n  self.interactable = false\r\n  data.interactable = false\r\n  updateState()\r\nend\r\n\r\nlocal target_script = [[\r\nfunction onLoad(script_state)\r\n  if script_state and script_state ~= '' then\r\n    local state = JSON.decode(script_state)\r\n    for _,entry in ipairs(state) do\r\n      self.createButton(entry)\r\n    end\r\n    self.addContextMenuItem('Clear All Text', function(color)\r\n      self.clearContextMenu()\r\n      self.clearButtons()\r\n      self.script_state = ''\r\n      self.script_code = ''\r\n    end)\r\n  end\r\nend\r\n]]\r\n\r\nfunction attemptAttach(player_color)\r\n  local objs = Player[player_color].getSelectedObjects()\r\n  local attachee\r\n  local attachers = {}\r\n  for _,obj in ipairs(objs) do\r\n    if obj.getVar('movableTextTool_cowgoesmoo33') then\r\n      if obj ~= self then\r\n        table.insert(attachers, obj)\r\n      end\r\n    else\r\n      if attachee then\r\n        broadcastToColor(\"More than one target selected.\", player_color)\r\n        return\r\n      else\r\n        attachee = obj\r\n      end\r\n    end\r\n  end\r\n  if attachee then\r\n    local code = attachee.script_code\r\n    if code and code ~= '' and code ~= target_script then\r\n      broadcastToColor(\"Warning: script on card has been overriden. Rewind time to undo.\", player_color)\r\n    end\r\n    for i,attacher in ipairs(attachers) do\r\n      attacher.call('attach', {target = attachee})\r\n    end\r\n    attach({target = attachee})\r\n    local type, flip = attachee.type, attachee.getRotation().z\r\n    if (type == 'Card' or type == 'Deck') and flip > 175 and flip < 185 then\r\n      broadcastToColor(\"Warning: text will not display if card or deck is facing down.\", player_color)\r\n    end\r\n  else\r\n    broadcastToColor(\"You must have a target object in your selection (using click-and-drag or Ctrl+Click) to use this option.\", player_color)\r\n  end\r\nend\r\n\r\nfunction attach(params)\r\n  local target = params.target\r\n  local displayText = data.text\r\n  if data.enter_to_finish then\r\n    displayText = displayText:gsub('%[n%]', '\\n')\r\n  end\r\n\r\n  local textRotation = self.getRotation():sub(target.getRotation())\r\n    :add(Vector(180, 0, 180))\r\n\r\n  local textPosition = target.positionToLocal(\r\n    self.getPosition():add(Vector(0, data.hover_height, 0))\r\n  )\r\n  textPosition.x = -textPosition.x\r\n\r\n  local textScale = {}\r\n  textScale.x = self.getScale().x / target.getScale().x\r\n  textScale.y = self.getScale().x / target.getScale().y\r\n  textScale.z = self.getScale().x / target.getScale().z\r\n\r\n  local details = {\r\n    label=displayText,\r\n    click_function=\"none\",\r\n    function_owner=nil,\r\n    position=textPosition,\r\n    rotation=textRotation,\r\n    scale=textScale,\r\n    height=0, width=0,\r\n    font_color=data.color, font_size=data.size\r\n  }\r\n\r\n  target.createButton(details)\r\n\r\n  local script_state = target.script_state\r\n  if script_state and script_state ~= '' then\r\n    local state = JSON.decode(script_state)\r\n    table.insert(state, details)\r\n    target.script_state = JSON.encode(state)\r\n  else\r\n    target.script_state = JSON.encode({[1]=details})\r\n  end\r\n\r\n  target.script_code = target_script\r\n\r\n  self.destruct()\r\nend\r\n\r\nfunction applyMultiple(player_color, func_string, params, static_only)\r\n  local objs = Player[player_color].getSelectedObjects()\r\n  for _,obj in ipairs(objs) do\r\n    if obj.getVar('movableTextTool_cowgoesmoo33') then\r\n      if not static_only or obj.call('isStatic') then\r\n        obj.call(func_string, params)\r\n      end\r\n    end\r\n  end\r\nend\r\n\r\nfunction isStatic()\r\n  local input = self.getInputs()\r\n  return not input or #input == 0\r\nend\r\n\r\nfunction getBox(input, force)\r\n  local maxLength, lineCount = EXPAND_INTERVAL, 1\r\n  local lineLength = 0\r\n  for i = 1, #input do\r\n    local c = input:sub(i,i)\r\n    if c == '\\n' then\r\n      lineCount = lineCount + 1\r\n      if lineLength > maxLength then maxLength = (math.floor(lineLength / EXPAND_INTERVAL) + 1) * EXPAND_INTERVAL end\r\n      lineLength = 0\r\n    else\r\n      lineLength = lineLength + 1\r\n    end\r\n  end\r\n  if lineLength > maxLength then maxLength = (math.floor(lineLength / EXPAND_INTERVAL) + 1) * EXPAND_INTERVAL end\r\n\r\n  newWidth = data.size * maxLength * 0.9\r\n  newHeight = data.size * lineCount + 23\r\n\r\n  if force or boxWidth ~= newWidth or boxHeight ~= newHeight then\r\n    boxWidth, boxHeight = newWidth, newHeight\r\n    return {width = boxWidth, height = boxHeight}\r\n  end\r\n  return nil\r\nend\r\n\r\ntemp_lift = nil\r\nfunction onPickUp(player_color)\r\n  if data.autolift then\r\n    local player = Player[player_color]\r\n    temp_lift = player.lift_height\r\n    player.lift_height = 0\r\n  end\r\nend\r\n\r\nfunction onDrop(player_color)\r\n  if data.autolift and temp_lift then\r\n    Player[player_color].lift_height = temp_lift\r\n  end\r\nend\r\n\r\n-- Should be called every time data is modified, allows info to be saved on copy/paste\r\nfunction updateState()\r\n  self.script_state = JSON.encode(data)\r\nend\r\n\r\nfunction onSave()\r\n  self.script_state = JSON.encode(data)\r\n  return self.script_state\r\nend","LuaScriptState":"{\"autolift\":false,\"autolock\":false,\"box_transparency\":1,\"color\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1},\"enter_to_finish\":false,\"hover_height\":0.05,\"interactable\":true,\"size\":200,\"text\":\"Bureau de l'administration\"}","XmlUI":""},{"GUID":"cff541","Name":"Custom_Tile","Transform":{"posX":-3.49999928,"posY":1.5067184,"posZ":16.5,"rotX":0.0108913761,"rotY":180.002151,"rotZ":0.004952538,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/vppt2my.png","ImageSecondaryURL":"https://i.imgur.com/vppt2my.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":"","States":{"2":{"GUID":"44b0c5","Name":"Custom_Tile","Transform":{"posX":-39.7933121,"posY":1.63758957,"posZ":2.038383,"rotX":359.9201,"rotY":269.9961,"rotZ":0.0168742146,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/HyfE8m8.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""},"3":{"GUID":"5b38c6","Name":"Custom_Tile","Transform":{"posX":-38.8217163,"posY":1.99356019,"posZ":0.4159239,"rotX":359.9201,"rotY":272.9828,"rotZ":0.01687373,"scaleX":0.8,"scaleY":1,"scaleZ":0.8},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/dHKBLoD.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""}}},{"GUID":"d324d6","Name":"Custom_Tile","Transform":{"posX":0.5001991,"posY":1.50713336,"posZ":20.5002,"rotX":0.0112011833,"rotY":135.008453,"rotZ":-0.00420238869,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/vppt2my.png","ImageSecondaryURL":"https://i.imgur.com/vppt2my.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":"","States":{"2":{"GUID":"44b0c5","Name":"Custom_Tile","Transform":{"posX":-39.7933121,"posY":1.63758957,"posZ":2.038383,"rotX":359.9201,"rotY":269.9961,"rotZ":0.0168742146,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/HyfE8m8.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""},"3":{"GUID":"5b38c6","Name":"Custom_Tile","Transform":{"posX":-38.8217163,"posY":1.99356019,"posZ":0.4159239,"rotX":359.9201,"rotY":272.9828,"rotZ":0.01687373,"scaleX":0.8,"scaleY":1,"scaleZ":0.8},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/dHKBLoD.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""}}},{"GUID":"da039d","Name":"Card","Transform":{"posX":4,"posY":1.51958025,"posZ":16,"rotX":0.0108915791,"rotY":179.999588,"rotZ":0.00494814245,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Hall du Musée","Description":"Miskatonic.","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02127\",\n  \"locationBack\": {\n    \"connections\": \"Circle|Diamond|Triangle|ExhibitHall\",\n    \"icons\": \"Square\"\n  },\n  \"locationFront\": {\n    \"connections\": \"Circle\",\n    \"icons\": \"Square\"\n  },\n  \"traits\": \"Miskatonic.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":19907,"SidewaysCard":false,"CustomDeck":{"199":{"FaceURL":"https://i.imgur.com/GI7QyCb.jpg","BackURL":"https://i.imgur.com/EUjYjZK.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"db953a","Name":"Custom_Model_Bag","Transform":{"posX":-25.5519848,"posY":1.83628774,"posZ":10.0262232,"rotX":0.07071575,"rotY":179.9062,"rotZ":0.00003717994,"scaleX":0.7,"scaleY":0.7,"scaleZ":0.7},"Nickname":"bag coin aléatoire","Description":"merci à Chr1Z pour le script","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.614982545,"g":0,"b":0},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"MaterialIndex":-1,"MeshIndex":-1,"CustomMesh":{"MeshURL":"https://pastebin.com/raw/ALrYhQGb","DiffuseURL":"http://cloud-3.steamusercontent.com/ugc/1936013662298208915/AACFC5A7E2B2828E449B2979907F1D94C4C5469C/","NormalURL":"","ColliderURL":"","Convex":true,"MaterialIndex":3,"TypeIndex":6,"CustomShader":{"SpecularColor":{"r":1,"g":1,"b":1},"SpecularIntensity":0,"SpecularSharpness":2,"FresnelStrength":0},"CastShadows":true},"Bag":{"Order":0},"LuaScript":"-- Random memory bag\r\n-- based on Utility memory bag by Directsun (Version 2.7.0)\r\n\r\nlocal CONFIG = {\r\n    MEMORY_GROUP = {\r\n        -- This determines how many frames to wait before actually placing objects onto the table when the \"Place\" button is clicked.\r\n        -- This gives the other bags time to recall their objects.\r\n        -- The delay ONLY occurs if other bags have objects out.\r\n        FRAME_DELAY_BEFORE_PLACING_OBJECTS = 30\r\n    }\r\n}\r\n\r\nmath.randomseed(os.time())\r\n\r\n--[[ Memory Bag Groups ]]\r\n--[[ Utility Memory Bags may be added to a named group, called a \"memory group\".\r\nYou can add a bag to a group through the bag's UI: \"Setup\" > \"Group Name\" (to the left of the bag).\r\nOnly one bag from a group may have it's contents placed on the table at a time.\r\nWhen \"Place\" is clicked on a bag, the other bags in it's memory group are recalled.\r\nBy default a memory bag is not in any group. It's memory group is \"nil\". --]]\r\n\r\nmemoryGroupName = { memoryBag = self }\r\nfunction memoryGroupName:get()\r\n    return self._name\r\nend\r\n\r\nfunction memoryGroupName:set(newName)\r\n    GlobalMemoryGroups:unregisterBagInGroup(self:get(), self.memoryBag.getGUID())\r\n    GlobalMemoryGroups:registerBagInGroup(newName, self.memoryBag.getGUID())\r\n\r\n    if newName == \"\" then\r\n        self._name = nil\r\n    else\r\n        self._name = newName\r\n    end\r\nend\r\n\r\n-- Click the \"Recall\" button on all other bags in my memory group.\r\nfunction recallOtherBagsInMyGroup()\r\n    for _, bag in ipairs(getOtherBagsInMyGroup()) do\r\n        bag.call('buttonClick_recall')\r\n    end\r\nend\r\n\r\n-- Return \"true\" if another bag in my memory group has any objects out on the table.\r\nfunction anyOtherBagsInMyGroupArePlaced()\r\n    for _, bag in ipairs(getOtherBagsInMyGroup()) do\r\n        local state = bag.call('areAnyOfMyObjectsPlaced')\r\n        if state then return true end\r\n    end\r\n\r\n    return false\r\nend\r\n\r\n-- Return \"true\" if at least one object from this memory bag is out on the table.\r\nfunction areAnyOfMyObjectsPlaced()\r\n    for guid, _ in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then\r\n            return true\r\n        end\r\n    end\r\n    return false\r\nend\r\n\r\nfunction getOtherBagsInMyGroup()\r\n    local bags = {}\r\n    for bagGuid, _ in pairs(GlobalMemoryGroups:getGroup(memoryGroupName:get())) do\r\n        if bagGuid ~= self.getGUID() then\r\n            bag = getObjectFromGUID(bagGuid)\r\n            -- \"bag\" is nill if it has been deleted since the last time onLoad() was called.\r\n            if bag ~= nil then\r\n                table.insert(bags, bag)\r\n            end\r\n        end\r\n    end\r\n    return bags\r\nend\r\n\r\n--[[\r\nThis object provides access to a variable stored on the \"Global script\".\r\nThe variable holds the names & guids of all memory bag groups.\r\nThe global variable is a table and holds data like this:\r\n{\r\n    'My First Group Name' = {\r\n        '805ebd' = {},\r\n        '35cc21' = {},\r\n        'fc8886' = {},\r\n    },\r\n    'My Second Group Name' = {\r\n        'f50264' = {},\r\n        '5f5f63' = {},\r\n    },\r\n}\r\n--]]\r\nGlobalMemoryGroups = { NAME_OF_GLOBAL_VARIABLE = '_GlobalUtilityMemoryBagGroups' }\r\n\r\n-- Call me inside this script's \"onLoad()\" method!\r\nfunction GlobalMemoryGroups:onLoad(myGuid)\r\n    -- Create and initialize the global variable if it doesn't already exist:\r\n    if self:_getGroups() == nil then\r\n        self:_setGroups({})\r\n    end\r\nend\r\n\r\n-- Return the GUIDs of all bags in the \"groupName\". The return value is a dictionary that maps [GUID -> empty table].\r\nfunction GlobalMemoryGroups:getGroup(groupName)\r\n    guids = self:_getGroups()[groupName] or {}\r\n    return guids\r\nend\r\n\r\n-- Registers a bag in a memory group. Creates a new group if one doesn't exist.\r\nfunction GlobalMemoryGroups:registerBagInGroup(groupName, bagGuid)\r\n    if groupName == nil or groupName == \"\" then\r\n        return\r\n    end\r\n\r\n    self:_tryCreateNewGroup(groupName)\r\n    local groups = self:_getGroups()\r\n    groups[groupName][bagGuid] = {}\r\n    self:_setGroups(groups)\r\nend\r\n\r\n-- Removes this bag from the memory group.\r\nfunction GlobalMemoryGroups:unregisterBagInGroup(groupName, bagGuid)\r\n    local groups = self:_getGroups()\r\n    local group = groups[groupName]\r\n    if group ~= nil then\r\n        group[bagGuid] = nil\r\n        self:_setGroups(groups)\r\n    end\r\nend\r\n\r\n-- Return the global variable, which is a table holding all memory group names & guids.\r\nfunction GlobalMemoryGroups:_getGroups()\r\n    return Global.getTable(self.NAME_OF_GLOBAL_VARIABLE)\r\nend\r\n\r\n-- Override the global variable (i.e. the entire table).\r\nfunction GlobalMemoryGroups:_setGroups(newTable)\r\n    Global.setTable(self.NAME_OF_GLOBAL_VARIABLE, newTable)\r\nend\r\n\r\n-- Add a new memory group named \"groupName\" to the global variable, if one doesn't already exist.\r\nfunction GlobalMemoryGroups:_tryCreateNewGroup(groupName)\r\n    local groups = self:_getGroups()\r\n    if groups[groupName] == nil then\r\n        groups[groupName] = {}\r\n        self:_setGroups(groups)\r\n    end\r\nend\r\n\r\n-- This object controls the \"Group Name\" input text field that is part of the bag's ingame UI.\r\ngroupNameInput = {\r\n    greyedOutText     = \"Group Name\",\r\n    widthPerCharacter = 100,\r\n    padding           = 4,\r\n    memoryBag         = self\r\n}\r\nfunction groupNameInput:create(optionalStartingValue)\r\n    local effectiveText = optionalStartingValue or self.greyedOutText\r\n    local width = self:computeWidth(effectiveText)\r\n\r\n    self.memoryBag.createInput({\r\n        label = self.greyedOutText,\r\n        value = optionalStartingValue or nil,\r\n        alignment = 3, -- Center aligned\r\n        input_function = \"groupNameInput_onCharacterTyped\", function_owner = self.memoryBag,\r\n        position = { 2.1, 0.3, 0 }, rotation = { 0, 270, 0 }, width = width, height = 350,\r\n        font_size = 250, color = { 0, 0, 0 }, font_color = { 1, 1, 1 },\r\n    })\r\nend\r\n\r\nfunction groupNameInput:computeWidth(text)\r\n    return (string.len(text) + self.padding) * self.widthPerCharacter\r\nend\r\n\r\nfunction groupNameInput:updatedWidth(text)\r\n    self.memoryBag.editInput({\r\n        index = 0,\r\n        width = self:computeWidth(text)\r\n    })\r\nend\r\n\r\nfunction groupNameInput:onCharacterTyped(text, stillEditing)\r\n    if stillEditing then\r\n        self:updatedWidth(text)\r\n    else\r\n        if text == \"\" then\r\n            self:updatedWidth(self.greyedOutText)\r\n        end\r\n    end\r\nend\r\n\r\nfunction groupNameInput_onCharacterTyped(memoryBag, playerColor, text, stillEditing)\r\n    groupNameInput:onCharacterTyped(text, stillEditing)\r\nend\r\n\r\nfunction groupNameInput:setGroupNameToInputField()\r\n    local inputFields = self.memoryBag.getInputs()\r\n    if inputFields ~= nil then\r\n        -- Get input field 0, which corresponds to the groupNameInput.\r\n        -- Unfortunately \"self.getInputs()\" doesn't return the inputs in a guaranteed order.\r\n        local nameField = nil\r\n        for _, field in ipairs(inputFields) do\r\n            if field.index == 0 then\r\n                nameField = field\r\n            end\r\n        end\r\n\r\n        memoryGroupName:set(nameField.value)\r\n    end\r\nend\r\n\r\nfunction updateSave()\r\n    local data_to_save = { [\"ml\"] = memoryList, [\"groupName\"] = memoryGroupName:get() }\r\n    saved_data = JSON.encode(data_to_save)\r\n    self.script_state = saved_data\r\nend\r\n\r\nfunction combineMemoryFromBagsWithin()\r\n    local bagObjList = self.getObjects()\r\n    for _, bagObj in ipairs(bagObjList) do\r\n        local data = bagObj.lua_script_state\r\n        if data ~= nil then\r\n            local j = JSON.decode(data)\r\n            if j ~= nil and j.ml ~= nil then\r\n                for guid, entry in pairs(j.ml) do\r\n                    memoryList[guid] = entry\r\n                end\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\nfunction updateMemoryWithMoves()\r\n    memoryList = memoryListBackup\r\n    --get the first transposed object's coordinates\r\n    local obj = getObjectFromGUID(moveGuid)\r\n\r\n    -- p1 is where needs to go, p2 is where it was\r\n    local refObjPos = memoryList[moveGuid].pos\r\n    local deltaPos = findOffsetDistance(obj.getPosition(), refObjPos, nil)\r\n    local movedRotation = obj.getRotation()\r\n    for guid, entry in pairs(memoryList) do\r\n        memoryList[guid].pos.x = entry.pos.x - deltaPos.x\r\n        memoryList[guid].pos.y = entry.pos.y - deltaPos.y\r\n        memoryList[guid].pos.z = entry.pos.z - deltaPos.z\r\n    end\r\n    moveList = {}\r\nend\r\n\r\nfunction onload(saved_data)\r\n    GlobalMemoryGroups:onLoad(self.getGUID())\r\n    AllMemoryBagsInScene:add(self.getGUID())\r\n\r\n    fresh = true\r\n    if saved_data ~= \"\" then\r\n        local loaded_data = JSON.decode(saved_data)\r\n        --Set up information off of loaded_data\r\n        memoryList = loaded_data.ml\r\n        memoryGroupName:set(loaded_data.groupName)\r\n    else\r\n        --Set up information for if there is no saved saved data\r\n        memoryList = {}\r\n        memoryGroupName:set(nil)\r\n    end\r\n\r\n    moveList = {}\r\n    moveGuid = nil\r\n\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        fresh = false\r\n        createMemoryActionButtons()\r\n    end\r\nend\r\n\r\n--Beginning Setup\r\n\r\n--Make setup button\r\nfunction createSetupButton()\r\n    self.createButton({\r\n      label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n      position={0,0.3,2}, rotation={0,0,0}, height=350, width=800,\r\n      font_size=250, color={0,0,0}, font_color={1,1,1}\r\n  })\r\nend\r\n\r\n--Triggered by Transpose button\r\nfunction buttonClick_transpose()\r\n    moveGuid = nil\r\n    broadcastToAll(\"Select one object and move it- all objects will move relative to the new location\", { 0.75, 0.75, 1 })\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(true)\r\n    createSetupActionButtons(true)\r\nend\r\n\r\n--Triggered by setup button,\r\nfunction buttonClick_setup()\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(false)\r\n    createSetupActionButtons(false)\r\nend\r\n\r\nfunction getAllObjectsInMemory()\r\n    local objTable = {}\r\n    local curObj = {}\r\n\r\n    for guid in pairs(memoryListBackup) do\r\n        curObj = getObjectFromGUID(guid)\r\n        table.insert(objTable, curObj)\r\n    end\r\n\r\n    return objTable\r\nend\r\n\r\n--Creates selection buttons on objects\r\nfunction createButtonsOnAllObjects(move)\r\n    buttonIndexMap = {}\r\n    local howManyButtons = 0\r\n\r\n    local objsToHaveButtons = {}\r\n    if move == true then\r\n        objsToHaveButtons = getAllObjectsInMemory()\r\n    else\r\n        objsToHaveButtons = getAllObjects()\r\n    end\r\n\r\n    for _, obj in ipairs(objsToHaveButtons) do\r\n        if obj ~= self then\r\n            --On a normal bag, the button positions aren't the same size as the bag.\r\n            globalScaleFactor = 1 * 1 / self.getScale().x\r\n            --Super sweet math to set button positions\r\n            local selfPos = self.getPosition()\r\n            local objPos = obj.getPosition()\r\n            local deltaPos = findOffsetDistance(selfPos, objPos, obj)\r\n            local objPos = rotateLocalCoordinates(deltaPos, self)\r\n            objPos.x = -objPos.x * globalScaleFactor\r\n            objPos.y = objPos.y * globalScaleFactor + 2\r\n            objPos.z = objPos.z * globalScaleFactor\r\n            --Workaround for custom PDFs\r\n            if obj.Book then\r\n                objPos.y = objPos.y + 0.5\r\n            end\r\n            --Offset rotation of bag\r\n            local rot = self.getRotation()\r\n            rot.y = -rot.y + 180\r\n            --Create function\r\n            local funcName = \"selectButton_\" .. howManyButtons\r\n            local func = function() buttonClick_selection(obj, move) end\r\n            local color = { 0.75, 0.25, 0.25, 0.6 }\r\n            local colorMove = { 0, 0, 1, 0.6 }\r\n            if move == true then\r\n                color = colorMove\r\n            end\r\n            self.setVar(funcName, func)\r\n            self.createButton({\r\n                click_function = funcName, function_owner = self,\r\n                position = objPos, rotation = rot, height = 1000, width = 1000,\r\n                color = color,\r\n            })\r\n            buttonIndexMap[obj.getGUID()] = howManyButtons\r\n            howManyButtons = howManyButtons + 1\r\n        end\r\n    end\r\nend\r\n\r\n  --Creates submit and cancel buttons\r\n  function createSetupActionButtons(move)\r\n      self.createButton({\r\n         label=\"Annuler\", click_function=\"buttonClick_cancel\", function_owner=self,\r\n         position={-1.15,0.3,2.1}, rotation={0,0,0}, height=350, width=1100,\r\n         font_size=250, color={0,0,0}, font_color={1,1,1}\r\n      })\r\n\r\n      self.createButton({\r\n        label=\"Valider\", click_function=\"buttonClick_submit\", function_owner=self,\r\n        position={-1.15,0.3,2.8}, rotation={0,0,0}, height=350, width=1100,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n      })\r\n\r\n      if move == false then\r\n        self.createButton({\r\n            label=\"Ajouter\", click_function=\"buttonClick_add\", function_owner=self,\r\n            position={1.15,0.3,2.1}, rotation={0,0,0}, height=350, width=1100,\r\n            font_size=250, color={0,0,0}, font_color={0.25,1,0.25}\r\n          })\r\n\r\n          self.createButton({\r\n              label=\"Sélection\", click_function=\"editDragSelection\", function_owner=self,\r\n              position={-1.15,0.3,3.5}, rotation={0,0,0}, height=350, width=1100,\r\n              font_size=250, color={0,0,0}, font_color={1,1,1}\r\n          })\r\n\r\n          if fresh == false then\r\n              self.createButton({\r\n                  label=\"Mise à Jour\", click_function=\"buttonClick_setNew\", function_owner=self,\r\n                  position={1.15,0.3,3.5}, rotation={0,0,0}, height=350, width=1100,\r\n                  font_size=180, color={0,0,0}, font_color={0.75,0.75,1}\r\n              })\r\n              self.createButton({\r\n                  label=\"Retirer\", click_function=\"buttonClick_remove\", function_owner=self,\r\n                  position={1.15,0.3,2.8}, rotation={0,0,0}, height=350, width=1100,\r\n                  font_size=250, color={0,0,0}, font_color={1,0.25,0.25}\r\n              })\r\n          end\r\n      end\r\n\r\n      self.createButton({\r\n          label=\"Reset\", click_function=\"buttonClick_reset\", function_owner=self,\r\n          position={0,0.3,-2}, rotation={0,0,0}, height=350, width=800,\r\n          font_size=250, color={0,0,0}, font_color={1,1,1}\r\n      })\r\n  end\r\n\r\n\r\n--During Setup\r\n\r\n--Checks or unchecks buttons\r\nfunction buttonClick_selection(obj, move)\r\n    local index = buttonIndexMap[obj.getGUID()]\r\n    local colorMove = { 0, 0, 1, 0.6 }\r\n    local color = { 0, 1, 0, 0.6 }\r\n\r\n    previousGuid = selectedGuid\r\n    selectedGuid = obj.getGUID()\r\n\r\n    theList = memoryList\r\n    if move == true then\r\n        theList = moveList\r\n        if previousGuid ~= nil and previousGuid ~= selectedGuid then\r\n            local prevObj = getObjectFromGUID(previousGuid)\r\n            prevObj.highlightOff()\r\n            self.editButton({ index = previousIndex, color = colorMove })\r\n            theList[previousGuid] = nil\r\n        end\r\n        previousIndex = index\r\n    end\r\n\r\n    if theList[selectedGuid] == nil then\r\n        self.editButton({ index = index, color = color })\r\n        --Adding pos/rot to memory table\r\n        local pos, rot = obj.getPosition(), obj.getRotation()\r\n        --I need to add it like this or it won't save due to indexing issue\r\n        theList[obj.getGUID()] = {\r\n            pos = { x = round(pos.x, 4), y = round(pos.y, 4), z = round(pos.z, 4) },\r\n            rot = { x = round(rot.x, 4), y = round(rot.y, 4), z = round(rot.z, 4) },\r\n            lock = obj.getLock(),\r\n            tint = obj.getColorTint()\r\n        }\r\n        obj.highlightOn({ 0, 1, 0 })\r\n    else\r\n        color = { 0.75, 0.25, 0.25, 0.6 }\r\n        if move == true then\r\n            color = colorMove\r\n        end\r\n        self.editButton({ index = index, color = color })\r\n        theList[obj.getGUID()] = nil\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\nfunction editDragSelection(bagObj, player, remove)\r\n    local selectedObjs = Player[player].getSelectedObjects()\r\n    if not remove then\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            --Ignore if already in the memory list, or does not have a button\r\n            if index and not memoryList[obj.getGUID()] then\r\n                self.editButton({ index = index, color = { 0, 1, 0, 0.6 } })\r\n                --Adding pos/rot to memory table\r\n                local pos, rot = obj.getPosition(), obj.getRotation()\r\n                --I need to add it like this or it won't save due to indexing issue\r\n                memoryList[obj.getGUID()] = {\r\n                    pos = { x = round(pos.x, 4), y = round(pos.y, 4), z = round(pos.z, 4) },\r\n                    rot = { x = round(rot.x, 4), y = round(rot.y, 4), z = round(rot.z, 4) },\r\n                    lock = obj.getLock(),\r\n                    tint = obj.getColorTint()\r\n                }\r\n                obj.highlightOn({ 0, 1, 0 })\r\n            end\r\n        end\r\n    else\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            if index and memoryList[obj.getGUID()] then\r\n                color = { 0.75, 0.25, 0.25, 0.6 }\r\n                self.editButton({ index = index, color = color })\r\n                memoryList[obj.getGUID()] = nil\r\n                obj.highlightOff()\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\n--Cancels selection process\r\nfunction buttonClick_cancel()\r\n    memoryList = memoryListBackup\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        createMemoryActionButtons()\r\n    end\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Sélection annulée\", { 1, 1, 1 })\r\n    moveGuid = nil\r\nend\r\n\r\n--Saves selections\r\nfunction buttonClick_submit()\r\n    fresh = false\r\n    if next(moveList) ~= nil then\r\n        for guid in pairs(moveList) do\r\n            moveGuid = guid\r\n        end\r\n        if memoryListBackup[moveGuid] == nil then\r\n            broadcastToAll(\"Item selected for moving is not already in memory\", { 1, 0.25, 0.25 })\r\n        else\r\n            broadcastToAll(\"Moving all items in memory relative to new objects position!\", { 0.75, 0.75, 1 })\r\n            self.clearButtons()\r\n            self.clearInputs()\r\n            createMemoryActionButtons()\r\n            local count = 0\r\n            for guid in pairs(moveList) do\r\n                moveGuid = guid\r\n                count = count + 1\r\n                local obj = getObjectFromGUID(guid)\r\n                if obj ~= nil then obj.highlightOff() end\r\n            end\r\n            updateMemoryWithMoves()\r\n            updateSave()\r\n            buttonClick_place()\r\n        end\r\n    elseif next(memoryList) == nil and moveGuid == nil then\r\n        memoryList = memoryListBackup\r\n        broadcastToAll(\"No selections made.\", { 0.75, 0.25, 0.25 })\r\n    end\r\n    combineMemoryFromBagsWithin()\r\n    groupNameInput:setGroupNameToInputField()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count .. \" Objects Saved\", { 1, 1, 1 })\r\n    updateSave()\r\n    moveGuid = nil\r\nend\r\n\r\nfunction combineTables(first_table, second_table)\r\n    for k, v in pairs(second_table) do first_table[k] = v end\r\nend\r\n\r\nfunction buttonClick_add()\r\n    fresh = false\r\n    combineTables(memoryList, memoryListBackup)\r\n    broadcastToAll(\"Adding internal bags and selections to existing memory\", { 0.25, 0.75, 0.25 })\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count .. \" Objects Saved\", { 1, 1, 1 })\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_remove()\r\n    broadcastToAll(\"Removing Selected Entries From Memory\", { 1.0, 0.25, 0.25 })\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        memoryListBackup[guid] = nil\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count .. \" Objects Removed\", { 1, 1, 1 })\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_setNew()\r\n    broadcastToAll(\"Setting new position relative to items in memory\", { 0.75, 0.75, 1 })\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        guid = obj.guid\r\n        if memoryListBackup[guid] ~= nil then\r\n            count = count + 1\r\n            memoryListBackup[guid].pos = obj.getPosition()\r\n            memoryListBackup[guid].rot = obj.getRotation()\r\n            memoryListBackup[guid].lock = obj.getLock()\r\n            memoryListBackup[guid].tint = obj.getColorTint()\r\n        end\r\n    end\r\n    broadcastToAll(count .. \" Objects Saved\", { 1, 1, 1 })\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\n--Resets bag to starting status\r\nfunction buttonClick_reset()\r\n    fresh = true\r\n    memoryList = {}\r\n    memoryGroupName:set(nil)\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createSetupButton()\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Tool Reset\", { 1, 1, 1 })\r\n    updateSave()\r\nend\r\n\r\n--After Setup\r\n\r\n--Creates recall and place buttons\r\nfunction createMemoryActionButtons()\r\n    self.createButton({\r\n        label=\"Placer au hasard\", click_function=\"buttonClick_place\", function_owner=self,\r\n        position={0,0.3,2}, rotation={0,0,0}, height=350, width=2000,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Ranger\", click_function=\"buttonClick_recall\", function_owner=self,\r\n        position={0,0.3,2.8}, rotation={0,0,0}, height=350, width=1000,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n        position={2,0.3,0}, rotation={0,90,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    ---    self.createButton({\r\n    ---      label=\"Bouger\", click_function=\"buttonClick_transpose\", function_owner=self,\r\n    ---      position={-2,0.3,0.8}, rotation={0,270,0}, height=350, width=800,\r\n    ---      font_size=250, color={0,0,0}, font_color={0.75,0.75,1}\r\n    ---\r\nend\r\n\r\n--Sends objects from bag/table to their saved position/rotation\r\nfunction buttonClick_place()\r\n    if anyOtherBagsInMyGroupArePlaced() then\r\n        recallOtherBagsInMyGroup()\r\n        Wait.frames(_placeObjects, CONFIG.MEMORY_GROUP.FRAME_DELAY_BEFORE_PLACING_OBJECTS)\r\n    else\r\n        _placeObjects()\r\n    end\r\nend\r\n\r\nfunction _placeObjects()\r\n    local bagObjList = self.getObjects()\r\n\r\n    -- randomize memorylist position\r\n    local positionList = {}\r\n    for guid, entry in pairs(memoryList) do\r\n        table.insert(positionList, memoryList[guid].pos)\r\n    end\r\n\r\n    for i = #positionList, 2, -1 do\r\n        local j = math.random(i)\r\n        positionList[i], positionList[j] = positionList[j], positionList[i]\r\n    end\r\n\r\n    local i = 1\r\n    for guid, entry in pairs(memoryList) do\r\n        memoryList[guid].pos = positionList[i]\r\n        i = i + 1\r\n    end\r\n\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        --If obj is out on the table, move it to the saved pos/rot\r\n        if obj ~= nil then\r\n            obj.setPositionSmooth(entry.pos)\r\n            obj.setRotationSmooth(entry.rot)\r\n            obj.setLock(entry.lock)\r\n            obj.setColorTint(entry.tint)\r\n        else\r\n            --If obj is inside of the bag\r\n            for _, bagObj in ipairs(bagObjList) do\r\n                if bagObj.guid == guid then\r\n                    local item = self.takeObject({\r\n                        guid = guid, position = entry.pos, rotation = entry.rot, smooth = false\r\n                    })\r\n                    item.setLock(entry.lock)\r\n                    item.setColorTint(entry.tint)\r\n                    break\r\n                end\r\n            end\r\n        end\r\n    end\r\n    broadcastToAll(\"Objets placés au hasard\", {1,1,1})\r\nend\r\n\r\n--Recalls objects to bag from table\r\nfunction buttonClick_recall()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then self.putObject(obj) end\r\n    end\r\n    broadcastToAll(\"Objets rangés\", {1,1,1})\r\nend\r\n\r\n--Utility functions\r\n\r\n--Find delta (difference) between 2 x/y/z coordinates\r\nfunction findOffsetDistance(p1, p2, obj)\r\n    local yOffset = 0\r\n    if obj ~= nil then\r\n        local bounds = obj.getBounds()\r\n        yOffset = (bounds.size.y - bounds.offset.y)\r\n    end\r\n    local deltaPos = {}\r\n    deltaPos.x = (p2.x - p1.x)\r\n    deltaPos.y = (p2.y - p1.y) + yOffset\r\n    deltaPos.z = (p2.z - p1.z)\r\n    return deltaPos\r\nend\r\n\r\n--Used to rotate a set of coordinates by an angle\r\nfunction rotateLocalCoordinates(desiredPos, obj)\r\n    local objPos, objRot = obj.getPosition(), obj.getRotation()\r\n    local angle = math.rad(objRot.y)\r\n    local x = desiredPos.x * math.cos(angle) - desiredPos.z * math.sin(angle)\r\n    local z = desiredPos.x * math.sin(angle) + desiredPos.z * math.cos(angle)\r\n    --return {x=objPos.x+x, y=objPos.y+desiredPos.y, z=objPos.z+z}\r\n    return { x = x, y = desiredPos.y, z = z }\r\nend\r\n\r\nfunction rotateMyCoordinates(desiredPos, obj)\r\n    local angle = math.rad(obj.getRotation().y)\r\n    local x = desiredPos.x * math.sin(angle)\r\n    local z = desiredPos.z * math.cos(angle)\r\n    return { x = x, y = desiredPos.y, z = z }\r\nend\r\n\r\n--Coroutine delay, in seconds\r\nfunction wait(time)\r\n    local start = os.time()\r\n    repeat coroutine.yield(0) until os.time() > start + time\r\nend\r\n\r\n--Duplicates a table (needed to prevent it making reference to the same objects)\r\nfunction duplicateTable(oldTable)\r\n    local newTable = {}\r\n    for k, v in pairs(oldTable) do\r\n        newTable[k] = v\r\n    end\r\n    return newTable\r\nend\r\n\r\n--Moves scripted highlight from all objects\r\nfunction removeAllHighlights()\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\n--Round number (num) to the Nth decimal (dec)\r\nfunction round(num, dec)\r\n    local mult = 10 ^ (dec or 0)\r\n    return math.floor(num * mult + 0.5) / mult\r\nend\r\n\r\n--[[ This object provides access to a variable stored on the \"Global script\".\r\nThe variable holds the GUIDs for every Utility Memory Bag in the scene.\r\nExample: {'805ebd', '35cc21', 'fc8886', 'f50264', '5f5f63'} --]]\r\nAllMemoryBagsInScene = {\r\n    NAME_OF_GLOBAL_VARIABLE = \"_UtilityMemoryBag_AllMemoryBagsInScene\"\r\n}\r\n\r\nfunction AllMemoryBagsInScene:add(guid)\r\n    local guids = Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\n    table.insert(guids, guid)\r\n    Global.setTable(self.NAME_OF_GLOBAL_VARIABLE, guids)\r\nend\r\n\r\nfunction AllMemoryBagsInScene:getGuidList()\r\n    return Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\nend\r\n","LuaScriptState":"{\"ml\":{\"0623c7\":{\"lock\":false,\"pos\":{\"x\":-23.9999465942383,\"y\":1.77885556221008,\"z\":23.000057220459},\"rot\":{\"x\":-5.15162901137955E-06,\"y\":180.000106811523,\"z\":1.36460002408967E-07},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"f07c33\":{\"lock\":false,\"pos\":{\"x\":-3.50000262260437,\"y\":1.51832711696625,\"z\":6.00000143051147},\"rot\":{\"x\":0.0108914189040661,\"y\":180.001556396484,\"z\":0.004948521964252},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}}}}","XmlUI":"","ContainedObjects":[{"GUID":"0623c7","Name":"Card","Transform":{"posX":-3.500003,"posY":1.51832712,"posZ":5.999997,"rotX":0.0108915474,"rotY":180.000137,"rotZ":0.00494824257,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Bureau de la Sécurité","Description":"Miskatonic.","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02129\",\n  \"locationBack\": {\n    \"connections\": \"Square\",\n    \"icons\": \"Diamond\",\n    \"uses\": {\n      \"countPerInvestigator\": 2,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    }\n  },\n  \"locationFront\": {\n    \"connections\": \"Square\",\n    \"icons\": \"Diamond\"\n  },\n  \"traits\": \"Miskatonic.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":19910,"SidewaysCard":false,"CustomDeck":{"199":{"FaceURL":"https://i.imgur.com/GI7QyCb.jpg","BackURL":"https://i.imgur.com/EUjYjZK.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"f07c33","Name":"Card","Transform":{"posX":-23.9999371,"posY":1.77890456,"posZ":23.0000687,"rotX":-0.00000491719265,"rotY":180.001617,"rotZ":1.4642066e-7,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Bureau de la Sécurité","Description":"Miskatonic.","GMNotes":"{\n  \"id\": \"02128\",\n  \"locationBack\": {\n    \"connections\": \"Heart|Hourglass|SlantedEquals\",\n    \"icons\": \"Crescent\",\n    \"uses\": {\n      \"countPerInvestigator\": 2,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    },\n    \"victory\": 1\n  },\n  \"locationFront\": {\n    \"connections\": \"Heart|Hourglass|SlantedEquals\",\n    \"icons\": \"Crescent\"\n  },\n  \"traits\": \"Restricted. Casino.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":19911,"SidewaysCard":false,"CustomDeck":{"199":{"FaceURL":"https://i.imgur.com/GI7QyCb.jpg","BackURL":"https://i.imgur.com/EUjYjZK.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""}]},{"GUID":"ebd824","Name":"Custom_Model","Transform":{"posX":-22.10199,"posY":1.76629937,"posZ":25.5858116,"rotX":0.00000532175227,"rotY":0.0000415416835,"rotZ":1.5701697e-7,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Text Tool","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0,"g":0,"b":0,"a":0},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":false,"Snap":false,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":false,"Tooltip":false,"GridProjection":false,"HideWhenFaceDown":false,"Hands":true,"CustomMesh":{"MeshURL":"http://cloud-3.steamusercontent.com/ugc/1478820768302617365/27883B7913E0E69143C3AA03493B7E7C4E8C29C0/","DiffuseURL":"","NormalURL":"","ColliderURL":"","Convex":true,"MaterialIndex":1,"TypeIndex":0,"CastShadows":true},"LuaScript":"-- Code for bag to identify text tool objects\r\nmovableTextTool_cowgoesmoo33 = true\r\n\r\n-- Number of characters before the text box width expands.\r\nEXPAND_INTERVAL = 20\r\n\r\n-- This table controls what is passed between save/load\r\ndata = {}\r\n\r\nfunction onLoad(saved_data)\r\n  if saved_data ~= '' then\r\n    data = JSON.decode(saved_data)\r\n    if data.text ~= '' then\r\n      self.interactable = data.interactable\r\n      staticMode()\r\n      return\r\n    end\r\n  else\r\n    data = {size=200, color=Color(0,0,0), text='', interactable=true,\r\n        enter_to_finish=false, autolock=false, autolift=false,\r\n        hover_height=0.05, box_transparency=1}\r\n  end\r\n\r\n  inputMode()\r\nend\r\n\r\n-- True if in the middle of delay after pressing Enter (with enter_to_finish on)\r\nfinishing = false\r\nfunction input_func(obj, color, input, stillEditing)\r\n  local params = getBox(input)\r\n  if params then\r\n    params.value = input\r\n    self.editInput(params)\r\n  end\r\n\r\n  if not stillEditing then\r\n    data.text = input\r\n    updateState()\r\n    if input ~= '' then staticMode(color) end\r\n  elseif data.enter_to_finish then\r\n    -- If enter is pressed: remove last newline and force finish\r\n    if not finishing and input:sub(-1) == '\\n' then\r\n      finishing = true\r\n      -- Delay to avoid user's Enter keypress being detected (opens chat box)\r\n      Wait.frames(function()\r\n        input = input:sub(1, -2)\r\n        data.text = input\r\n        updateState()\r\n        if input ~= '' then staticMode(color) else inputMode() end\r\n        finishing = false\r\n      end, 10)\r\n    end\r\n  end\r\nend\r\n\r\n-- When the inpupt box appears and lets the player type in it.\r\nfunction inputMode()\r\n  self.clearContextMenu()\r\n  self.clearInputs()\r\n  self.clearButtons()\r\n\r\n  local size = getBox(data.text, true)\r\n\r\n  self.createInput({\r\n    input_function = \"input_func\",\r\n    function_owner = self,\r\n    label          = \"Type Here\",\r\n    alignment      = 3,\r\n    position       = {x=0, y=data.hover_height, z=0},\r\n    rotation       = {0, 180, 0},\r\n    width          = size.width,\r\n    height         = size.height,\r\n    color          = getBackground(data.color),\r\n    font_color     = data.color,\r\n    font_size      = data.size,\r\n    value          = data.text,\r\n  })\r\n\r\n  self.addContextMenuItem('Color: Object Tint', function(color)\r\n    applyMultiple(color, 'setColor')\r\n  end)\r\n  self.addContextMenuItem('Color: Player', function(color)\r\n    applyMultiple(color, 'setColor', {Color.fromString(color)})\r\n  end)\r\n  self.addContextMenuItem('Color: Black', function(color)\r\n    applyMultiple(color, 'setColor', {Color(0,0,0)})\r\n  end)\r\n  self.addContextMenuItem('Color: White', function(color)\r\n    applyMultiple(color, 'setColor', {Color(1,1,1)})\r\n  end)\r\n  self.addContextMenuItem('Size: Increase', function(color)\r\n    applyMultiple(color, 'changeSize', {50})\r\n  end, true)\r\n  self.addContextMenuItem('Size: Decrease', function(color)\r\n    applyMultiple(color, 'changeSize', {-50})\r\n  end, true)\r\nend\r\n\r\n-- When the input box disappears and displays the text.\r\nfunction staticMode(player)\r\n  self.clearContextMenu()\r\n  if data.autolock then\r\n    self.locked = true\r\n  end\r\n  if self.getInputs() and #self.getInputs() ~= 0 then\r\n    self.removeInput(0)\r\n  end\r\n\r\n  -- Clear from selecting player\r\n  if player then\r\n    self.removeFromPlayerSelection(player)\r\n  end\r\n\r\n  local displayText = data.text\r\n  if data.enter_to_finish then\r\n    displayText = displayText:gsub('%[n%]', '\\n')\r\n  end\r\n\r\n  self.createButton({\r\n    label=displayText,\r\n    click_function=\"none\",\r\n    function_owner=self,\r\n    position={0,data.hover_height,0}, rotation={0,180,0}, height=0, width=0,\r\n    font_color=data.color, font_size=data.size\r\n  })\r\n\r\n  self.addContextMenuItem('Edit Text', function(color)\r\n    self.removeFromPlayerSelection(color)\r\n    inputMode()\r\n  end)\r\n  self.addContextMenuItem('Clear', function(color)\r\n    applyMultiple(color, 'clear', _, true)\r\n  end)\r\n  self.addContextMenuItem('Color: Object Tint', function(color)\r\n    applyMultiple(color, 'setColor')\r\n  end)\r\n  self.addContextMenuItem('Color: Player', function(color)\r\n    applyMultiple(color, 'setColor', {Color.fromString(color)})\r\n  end)\r\n  self.addContextMenuItem('Color: Black', function(color)\r\n    applyMultiple(color, 'setColor', {Color(0,0,0)})\r\n  end)\r\n  self.addContextMenuItem('Color: White', function(color)\r\n    applyMultiple(color, 'setColor', {Color(1,1,1)})\r\n  end)\r\n  self.addContextMenuItem('Size: Increase', function(color)\r\n    applyMultiple(color, 'changeSize', {50})\r\n  end, true)\r\n  self.addContextMenuItem('Size: Decrease', function(color)\r\n    applyMultiple(color, 'changeSize', {-50})\r\n  end, true)\r\n  self.addContextMenuItem('Permanently Attach', attemptAttach)\r\n  self.addContextMenuItem('Permalock', function(color)\r\n    applyMultiple(color, 'permalock', _, true)\r\n  end)\r\nend\r\n\r\nfunction changeSize(params)\r\n  local delta = params[1]\r\n  local newSize = data.size + delta\r\n  if newSize > 800  or newSize < 50 then\r\n    return\r\n  end\r\n  data.size = newSize\r\n  updateState()\r\n  if self.getButtons() and #self.getButtons() ~= 0 then\r\n    self.editButton({font_size=data.size})\r\n  else\r\n    local size = getBox(data.text, true)\r\n    self.editInput({width=size.width, height=size.height, font_size=data.size})\r\n  end\r\nend\r\n\r\nfunction setColor(params)\r\n  if params and params[1] then\r\n    data.color = params[1]\r\n  else\r\n    data.color = self.getColorTint():setAt('a', 1) -- Take on color of object tint\r\n  end\r\n  updateState()\r\n  if self.getButtons() and #self.getButtons() ~= 0 then\r\n    self.editButton({font_color=data.color})\r\n  else\r\n    self.editInput({font_color=data.color, color=getBackground(data.color)})\r\n  end\r\nend\r\n\r\nfunction getBackground(color) --determines whether to use black or white depending on luminance\r\n  local r,g,b = Color(color):get()\r\n\r\n  local lum = 0.2126*r + 0.7152*g + 0.0722*b\r\n  if lum > 0.75 then\r\n    return {0.2,0.2,0.2, data.box_transparency}\r\n  else\r\n    return {1,1,1, data.box_transparency}\r\n  end\r\nend\r\n\r\nfunction clear()\r\n  data.text = ''\r\n  updateState()\r\n  inputMode()\r\nend\r\n\r\nfunction permalock()\r\n  self.interactable = false\r\n  data.interactable = false\r\n  updateState()\r\nend\r\n\r\nlocal target_script = [[\r\nfunction onLoad(script_state)\r\n  if script_state and script_state ~= '' then\r\n    local state = JSON.decode(script_state)\r\n    for _,entry in ipairs(state) do\r\n      self.createButton(entry)\r\n    end\r\n    self.addContextMenuItem('Clear All Text', function(color)\r\n      self.clearContextMenu()\r\n      self.clearButtons()\r\n      self.script_state = ''\r\n      self.script_code = ''\r\n    end)\r\n  end\r\nend\r\n]]\r\n\r\nfunction attemptAttach(player_color)\r\n  local objs = Player[player_color].getSelectedObjects()\r\n  local attachee\r\n  local attachers = {}\r\n  for _,obj in ipairs(objs) do\r\n    if obj.getVar('movableTextTool_cowgoesmoo33') then\r\n      if obj ~= self then\r\n        table.insert(attachers, obj)\r\n      end\r\n    else\r\n      if attachee then\r\n        broadcastToColor(\"More than one target selected.\", player_color)\r\n        return\r\n      else\r\n        attachee = obj\r\n      end\r\n    end\r\n  end\r\n  if attachee then\r\n    local code = attachee.script_code\r\n    if code and code ~= '' and code ~= target_script then\r\n      broadcastToColor(\"Warning: script on card has been overriden. Rewind time to undo.\", player_color)\r\n    end\r\n    for i,attacher in ipairs(attachers) do\r\n      attacher.call('attach', {target = attachee})\r\n    end\r\n    attach({target = attachee})\r\n    local type, flip = attachee.type, attachee.getRotation().z\r\n    if (type == 'Card' or type == 'Deck') and flip > 175 and flip < 185 then\r\n      broadcastToColor(\"Warning: text will not display if card or deck is facing down.\", player_color)\r\n    end\r\n  else\r\n    broadcastToColor(\"You must have a target object in your selection (using click-and-drag or Ctrl+Click) to use this option.\", player_color)\r\n  end\r\nend\r\n\r\nfunction attach(params)\r\n  local target = params.target\r\n  local displayText = data.text\r\n  if data.enter_to_finish then\r\n    displayText = displayText:gsub('%[n%]', '\\n')\r\n  end\r\n\r\n  local textRotation = self.getRotation():sub(target.getRotation())\r\n    :add(Vector(180, 0, 180))\r\n\r\n  local textPosition = target.positionToLocal(\r\n    self.getPosition():add(Vector(0, data.hover_height, 0))\r\n  )\r\n  textPosition.x = -textPosition.x\r\n\r\n  local textScale = {}\r\n  textScale.x = self.getScale().x / target.getScale().x\r\n  textScale.y = self.getScale().x / target.getScale().y\r\n  textScale.z = self.getScale().x / target.getScale().z\r\n\r\n  local details = {\r\n    label=displayText,\r\n    click_function=\"none\",\r\n    function_owner=nil,\r\n    position=textPosition,\r\n    rotation=textRotation,\r\n    scale=textScale,\r\n    height=0, width=0,\r\n    font_color=data.color, font_size=data.size\r\n  }\r\n\r\n  target.createButton(details)\r\n\r\n  local script_state = target.script_state\r\n  if script_state and script_state ~= '' then\r\n    local state = JSON.decode(script_state)\r\n    table.insert(state, details)\r\n    target.script_state = JSON.encode(state)\r\n  else\r\n    target.script_state = JSON.encode({[1]=details})\r\n  end\r\n\r\n  target.script_code = target_script\r\n\r\n  self.destruct()\r\nend\r\n\r\nfunction applyMultiple(player_color, func_string, params, static_only)\r\n  local objs = Player[player_color].getSelectedObjects()\r\n  for _,obj in ipairs(objs) do\r\n    if obj.getVar('movableTextTool_cowgoesmoo33') then\r\n      if not static_only or obj.call('isStatic') then\r\n        obj.call(func_string, params)\r\n      end\r\n    end\r\n  end\r\nend\r\n\r\nfunction isStatic()\r\n  local input = self.getInputs()\r\n  return not input or #input == 0\r\nend\r\n\r\nfunction getBox(input, force)\r\n  local maxLength, lineCount = EXPAND_INTERVAL, 1\r\n  local lineLength = 0\r\n  for i = 1, #input do\r\n    local c = input:sub(i,i)\r\n    if c == '\\n' then\r\n      lineCount = lineCount + 1\r\n      if lineLength > maxLength then maxLength = (math.floor(lineLength / EXPAND_INTERVAL) + 1) * EXPAND_INTERVAL end\r\n      lineLength = 0\r\n    else\r\n      lineLength = lineLength + 1\r\n    end\r\n  end\r\n  if lineLength > maxLength then maxLength = (math.floor(lineLength / EXPAND_INTERVAL) + 1) * EXPAND_INTERVAL end\r\n\r\n  newWidth = data.size * maxLength * 0.9\r\n  newHeight = data.size * lineCount + 23\r\n\r\n  if force or boxWidth ~= newWidth or boxHeight ~= newHeight then\r\n    boxWidth, boxHeight = newWidth, newHeight\r\n    return {width = boxWidth, height = boxHeight}\r\n  end\r\n  return nil\r\nend\r\n\r\ntemp_lift = nil\r\nfunction onPickUp(player_color)\r\n  if data.autolift then\r\n    local player = Player[player_color]\r\n    temp_lift = player.lift_height\r\n    player.lift_height = 0\r\n  end\r\nend\r\n\r\nfunction onDrop(player_color)\r\n  if data.autolift and temp_lift then\r\n    Player[player_color].lift_height = temp_lift\r\n  end\r\nend\r\n\r\n-- Should be called every time data is modified, allows info to be saved on copy/paste\r\nfunction updateState()\r\n  self.script_state = JSON.encode(data)\r\nend\r\n\r\nfunction onSave()\r\n  self.script_state = JSON.encode(data)\r\n  return self.script_state\r\nend","LuaScriptState":"{\"autolift\":false,\"autolock\":false,\"box_transparency\":1,\"color\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1},\"enter_to_finish\":false,\"hover_height\":0.05,\"interactable\":true,\"size\":550,\"text\":\"Hors jeu\"}","XmlUI":""},{"GUID":"f3a917","Name":"Card","Transform":{"posX":-34.00026,"posY":1.77890575,"posZ":8.999742,"rotX":-0.000004992103,"rotY":180,"rotZ":-1.09667852e-7,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Salle d'Exposition","Description":"Miskatonic. Exposition.","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02137\",\n  \"locationBack\": {\n    \"connections\": \"Square\",\n    \"icons\": \"SlantedEquals|ExhibitHall\",\n    \"uses\": {\n      \"countPerInvestigator\": 2,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    },\n    \"victory\": 1\n  },\n  \"locationFront\": {\n    \"connections\": \"Square\",\n    \"icons\": \"ExhibitHall\"\n  },\n  \"traits\": \"Miskatonic. Exhibit.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":19913,"SidewaysCard":false,"CustomDeck":{"199":{"FaceURL":"https://i.imgur.com/GI7QyCb.jpg","BackURL":"https://i.imgur.com/EUjYjZK.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"fccb36","Name":"CardCustom","Transform":{"posX":12,"posY":1.5206002,"posZ":25,"rotX":0.0108914925,"rotY":180.000122,"rotZ":0.004948218,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":true,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":1105800,"SidewaysCard":false,"CustomDeck":{"11058":{"FaceURL":"http://cloud-3.steamusercontent.com/ugc/1874087573755656398/784A5C9E69597C25D0CE052B4C48C063453A9D1B/","BackURL":"http://cloud-3.steamusercontent.com/ugc/1874087573755656398/784A5C9E69597C25D0CE052B4C48C063453A9D1B/","NumWidth":1,"NumHeight":1,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"fcf19d","Name":"CardCustom","Transform":{"posX":-3.49999166,"posY":1.5219388,"posZ":24.9999886,"rotX":0.0108914189,"rotY":179.999939,"rotZ":0.00494817551,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":true,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":1108700,"SidewaysCard":false,"CustomDeck":{"11087":{"FaceURL":"http://cloud-3.steamusercontent.com/ugc/1874087573755654883/DDC74F92203C3FCF651F1047B852676949395747/","BackURL":"http://cloud-3.steamusercontent.com/ugc/1874087573755654883/DDC74F92203C3FCF651F1047B852676949395747/","NumWidth":1,"NumHeight":1,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"ff2fa7","Name":"CardCustom","Transform":{"posX":0.499998569,"posY":1.52159345,"posZ":25,"rotX":0.0108915046,"rotY":179.999222,"rotZ":0.004948084,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":true,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":1105900,"SidewaysCard":false,"CustomDeck":{"11059":{"FaceURL":"http://cloud-3.steamusercontent.com/ugc/1874087573755657091/AFF8ACFBC5678926BCC68305BFC3843BF4612216/","BackURL":"http://cloud-3.steamusercontent.com/ugc/1874087573755657091/AFF8ACFBC5678926BCC68305BFC3843BF4612216/","NumWidth":1,"NumHeight":1,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""}],"AttachedDecals":[{"Transform":{"posX":-0.0021877822,"posY":-0.08963572,"posZ":-0.00288731651,"rotX":270,"rotY":359.869568,"rotZ":0,"scaleX":2.00000215,"scaleY":2.00000238,"scaleZ":2.00000262},"CustomDecal":{"Name":"dunwich_back","ImageURL":"http://cloud-3.steamusercontent.com/ugc/959719855119695911/931B9829687A20F4DEADB36DA57B7E6D76792231/","Size":7.4}}]},{"GUID":"dfa75b","Name":"Custom_Model_Bag","Transform":{"posX":21.4999943,"posY":0.9799973,"posZ":45,"rotX":-0.00000484451948,"rotY":180.023376,"rotZ":7.3010284e-8,"scaleX":1.20052135,"scaleY":0.249882281,"scaleZ":1.3145982},"Nickname":"VII : Perdu dans le Temps et l'Espace","Description":"Renouveau : L'Héritage de Dunwich","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":1,"g":1,"b":1},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"MaterialIndex":-1,"MeshIndex":-1,"CustomMesh":{"MeshURL":"https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/advboxes/tuckbox_h_MSH.obj","DiffuseURL":"http://cloud-3.steamusercontent.com/ugc/829135118403758335/596601A40E86B6A360B58E645E976023DBAD4D85/","NormalURL":"","ColliderURL":"","Convex":true,"MaterialIndex":3,"TypeIndex":6,"CustomShader":{"SpecularColor":{"r":1,"g":1,"b":1},"SpecularIntensity":0,"SpecularSharpness":2,"FresnelStrength":0},"CastShadows":true},"Bag":{"Order":0},"LuaScript":"-- Utility memory bag by Directsun\r\n-- Version 2.7.0\r\n-- Fork of Memory Bag 2.0 by MrStump\r\n--\r\n-- Want to contribute? Create an issue or fork the code on GitHub and submit a pull request:\r\n-- https://github.com/sunflowermans/TTS-UtilityMemoryBag\r\n\r\n\r\nfunction updateSave()\r\n    local data_to_save = {[\"ml\"]=memoryList}\r\n    saved_data = JSON.encode(data_to_save)\r\n    self.script_state = saved_data\r\nend\r\n\r\nfunction combineMemoryFromBagsWithin()\r\n    local bagObjList = self.getObjects()\r\n    for _, bagObj in ipairs(bagObjList) do\r\n        local data = bagObj.lua_script_state\r\n        if data ~= nil then\r\n            local j = JSON.decode(data)\r\n            if j ~= nil and j.ml ~= nil then\r\n                for guid, entry in pairs(j.ml) do\r\n                    memoryList[guid] = entry\r\n                end\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\nfunction updateMemoryWithMoves()\r\n    memoryList = memoryListBackup\r\n    --get the first transposed object's coordinates\r\n    local obj = getObjectFromGUID(moveGuid)\r\n\r\n    -- p1 is where needs to go, p2 is where it was\r\n    local refObjPos = memoryList[moveGuid].pos\r\n    local deltaPos = findOffsetDistance(obj.getPosition(), refObjPos, nil)\r\n    local movedRotation = obj.getRotation()\r\n    for guid, entry in pairs(memoryList) do\r\n        memoryList[guid].pos.x = entry.pos.x - deltaPos.x\r\n        memoryList[guid].pos.y = entry.pos.y - deltaPos.y\r\n        memoryList[guid].pos.z = entry.pos.z - deltaPos.z\r\n        -- memoryList[guid].rot.x = movedRotation.x\r\n        -- memoryList[guid].rot.y = movedRotation.y\r\n        -- memoryList[guid].rot.z = movedRotation.z\r\n    end\r\n\r\n    --theList[obj.getGUID()] = {\r\n    --    pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n    --    rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n    --    lock=obj.getLock()\r\n    --}\r\n    moveList = {}\r\nend\r\n\r\nfunction onload(saved_data)\r\n\r\n    fresh = true\r\n    if saved_data ~= \"\" then\r\n        local loaded_data = JSON.decode(saved_data)\r\n        --Set up information off of loaded_data\r\n        memoryList = loaded_data.ml\r\n    else\r\n        --Set up information for if there is no saved saved data\r\n        memoryList = {}\r\n\r\n    end\r\n\r\n    moveList = {}\r\n    moveGuid = nil\r\n\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        fresh = false\r\n        createMemoryActionButtons()\r\n    end\r\nend\r\n\r\n\r\n--Beginning Setup\r\n\r\n\r\n--Make setup button\r\n function createSetupButton()\r\n    self.createButton({\r\n      label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n      position={0,0.1,-2.1}, rotation={0,0,0}, height=275, width=625,\r\n      font_size=150, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n end\r\n\r\n--Triggered by Transpose button\r\nfunction buttonClick_transpose()\r\n    moveGuid = nil\r\n    broadcastToAll(\"Select one object and move it- all objects will move relative to the new location\", {0.75, 0.75, 1})\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(true)\r\n    createSetupActionButtons(true)\r\nend\r\n\r\n--Triggered by setup button,\r\nfunction buttonClick_setup()\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(false)\r\n    createSetupActionButtons(false)\r\nend\r\n\r\nfunction getAllObjectsInMemory()\r\n    local objTable = {}\r\n    local curObj = {}\r\n\r\n    for guid in pairs(memoryListBackup) do\r\n        curObj = getObjectFromGUID(guid)\r\n        table.insert(objTable, curObj)\r\n    end\r\n\r\n    return objTable\r\n    -- return getAllObjects()\r\nend\r\n\r\n--Creates selection buttons on objects\r\nfunction createButtonsOnAllObjects(move)\r\n    buttonIndexMap = {}\r\n    local howManyButtons = 0\r\n\r\n    local objsToHaveButtons = {}\r\n    if move == true then\r\n        objsToHaveButtons = getAllObjectsInMemory()\r\n    else\r\n        objsToHaveButtons = getAllObjects()\r\n    end\r\n\r\n    for _, obj in ipairs(objsToHaveButtons) do\r\n        if obj ~= self then\r\n            --On a normal bag, the button positions aren't the same size as the bag.\r\n            globalScaleFactor = 1* 1/self.getScale().x\r\n            --Super sweet math to set button positions\r\n            local selfPos = self.getPosition()\r\n            local objPos = obj.getPosition()\r\n            local deltaPos = findOffsetDistance(selfPos, objPos, obj)\r\n            local objPos = rotateLocalCoordinates(deltaPos, self)\r\n            objPos.x = -objPos.x * globalScaleFactor\r\n            objPos.y = objPos.y * globalScaleFactor + 2\r\n            objPos.z = objPos.z * globalScaleFactor * 0.9\r\n            --Workaround for custom PDFs\r\n            if obj.Book then\r\n                objPos.y = objPos.y + 0.5\r\n            end\r\n            --Offset rotation of bag\r\n            local rot = self.getRotation()\r\n            rot.y = -rot.y + 180\r\n            --Create function\r\n            local funcName = \"selectButton_\" .. howManyButtons\r\n            local func = function() buttonClick_selection(obj, move) end\r\n            local color = {0.75,0.25,0.25,0.6}\r\n            local colorMove = {0,0,1,0.6}\r\n            if move == true then\r\n                color = colorMove\r\n            end\r\n            self.setVar(funcName, func)\r\n            self.createButton({\r\n                click_function=funcName, function_owner=self,\r\n                position=objPos, rotation=rot, height=500, width=500,\r\n                color=color,\r\n            })\r\n            buttonIndexMap[obj.getGUID()] = howManyButtons\r\n            howManyButtons = howManyButtons + 1\r\n        end\r\n    end\r\nend\r\n\r\n--Creates submit and cancel buttons\r\nfunction createSetupActionButtons(move)\r\n    self.createButton({\r\n        label=\"Annuler\", click_function=\"buttonClick_cancel\", function_owner=self,\r\n      position={-0.7,0.1,2.1}, rotation={0,0,0}, height=275, width=625,\r\n      font_size=145, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n\r\n    self.createButton({\r\n        label=\"Valider\", click_function=\"buttonClick_submit\", function_owner=self,\r\n        position={-0.7,0.3,2.6}, rotation={0,0,0}, height=275, width=625,\r\n        font_size=140, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n\r\n    if move == false then\r\n      self.createButton({\r\n          label=\"Ajouter\", click_function=\"buttonClick_add\", function_owner=self,\r\n          position={0.7,0.3,2.1}, rotation={0,0,0}, height=275, width=625,\r\n          font_size=140, color={0,0,0}, font_color={0.25,1,0.25}\r\n      })\r\n\r\n        self.createButton({\r\n            label=\"Sélection\", click_function=\"editDragSelection\", function_owner=self,\r\n            position={-0.7,0.3,3.1}, rotation={0,0,0}, height=275, width=625,\r\n            font_size=125, color={0,0,0}, font_color={1,1,1}\r\n        })\r\n\r\n        if fresh == false then\r\n                self.createButton({\r\n                    label=\"Mise à jour\", click_function=\"buttonClick_setNew\", function_owner=self,\r\n                    position={0.7,0.3,3.1}, rotation={0,0,0}, height=275, width=625,\r\n                    font_size=105, color={0,0,0}, font_color={0.75,0.75,1}\r\n                })\r\n                self.createButton({\r\n                    label=\"Retirer\", click_function=\"buttonClick_remove\", function_owner=self,\r\n                    position={0.7,0.3,2.6}, rotation={0,0,0}, height=275, width=625,\r\n                    font_size=140, color={0,0,0}, font_color={1,0.25,0.25}\r\n                })\r\n            end\r\n        end\r\n\r\n        self.createButton({\r\n            label=\"Reset\", click_function=\"buttonClick_reset\", function_owner=self,\r\n            position={0,0.3,-2.1}, rotation={0,0,0}, height=275, width=625,\r\n            font_size=165, color={0,0,0}, font_color={1,1,1}\r\n        })\r\n    end\r\n\r\n\r\n--During Setup\r\n\r\n\r\n--Checks or unchecks buttons\r\nfunction buttonClick_selection(obj, move)\r\n    local index = buttonIndexMap[obj.getGUID()]\r\n    local colorMove = {0,0,1,0.6}\r\n    local color = {0,1,0,0.6}\r\n\r\n    previousGuid = selectedGuid\r\n    selectedGuid = obj.getGUID()\r\n\r\n    theList = memoryList\r\n    if move == true then\r\n        theList = moveList\r\n        if previousGuid ~= nil and previousGuid ~= selectedGuid then\r\n            local prevObj = getObjectFromGUID(previousGuid)\r\n            prevObj.highlightOff()\r\n            self.editButton({index=previousIndex, color=colorMove})\r\n            theList[previousGuid] = nil\r\n        end\r\n        previousIndex = index\r\n    end\r\n\r\n    if theList[selectedGuid] == nil then\r\n        self.editButton({index=index, color=color})\r\n        --Adding pos/rot to memory table\r\n        local pos, rot = obj.getPosition(), obj.getRotation()\r\n        --I need to add it like this or it won't save due to indexing issue\r\n        theList[obj.getGUID()] = {\r\n            pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n            rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n            lock=obj.getLock(),\r\n            tint=obj.getColorTint()\r\n        }\r\n        obj.highlightOn({0,1,0})\r\n    else\r\n        color = {0.75,0.25,0.25,0.6}\r\n        if move == true then\r\n            color = colorMove\r\n        end\r\n        self.editButton({index=index, color=color})\r\n        theList[obj.getGUID()] = nil\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\nfunction editDragSelection(bagObj, player, remove)\r\n    local selectedObjs = Player[player].getSelectedObjects()\r\n    if not remove then\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            --Ignore if already in the memory list, or does not have a button\r\n            if index and not memoryList[obj.getGUID()] then\r\n                self.editButton({index=index, color={0,1,0,0.6}})\r\n                --Adding pos/rot to memory table\r\n                local pos, rot = obj.getPosition(), obj.getRotation()\r\n                --I need to add it like this or it won't save due to indexing issue\r\n                memoryList[obj.getGUID()] = {\r\n                    pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n                    rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n                    lock=obj.getLock(),\r\n                    tint=obj.getColorTint()\r\n                }\r\n                obj.highlightOn({0,1,0})\r\n            end\r\n        end\r\n    else\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            if index and memoryList[obj.getGUID()] then\r\n                color = {0.75,0.25,0.25,0.6}\r\n                self.editButton({index=index, color=color})\r\n                memoryList[obj.getGUID()] = nil\r\n                obj.highlightOff()\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\n--Cancels selection process\r\nfunction buttonClick_cancel()\r\n    memoryList = memoryListBackup\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        createMemoryActionButtons()\r\n    end\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Sélection annulée\", {1,1,1})\r\n    moveGuid = nil\r\nend\r\n\r\n--Saves selections\r\nfunction buttonClick_submit()\r\n    fresh = false\r\n    if next(moveList) ~= nil then\r\n        for guid in pairs(moveList) do\r\n            moveGuid = guid\r\n        end\r\n        if memoryListBackup[moveGuid] == nil then\r\n            broadcastToAll(\"Item selected for moving is not already in memory\", {1, 0.25, 0.25})\r\n        else\r\n            broadcastToAll(\"Moving all items in memory relative to new objects position!\", {0.75, 0.75, 1})\r\n            self.clearButtons()\r\n            self.clearInputs()\r\n            createMemoryActionButtons()\r\n            local count = 0\r\n            for guid in pairs(moveList) do\r\n                moveGuid = guid\r\n                count = count + 1\r\n                local obj = getObjectFromGUID(guid)\r\n                if obj ~= nil then obj.highlightOff() end\r\n            end\r\n            updateMemoryWithMoves()\r\n            updateSave()\r\n            buttonClick_place()\r\n        end\r\n    elseif next(memoryList) == nil and moveGuid == nil then\r\n        memoryList = memoryListBackup\r\n        broadcastToAll(\"No selections made.\", {0.75, 0.25, 0.25})\r\n    end\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    updateSave()\r\n    moveGuid = nil\r\nend\r\n\r\nfunction combineTables(first_table, second_table)\r\n    for k,v in pairs(second_table) do first_table[k] = v end\r\nend\r\n\r\nfunction buttonClick_add()\r\n    fresh = false\r\n    combineTables(memoryList, memoryListBackup)\r\n    broadcastToAll(\"Adding internal bags and selections to existing memory\", {0.25, 0.75, 0.25})\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_remove()\r\n    broadcastToAll(\"Removing Selected Entries From Memory\", {1.0, 0.25, 0.25})\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        memoryListBackup[guid] = nil\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Removed\", {1,1,1})\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_setNew()\r\n    broadcastToAll(\"Setting new position relative to items in memory\", {0.75, 0.75, 1})\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        guid = obj.guid\r\n        if memoryListBackup[guid] ~= nil then\r\n            count = count + 1\r\n            memoryListBackup[guid].pos = obj.getPosition()\r\n            memoryListBackup[guid].rot = obj.getRotation()\r\n            memoryListBackup[guid].lock = obj.getLock()\r\n            memoryListBackup[guid].tint = obj.getColorTint()\r\n        end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\n--Resets bag to starting status\r\nfunction buttonClick_reset()\r\n    fresh = true\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createSetupButton()\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Tool Reset\", {1,1,1})\r\n    updateSave()\r\nend\r\n\r\n\r\n--After Setup\r\n\r\n\r\n--Creates recall and place buttons\r\nfunction createMemoryActionButtons()\r\n    self.createButton({\r\n        label=\"Placer\", click_function=\"buttonClick_place\", function_owner=self,\r\n        position={0.7,0.1,2.2}, rotation={0,0,0}, height=275, width=625,\r\n        font_size=150, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Ranger\", click_function=\"buttonClick_recall\", function_owner=self,\r\n        position={-0.7,0.1,2.2}, rotation={0,0,0}, height=275, width=625,\r\n        font_size=150, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n        position={0,0.1,-2.2}, rotation={0,0,0}, height=275, width=625,\r\n        font_size=150, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    ---    self.createButton({\r\n    ---      label=\"Bouger\", click_function=\"buttonClick_transpose\", function_owner=self,\r\n    ---      position={-2,0.3,0.8}, rotation={0,270,0}, height=350, width=800,\r\n    ---      font_size=250, color={0,0,0}, font_color={0.75,0.75,1}\r\n    ---\r\nend\r\n\r\n--Sends objects from bag/table to their saved position/rotation\r\nfunction buttonClick_place()\r\n    local bagObjList = self.getObjects()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        --If obj is out on the table, move it to the saved pos/rot\r\n        if obj ~= nil then\r\n            obj.setPositionSmooth(entry.pos)\r\n            obj.setRotationSmooth(entry.rot)\r\n            obj.setLock(entry.lock)\r\n            obj.setColorTint(entry.tint)\r\n        else\r\n            --If obj is inside of the bag\r\n            for _, bagObj in ipairs(bagObjList) do\r\n                if bagObj.guid == guid then\r\n                    local item = self.takeObject({\r\n                        guid=guid, position=entry.pos, rotation=entry.rot, smooth=false\r\n                    })\r\n                    item.setLock(entry.lock)\r\n                    item.setColorTint(entry.tint)\r\n                    break\r\n                end\r\n            end\r\n        end\r\n    end\r\n    broadcastToAll(\"Objets placés\", {1,1,1})\r\nend\r\n\r\n--Recalls objects to bag from table\r\nfunction buttonClick_recall()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then self.putObject(obj) end\r\n    end\r\n    broadcastToAll(\"Objets rangés\", {1,1,1})\r\nend\r\n\r\n\r\n--Utility functions\r\n\r\n\r\n--Find delta (difference) between 2 x/y/z coordinates\r\nfunction findOffsetDistance(p1, p2, obj)\r\n    local yOffset = 0\r\n    if obj ~= nil then\r\n        local bounds = obj.getBounds()\r\n        yOffset = (bounds.size.y - bounds.offset.y)\r\n    end\r\n    local deltaPos = {}\r\n    deltaPos.x = (p2.x-p1.x)\r\n    deltaPos.y = (p2.y-p1.y) + yOffset\r\n    deltaPos.z = (p2.z-p1.z)\r\n    return deltaPos\r\nend\r\n\r\n--Used to rotate a set of coordinates by an angle\r\nfunction rotateLocalCoordinates(desiredPos, obj)\r\n    local objPos, objRot = obj.getPosition(), obj.getRotation()\r\n    local angle = math.rad(objRot.y)\r\n    local x = desiredPos.x * math.cos(angle) - desiredPos.z * math.sin(angle)\r\n    local z = desiredPos.x * math.sin(angle) + desiredPos.z * math.cos(angle)\r\n    --return {x=objPos.x+x, y=objPos.y+desiredPos.y, z=objPos.z+z}\r\n    return {x=x, y=desiredPos.y, z=z}\r\nend\r\n\r\nfunction rotateMyCoordinates(desiredPos, obj)\r\n    local angle = math.rad(obj.getRotation().y)\r\n    local x = desiredPos.x * math.sin(angle)\r\n    local z = desiredPos.z * math.cos(angle)\r\n    return {x=x, y=desiredPos.y, z=z}\r\nend\r\n\r\n--Coroutine delay, in seconds\r\nfunction wait(time)\r\n    local start = os.time()\r\n    repeat coroutine.yield(0) until os.time() > start + time\r\nend\r\n\r\n--Duplicates a table (needed to prevent it making reference to the same objects)\r\nfunction duplicateTable(oldTable)\r\n    local newTable = {}\r\n    for k, v in pairs(oldTable) do\r\n        newTable[k] = v\r\n    end\r\n    return newTable\r\nend\r\n\r\n--Moves scripted highlight from all objects\r\nfunction removeAllHighlights()\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\n--Round number (num) to the Nth decimal (dec)\r\nfunction round(num, dec)\r\n    local mult = 10^(dec or 0)\r\n    return math.floor(num * mult + 0.5) / mult\r\nend\r\n\r\n\r\n--[[\r\nThis object provides access to a variable stored on the \"Global script\".\r\nThe variable holds the GUIDs for every Utility Memory Bag in the scene.\r\nExample:\r\n{'805ebd', '35cc21', 'fc8886', 'f50264', '5f5f63'}\r\n--]]\r\nAllMemoryBagsInScene = {\r\n    NAME_OF_GLOBAL_VARIABLE = \"_UtilityMemoryBag_AllMemoryBagsInScene\"\r\n}\r\n\r\nfunction AllMemoryBagsInScene:add(guid)\r\n    local guids = Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\n    table.insert(guids, guid)\r\n    Global.setTable(self.NAME_OF_GLOBAL_VARIABLE, guids)\r\nend\r\n\r\nfunction AllMemoryBagsInScene:getGuidList()\r\n    return Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\nend\r\n","LuaScriptState":"{\"ml\":{\"000cf7\":{\"lock\":false,\"pos\":{\"x\":12.5,\"y\":1.5412460565567,\"z\":-6.00010299682617},\"rot\":{\"x\":0.0049493950791657,\"y\":90.0071640014648,\"z\":359.989105224609},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"1ba7b3\":{\"lock\":false,\"pos\":{\"x\":-31.5002155303955,\"y\":1.77890610694885,\"z\":4.49978590011597},\"rot\":{\"x\":-5.11336793351802E-06,\"y\":180.000061035156,\"z\":1.05577626641207E-07},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"2fc6f3\":{\"lock\":false,\"pos\":{\"x\":1.99179339688271E-09,\"y\":1.50527560710907,\"z\":10.5},\"rot\":{\"x\":-0.00494835712015629,\"y\":270.002990722656,\"z\":0.0108976922929287},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"30a186\":{\"lock\":false,\"pos\":{\"x\":24.9998264312744,\"y\":1.51367974281311,\"z\":-5.5000171661377},\"rot\":{\"x\":0.0108910631388426,\"y\":180.004684448242,\"z\":0.00494904257357121},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"3abdac\":{\"lock\":false,\"pos\":{\"x\":-27.5001087188721,\"y\":1.77890610694885,\"z\":4.49989032745361},\"rot\":{\"x\":-4.97628980156151E-06,\"y\":180,\"z\":1.71880088828402E-07},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"69221b\":{\"lock\":false,\"pos\":{\"x\":30.4999008178711,\"y\":1.78208720684052,\"z\":-3.00009989738464},\"rot\":{\"x\":-0.000591301301028579,\"y\":180.000701904297,\"z\":180.001068115234},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"6fec7f\":{\"lock\":false,\"pos\":{\"x\":-21.0000019073486,\"y\":1.77890574932098,\"z\":8.99999904632568},\"rot\":{\"x\":-8.69802860847813E-08,\"y\":89.9999084472656,\"z\":4.98151439387584E-06},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"79c6c7\":{\"lock\":false,\"pos\":{\"x\":3,\"y\":1.6016,\"z\":-6.5},\"rot\":{\"x\":0.0172,\"y\":180.0109,\"z\":0.0057},\"tint\":{\"a\":1,\"b\":0.701960802078247,\"g\":0.800000011920929,\"r\":0.874509811401367}},\"910c66\":{\"lock\":false,\"pos\":{\"x\":-3.99999928474426,\"y\":1.51922571659088,\"z\":10.5},\"rot\":{\"x\":0.010893008671701,\"y\":179.982620239258,\"z\":0.00494498712942004},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"b31ae7\":{\"lock\":false,\"pos\":{\"x\":22.3267383575439,\"y\":1.51391160488129,\"z\":-5.49481868743896},\"rot\":{\"x\":0.0108932284638286,\"y\":179.981552124023,\"z\":0.00494474451988935},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"ba2078\":{\"lock\":false,\"pos\":{\"x\":4,\"y\":1.51853477954865,\"z\":10.5},\"rot\":{\"x\":0.0108915865421295,\"y\":180.000015258789,\"z\":0.00494829472154379},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"ba3cb2\":{\"lock\":false,\"pos\":{\"x\":7,\"y\":1.51827573776245,\"z\":10.5},\"rot\":{\"x\":0.0108914934098721,\"y\":180.000381469727,\"z\":0.00494831614196301},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"c46ba3\":{\"lock\":false,\"pos\":{\"x\":17.5,\"y\":1.54081428050995,\"z\":-5.99990034103394},\"rot\":{\"x\":0.00494832685217261,\"y\":90.0021820068359,\"z\":359.989105224609},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"e26f38\":{\"lock\":false,\"pos\":{\"x\":-19.5,\"y\":1.77890610694885,\"z\":4.49999761581421},\"rot\":{\"x\":-5.16508043801878E-06,\"y\":180.000091552734,\"z\":-8.48382981644136E-08},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}}}}","XmlUI":"","ContainedObjects":[{"GUID":"000cf7","Name":"Deck","Transform":{"posX":12.4999981,"posY":1.541246,"posZ":-6.00010443,"rotX":0.004949687,"rotY":90.0072556,"rotZ":359.9891,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":false,"SidewaysCard":true,"DeckIDs":[121303,275901,121301,121300],"CustomDeck":{"1213":{"FaceURL":"https://i.imgur.com/btYreKl.jpg","BackURL":"https://i.imgur.com/uLiAXi8.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0},"2759":{"FaceURL":"https://i.imgur.com/LyGnl4m.jpg","BackURL":"https://i.imgur.com/wbSb1m1.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":"","ContainedObjects":[{"GUID":"cf091d","Name":"Card","Transform":{"posX":12.500001,"posY":4.65916348,"posZ":-6.00010633,"rotX":0.0049493094,"rotY":90.00718,"rotZ":359.9891,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"La Fin de toute Chose","Description":"Intrigue 4a","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"doomThreshold\": 2,\n  \"id\": \"02315\",\n  \"type\": \"Agenda\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":121303,"SidewaysCard":true,"CustomDeck":{"1213":{"FaceURL":"https://i.imgur.com/btYreKl.jpg","BackURL":"https://i.imgur.com/uLiAXi8.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"618bd8","Name":"Card","Transform":{"posX":12.499999,"posY":4.79665,"posZ":-6.00010252,"rotX":0.00494937971,"rotY":90.00718,"rotZ":359.9891,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"doomThreshold\": 6,\n  \"id\": \"51054\",\n  \"type\": \"Agenda\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":275901,"SidewaysCard":true,"CustomDeck":{"2759":{"FaceURL":"https://i.imgur.com/LyGnl4m.jpg","BackURL":"https://i.imgur.com/wbSb1m1.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"ef19df","Name":"Card","Transform":{"posX":12.499999,"posY":4.59664965,"posZ":-6.00010252,"rotX":0.00494937971,"rotY":90.00718,"rotZ":359.9891,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Passé, Présent et Avenir","Description":"Intrigue 2a","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"doomThreshold\": 4,\n  \"id\": \"02313\",\n  \"type\": \"Agenda\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":121301,"SidewaysCard":true,"CustomDeck":{"1213":{"FaceURL":"https://i.imgur.com/btYreKl.jpg","BackURL":"https://i.imgur.com/uLiAXi8.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"3f5640","Name":"Card","Transform":{"posX":12.5000067,"posY":1.6217438,"posZ":-6.00011873,"rotX":0.007921666,"rotY":90.00718,"rotZ":359.987762,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Tout est Un","Description":"Intrigue 1a","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"doomThreshold\": 4,\n  \"id\": \"02312\",\n  \"type\": \"Agenda\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":121300,"SidewaysCard":true,"CustomDeck":{"1213":{"FaceURL":"https://i.imgur.com/btYreKl.jpg","BackURL":"https://i.imgur.com/uLiAXi8.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""}]},{"GUID":"1ba7b3","Name":"Card","Transform":{"posX":-31.500227,"posY":1.77890611,"posZ":4.49977,"rotX":-0.00000503159572,"rotY":180.000031,"rotZ":1.311772e-7,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Déchirure dans le Temps","Description":"Autre Monde.","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02322\",\n  \"locationBack\": {\n    \"connections\": \"Circle|Plus|Tilde\",\n    \"icons\": \"Crescent\",\n    \"uses\": {\n      \"countPerInvestigator\": 2,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    }\n  },\n  \"locationFront\": {\n    \"connections\": \"Circle|Plus|Tilde\",\n    \"icons\": \"Crescent\"\n  },\n  \"traits\": \"Otherworld.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":121204,"SidewaysCard":false,"CustomDeck":{"1212":{"FaceURL":"https://i.imgur.com/fR29y6J.jpg","BackURL":"https://i.imgur.com/bw3G2NP.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"2fc6f3","Name":"Custom_Tile","Transform":{"posX":-3.29587238e-8,"posY":1.50527561,"posZ":10.5,"rotX":-0.0049484144,"rotY":270.003,"rotZ":0.0108978329,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/vppt2my.png","ImageSecondaryURL":"https://i.imgur.com/vppt2my.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":"","States":{"2":{"GUID":"4d3553","Name":"Custom_Tile","Transform":{"posX":-17.11995,"posY":1.60650957,"posZ":3.85999179,"rotX":359.9831,"rotY":359.984558,"rotZ":359.920074,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/HyfE8m8.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""},"3":{"GUID":"5b38c6","Name":"Custom_Tile","Transform":{"posX":-17.1199474,"posY":1.60650969,"posZ":3.85999274,"rotX":359.983124,"rotY":359.984467,"rotZ":359.9201,"scaleX":0.8,"scaleY":1,"scaleZ":0.8},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.6045295,"g":0.6045295,"b":0.6045295},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"https://i.imgur.com/dHKBLoD.png","ImageSecondaryURL":"https://i.imgur.com/HyfE8m8.png","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"","LuaScriptState":"","XmlUI":""}}},{"GUID":"30a186","Name":"Card","Transform":{"posX":24.9998264,"posY":1.51367974,"posZ":-5.500017,"rotX":0.0108911721,"rotY":180.004654,"rotZ":0.004949135,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276127,"SidewaysCard":false,"CustomDeck":{"2761":{"FaceURL":"https://i.imgur.com/FVWxpyu.jpg","BackURL":"https://i.imgur.com/EmJxccn.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"3abdac","Name":"Card","Transform":{"posX":-27.5001183,"posY":1.77890611,"posZ":4.49987936,"rotX":-0.000005013893,"rotY":180,"rotZ":-5.626962e-9,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Le Bord de l'Univers","Description":"Autre Monde.","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02321\",\n  \"locationBack\": {\n    \"connections\": \"Plus|Tilde\",\n    \"icons\": \"Crescent\",\n    \"uses\": {\n      \"countPerInvestigator\": 2,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    }\n  },\n  \"locationFront\": {\n    \"connections\": \"Plus|Tilde\",\n    \"icons\": \"Crescent\"\n  },\n  \"traits\": \"Otherworld.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":121202,"SidewaysCard":false,"CustomDeck":{"1212":{"FaceURL":"https://i.imgur.com/fR29y6J.jpg","BackURL":"https://i.imgur.com/bw3G2NP.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"69221b","Name":"Deck","Transform":{"posX":30.4999,"posY":1.78208721,"posZ":-3.0001,"rotX":-0.000591023,"rotY":180.0007,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Deck Rencontre","Description":"Perdu dans le Temps et l'Espace","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":false,"SidewaysCard":false,"DeckIDs":[276027,276026,276028,276011,276010,276009,276008,276001,276000,276003,276002,276004,276005,17931,17930,17934,15508,15512,15509,15511,15515,15514,18940,18943,18939,18941,18942,18936,18938,18937,18935,18925,18934,18931,18933,18932,559600,18927,18929,18928,18926,18924,18923,18920,18922],"CustomDeck":{"155":{"FaceURL":"https://i.imgur.com/7H57eeO.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0},"179":{"FaceURL":"https://i.imgur.com/nB9kjFF.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0},"189":{"FaceURL":"https://i.imgur.com/EEPF7vQ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0},"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0},"5596":{"FaceURL":"http://cloud-3.steamusercontent.com/ugc/1770458304230438588/2F85DF80EC27FD760D8FBBE1C8EE22542CB8E51D/","BackURL":"http://cloud-3.steamusercontent.com/ugc/1770458304230284904/1EE0B15842CC713A6A68B5D4682A3D46E03E44CE/","NumWidth":1,"NumHeight":1,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":"","ContainedObjects":[{"GUID":"e59241","Name":"Card","Transform":{"posX":30.4999,"posY":13.4374895,"posZ":-3.00010014,"rotX":-0.00059106556,"rotY":180.0007,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"51059\",\n  \"locationFront\": {\n    \"connections\": \"Square|SlantedEquals\",\n    \"icons\": \"Diamond\",\n    \"uses\": {\n      \"count\": 4,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    }\n  },\n  \"traits\": \"Otherworld. Extradimensional.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276027,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"c87baf","Name":"Card","Transform":{"posX":30.4999,"posY":13.23749,"posZ":-3.00010014,"rotX":-0.00059106556,"rotY":180.0007,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"51060\",\n  \"locationFront\": {\n    \"connections\": \"Square|Crescent|Plus|Tilde\",\n    \"icons\": \"SlantedEquals\",\n    \"uses\": {\n      \"countPerInvestigator\": 1,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    }\n  },\n  \"traits\": \"Otherworld. Extradimensional.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276026,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"d9b4d5","Name":"Card","Transform":{"posX":30.4999,"posY":13.03749,"posZ":-3.00010014,"rotX":-0.00059106556,"rotY":180.0007,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"51058\",\n  \"locationFront\": {\n    \"connections\": \"Square|SlantedEquals\",\n    \"icons\": \"Triangle\",\n    \"uses\": {\n      \"count\": 1,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    }\n  },\n  \"traits\": \"Otherworld. Extradimensional.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276028,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"85ac4d","Name":"Card","Transform":{"posX":30.4999,"posY":12.83749,"posZ":-3.00010014,"rotX":-0.00059106556,"rotY":180.0007,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"51072\",\n  \"traits\": \"Pact.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276011,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"67d7ad","Name":"Card","Transform":{"posX":30.4999,"posY":12.63749,"posZ":-3.00010014,"rotX":-0.00059106556,"rotY":180.0007,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"health\": 4,\n  \"id\": \"51071\",\n  \"traits\": \"Monster. Abomination.\",\n  \"type\": \"Enemy\",\n  \"victory\": 1\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276010,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"ccc937","Name":"Card","Transform":{"posX":30.4999,"posY":12.4374895,"posZ":-3.00010014,"rotX":-0.00059106556,"rotY":180.0007,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"health\": 4,\n  \"id\": \"51071\",\n  \"traits\": \"Monster. Abomination.\",\n  \"type\": \"Enemy\",\n  \"victory\": 1\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276009,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"67dc67","Name":"Card","Transform":{"posX":30.4999,"posY":12.23749,"posZ":-3.00010014,"rotX":-0.00059106556,"rotY":180.0007,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"51072\",\n  \"traits\": \"Pact.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276008,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"0236d6","Name":"Card","Transform":{"posX":30.4999,"posY":12.03749,"posZ":-3.00010014,"rotX":-0.00059106556,"rotY":180.0007,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"51063\",\n  \"traits\": \"Hex.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276001,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"612d05","Name":"Card","Transform":{"posX":30.4999,"posY":11.5000029,"posZ":-3.0001,"rotX":-0.0005911414,"rotY":180.0007,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"51063\",\n  \"traits\": \"Hex.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276000,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"d4d20c","Name":"Card","Transform":{"posX":30.4999,"posY":11.63749,"posZ":-3.00010014,"rotX":-0.00059106556,"rotY":180.0007,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"51062\",\n  \"traits\": \"Hex.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276003,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"6fc7cc","Name":"Card","Transform":{"posX":30.4999,"posY":11.4374895,"posZ":-3.00010014,"rotX":-0.00059106556,"rotY":180.0007,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"51062\",\n  \"traits\": \"Hex.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276002,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"9ec870","Name":"Card","Transform":{"posX":30.4999,"posY":11.23749,"posZ":-3.00010014,"rotX":-0.00059106556,"rotY":180.0007,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"51061\",\n  \"traits\": \"Hex.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276004,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"5c7d44","Name":"Card","Transform":{"posX":30.4999,"posY":11.03749,"posZ":-3.00010014,"rotX":-0.00059106556,"rotY":180.0007,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"51061\",\n  \"traits\": \"Hex.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276005,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"70c221","Name":"Card","Transform":{"posX":30.4999,"posY":10.83749,"posZ":-3.00010014,"rotX":-0.00059106556,"rotY":180.0007,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Serviteur du Rôdeur","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"health\": 5,\n  \"id\": \"02104\",\n  \"traits\": \"Monster. Abomination.\",\n  \"type\": \"Enemy\",\n  \"victory\": 1\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":17931,"SidewaysCard":false,"CustomDeck":{"179":{"FaceURL":"https://i.imgur.com/nB9kjFF.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"c8d931","Name":"Card","Transform":{"posX":30.4999,"posY":10.63749,"posZ":-3.00010014,"rotX":-0.00059106556,"rotY":180.0007,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Agglomérat de Sphères","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"health\": 6,\n  \"id\": \"02103\",\n  \"traits\": \"Monster. Abomination.\",\n  \"type\": \"Enemy\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":17930,"SidewaysCard":false,"CustomDeck":{"179":{"FaceURL":"https://i.imgur.com/nB9kjFF.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"87be51","Name":"Card","Transform":{"posX":30.4999,"posY":10.1000032,"posZ":-3.0001,"rotX":-0.0005911145,"rotY":180.0007,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Agglomérat de Sphères","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"health\": 6,\n  \"id\": \"02103\",\n  \"traits\": \"Monster. Abomination.\",\n  \"type\": \"Enemy\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":17934,"SidewaysCard":false,"CustomDeck":{"179":{"FaceURL":"https://i.imgur.com/nB9kjFF.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"cc2af0","Name":"Card","Transform":{"posX":30.4999,"posY":10.23749,"posZ":-3.00010014,"rotX":-0.00059106556,"rotY":180.0007,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Au-Delà du Voile","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02084\",\n  \"traits\": \"Hex.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":15508,"SidewaysCard":false,"CustomDeck":{"155":{"FaceURL":"https://i.imgur.com/7H57eeO.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"ed11ad","Name":"Card","Transform":{"posX":30.4999,"posY":10.03749,"posZ":-3.00010014,"rotX":-0.00059106556,"rotY":180.0007,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Au-Delà du Voile","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02084\",\n  \"traits\": \"Hex.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":15512,"SidewaysCard":false,"CustomDeck":{"155":{"FaceURL":"https://i.imgur.com/7H57eeO.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"b52985","Name":"Card","Transform":{"posX":30.4999,"posY":9.83749,"posZ":-3.00010014,"rotX":-0.00059106556,"rotY":180.0007,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Au-Delà du Voile","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02084\",\n  \"traits\": \"Hex.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":15509,"SidewaysCard":false,"CustomDeck":{"155":{"FaceURL":"https://i.imgur.com/7H57eeO.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"3bd92a","Name":"Card","Transform":{"posX":30.4999,"posY":9.63749,"posZ":-3.00010014,"rotX":-0.00059106556,"rotY":180.0007,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Visions des Avenirs Passés","Description":"","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02083\",\n  \"traits\": \"Hex.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":15511,"SidewaysCard":false,"CustomDeck":{"155":{"FaceURL":"https://i.imgur.com/7H57eeO.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"5b9c33","Name":"Card","Transform":{"posX":30.4999,"posY":9.100003,"posZ":-3.0001,"rotX":-0.0005911276,"rotY":180.0007,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Visions des Avenirs Passés","Description":"","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02083\",\n  \"traits\": \"Hex.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":15515,"SidewaysCard":false,"CustomDeck":{"155":{"FaceURL":"https://i.imgur.com/7H57eeO.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"92e0e2","Name":"Card","Transform":{"posX":30.4999,"posY":9.23749,"posZ":-3.00010014,"rotX":-0.00059106556,"rotY":180.0007,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Visions des Avenirs Passés","Description":"","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02083\",\n  \"traits\": \"Hex.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":15514,"SidewaysCard":false,"CustomDeck":{"155":{"FaceURL":"https://i.imgur.com/7H57eeO.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"decb33","Name":"Card","Transform":{"posX":30.4999,"posY":9.03749,"posZ":-3.00010014,"rotX":-0.00059106556,"rotY":180.0007,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Vaste Étendue","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02333\",\n  \"traits\": \"Terror.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":18940,"SidewaysCard":false,"CustomDeck":{"189":{"FaceURL":"https://i.imgur.com/EEPF7vQ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"7c86f3","Name":"Card","Transform":{"posX":30.4999,"posY":8.83749,"posZ":-3.00010014,"rotX":-0.00059106556,"rotY":180.0007,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Vaste Étendue","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02333\",\n  \"traits\": \"Terror.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":18943,"SidewaysCard":false,"CustomDeck":{"189":{"FaceURL":"https://i.imgur.com/EEPF7vQ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"90de79","Name":"Card","Transform":{"posX":30.4999,"posY":8.63749,"posZ":-3.00010014,"rotX":-0.00059106556,"rotY":180.0007,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Vaste Étendue","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02333\",\n  \"traits\": \"Terror.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":18939,"SidewaysCard":false,"CustomDeck":{"189":{"FaceURL":"https://i.imgur.com/EEPF7vQ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"b871a8","Name":"Card","Transform":{"posX":30.4999,"posY":8.099993,"posZ":-3.0001,"rotX":0.00000653684765,"rotY":180.0007,"rotZ":180.0008,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Trou de Ver","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02332\",\n  \"traits\": \"Hazard.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":18941,"SidewaysCard":false,"CustomDeck":{"189":{"FaceURL":"https://i.imgur.com/EEPF7vQ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"12eb81","Name":"Card","Transform":{"posX":30.4999,"posY":8.23749,"posZ":-3.00010014,"rotX":-0.00059106556,"rotY":180.0007,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Trou de Ver","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02332\",\n  \"traits\": \"Hazard.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":18942,"SidewaysCard":false,"CustomDeck":{"189":{"FaceURL":"https://i.imgur.com/EEPF7vQ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"2e6993","Name":"Card","Transform":{"posX":30.4999,"posY":8.03749,"posZ":-3.00010014,"rotX":-0.00059106556,"rotY":180.0007,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Réalité Disloquée","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02331\",\n  \"traits\": \"Hazard.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":18936,"SidewaysCard":false,"CustomDeck":{"189":{"FaceURL":"https://i.imgur.com/EEPF7vQ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"2d9ca4","Name":"Card","Transform":{"posX":30.4999,"posY":7.50000334,"posZ":-3.0001,"rotX":-0.0005910506,"rotY":180.0007,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Réalité Disloquée","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02331\",\n  \"traits\": \"Hazard.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":18938,"SidewaysCard":false,"CustomDeck":{"189":{"FaceURL":"https://i.imgur.com/EEPF7vQ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"d0fb3a","Name":"Card","Transform":{"posX":30.4999,"posY":7.63749,"posZ":-3.00010014,"rotX":-0.00059106556,"rotY":180.0007,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Réalité Disloquée","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02331\",\n  \"traits\": \"Hazard.\",\n  \"type\": \"Treachery\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":18937,"SidewaysCard":false,"CustomDeck":{"189":{"FaceURL":"https://i.imgur.com/EEPF7vQ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"b28ae5","Name":"Card","Transform":{"posX":30.4999,"posY":7.43748951,"posZ":-3.00010014,"rotX":-0.00059106556,"rotY":180.0007,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Chercheur d'Étoiles Yithien","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"health\": 4,\n  \"id\": \"02330\",\n  \"traits\": \"Monster. Yithian.\",\n  \"type\": \"Enemy\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":18935,"SidewaysCard":false,"CustomDeck":{"189":{"FaceURL":"https://i.imgur.com/EEPF7vQ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"99871f","Name":"Card","Transform":{"posX":30.4999,"posY":5.724012,"posZ":-3.00010014,"rotX":-0.0005909584,"rotY":180.0007,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Déchirure dans l'Espace","Description":"Autre Monde. Extradimensionnel.","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02324\",\n  \"locationFront\": {\n    \"connections\": \"Diamond|Triangle|Square\",\n    \"icons\": \"Square\",\n    \"uses\": {\n      \"count\": 1,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    }\n  },\n  \"traits\": \"Otherworld. Extradimensional.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":18925,"SidewaysCard":false,"CustomDeck":{"189":{"FaceURL":"https://i.imgur.com/EEPF7vQ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"4205d1","Name":"Card","Transform":{"posX":30.4999,"posY":7.2374897,"posZ":-3.00010014,"rotX":-0.00059106556,"rotY":180.0007,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Chercheur d'Étoiles Yithien","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"health\": 4,\n  \"id\": \"02330\",\n  \"traits\": \"Monster. Yithian.\",\n  \"type\": \"Enemy\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":18934,"SidewaysCard":false,"CustomDeck":{"189":{"FaceURL":"https://i.imgur.com/EEPF7vQ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"e73a65","Name":"Card","Transform":{"posX":30.4999,"posY":7.03749037,"posZ":-3.00010014,"rotX":-0.00059106556,"rotY":180.0007,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Voyageur Interstellaire","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"health\": 3,\n  \"id\": \"02329\",\n  \"traits\": \"Monster. Yithian.\",\n  \"type\": \"Enemy\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":18931,"SidewaysCard":false,"CustomDeck":{"189":{"FaceURL":"https://i.imgur.com/EEPF7vQ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"c2e9f1","Name":"Card","Transform":{"posX":30.4999,"posY":6.837491,"posZ":-3.00010014,"rotX":-0.00059106556,"rotY":180.0007,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Voyageur Interstellaire","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"health\": 3,\n  \"id\": \"02329\",\n  \"traits\": \"Monster. Yithian.\",\n  \"type\": \"Enemy\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":18933,"SidewaysCard":false,"CustomDeck":{"189":{"FaceURL":"https://i.imgur.com/EEPF7vQ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"6b284a","Name":"Card","Transform":{"posX":30.4999,"posY":6.63749075,"posZ":-3.00010014,"rotX":-0.00059106556,"rotY":180.0007,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Voyageur Interstellaire","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"health\": 3,\n  \"id\": \"02329\",\n  \"traits\": \"Monster. Yithian.\",\n  \"type\": \"Enemy\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":18932,"SidewaysCard":false,"CustomDeck":{"189":{"FaceURL":"https://i.imgur.com/EEPF7vQ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"04c970","Name":"CardCustom","Transform":{"posX":30.4999,"posY":6.10000467,"posZ":-3.0001,"rotX":-0.0005910653,"rotY":180.0007,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Portail Dimensionnel","Description":"Autre Monde. Extradimensionnel.","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02328\",\n  \"locationFront\": {\n    \"connections\": \"Triangle|Crescent\",\n    \"icons\": \"Tilde\",\n    \"uses\": {\n      \"countPerInvestigator\": 1,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    }\n  },\n  \"traits\": \"Otherworld. Extradimensional.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":559600,"SidewaysCard":false,"CustomDeck":{"5596":{"FaceURL":"http://cloud-3.steamusercontent.com/ugc/1770458304230438588/2F85DF80EC27FD760D8FBBE1C8EE22542CB8E51D/","BackURL":"http://cloud-3.steamusercontent.com/ugc/1770458304230284904/1EE0B15842CC713A6A68B5D4682A3D46E03E44CE/","NumWidth":1,"NumHeight":1,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"a7cf96","Name":"Card","Transform":{"posX":30.4999,"posY":6.23749065,"posZ":-3.00010014,"rotX":-0.00059106556,"rotY":180.0007,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Marches de Y'hagharl","Description":"Autre Monde. Extradimensionnel.","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02327\",\n  \"locationFront\": {\n    \"connections\": \"Diamond|Crescent\",\n    \"icons\": \"Plus\",\n    \"uses\": {\n      \"countPerInvestigator\": 1,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    }\n  },\n  \"traits\": \"Otherworld. Extradimensional.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":18927,"SidewaysCard":false,"CustomDeck":{"189":{"FaceURL":"https://i.imgur.com/EEPF7vQ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"a6fd0b","Name":"Card","Transform":{"posX":30.4999,"posY":6.037491,"posZ":-3.00010014,"rotX":-0.00059106556,"rotY":180.0007,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Pont Sans Fin","Description":"Autre Monde. Extradimensionnel.","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02326\",\n  \"locationFront\": {\n    \"connections\": \"Square|Tilde\",\n    \"icons\": \"Triangle\",\n    \"uses\": {\n      \"count\": 2,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    }\n  },\n  \"traits\": \"Otherworld. Extradimensional.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":18929,"SidewaysCard":false,"CustomDeck":{"189":{"FaceURL":"https://i.imgur.com/EEPF7vQ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"9d2ebb","Name":"Card","Transform":{"posX":30.4999,"posY":5.500005,"posZ":-3.0001,"rotX":-0.000591048039,"rotY":180.0007,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Pont Sans Fin","Description":"Autre Monde. Extradimensionnel.","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02326\",\n  \"locationFront\": {\n    \"connections\": \"Square|Tilde\",\n    \"icons\": \"Triangle\",\n    \"uses\": {\n      \"count\": 2,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    }\n  },\n  \"traits\": \"Otherworld. Extradimensional.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":18928,"SidewaysCard":false,"CustomDeck":{"189":{"FaceURL":"https://i.imgur.com/EEPF7vQ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"af2f15","Name":"Card","Transform":{"posX":30.4999,"posY":5.63749075,"posZ":-3.00010014,"rotX":-0.00059106556,"rotY":180.0007,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Cascade Prismatique","Description":"Autre Monde. Extradimensionnel.","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02325\",\n  \"locationFront\": {\n    \"connections\": \"Square|Plus\",\n    \"icons\": \"Diamond\",\n    \"uses\": {\n      \"count\": 3,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    }\n  },\n  \"traits\": \"Otherworld. Extradimensional.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":18926,"SidewaysCard":false,"CustomDeck":{"189":{"FaceURL":"https://i.imgur.com/EEPF7vQ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"249b77","Name":"Card","Transform":{"posX":30.4999,"posY":5.437491,"posZ":-3.00010014,"rotX":-0.00059106556,"rotY":180.0007,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Cascade Prismatique","Description":"Autre Monde. Extradimensionnel.","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02325\",\n  \"locationFront\": {\n    \"connections\": \"Square|Plus\",\n    \"icons\": \"Diamond\",\n    \"uses\": {\n      \"count\": 3,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    }\n  },\n  \"traits\": \"Otherworld. Extradimensional.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":18924,"SidewaysCard":false,"CustomDeck":{"189":{"FaceURL":"https://i.imgur.com/EEPF7vQ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"841239","Name":"Card","Transform":{"posX":30.4999,"posY":4.90000439,"posZ":-3.0001,"rotX":-0.000591073,"rotY":180.0007,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Déchirure dans l'Espace","Description":"Autre Monde. Extradimensionnel.","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02324\",\n  \"locationFront\": {\n    \"connections\": \"Diamond|Triangle|Square\",\n    \"icons\": \"Square\",\n    \"uses\": {\n      \"count\": 1,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    }\n  },\n  \"traits\": \"Otherworld. Extradimensional.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":18923,"SidewaysCard":false,"CustomDeck":{"189":{"FaceURL":"https://i.imgur.com/EEPF7vQ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"61d7d7","Name":"Card","Transform":{"posX":30.4999,"posY":5.037491,"posZ":-3.00010014,"rotX":-0.00059106556,"rotY":180.0007,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Déchirure dans l'Espace","Description":"Autre Monde. Extradimensionnel.","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02324\",\n  \"locationFront\": {\n    \"connections\": \"Diamond|Triangle|Square\",\n    \"icons\": \"Square\",\n    \"uses\": {\n      \"count\": 1,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    }\n  },\n  \"traits\": \"Otherworld. Extradimensional.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":18920,"SidewaysCard":false,"CustomDeck":{"189":{"FaceURL":"https://i.imgur.com/EEPF7vQ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"919139","Name":"Card","Transform":{"posX":30.4999,"posY":4.837491,"posZ":-3.00010014,"rotX":-0.00059106556,"rotY":180.0007,"rotZ":180.001068,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Déchirure dans l'Espace","Description":"Autre Monde. Extradimensionnel.","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02324\",\n  \"locationFront\": {\n    \"connections\": \"Diamond|Triangle|Square\",\n    \"icons\": \"Square\",\n    \"uses\": {\n      \"count\": 1,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    }\n  },\n  \"traits\": \"Otherworld. Extradimensional.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":18922,"SidewaysCard":false,"CustomDeck":{"189":{"FaceURL":"https://i.imgur.com/EEPF7vQ.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""}]},{"GUID":"6fec7f","Name":"Card","Transform":{"posX":-21.0000019,"posY":1.77890575,"posZ":8.999999,"rotX":-5.73253018e-8,"rotY":89.99991,"rotZ":0.00000501558,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"51055\",\n  \"type\": \"Act\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":275900,"SidewaysCard":true,"CustomDeck":{"2759":{"FaceURL":"https://i.imgur.com/LyGnl4m.jpg","BackURL":"https://i.imgur.com/wbSb1m1.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"79c6c7","Name":"Custom_Tile","Transform":{"posX":2.99999762,"posY":1.60163224,"posZ":-6.499996,"rotX":0.0171788614,"rotY":180.01088,"rotZ":0.005656028,"scaleX":1.6428808,"scaleY":1,"scaleZ":1.6428808},"Nickname":"Mise en place du Chaos Bag","Description":"VII : Perdu dans le Temps et l'Espace","GMNotes":"{\"data\":\"Lost in Time and Space\",\"easy\":false,\"expert\":false,\"hard\":false,\"normal\":false,\"standalone\":true}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.8745098,"g":0.8,"b":0.7019608},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"CustomImage":{"ImageURL":"http://cloud-3.steamusercontent.com/ugc/2011456161884106028/81BF2DAD34FE18B6788B56E21F16B81E6525AD99/","ImageSecondaryURL":"http://cloud-3.steamusercontent.com/ugc/2011456161884106028/81BF2DAD34FE18B6788B56E21F16B81E6525AD99/","ImageScalar":1,"WidthScale":0,"CustomTile":{"Type":3,"Thickness":0.1,"Stackable":false,"Stretch":true}},"LuaScript":"\r\njacqueline_guid = '42cd6e'\r\n\r\nbuttonparams = {\r\n   ['easy'] = {label = \"Facile\", click_function = 'modeEasy', z_i = -0.2},\r\n   ['normal'] = {label = \"Standard\", click_function = 'modeNormal', z_i = 0.1},\r\n   ['hard'] = {label = \"Difficile\", click_function = 'modeHard', z_i = 0.4},\r\n   ['expert'] = {label = \"Expert\", click_function = 'modeExpert', z_i = 0.7},\r\n   ['standalone'] = {label = \"Indépendant\", click_function = 'modeStandalone', z_i = 0},\r\n}\r\n\r\nfunction onLoad()\r\n\r\n    metadata = JSON.decode(self.getGMNotes())\r\n    buttontable = {}\r\n    for key, value in pairs(buttonparams) do\r\n        if metadata[key] == true then\r\n            table.insert(buttontable,value)\r\n        end\r\n        \r\n    end\r\n\r\n    for _, button in pairs(buttontable) do\r\n        local data = {\r\n            click_function = button.click_function, \r\n            function_owner = self, \r\n            label = button.label, \r\n            position = {0, 0.1, button.z_i}, \r\n            scale = {0.3, 0.5, 0.3}, \r\n            width = 1500, \r\n            height = 400, \r\n            font_size = 250, \r\n            tooltip = \"Chaos bag du mode \"..button.label,\r\n            color = {0.5647, 0.4627, 0.2353, 1}, \r\n            font_color = {0.9041, 0.8313, 0.7356, 1},\r\n            hover_color = {99/255, 85/255, 48/255},\r\n            press_color = {192/255, 152/255, 94/255} }\r\n        self.createButton(data)\r\n        \r\n    end\r\n    jacqueline = getObjectFromGUID(jacqueline_guid)\r\n    chaosdata = jacqueline.getTable('chaosdata')\r\nend\r\n\r\nfunction modeEasy()\r\n    local  params ={}\r\n     params.mode = 'easy'\r\n     params.data = metadata.data\r\n     jacqueline.call('setChaosBag', params)\r\n  \r\nend\r\n\r\nfunction modeNormal()\r\n      local  params ={}\r\n       params.mode = 'normal'\r\n       params.data = metadata.data\r\n       jacqueline.call('setChaosBag', params)\r\n    \r\nend\r\n\r\nfunction modeHard()\r\n    local  params ={}\r\n     params.mode = 'hard'\r\n     params.data = metadata.data\r\n     jacqueline.call('setChaosBag', params)\r\n  \r\nend\r\n\r\nfunction modeExpert()\r\n    local  params ={}\r\n     params.mode = 'expert'\r\n     params.data = metadata.data\r\n     jacqueline.call('setChaosBag', params)\r\n  \r\nend\r\n\r\nfunction modeStandalone()\r\n    local  params ={}\r\n     params.mode = 'standalone'\r\n     params.data = metadata.data\r\n     jacqueline.call('setChaosBag', params)\r\n  \r\nend","LuaScriptState":"","XmlUI":""},{"GUID":"910c66","Name":"Card","Transform":{"posX":-3.99999881,"posY":1.51922572,"posZ":10.5,"rotX":0.0108930217,"rotY":179.982635,"rotZ":0.00494499551,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Une Autre Dimension","Description":"Détachée de la Réalité\nAutre Monde.","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"02320\",\n  \"locationBack\": {\n    \"connections\": \"Square|Diamond|Triangle\",\n    \"icons\": \"Circle\"\n  },\n  \"locationFront\": {\n    \"connections\": \"Square|Diamond|Triangle\",\n    \"icons\": \"Circle\"\n  },\n  \"traits\": \"Otherworld.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":121203,"SidewaysCard":false,"CustomDeck":{"1212":{"FaceURL":"https://i.imgur.com/fR29y6J.jpg","BackURL":"https://i.imgur.com/bw3G2NP.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"b31ae7","Name":"Card","Transform":{"posX":22.3267441,"posY":1.5139116,"posZ":-5.49481869,"rotX":0.0108931046,"rotY":179.981613,"rotZ":0.004944927,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Référence","Description":"Perdu dans le Temps et l'Espace","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":121200,"SidewaysCard":false,"CustomDeck":{"1212":{"FaceURL":"https://i.imgur.com/fR29y6J.jpg","BackURL":"https://i.imgur.com/bw3G2NP.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"ba2078","Name":"Card","Transform":{"posX":4,"posY":1.51853478,"posZ":10.5,"rotX":0.0108915,"rotY":180.000031,"rotZ":0.004948247,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"id\": \"51057\",\n  \"locationFront\": {\n    \"connections\": \"Circle\",\n    \"icons\": \"Apostrophe\"\n  },\n  \"traits\": \"Otherworld.\",\n  \"type\": \"Location\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276029,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"ba3cb2","Name":"Card","Transform":{"posX":7,"posY":1.51827574,"posZ":10.5,"rotX":0.0108914841,"rotY":180.000351,"rotZ":0.00494827749,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Yog-Sothoth","Description":"Le Rôdeur au-delà du Seuil","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"health\": 4,\n  \"id\": \"02323\",\n  \"traits\": \"Ancient One. Elite.\",\n  \"type\": \"Enemy\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":121201,"SidewaysCard":false,"CustomDeck":{"1212":{"FaceURL":"https://i.imgur.com/fR29y6J.jpg","BackURL":"https://i.imgur.com/bw3G2NP.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"c46ba3","Name":"Deck","Transform":{"posX":17.5000019,"posY":1.54081428,"posZ":-5.99989653,"rotX":0.004948607,"rotY":90.0021744,"rotZ":359.9891,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Deck Acte","Description":"Perdu dans le Temps et l'Espace","GMNotes":"","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":false,"SidewaysCard":true,"DeckIDs":[121307,121306,121305,121304],"CustomDeck":{"1213":{"FaceURL":"https://i.imgur.com/btYreKl.jpg","BackURL":"https://i.imgur.com/uLiAXi8.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":"","ContainedObjects":[{"GUID":"818c48","Name":"Card","Transform":{"posX":17.5000057,"posY":1.60772753,"posZ":-5.99990273,"rotX":0.009228933,"rotY":90.00243,"rotZ":359.9871,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Trouver une Autre Voie","Description":"Acte 4a","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02319\",\n  \"type\": \"Act\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":121307,"SidewaysCard":true,"CustomDeck":{"1213":{"FaceURL":"https://i.imgur.com/btYreKl.jpg","BackURL":"https://i.imgur.com/uLiAXi8.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"d07bdc","Name":"Card","Transform":{"posX":17.5000019,"posY":1.56508052,"posZ":-5.99990034,"rotX":0.004831913,"rotY":90.00222,"rotZ":359.987152,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Fermer la Faille","Description":"Acte 3a","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"clueThresholdPerInvestigator\": 3,\n  \"cycle\": \"Standalone\",\n  \"id\": \"02318\",\n  \"type\": \"Act\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":121306,"SidewaysCard":true,"CustomDeck":{"1213":{"FaceURL":"https://i.imgur.com/btYreKl.jpg","BackURL":"https://i.imgur.com/uLiAXi8.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"04ebee","Name":"Card","Transform":{"posX":17.5000019,"posY":1.60767639,"posZ":-5.999903,"rotX":0.004418483,"rotY":90.0022049,"rotZ":359.988617,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Dans l'Au-Delà","Description":"Acte 2a","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"02317\",\n  \"type\": \"Act\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":121305,"SidewaysCard":true,"CustomDeck":{"1213":{"FaceURL":"https://i.imgur.com/btYreKl.jpg","BackURL":"https://i.imgur.com/uLiAXi8.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""},{"GUID":"f3e2f4","Name":"Card","Transform":{"posX":17.5000076,"posY":1.621312,"posZ":-5.999914,"rotX":0.007919955,"rotY":90.0022049,"rotZ":359.987762,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"Hors de ce Monde","Description":"Acte 1a","GMNotes":"{\n  \"class\": \"Mythos\",\n  \"clueThresholdPerInvestigator\": 2,\n  \"cycle\": \"Standalone\",\n  \"id\": \"02316\",\n  \"type\": \"Act\"\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":121304,"SidewaysCard":true,"CustomDeck":{"1213":{"FaceURL":"https://i.imgur.com/btYreKl.jpg","BackURL":"https://i.imgur.com/uLiAXi8.jpg","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":true,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""}]},{"GUID":"e26f38","Name":"Card","Transform":{"posX":-19.5000038,"posY":1.77890611,"posZ":4.49999428,"rotX":-0.00000513528857,"rotY":180.000168,"rotZ":-9.813661e-8,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"","Description":"","GMNotes":"{\n  \"cycle\": \"Standalone\",\n  \"health\": 4,\n  \"healthPerInv\": \"true\",\n  \"id\": \"51056\",\n  \"traits\": \"Humanoid. Monster. Abomination. Elite.\",\n  \"type\": \"Enemy\",\n  \"victory\": 2\n}","AltLookAngle":{"x":0,"y":0,"z":0},"ColorDiffuse":{"r":0.713235259,"g":0.713235259,"b":0.713235259},"LayoutGroupSortIndex":0,"Value":0,"Locked":false,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":true,"Hands":true,"CardID":276030,"SidewaysCard":false,"CustomDeck":{"2760":{"FaceURL":"https://i.imgur.com/9W3Xkh8.jpg","BackURL":"http://cloud-3.steamusercontent.com/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/","NumWidth":10,"NumHeight":7,"BackIsHidden":true,"UniqueBack":false,"Type":0}},"LuaScript":"","LuaScriptState":"","XmlUI":""}],"AttachedDecals":[{"Transform":{"posX":-0.0021877822,"posY":-0.08963572,"posZ":-0.00288731651,"rotX":270,"rotY":359.869568,"rotZ":0,"scaleX":2.00000215,"scaleY":2.00000238,"scaleZ":2.00000262},"CustomDecal":{"Name":"dunwich_back","ImageURL":"http://cloud-3.steamusercontent.com/ugc/959719855119695911/931B9829687A20F4DEADB36DA57B7E6D76792231/","Size":7.4}}]}]}